<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Ant Design Vue遇到的问题和解决记录</title>
    <link href="/2024/02/18/Ant%20Design%20Vue%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E5%92%8C%E8%A7%A3%E5%86%B3%E8%AE%B0%E5%BD%95/"/>
    <url>/2024/02/18/Ant%20Design%20Vue%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E5%92%8C%E8%A7%A3%E5%86%B3%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>开箱即用的高质量 Vue 组件。</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>使用 npm 或 yarn 安装 <a href="https://1x.antdv.com/docs/vue/introduce-cn/#%E4%BD%BF%E7%94%A8-npm-%E6%88%96-yarn-%E5%AE%89%E8%A3%85">#</a></p><p><strong>我们推荐使用 npm 或 yarn 的方式进行开发</strong>，不仅可在开发环境轻松调试，也可放心地在生产环境打包部署使用，享受整个生态圈和工具链带来的诸多好处。</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gauss">$ npm install ant-<span class="hljs-built_in">design</span>-vue --<span class="hljs-keyword">save</span><br>$ yarn add ant-<span class="hljs-built_in">design</span>-vue<br></code></pre></td></tr></table></figure><p>如果你的网络环境不佳，推荐使用 <a href="https://github.com/cnpm/cnpm">cnpm</a>。</p><h1 id="树形图"><a href="#树形图" class="headerlink" title="树形图"></a>树形图</h1><h2 id="折叠展开-控制展开指定节点"><a href="#折叠展开-控制展开指定节点" class="headerlink" title="折叠展开-控制展开指定节点"></a>折叠展开-控制展开指定节点</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">&lt;a-tree<br>        v-model=<span class="hljs-string">&quot;checkedKeys&quot;</span><br>        checkable<br>        draggable<br>        :blockNode=<span class="hljs-string">&quot;true&quot;</span><br>        :tree-<span class="hljs-keyword">data</span>=<span class="hljs-string">&quot;treeData&quot;</span><br>        show-icon<br>        :expandedKeys=<span class="hljs-string">&quot;expandedKeys&quot;</span><br>        <span class="hljs-meta">@select</span>=<span class="hljs-string">&quot;onSelect&quot;</span><br>        <span class="hljs-meta">@expand</span>=<span class="hljs-string">&quot;onExpand&quot;</span><br>        <span class="hljs-meta">@dragenter</span>=<span class="hljs-string">&quot;onDragEnter&quot;</span><br>        <span class="hljs-meta">@drop</span>=<span class="hljs-string">&quot;onDrop&quot;</span><br>        <span class="hljs-meta">@check</span>=<span class="hljs-string">&quot;onCheck&quot;</span><br>      &gt;<br><br><span class="hljs-keyword">data</span>() &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br> <span class="hljs-comment">// 控制展开节点</span><br>      expandedKeys: [],<br>&#125;<br>&#125;<br><br>expandedKeys  折叠展开的节点<br>onExpand  点击折叠展开触发的方法<br><br><br> <span class="hljs-comment">// 折叠展开时</span><br>    onExpand(<span class="hljs-keyword">val</span>) &#123;<br>      console.log(<span class="hljs-string">&#x27;Trigger Expand&#x27;</span>, <span class="hljs-keyword">val</span>)<br>      <span class="hljs-keyword">this</span>.expandedKeys = <span class="hljs-keyword">val</span><br>    &#125;,<br></code></pre></td></tr></table></figure><h2 id="渲染数据后-默认展开无效"><a href="#渲染数据后-默认展开无效" class="headerlink" title="渲染数据后-默认展开无效"></a>渲染数据后-默认展开无效</h2><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs elixir">分析原因：antdesignvue的前端是一次性渲染的，所以defaultExpandedRowKeys等只在渲染时有效。<br>解决方法：添加判断v-<span class="hljs-keyword">if</span>你的<span class="hljs-title class_">DataSource</span>长度，如果为<span class="hljs-number">0</span>则不渲染。<br>动态解决方法：在<span class="hljs-title class_">DataSource</span>赋值的时候，使用splice将其长度变为<span class="hljs-number">0</span><br><br>this.<span class="hljs-title class_">DataSource</span>.splice(<span class="hljs-number">0</span>)<br><span class="hljs-number">1</span><br>&lt;a-row class=<span class="hljs-string">&quot;tree-box&quot;</span>&gt;<br>              &lt;a-col&gt;<br>                &lt;a-tree<br>                  v-<span class="hljs-keyword">if</span>=<span class="hljs-string">&quot;DataSource.length&gt;0&quot;</span><br>                  v-model=<span class="hljs-string">&quot;checkedKeys&quot;</span><br>                  checkable<br>                  <span class="hljs-symbol">:auto-expand-parent=<span class="hljs-string">&quot;autoExpandParent&quot;</span></span><br>                  defaultExpandAll<br>                  <span class="hljs-symbol">:tree-data=<span class="hljs-string">&quot;DataSource&quot;</span></span><br>                /&gt;<br>              &lt;/a-col&gt;<br>            &lt;/a-row&gt;<br>————————————————<br>版权声明：本文为<span class="hljs-title class_">CSDN</span>博主「三个人工作室」的原创文章，遵循<span class="hljs-title class_">CC</span> <span class="hljs-number">4.0</span> <span class="hljs-title class_">BY</span>-<span class="hljs-title class_">SA</span>版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<span class="hljs-symbol">https:</span>//blog.csdn.net/wwppp987/article/details/<span class="hljs-number">113737659</span><br><br>dwy案例     v-<span class="hljs-keyword">if</span>=<span class="hljs-string">&quot;treeData.length &gt; 0&quot;</span>  就可以了<br>&lt;a-tree<br>        v-<span class="hljs-keyword">if</span>=<span class="hljs-string">&quot;treeData.length &gt; 0&quot;</span><br>        <span class="hljs-symbol">:default-expanded-keys=<span class="hljs-string">&quot;showkeys&quot;</span></span><br>        <span class="hljs-symbol">:show-line=<span class="hljs-string">&quot;true&quot;</span></span><br>        <span class="hljs-symbol">:tree-data=<span class="hljs-string">&quot;treeData&quot;</span></span><br>        <span class="hljs-symbol">:replaceFields=<span class="hljs-string">&quot;replaceFields&quot;</span></span><br>        <span class="hljs-symbol">:selected-keys=<span class="hljs-string">&quot;selectedKeys&quot;</span></span><br>        <span class="hljs-variable">@select</span>=<span class="hljs-string">&quot;onSelect&quot;</span><br>      &gt;<br>&lt;/a-tree&gt;<br></code></pre></td></tr></table></figure><h1 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h1><h3 id="表单验证规则"><a href="#表单验证规则" class="headerlink" title="表单验证规则"></a>表单验证规则</h3><p>prop&#x3D;”poolName   和  v-model&#x3D;”formData.poolName” 对应  必须要有v-model</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">&lt;a-form-model<br>          <span class="hljs-keyword">ref</span>=&quot;ruleForm&quot;<br>          :rules=&quot;rules&quot;<br>          :model=&quot;formData&quot;<br>          :label-col=&quot;formItemLayout.labelCol&quot;<br>          :<span class="hljs-keyword">wrapper</span>-col=&quot;formItemLayout.wrapperCol&quot;&gt;<br>        &lt;a-form-model-item label=&quot;人才库名称&quot; prop=&quot;poolName&quot;&gt;<br>          &lt;a-<span class="hljs-keyword">input</span> v-model=&quot;formData.poolName&quot;/&gt;<br>        &lt;/a-form-model-item&gt;<br>&lt;/a-form-model&gt;<br></code></pre></td></tr></table></figure><p>rules 代码参考</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs arcade">  rules: &#123;<br>        <span class="hljs-attr">poolName</span>: [&#123;<br>          <span class="hljs-attr">validator</span>: <span class="hljs-function">(<span class="hljs-params">rule, value, callback</span>) =&gt;</span> &#123;<br>            <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;rule&#x27;</span>,rule);<br>            <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;value&#x27;</span>,value);<br>            <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;callback&#x27;</span>,callback);<br>            <span class="hljs-keyword">if</span> (value) &#123;<br>              <br>              <span class="hljs-keyword">if</span>(value.<span class="hljs-built_in">length</span> &gt; <span class="hljs-number">10</span>)&#123;<br>                callback(<span class="hljs-keyword">new</span> Error(<span class="hljs-string">&#x27;限制10个字符以内&#x27;</span>));<br>              &#125;<span class="hljs-keyword">else</span>&#123;<br>                callback();<br>              &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>              callback(<span class="hljs-keyword">new</span> Error(<span class="hljs-string">&#x27;请填写选项名称&#x27;</span>));<br>            &#125;<br>          &#125;, <span class="hljs-attr">trigger</span>: [<span class="hljs-string">&#x27;change&#x27;</span>, <span class="hljs-string">&#x27;blur&#x27;</span>]<br>        &#125;],<br>        <span class="hljs-attr">poolColor</span>: [&#123;<br>          <span class="hljs-attr">validator</span>: <span class="hljs-function">(<span class="hljs-params">rule, value, callback</span>) =&gt;</span> &#123;<br>            <span class="hljs-keyword">if</span> (value) &#123;<br>              callback();<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>              callback(<span class="hljs-keyword">new</span> Error(<span class="hljs-string">&#x27;请选择颜色&#x27;</span>));<br>            &#125;<br>          &#125;, <span class="hljs-attr">trigger</span>: [<span class="hljs-string">&#x27;change&#x27;</span>, <span class="hljs-string">&#x27;blur&#x27;</span>]<br>        &#125;],<br><span class="hljs-comment">//或者</span><br> severName: [<br>          &#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入目标服务器&#x27;</span>, <span class="hljs-attr">trigger</span>: <span class="hljs-string">&#x27;blur&#x27;</span>, <span class="hljs-attr">whitespace</span>: <span class="hljs-literal">true</span> &#125;<br>        ]<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="InputNumber-数字输入框-只能输入数字"><a href="#InputNumber-数字输入框-只能输入数字" class="headerlink" title="InputNumber 数字输入框 只能输入数字"></a>InputNumber 数字输入框 只能输入数字</h3><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">:formatter=<span class="hljs-string">&quot;value =&gt; `$&#123;value&#125;`.replace(/\D/g, &#x27;&#x27;)&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">a-form-model-item</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;排序&quot;</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">a-input-number</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">:formatter</span>=<span class="hljs-string">&quot;value =&gt; `$</span></span></span><span class="hljs-template-variable">&#123;value&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">`.replace(/\D/g, &#x27;&#x27;)&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;formData.roleSort&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">:min</span>=<span class="hljs-string">&quot;1&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">:precision</span>=<span class="hljs-string">&quot;0&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;</span></span></span><br><span class="hljs-string"><span class="hljs-tag"><span class="language-xml">              width: 100%;</span></span></span><br><span class="hljs-string"><span class="hljs-tag"><span class="language-xml">              height: 48px;</span></span></span><br><span class="hljs-string"><span class="hljs-tag"><span class="language-xml">              background-color: #f7f9fb !important;</span></span></span><br><span class="hljs-string"><span class="hljs-tag"><span class="language-xml">              border-radius: 4px;</span></span></span><br><span class="hljs-string"><span class="hljs-tag"><span class="language-xml">              border: none;</span></span></span><br><span class="hljs-string"><span class="hljs-tag"><span class="language-xml">            &quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">a-form-model-item</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="验证规则参考"><a href="#验证规则参考" class="headerlink" title="验证规则参考"></a>验证规则参考</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> rulesItem = &#123;<br>              <span class="hljs-attr">validator</span>: <span class="hljs-function">(<span class="hljs-params">rule, value, callback</span>) =&gt;</span> &#123;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;value&#x27;</span>,value);<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;value.length&#x27;</span>,value.<span class="hljs-property">length</span>);<br>                <span class="hljs-keyword">if</span>(that.<span class="hljs-property">title</span> == <span class="hljs-string">&#x27;能力素质&#x27;</span>)&#123;<br>                  <span class="hljs-keyword">if</span> (value &lt;= <span class="hljs-number">100</span>) &#123;<br>                    <span class="hljs-title function_">callback</span>();<br>                  &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-title function_">callback</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;item.dictLabel&#125;</span>不能大于100`</span>));<br>                  &#125;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(value)) &#123;<br>                  <span class="hljs-keyword">if</span> (value.<span class="hljs-property">length</span>) &#123;<br>                    <span class="hljs-title function_">callback</span>();<br>                  &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-title function_">callback</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">`请完善<span class="hljs-subst">$&#123;item.dictLabel&#125;</span>`</span>));<br>                  &#125;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                  <span class="hljs-keyword">if</span> (value) &#123;<br>                    <span class="hljs-title function_">callback</span>();<br>                  &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-title function_">callback</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">`请完善<span class="hljs-subst">$&#123;item.dictLabel&#125;</span>`</span>));<br>                  &#125;<br>                &#125;<br>              &#125;,<br>            &#125;;<br>            <span class="hljs-keyword">if</span> (item.<span class="hljs-property">cssClass</span> == <span class="hljs-number">1</span>) &#123;<br>              rulesItem.<span class="hljs-property">trigger</span> = <span class="hljs-string">&quot;change&quot;</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (item.<span class="hljs-property">cssClass</span> == <span class="hljs-number">2</span>) &#123;<br>              rulesItem.<span class="hljs-property">trigger</span> = <span class="hljs-string">&quot;change&quot;</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (item.<span class="hljs-property">cssClass</span> == <span class="hljs-number">3</span>) &#123;<br>              rulesItem.<span class="hljs-property">trigger</span> = <span class="hljs-string">&quot;blur&quot;</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (item.<span class="hljs-property">cssClass</span> == <span class="hljs-number">4</span>) &#123;<br>              rulesItem.<span class="hljs-property">trigger</span> = <span class="hljs-string">&quot;change&quot;</span>;<br>            &#125;<br>            rules[<span class="hljs-string">`formData<span class="hljs-subst">$&#123;index&#125;</span>`</span>] = rulesItem;<br>          &#125;);<br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">form</span> = form;<br>          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">form</span>);<br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">rules</span> = rules;<br></code></pre></td></tr></table></figure><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><code class="hljs prolog">rules: &#123;<br>        nickName: [<br>          &#123;<br>            required: true,<br>            message: <span class="hljs-string">&quot;请填写用户姓名&quot;</span>,<br>            trigger: [<span class="hljs-string">&quot;change&quot;</span>, <span class="hljs-string">&quot;blur&quot;</span>],<br>          &#125;,<br>          &#123;<br>            validator: function (rule, value, callback) &#123;<br>              if (value.length &lt; <span class="hljs-number">10</span>) &#123;<br>                callback();<br>              &#125; else &#123;<br>                callback(<span class="hljs-string">&quot;最多10个字符&quot;</span>);<br>              &#125;<br>            &#125;,<br>            trigger: [<span class="hljs-string">&quot;change&quot;</span>, <span class="hljs-string">&quot;blur&quot;</span>],<br>          &#125;,<br>        ],<br>        deptId: [<br>          &#123;<br>            required: true,<br>            message: <span class="hljs-string">&quot;请选择部门&quot;</span>,<br>            trigger: [<span class="hljs-string">&quot;change&quot;</span>, <span class="hljs-string">&quot;blur&quot;</span>],<br>          &#125;,<br>        ],<br>        postId: [<br>          &#123;<br>            required: true,<br>            message: <span class="hljs-string">&quot;请选择岗位&quot;</span>,<br>            trigger: [<span class="hljs-string">&quot;change&quot;</span>, <span class="hljs-string">&quot;blur&quot;</span>],<br>          &#125;,<br>        ],<br>        // <span class="hljs-symbol">MBdeptId</span>: [<br>        //   &#123;<br>        //     required: true,<br>        //     message: <span class="hljs-string">&quot;请选择目标部门&quot;</span>,<br>        //     trigger: [<span class="hljs-string">&quot;change&quot;</span>, <span class="hljs-string">&quot;blur&quot;</span>],<br>        //   &#125;,<br>        // ],<br>        <span class="hljs-symbol">MBpostId</span>: [<br>          &#123;<br>            required: true,<br>            message: <span class="hljs-string">&quot;请选择目标岗位&quot;</span>,<br>            trigger: [<span class="hljs-string">&quot;change&quot;</span>, <span class="hljs-string">&quot;blur&quot;</span>],<br>          &#125;,<br>        ],<br>        email: [<br>          // &#123;<br>          //   required: true,<br>          //   message: <span class="hljs-string">&quot;请填写电子邮箱&quot;</span>,<br>          //   trigger: [<span class="hljs-string">&quot;change&quot;</span>, <span class="hljs-string">&quot;blur&quot;</span>],<br>          // &#125;,<br>          &#123;<br>            validator: function (rule, value, callback) &#123;<br>              if (value) &#123;<br>                var emailRegExp =<br>                  /^[a-zA-<span class="hljs-symbol">Z0</span><span class="hljs-number">-9</span><span class="hljs-symbol">_</span>-]+@[a-zA-<span class="hljs-symbol">Z0</span><span class="hljs-number">-9</span><span class="hljs-symbol">_</span>-]+(\.[a-zA-<span class="hljs-symbol">Z0</span><span class="hljs-number">-9</span><span class="hljs-symbol">_</span>-]+)+$/;<br>                if (emailRegExp.test(value)) &#123;<br>                  callback();<br>                &#125; else &#123;<br>                  callback(<span class="hljs-string">&quot;电子邮箱格式错误&quot;</span>);<br>                &#125;<br>              &#125;else&#123;<br>                callback();<br>              &#125;<br>            &#125;,<br>            trigger: [<span class="hljs-string">&quot;change&quot;</span>, <span class="hljs-string">&quot;blur&quot;</span>],<br>          &#125;,<br>        ],<br>        phonenumber: [<br>          &#123;<br>            required: true,<br>            message: <span class="hljs-string">&quot;请填写手机号码&quot;</span>,<br>            trigger: [<span class="hljs-string">&quot;change&quot;</span>, <span class="hljs-string">&quot;blur&quot;</span>],<br>          &#125;,<br>          &#123;<br>            validator: function (rule, value, callback) &#123;<br>              const phonenumberREP = /^<span class="hljs-number">1</span>[<span class="hljs-number">0</span><span class="hljs-number">-9</span>]&#123;<span class="hljs-number">10</span>&#125;$/;<br>              if (phonenumberREP.test(value)) &#123;<br>                callback();<br>              &#125; else &#123;<br>                callback(<span class="hljs-string">&quot;手机号码格式错误&quot;</span>);<br>              &#125;<br>            &#125;,<br>            trigger: [<span class="hljs-string">&quot;change&quot;</span>, <span class="hljs-string">&quot;blur&quot;</span>],<br>          &#125;,<br>        ],<br>        roleId: [<br>          &#123;<br>            required: true,<br>            message: <span class="hljs-string">&quot;请选择角色&quot;</span>,<br>            trigger: [<span class="hljs-string">&quot;change&quot;</span>, <span class="hljs-string">&quot;blur&quot;</span>],<br>          &#125;,<br>        ],<br>        perNo: [<br>          &#123;<br>            required: true,<br>            message: <span class="hljs-string">&quot;请填员工编号&quot;</span>,<br>            trigger: [<span class="hljs-string">&quot;change&quot;</span>, <span class="hljs-string">&quot;blur&quot;</span>],<br>          &#125;,<br>        ],<br>        userLevel: [<br>          &#123;<br>            required: true,<br>            message: <span class="hljs-string">&quot;请选择用户等级&quot;</span>,<br>            trigger: [<span class="hljs-string">&quot;change&quot;</span>, <span class="hljs-string">&quot;blur&quot;</span>],<br>          &#125;,<br>        ],<br>        userWorkType: [<br>          &#123;<br>            required: true,<br>            message: <span class="hljs-string">&quot;请选择用户等级&quot;</span>,<br>            trigger: [<span class="hljs-string">&quot;change&quot;</span>, <span class="hljs-string">&quot;blur&quot;</span>],<br>          &#125;,<br>        ],<br>      &#125;,<br></code></pre></td></tr></table></figure><h3 id="表格多选及验证"><a href="#表格多选及验证" class="headerlink" title="表格多选及验证"></a>表格多选及验证</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">&lt;a-form-model <span class="hljs-keyword">ref</span>=&quot;formModel&quot; id=&quot;components-form&quot; :model=&quot;form&quot; :rules=&quot;rules&quot;&gt;<br><br><br>&lt;a-form-model-item label=&quot;报表内容&quot; prop=&quot;BBcontent&quot; <span class="hljs-keyword">ref</span>=&quot;BBcontent&quot; :label-col=&quot;&#123; span: 3 &#125;&quot;<br>              :<span class="hljs-keyword">wrapper</span>-col=&quot;&#123; span: 20, offset: 1 &#125;&quot;&gt;<br>              &lt;div <span class="hljs-keyword">class</span>=&quot;bbnr&quot;&gt;<br>                &lt;a-checkbox-<span class="hljs-keyword">group</span> :<span class="hljs-keyword">options</span>=&quot;checkboxData&quot; v-model=&quot;form.BBcontent&quot; @change=&quot;BBonChange&quot; /&gt;<br>              &lt;/div&gt;<br>            &lt;/a-form-model-item&gt;<br><br> &lt;/a-form-model&gt;<br><br><br>form: &#123;<br>        BBcontent: [], // 报表内容<br>      &#125;,<br><br>checkboxData: [<br>        &#123; <span class="hljs-keyword">value</span>: <span class="hljs-string">&#x27;1&#x27;</span>, label: <span class="hljs-string">&#x27;服务器运行情况&#x27;</span> &#125;,<br>        &#123; <span class="hljs-keyword">value</span>: <span class="hljs-string">&#x27;2&#x27;</span>, label: <span class="hljs-string">&#x27;GPU使用情况&#x27;</span> &#125;,<br>        &#123; <span class="hljs-keyword">value</span>: <span class="hljs-string">&#x27;分布式存储使用情况&#x27;</span>, label: <span class="hljs-string">&#x27;分布式存储使用情况&#x27;</span> &#125;,<br>        &#123; <span class="hljs-keyword">value</span>: <span class="hljs-string">&#x27;IB网络使用情况&#x27;</span>, label: <span class="hljs-string">&#x27;IB网络使用情况&#x27;</span> &#125;,<br>        &#123; <span class="hljs-keyword">value</span>: <span class="hljs-string">&#x27;RoCE网络使用情况&#x27;</span>, label: <span class="hljs-string">&#x27;RoCE网络使用情况&#x27;</span> &#125;,<br>        &#123; <span class="hljs-keyword">value</span>: <span class="hljs-string">&#x27;交换机使用情况&#x27;</span>, label: <span class="hljs-string">&#x27;交换机使用情况&#x27;</span> &#125;,<br>        &#123; <span class="hljs-keyword">value</span>: <span class="hljs-string">&#x27;防火墙使用情况&#x27;</span>, label: <span class="hljs-string">&#x27;防火墙使用情况&#x27;</span> &#125;,<br>        &#123; <span class="hljs-keyword">value</span>: <span class="hljs-string">&#x27;堡垒机使用情况&#x27;</span>, label: <span class="hljs-string">&#x27;堡垒机使用情况&#x27;</span> &#125;,<br>        &#123; <span class="hljs-keyword">value</span>: <span class="hljs-string">&#x27;报警事件情况&#x27;</span>, label: <span class="hljs-string">&#x27;报警事件情况&#x27;</span> &#125;,<br>      ],<br><br> // 验证规则<br>      rules: &#123;<br>        // 报表内容<br>        BBcontent: [&#123;<br>          <span class="hljs-keyword">type</span>: <span class="hljs-string">&#x27;array&#x27;</span>,<br>          required: <span class="hljs-keyword">true</span>,<br>          message: <span class="hljs-string">&#x27;请选择报表内容&#x27;</span>,<br>          <span class="hljs-keyword">trigger</span>: <span class="hljs-string">&#x27;change&#x27;</span>,<br>          whitespace: <span class="hljs-keyword">true</span><br>        &#125;],<br>&#125;<br><br><br>  methods: &#123;<br>    BBonChange(val) &#123;<br>      console.log(<span class="hljs-string">&#x27;val&#x27;</span>, val);<br>      this.form.BBcontent = val<br>    &#125;,<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h3 id="验证事件触发后没有触发验证规则问题"><a href="#验证事件触发后没有触发验证规则问题" class="headerlink" title="验证事件触发后没有触发验证规则问题"></a>验证事件触发后没有触发验证规则问题</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs typescript">正确格式<br> &lt;a-row <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;form_li&quot;</span> <span class="hljs-keyword">type</span>=<span class="hljs-string">&quot;flex&quot;</span> justify=<span class="hljs-string">&quot;center&quot;</span>&gt;<br>          <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">a-col</span> <span class="hljs-attr">:xs</span>=<span class="hljs-string">&quot;formW&quot;</span> <span class="hljs-attr">:sm</span>=<span class="hljs-string">&quot;formW&quot;</span> <span class="hljs-attr">:md</span>=<span class="hljs-string">&quot;formW&quot;</span> <span class="hljs-attr">:lg</span>=<span class="hljs-string">&quot;formW&quot;</span> <span class="hljs-attr">:xl</span>=<span class="hljs-string">&quot;formW&quot;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">a-form-model-item</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;设备类型&quot;</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;equipmentType&quot;</span>&gt;</span></span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">a-select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;form.equipmentType&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请选择类型&quot;</span> <span class="hljs-attr">allowClear</span> @<span class="hljs-attr">change</span>=<span class="hljs-string">&quot;equipmentTypechange&quot;</span>&gt;</span></span><br><span class="language-xml">                  <span class="hljs-tag">&lt;<span class="hljs-name">a-select-option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;shanghai&quot;</span>&gt;</span></span><br><span class="language-xml">                    Zone one</span><br><span class="language-xml">                  <span class="hljs-tag">&lt;/<span class="hljs-name">a-select-option</span>&gt;</span></span><br><span class="language-xml">                  <span class="hljs-tag">&lt;<span class="hljs-name">a-select-option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;beijing&quot;</span>&gt;</span></span><br><span class="language-xml">                    Zone two</span><br><span class="language-xml">                  <span class="hljs-tag">&lt;/<span class="hljs-name">a-select-option</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;/<span class="hljs-name">a-select</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">a-form-model-item</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">a-col</span>&gt;</span></span><br>        &lt;/a-row&gt;<br><br><br>错误格式    a-form-model-item里面多包了一层div  导致  验证事件触发后没有触发验证规则问题<br> <br>&lt;a-row <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;form_li&quot;</span> <span class="hljs-keyword">type</span>=<span class="hljs-string">&quot;flex&quot;</span> justify=<span class="hljs-string">&quot;center&quot;</span>&gt;<br>          <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">a-col</span> <span class="hljs-attr">:xs</span>=<span class="hljs-string">&quot;formW&quot;</span> <span class="hljs-attr">:sm</span>=<span class="hljs-string">&quot;formW&quot;</span> <span class="hljs-attr">:md</span>=<span class="hljs-string">&quot;formW&quot;</span> <span class="hljs-attr">:lg</span>=<span class="hljs-string">&quot;formW&quot;</span> <span class="hljs-attr">:xl</span>=<span class="hljs-string">&quot;formW&quot;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">a-form-model-item</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;设备类型&quot;</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;equipmentType&quot;</span>&gt;</span></span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">a-select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;form.equipmentType&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请选择类型&quot;</span> <span class="hljs-attr">allowClear</span> @<span class="hljs-attr">change</span>=<span class="hljs-string">&quot;equipmentTypechange&quot;</span>&gt;</span></span><br><span class="language-xml">                  <span class="hljs-tag">&lt;<span class="hljs-name">a-select-option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;shanghai&quot;</span>&gt;</span></span><br><span class="language-xml">                    Zone one</span><br><span class="language-xml">                  <span class="hljs-tag">&lt;/<span class="hljs-name">a-select-option</span>&gt;</span></span><br><span class="language-xml">                  <span class="hljs-tag">&lt;<span class="hljs-name">a-select-option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;beijing&quot;</span>&gt;</span></span><br><span class="language-xml">                    Zone two</span><br><span class="language-xml">                  <span class="hljs-tag">&lt;/<span class="hljs-name">a-select-option</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;/<span class="hljs-name">a-select</span>&gt;</span></span><br><span class="language-xml">              <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">a-form-model-item</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">a-col</span>&gt;</span></span><br>        &lt;/a-row&gt;<br><br><br><br> <span class="hljs-comment">// 验证规则</span><br>      <span class="hljs-attr">rules</span>: &#123;<br>        <span class="hljs-comment">// 设备类型</span><br>        <span class="hljs-attr">equipmentType</span>: [&#123;<br>          <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>,<br>          <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请选择设备类型&#x27;</span>,<br>          <span class="hljs-attr">trigger</span>: <span class="hljs-string">&#x27;change&#x27;</span>,<br>          <span class="hljs-comment">// whitespace: true</span><br>        &#125;],<br></code></pre></td></tr></table></figure><h3 id="多表单验证"><a href="#多表单验证" class="headerlink" title="多表单验证"></a>多表单验证</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs arcade">onSubmit() &#123;<br>      this.<span class="hljs-symbol">$refs</span>.formModel.validate(<span class="hljs-function"><span class="hljs-params">valid1</span> =&gt;</span> &#123;<br>        <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;表单1验证&#x27;</span>,valid1);<br>        <span class="hljs-keyword">if</span> (valid1) &#123;<br>          <br>          <span class="hljs-comment">// 发送通知</span><br>          <span class="hljs-keyword">if</span>(this.form.ifInform == <span class="hljs-number">2</span>)&#123;<br>            <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;进来&#x27;</span>);<br>            this.<span class="hljs-symbol">$refs</span>.formModel2.validate(<span class="hljs-function"><span class="hljs-params">valid2</span> =&gt;</span> &#123;<br>              <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;表单2验证&#x27;</span>,valid2);<br>            &#125;)<br>          &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-comment">// this.loading = false</span><br>          <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;error submit!!&#x27;</span>)<br>          <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>        &#125;<br>      &#125;)<br>    &#125;,<br></code></pre></td></tr></table></figure><h3 id="下拉选择样式，文字过长时省略号"><a href="#下拉选择样式，文字过长时省略号" class="headerlink" title="下拉选择样式，文字过长时省略号"></a>下拉选择样式，文字过长时省略号</h3><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">a-form-item</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;GPU类型：&quot;</span> <span class="hljs-attr">:label-col</span>=<span class="hljs-string">&quot;&#123; span: 7 &#125;&quot;</span> <span class="hljs-attr">:wrapperCol</span>=<span class="hljs-string">&quot;&#123; span: 14 &#125;&quot;</span>&gt;</span></span><br><span class="language-xml">                            <span class="hljs-tag">&lt;<span class="hljs-name">a-select</span> <span class="hljs-attr">:placeholder</span>=<span class="hljs-string">&quot;$t(&#x27;pSelectText&#x27;)&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;queryParam.gpuType&quot;</span> @<span class="hljs-attr">change</span>=<span class="hljs-string">&quot;changetype&quot;</span>&gt;</span></span><br><span class="language-xml">                                <span class="hljs-tag">&lt;<span class="hljs-name">a-select-option</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in severstypeOptions&quot;</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">&quot;item.id&quot;</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;</span><br><span class="hljs-template-variable">                                    <span class="hljs-name">item.value</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">a-select-option</span>&gt;</span></span><br><span class="language-xml">                            <span class="hljs-tag">&lt;/<span class="hljs-name">a-select</span>&gt;</span></span><br><span class="language-xml">                        <span class="hljs-tag">&lt;/<span class="hljs-name">a-form-item</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">踩坑有bug  里面内容过长时  在不同尺寸下适配会有问题</span><br><span class="language-xml"></span><br><span class="language-xml">用的下面的解决方案</span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">a-form-item</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;服务器所属分组：&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;selectbox1&quot;</span> &gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">a-select</span> <span class="hljs-attr">:placeholder</span>=<span class="hljs-string">&quot;$t(&#x27;pSelectText&#x27;)&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;queryParam.groupId&quot;</span> @<span class="hljs-attr">change</span>=<span class="hljs-string">&quot;changeGroup&quot;</span>&gt;</span></span><br><span class="language-xml">                  <span class="hljs-tag">&lt;<span class="hljs-name">a-select-option</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in groupOptions&quot;</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">&quot;item.aegId&quot;</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">item.groupName</span></span><br><span class="hljs-template-variable">                  &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">a-select-option</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;/<span class="hljs-name">a-select</span>&gt;</span></span><br><span class="language-xml">              <span class="hljs-tag">&lt;/<span class="hljs-name">a-form-item</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">单独设置左侧label  样式 和右侧盒子宽度</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;less&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="language-css"><span class="language-xml">// 调整查询样式   服务器所属分组</span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.selectbox1</span> <span class="hljs-selector-class">.ant-form-item-label</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">width</span>: <span class="hljs-number">112px</span>;</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.selectbox1</span> <span class="hljs-selector-class">.ant-form-item-control-wrapper</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">width</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">100%</span> - <span class="hljs-number">112px</span>);</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h1 id="深度样式修改-v-deep"><a href="#深度样式修改-v-deep" class="headerlink" title="深度样式修改::v-deep"></a>深度样式修改::v-deep</h1><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-symbol">:</span><span class="hljs-symbol">:v-deep</span> .ant-tabs-nav-scroll &#123;<br></code></pre></td></tr></table></figure><h1 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript">阿里字体 包下载<br><br>main.<span class="hljs-property">js</span><br><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Icon</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;ant-design-vue&#x27;</span><br><span class="hljs-keyword">import</span> iconFont <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./assets/icons/iconfont.js&#x27;</span><br><span class="hljs-keyword">import</span> iconFontCss <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./assets/icons/iconfont.css&#x27;</span><br><br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(iconFontCss)<br><br><br><span class="hljs-keyword">const</span> myicon = <span class="hljs-title class_">Icon</span>.<span class="hljs-title function_">createFromIconfontCN</span>(&#123;<br>  <span class="hljs-attr">scriptUrl</span>: iconFont<br>&#125;)<br><span class="hljs-comment">//引用</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;icon-font&#x27;</span>, myicon)<br><br><br>参考<br><span class="hljs-attr">https</span>:<span class="hljs-comment">//blog.csdn.net/sinat_40470998/article/details/110531033</span><br><br><br></code></pre></td></tr></table></figure><h1 id="树形表格折叠不管用bug"><a href="#树形表格折叠不管用bug" class="headerlink" title="树形表格折叠不管用bug"></a>树形表格折叠不管用bug</h1><p>核心  expandedRowsChange   官方文档没有</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext">&lt;a-table :columns=&quot;columns&quot; :data-source=&quot;data&quot; :row-selection=&quot;rowSelection&quot; @expandedRowsChange=&quot;jkl&quot;<br>                        :expanded-row-keys.sync=&quot;expandedRowKeys&quot; /&gt;<br><br><span class="hljs-attribute">核心  expandedRowsChange   官方文档没有</span><br><span class="hljs-attribute"></span><br><span class="hljs-attribute"> data() &#123;</span><br><span class="hljs-attribute">        return &#123;</span><br><span class="hljs-attribute">            expandedRowKeys</span><span class="hljs-punctuation">:</span> <span class="hljs-string">[],</span><br><br><br><br><br><br>jkl(e) &#123;<br>            console.log(&#x27;this.expandedRowKeys&#x27;,this.expandedRowKeys);<br>            console.log(&#x27;e&#x27;,e);<br>            // this.expandedRowKeys = [...this.expandedRowKeys, ...e]<br>            this.expandedRowKeys = e<br>        &#125;,<br><br>:row-selection=&quot;rowSelection  控制多选的  可以不要<br><br><br><br><span class="hljs-attribute">数据</span><br><span class="hljs-attribute"> data</span><span class="hljs-punctuation">:</span> <span class="hljs-string">[</span><br>                <span class="hljs-attribute">&#123;</span><br><span class="hljs-attribute">                    key</span><span class="hljs-punctuation">:</span> <span class="hljs-string">1,</span><br>                    <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#x27;John Brown sr.&#x27;,</span><br>                    <span class="hljs-attribute">age</span><span class="hljs-punctuation">:</span> <span class="hljs-string">60,</span><br>                    <span class="hljs-attribute">address</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#x27;New York No. 1 Lake Park&#x27;,</span><br>                    <span class="hljs-attribute">children</span><span class="hljs-punctuation">:</span> <span class="hljs-string">[</span><br>                        <span class="hljs-attribute">&#123;</span><br><span class="hljs-attribute">                            key</span><span class="hljs-punctuation">:</span> <span class="hljs-string">11,</span><br>                            <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#x27;John Brown&#x27;,</span><br>                            <span class="hljs-attribute">age</span><span class="hljs-punctuation">:</span> <span class="hljs-string">42,</span><br>                            <span class="hljs-attribute">address</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#x27;New York No. 2 Lake Park&#x27;,</span><br>                        <span class="hljs-attribute">&#125;,</span><br><span class="hljs-attribute">                        &#123;</span><br><span class="hljs-attribute">                            key</span><span class="hljs-punctuation">:</span> <span class="hljs-string">12,</span><br>                            <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#x27;John Brown jr.&#x27;,</span><br>                            <span class="hljs-attribute">age</span><span class="hljs-punctuation">:</span> <span class="hljs-string">30,</span><br>                            <span class="hljs-attribute">address</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#x27;New York No. 3 Lake Park&#x27;,</span><br>                        <span class="hljs-attribute">&#125;,</span><br><span class="hljs-attribute">                    ],</span><br><span class="hljs-attribute">                &#125;,</span><br><span class="hljs-attribute">                &#123;</span><br><span class="hljs-attribute">                    key</span><span class="hljs-punctuation">:</span> <span class="hljs-string">2,</span><br>                    <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#x27;Joe Black&#x27;,</span><br>                    <span class="hljs-attribute">age</span><span class="hljs-punctuation">:</span> <span class="hljs-string">32,</span><br>                    <span class="hljs-attribute">address</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#x27;Sidney No. 1 Lake Park&#x27;,</span><br>                <span class="hljs-attribute">&#125;,</span><br><span class="hljs-attribute">            ],</span><br><span class="hljs-attribute">            columns</span><span class="hljs-punctuation">:</span> <span class="hljs-string">[</span><br>                <span class="hljs-attribute">&#123;</span><br><span class="hljs-attribute">                    title</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#x27;Name&#x27;,</span><br>                    <span class="hljs-attribute">dataIndex</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#x27;name&#x27;,</span><br>                    <span class="hljs-attribute">key</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#x27;name&#x27;,</span><br>                <span class="hljs-attribute">&#125;,</span><br><span class="hljs-attribute">                &#123;</span><br><span class="hljs-attribute">                    title</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#x27;Age&#x27;,</span><br>                    <span class="hljs-attribute">dataIndex</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#x27;age&#x27;,</span><br>                    <span class="hljs-attribute">key</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#x27;age&#x27;,</span><br>                    <span class="hljs-attribute">width</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#x27;12%&#x27;,</span><br>                <span class="hljs-attribute">&#125;,</span><br><span class="hljs-attribute">                &#123;</span><br><span class="hljs-attribute">                    title</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#x27;Address&#x27;,</span><br>                    <span class="hljs-attribute">dataIndex</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#x27;address&#x27;,</span><br>                    <span class="hljs-attribute">width</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#x27;30%&#x27;,</span><br>                    <span class="hljs-attribute">key</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#x27;address&#x27;,</span><br>                &#125;,<br>            ],<br></code></pre></td></tr></table></figure><h1 id="树形表格折叠按钮自定义"><a href="#树形表格折叠按钮自定义" class="headerlink" title="树形表格折叠按钮自定义"></a>树形表格折叠按钮自定义</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs javascript">位置<br>&lt;a-table<br>      :columns=<span class="hljs-string">&quot;columns&quot;</span><br>      :data-source=<span class="hljs-string">&quot;data&quot;</span><br>      <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;components-table-demo-nested&quot;</span><br>      :expandIconColumnIndex=<span class="hljs-string">&quot;2&quot;</span><br>:expandIcon=<span class="hljs-string">&quot;expandIcon&quot;</span><br>      :expandIconAsCell=<span class="hljs-string">&quot;false&quot;</span><br>&gt;&lt;/a-table&gt;<br><br>在原本代码的基础上，在&lt;a-table&gt;中添加<br><br>:expandIconColumnIndex=<span class="hljs-string">&quot;3&quot;</span><br> <br>:expandIconAsCell=<span class="hljs-string">&quot;false&quot;</span><br><br>想把展开按钮放在第几列，就给expandIconColumnIndex设置多少值（第<span class="hljs-number">1</span>列为<span class="hljs-number">0</span>，以此类推）<br><br>expandIconAsCell这个属性也要加，不加按钮换位不起作用<br><br>设置完后，展开按钮变为下图位置。<br><br><br>dwy测试不加:expandIconAsCell=<span class="hljs-string">&quot;false&quot;</span>  没发现问题<br><br>自定义按钮  可用阿里图表<br>:expandIcon=<span class="hljs-string">&quot;expandIcon&quot;</span><br><br> <span class="hljs-attr">methods</span>: &#123;<br>        <span class="hljs-comment">// 渲染打开子表格图标样式</span><br>        <span class="hljs-title function_">expandIcon</span>(<span class="hljs-params">props</span>) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;props&#x27;</span>, props); <span class="hljs-comment">//返回的是父表格中的所有数据内容</span><br>            <span class="hljs-keyword">if</span> (props.<span class="hljs-property">record</span>.<span class="hljs-property">children</span>) &#123;<br>                <span class="hljs-keyword">if</span> (props.<span class="hljs-property">record</span>.<span class="hljs-property">children</span>.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-comment">//props.record的内容是表格单行的所有数据，可以在这里判定子表格是否有数据。</span><br>                    <span class="hljs-keyword">if</span> (props.<span class="hljs-property">expanded</span>) &#123;<br>                        <span class="hljs-comment">//props.expanded的值是true或false，代表子表格是否展开</span><br>                        <span class="hljs-comment">//有数据展开时图标样式</span><br>                        <span class="hljs-keyword">return</span> (<br>                            <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span></span></span><br><span class="hljs-tag"><span class="language-xml">                                <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;(e)</span> =&gt;</span> &#123;</span><br><span class="language-xml">                                    console.log(&#x27;e&#x27;, e);</span><br><span class="language-xml">                                    props.onExpand(props.record, e);</span><br><span class="language-xml">                                &#125;&#125;</span><br><span class="language-xml">                            &gt;</span><br><span class="language-xml">                                网卡参数 <span class="hljs-tag">&lt;<span class="hljs-name">icon-font</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;icon-xiangxia&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;font-size:18px;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">icon-font</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">                            <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br>                        );<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-comment">//有数据且未展开时图标样式</span><br>                        <span class="hljs-keyword">return</span> (<br>                            <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span></span></span><br><span class="hljs-tag"><span class="language-xml">                                <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;(e)</span> =&gt;</span> &#123;</span><br><span class="language-xml">                                    console.log(&#x27;e&#x27;, e);</span><br><span class="language-xml">                                    props.onExpand(props.record, e);</span><br><span class="language-xml">                                &#125;&#125;</span><br><span class="language-xml">                            &gt;</span><br><span class="language-xml">                                网卡参数 <span class="hljs-tag">&lt;<span class="hljs-name">icon-font</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;icon-xiangshang&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;font-size:18px;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">icon-font</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">                            <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br>                        );<br>                    &#125;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-comment">//无数据时图标样式</span><br>                    <span class="hljs-keyword">return</span> (<br>                        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">                            无数据</span><br><span class="language-xml"></span><br><span class="language-xml">                        <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br>                    );<br>                &#125;<br>            &#125;<br><br>        &#125;,<br><br><br>参考地址<br><span class="hljs-attr">https</span>:<span class="hljs-comment">//blog.csdn.net/weixin_47437528/article/details/124870006</span><br></code></pre></td></tr></table></figure><h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><h2 id="表头样式自定义"><a href="#表头样式自定义" class="headerlink" title="表头样式自定义"></a>表头样式自定义</h2><h3 id="方法1-插槽"><a href="#方法1-插槽" class="headerlink" title="方法1   插槽"></a>方法1   插槽</h3><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs axapta">columns：[<br>&#123;<br>                    <span class="hljs-comment">// title: &#x27;ALL Errors&#x27;,</span><br>                    ikey:<span class="hljs-string">&#x27;ALL Errors&#x27;</span>,<br>                    align: <span class="hljs-string">&#x27;center&#x27;</span>,<br>                    ellipsis: <span class="hljs-literal">true</span>,<br>                    dataIndex: <span class="hljs-string">&#x27;losslessAllErrors&#x27;</span>,<br>                    slots: &#123; title: <span class="hljs-string">&#x27;customTitle_ALLErrors&#x27;</span> &#125;,<br>                    scopedSlots: &#123;<br>                        customRender: <span class="hljs-string">&#x27;customTitle_ALLErrors&#x27;</span>,<br>                    &#125;,<br>                &#125;,<br><br>]<br><br>html<br>&lt;<span class="hljs-keyword">div</span> slot=<span class="hljs-string">&quot;customTitle_ALLErrors&quot;</span>&gt;<br>                            &lt;<span class="hljs-keyword">div</span>&gt;ALL&lt;/<span class="hljs-keyword">div</span>&gt;<br>                            &lt;<span class="hljs-keyword">div</span>&gt;Errors&lt;/<span class="hljs-keyword">div</span>&gt;<br>                        &lt;/<span class="hljs-keyword">div</span>&gt;<br><br><br><br></code></pre></td></tr></table></figure><h3 id="方法2-内部属性"><a href="#方法2-内部属性" class="headerlink" title="方法2  内部属性"></a>方法2  内部属性</h3><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">columns：[<br><br>&#123;<br>                    title: <span class="hljs-string">&#x27;GPU使用率&#x27;</span>,<br>                    <br>                    align: <span class="hljs-string">&#x27;center&#x27;</span>,<br>                    ellipsis: <span class="hljs-literal">true</span>,<br>                    dataIndex: <span class="hljs-string">&#x27;gpuUsageRate&#x27;</span>,<br>                    title: <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>                        <span class="hljs-keyword">return</span> &lt;a-tooltip placement=<span class="hljs-string">&quot;top&quot;</span> title=<span class="hljs-string">&quot;GPU使用率&quot;</span> &gt;GPU使用率&lt;/a-tooltip&gt;<br>                    &#125;,<br>                &#125;,<br><br>]<br></code></pre></td></tr></table></figure><p>如果有排序的话，自定义表头和排序有冲突，只能升序不能降序 slots和sorter冲突</p><p>表头自定义改用这个方法</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs css">&#123;<br>                    title: () =&gt; &#123;<br>                        return (<br>                            &lt;<span class="hljs-selector-tag">div</span>&gt;<br>                                &lt;<span class="hljs-selector-tag">div</span>&gt;<span class="hljs-attribute">ALL</span>&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>                                &lt;<span class="hljs-selector-tag">div</span>&gt;Errors&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>                            &lt;/<span class="hljs-selector-tag">div</span>&gt;<br>                        )<br>                    &#125;,<br>                    // title: <span class="hljs-string">&#x27;ALL Errors&#x27;</span>,<br>                    ikey: <span class="hljs-string">&#x27;ALL Errors&#x27;</span>,<br>                    align: <span class="hljs-string">&#x27;center&#x27;</span>,<br>                    ellipsis: true,<br>                    dataIndex: <span class="hljs-string">&#x27;losslessAllErrors&#x27;</span>,<br>                    orderFiled: <span class="hljs-string">&#x27;lossless_all_errors&#x27;</span>,<br>                    // slots: &#123; title: <span class="hljs-string">&#x27;customTitle_ALLErrors&#x27;</span> &#125;,<br>                    sorter: (a, b) =&gt; a.losslessAllErrors - b.losslessAllErrors,<br>                    scopedSlots: &#123;<br>                        customRender: <span class="hljs-string">&#x27;customTitle_ALLErrors&#x27;</span>,<br>                    &#125;,<br><br>                &#125;,<br></code></pre></td></tr></table></figure><p>排序 sorter<br>自定义排序 orderFiled  后台排序</p><h3 id="方法3"><a href="#方法3" class="headerlink" title="方法3"></a>方法3</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs css"> colnums: [<br>               &#123;<br>          title: <span class="hljs-string">&#x27;长标题&#x27;</span>,<br>          dataIndex: <span class="hljs-string">&#x27;longTitle&#x27;</span>,<br>          scopedSlots: &#123;customRender: <span class="hljs-string">&#x27;longTitle&#x27;</span>&#125;,<br>          align: <span class="hljs-string">&#x27;center&#x27;</span>,<br>          width: <span class="hljs-number">120</span><br>          customHeaderCell: () =&gt; &#123;<br>            return &#123;<br>              style: &#123;<br>                wordWrap: <span class="hljs-string">&#x27;break-word&#x27;</span>,<br>                wordBreak: <span class="hljs-string">&#x27;break-all&#x27;</span>,<br>                whiteSpace: <span class="hljs-string">&#x27;normal&#x27;</span>,<br>                minHeight: <span class="hljs-string">&#x27;50px&#x27;</span>,<br>                width: <span class="hljs-string">&#x27;150px&#x27;</span>,<br>              &#125;<br>            &#125;<br>          &#125;<br>        &#125;<br>]<br></code></pre></td></tr></table></figure><h2 id="表体内容自定义"><a href="#表体内容自定义" class="headerlink" title="表体内容自定义"></a>表体内容自定义</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs ruby">columns：[<br>&#123;<br>                    <span class="hljs-regexp">//</span> <span class="hljs-symbol">title:</span> <span class="hljs-string">&#x27;ALL Errors&#x27;</span>,<br>                    <span class="hljs-symbol">ikey:</span><span class="hljs-string">&#x27;ALL Errors&#x27;</span>,<br>                    <span class="hljs-symbol">align:</span> <span class="hljs-string">&#x27;center&#x27;</span>,<br>                    <span class="hljs-symbol">ellipsis:</span> <span class="hljs-literal">true</span>,<br>                    <span class="hljs-symbol">dataIndex:</span> <span class="hljs-string">&#x27;losslessAllErrors&#x27;</span>,<br>                    <span class="hljs-symbol">slots:</span> &#123; <span class="hljs-symbol">title:</span> <span class="hljs-string">&#x27;customTitle_ALLErrors&#x27;</span> &#125;,<br>                    <span class="hljs-symbol">scopedSlots:</span> &#123;<br>                        <span class="hljs-symbol">customRender:</span> <span class="hljs-string">&#x27;customTitle_ALLErrors&#x27;</span>,<br>                    &#125;,<br>                &#125;,<br><br>]<br><br><br>&lt;span slot=<span class="hljs-string">&quot;customTitle_ALLErrors&quot;</span> slot-scope=<span class="hljs-string">&quot;text, record&quot;</span><br>                            <span class="hljs-symbol">:class=<span class="hljs-string">&quot;[distributedStorageId == record.distributedStorageId &amp;&amp; &#x27;selectedbar&#x27;]&quot;</span>&gt;</span><br>                            &#123;&#123; record.losslessAllErrors &#125;&#125;<br>                        &lt;<span class="hljs-regexp">/span&gt;</span><br></code></pre></td></tr></table></figure><h2 id="连用案例"><a href="#连用案例" class="headerlink" title="连用案例"></a>连用案例</h2><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs axapta">columns：[<br><br>&#123;<br>                    <span class="hljs-comment">// title: &#x27;ALL Errors&#x27;,</span><br>                    ikey:<span class="hljs-string">&#x27;ALL Errors&#x27;</span>,<br>                    align: <span class="hljs-string">&#x27;center&#x27;</span>,<br>                    ellipsis: <span class="hljs-literal">true</span>,<br>                    dataIndex: <span class="hljs-string">&#x27;losslessAllErrors&#x27;</span>,<br>                    slots: &#123; title: <span class="hljs-string">&#x27;customTitle_ALLErrors&#x27;</span> &#125;,<br>                    scopedSlots: &#123;<br>                        customRender: <span class="hljs-string">&#x27;customTitle_ALLErrors&#x27;</span>,<br>                    &#125;,<br>                &#125;,<br><br>]<br><br><br>html<br>&lt;<span class="hljs-keyword">div</span> slot=<span class="hljs-string">&quot;customTitle_ALLErrors&quot;</span>&gt;<br>                            &lt;<span class="hljs-keyword">div</span>&gt;ALL&lt;/<span class="hljs-keyword">div</span>&gt;<br>                            &lt;<span class="hljs-keyword">div</span>&gt;Errors&lt;/<span class="hljs-keyword">div</span>&gt;<br>                        &lt;/<span class="hljs-keyword">div</span>&gt;<br>                        &lt;span slot=<span class="hljs-string">&quot;customTitle_ALLErrors&quot;</span> slot-scope=<span class="hljs-string">&quot;text, record&quot;</span><br>                            :<span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;[distributedStorageId == record.distributedStorageId &amp;&amp; &#x27;selectedbar&#x27;]&quot;</span>&gt;<br>                            &#123;&#123; record.losslessAllErrors &#125;&#125;<br>                        &lt;/span&gt;<br></code></pre></td></tr></table></figure><h1 id="修改样式无效"><a href="#修改样式无效" class="headerlink" title="修改样式无效"></a>修改样式无效</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css">::v-deep .ant-popover-inner .ant-popover-title&#123;<br>    <span class="hljs-attribute">display</span>: none <span class="hljs-meta">!important</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>加::v-deep</p><p>如果还无效  例如浮层组件</p><p>解决办法<br>在template模版里的代码写法<br>注意事项：在a-popover里加一个overlayClassName属性，其值可以自己定义卡片类名，定义卡片类型名之后就可以在style标签里进行修改卡片的样式了。<br>代码如下</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">a-popover</span>  <span class="hljs-attr">placement</span>=<span class="hljs-string">&quot;bottom&quot;</span> <span class="hljs-attr">trigger</span>=<span class="hljs-string">&quot;click&quot;</span> <span class="hljs-attr">overlayClassName</span>=<span class="hljs-string">&quot;poperlay-table1&quot;</span>&gt;</span></span><br><span class="language-xml">                                <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span></span><br><span class="language-xml">                                    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Content<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">                                    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Content<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">                                <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">                                <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span></span><br><span class="language-xml">                                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                                        123</span><br><span class="language-xml">                                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                                <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">                                <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                                    </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">record.gpuUsageRate</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;record.gpuUsageRate&quot;</span>&gt;</span>%<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">                                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                            <span class="hljs-tag">&lt;/<span class="hljs-name">a-popover</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>在vue的组件里再加另一个style标签时不写scoped<br>注意事项：在自己所定义的卡片类名里，不加&#x2F;deep&#x2F;深度选择，才能进行样式的修改<br>代码如下</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs stata">&lt;style lang=<span class="hljs-string">&quot;less&quot;</span>&gt;<br>.poperlay-table1 .ant-popover-title&#123;<br>    <span class="hljs-keyword">display</span>: none !important;<br>&#125;<br>&lt;/style&gt;<br><br><br>a-tooltip    a-popove    都可用<br><br>a-<span class="hljs-keyword">form</span>-item  用   <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;selectbox1&quot;</span><br>dropdown-<span class="hljs-keyword">class</span>-name      &lt;a-<span class="hljs-keyword">form</span>-item <span class="hljs-keyword">label</span>=<span class="hljs-string">&quot;服务器所属分组：&quot;</span> <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;selectbox1&quot;</span>&gt;<br></code></pre></td></tr></table></figure><p>Tooltip如何只在内容溢出时显示，内容不溢出时不显示</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">https://blog.csdn.net/licongmingli/article/details/134711481</span><br><span class="language-xml">给Tooltip添加鼠标移入事件mouseenter，当内容没有溢出时阻止鼠标事件。</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">a-tooltip</span> <span class="hljs-attr">placement</span>=<span class="hljs-string">&quot;topLeft&quot;</span> <span class="hljs-attr">:title</span>=<span class="hljs-string">&quot;list&quot;</span> @<span class="hljs-attr">mouseenter</span>=<span class="hljs-string">&quot;showTooltip&quot;</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;tag-container&quot;</span>&gt;</span></span><br><span class="language-xml">     <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item, index) in list&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;index&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">a-tag</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin-bottom:6px;&quot;</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">item</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">a-tag</span>&gt;</span></span><br><span class="language-xml">     <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">a-tooltip</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">补充知识点：</span><br><span class="language-xml">clientHeight ：元素像素实际高度。（内容有溢出时，理解为可视区域高度）</span><br><span class="language-xml">scollHeight：元素内容高度，包括溢出的不可见内容。（可视区域高度+被隐藏区域高度，当内容没有溢出时clientHeight ===&gt; scollHeight ）</span><br><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">// 控制Tooltip的显示与隐藏</span><br><span class="language-xml">showTooltip(e)&#123;</span><br><span class="language-xml">  if(e.target.clientHeight === e.target.scollHeight)&#123;</span><br><span class="language-xml">    // 阻止鼠标事件</span><br><span class="language-xml">    e.target.style.pointerEvents = &#x27;none&#x27;</span><br><span class="language-xml">  &#125;</span><br><span class="language-xml">&#125;</span><br><span class="language-xml"></span><br><span class="language-xml">样式：内容垂直排列，最多显示2行，所以在上面代码中通过比较高度判断内容是否溢出</span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.tag-container</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">display</span>: -webkit-box; <span class="hljs-comment">/* 设置为弹性盒子*/</span></span></span><br><span class="language-css"><span class="language-xml">  -webkit-box-orient: vertical; <span class="hljs-comment">/* 垂直方向排列*/</span></span></span><br><span class="language-css"><span class="language-xml">  -webkit-line-clamp: <span class="hljs-number">2</span>; <span class="hljs-comment">/* 显示行数*/</span></span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">overflow</span>: hidden; <span class="hljs-comment">/*隐藏溢出内容 */</span></span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">8px</span>;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"></span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Ant Design Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ant Design Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Google踩坑_后台打印是vue路径显示变为cjs.js</title>
    <link href="/2024/02/07/Google%E8%B8%A9%E5%9D%91/"/>
    <url>/2024/02/07/Google%E8%B8%A9%E5%9D%91/</url>
    
    <content type="html"><![CDATA[<h2 id="后台打印是vue路径显示变为cjs-js"><a href="#后台打印是vue路径显示变为cjs-js" class="headerlink" title="后台打印是vue路径显示变为cjs.js"></a>后台打印是vue路径显示变为cjs.js</h2><p>设置-》忽略列表》启用忽略清单取消勾选  重启浏览器</p><p><a href="https://blog.csdn.net/hifhf/article/details/135051877">https://blog.csdn.net/hifhf/article/details/135051877</a></p><p>右上角设置图标 》左侧找到“Ignore List”，取消勾选”enable Lgnore Listing”，并重启chrome</p><p>f12控制台中英文切换</p><p>右上角设置图标 &gt; preferences &gt; language</p><p><a href="https://www.cnblogs.com/sinberya/p/16408606.html">https://www.cnblogs.com/sinberya/p/16408606.html</a></p>]]></content>
    
    
    <categories>
      
      <category>Google</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Google</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue-element-admin遇到的问题和解决记录</title>
    <link href="/2024/01/10/vue-element-admin%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E5%92%8C%E8%A7%A3%E5%86%B3%E8%AE%B0%E5%BD%95/"/>
    <url>/2024/01/10/vue-element-admin%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E5%92%8C%E8%A7%A3%E5%86%B3%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><a href="http://panjiachen.github.io/vue-element-admin">vue-element-admin</a> 是一个后台前端解决方案，它基于 <a href="https://github.com/vuejs/vue">vue</a> 和 <a href="https://github.com/ElemeFE/element">element-ui</a>实现。 </p><p>官网地址：<a href="https://panjiachen.github.io/vue-element-admin-site/zh/guide/#%E5%8A%9F%E8%83%BD">https://panjiachen.github.io/vue-element-admin-site/zh/guide/#功能</a></p><h3 id="遇到问题"><a href="#遇到问题" class="headerlink" title="遇到问题"></a>遇到问题</h3><h3 id="顶部搜索栏获取信息"><a href="#顶部搜索栏获取信息" class="headerlink" title="顶部搜索栏获取信息"></a>顶部搜索栏获取信息</h3><p>html</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs applescript">&lt;template&gt;<br>  &lt;<span class="hljs-keyword">div</span> :<span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;&#123;&#x27;show&#x27;:show&#125;&quot;</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;header-search&quot;</span>&gt;<br>    &lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;search&quot;</span>&gt;<br>      &lt;<span class="hljs-keyword">div</span><br>        <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;input&quot;</span><br>        <span class="hljs-keyword">ref</span>=<span class="hljs-string">&quot;input&quot;</span><br>        :placeholder=<span class="hljs-string">&quot;placeholder&quot;</span><br>        contenteditable=<span class="hljs-string">&quot;plaintext-only&quot;</span><br>        @keydown=<span class="hljs-string">&quot;toSearch($event)&quot;</span><br>      /&gt;<br>      &lt;i <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;el-icon-search&quot;</span> @click=<span class="hljs-string">&quot;toSearchClick()&quot;</span> /&gt;<br>    &lt;/<span class="hljs-keyword">div</span>&gt;<br>  &lt;/<span class="hljs-keyword">div</span>&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><p>js      this.$root.$emit(‘tosearch’, this.search)</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">methods: &#123;<br>    toSearch(e) &#123;<br>      <span class="hljs-comment">// console.log(e.isComposing); // return false</span><br>      <span class="hljs-keyword">const</span> search = <span class="hljs-keyword">this</span>.$refs.input.innerText.trim()<br>      <span class="hljs-keyword">if</span> (!e.isComposing &amp;&amp; e.code === <span class="hljs-string">&#x27;Enter&#x27;</span> &amp;&amp; search) &#123;<br>        e.preventDefault()<br>        <span class="hljs-keyword">this</span>.$root.$emit(<span class="hljs-string">&#x27;tosearch&#x27;</span>, <span class="hljs-keyword">this</span>.search)<br>      &#125;<br>    &#125;,<br>    toSearchClick() &#123;<br>      <span class="hljs-keyword">const</span> search = <span class="hljs-keyword">this</span>.$refs.input.innerText.trim()<br>      <span class="hljs-keyword">if</span> (search) &#123;<br>        <span class="hljs-keyword">this</span>.$root.$emit(<span class="hljs-string">&#x27;tosearch&#x27;</span>, <span class="hljs-keyword">this</span>.search)<br>      &#125;<br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><p>其他页面获取搜索参数</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade">this.<span class="hljs-symbol">$root</span>.<span class="hljs-symbol">$o</span>n(<span class="hljs-string">&#x27;tosearch&#x27;</span>, (e) =&gt; &#123;<br>      <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(e)<br>    &#125;)<br></code></pre></td></tr></table></figure><h3 id="安装-失败bug"><a href="#安装-失败bug" class="headerlink" title="安装-失败bug"></a>安装-失败bug</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 克隆项目</span><br>git <span class="hljs-built_in">clone</span> https://github.com/PanJiaChen/vue-element-admin.git<br><br><span class="hljs-comment"># 进入项目目录</span><br><span class="hljs-built_in">cd</span> vue-element-admin<br><br><br><span class="hljs-comment"># 安装依赖</span><br>npm install<br><br><br>遇到报错了<br>nodejs报错解决： EBUSY: resource busy or locked 和 npm ERR! errno -4082<br></code></pre></td></tr></table></figure><p>建议不要用 cnpm 安装 会有各种诡异的bug 可以通过如下操作解决 npm 下载速度慢的问题</p><p>npm install –registry&#x3D;<a href="https://registry.npmmirror.com/">https://registry.npmmirror.com</a></p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-comment"># 本地开发 启动项目</span><br><span class="hljs-built_in">npm</span> run dev<br><br><br>安装失败   清缓存   后从新安装  成功了<br><span class="hljs-built_in">npm</span> cache clean --force<br><br><span class="hljs-comment"># 安装依赖</span><br><span class="hljs-built_in">npm</span> install<br><br><span class="hljs-comment"># 本地开发 启动项目</span><br><span class="hljs-built_in">npm</span> run dev<br><br></code></pre></td></tr></table></figure><h3 id="左侧菜单配置路由"><a href="#左侧菜单配置路由" class="headerlink" title="左侧菜单配置路由"></a>左侧菜单配置路由</h3><p>找到路由配置文件  src\router\index.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> constantRoutes   基础路由配置<br><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> asyncRoutes   异步加载路由配置<br><br><br>可以注释掉然后引入自己的路由配置<br>  <br><span class="hljs-keyword">import</span> myrouter <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./modules/myrouter&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> asyncRoutes = myrouter<br></code></pre></td></tr></table></figure><p>案例   myrouter.js    只显示父级   显示子集  详情页路由&#x2F;&#x2F;详情页路由，面包屑无法追加问题</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">mport Layout <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/layout&#x27;</span><br>const componentsRouter = [<br>    &#123;<br>        path: <span class="hljs-string">&#x27;/&#x27;</span>,<br>        component: Layout,<br>        redirect: <span class="hljs-string">&#x27;/homepage&#x27;</span>,<br>        children: [<br>            &#123;<br>                path: <span class="hljs-string">&#x27;homepage&#x27;</span>,<br>                component: <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/myViews/homepage/homepage&#x27;</span>),<br>                name: <span class="hljs-string">&#x27;homepage&#x27;</span>,<br>                meta: &#123; title: <span class="hljs-string">&#x27;首页&#x27;</span>, icon: <span class="hljs-string">&#x27;dashboard&#x27;</span>, affix: <span class="hljs-literal">true</span> &#125;<br>            &#125;<br>        ]<br>    &#125;,<br>    &#123;<br>        path: <span class="hljs-string">&#x27;/xtgl&#x27;</span>,<br>        component: Layout,<br>        redirect: <span class="hljs-string">&#x27;/xtgl/bmgl&#x27;</span>,<br>        alwaysShow: <span class="hljs-literal">true</span>, <span class="hljs-regexp">//</span> will always show the root menu<br>        name: <span class="hljs-string">&#x27;xtgl&#x27;</span>,<br>        meta: &#123;<br>            title: <span class="hljs-string">&#x27;系统管理&#x27;</span>,<br>            <span class="hljs-regexp">//</span> icon: <span class="hljs-string">&#x27;lock&#x27;</span>,<br>            icon: <span class="hljs-string">&#x27;icon-gengduo&#x27;</span>,<br>            roles: [<span class="hljs-string">&#x27;admin&#x27;</span>, <span class="hljs-string">&#x27;editor&#x27;</span>] <span class="hljs-regexp">//</span> you can set roles <span class="hljs-keyword">in</span> root nav<br>        &#125;,<br>        children: [<br>            &#123;<br>                path: <span class="hljs-string">&#x27;bmgl&#x27;</span>,<br>                component: <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/myViews/xtgl/bmgl&#x27;</span>),<br>                name: <span class="hljs-string">&#x27;bmgl&#x27;</span>,<br>                meta: &#123;<br>                    title: <span class="hljs-string">&#x27;部门管理&#x27;</span>,<br>                    roles: [<span class="hljs-string">&#x27;admin&#x27;</span>] <span class="hljs-regexp">//</span> <span class="hljs-keyword">or</span> you can only set roles <span class="hljs-keyword">in</span> sub nav<br>                &#125;<br>            &#125;,<br>            &#123;<br>                path: <span class="hljs-string">&#x27;yhgl&#x27;</span>,<br>                component: <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/myViews/xtgl/yhgl&#x27;</span>),<br>                name: <span class="hljs-string">&#x27;yhgl&#x27;</span>,<br>                meta: &#123;<br>                    title: <span class="hljs-string">&#x27;用户管理&#x27;</span><br>                    <span class="hljs-regexp">//</span> <span class="hljs-keyword">if</span> <span class="hljs-keyword">do</span> <span class="hljs-keyword">not</span> set roles, means: this page does <span class="hljs-keyword">not</span> <span class="hljs-built_in">require</span> permission<br>                &#125;<br>            &#125;,<br>            &#123;<br>                path: <span class="hljs-string">&#x27;qxgl&#x27;</span>,<br>                component: <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/myViews/xtgl/qxgl&#x27;</span>),<br>                name: <span class="hljs-string">&#x27;qxgl&#x27;</span>,<br>                meta: &#123;<br>                    title: <span class="hljs-string">&#x27;权限管理&#x27;</span>,<br>                    roles: [<span class="hljs-string">&#x27;admin&#x27;</span>]<br>                &#125;<br>            &#125;,<br>            &#123;<br>                path: <span class="hljs-string">&#x27;gzrz&#x27;</span>,<br>                component: <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/myViews/xtgl/gzrz&#x27;</span>),<br>                name: <span class="hljs-string">&#x27;gzrz&#x27;</span>,<br>                meta: &#123;<br>                    title: <span class="hljs-string">&#x27;工作日志&#x27;</span>,<br>                    roles: [<span class="hljs-string">&#x27;admin&#x27;</span>]<br>                &#125;<br>            &#125;,<br>        ]<br>    &#125;,<br> &#123;<br>    path: <span class="hljs-string">&#x27;/nrgl&#x27;</span>,<br>    component: Layout,<br>    redirect: <span class="hljs-string">&#x27;/index&#x27;</span>,<br>    children: [<br>      &#123;<br>        path: <span class="hljs-string">&#x27;index&#x27;</span>,<br>        component: <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/views/myview/nrgl/index&#x27;</span>),<br>        name: <span class="hljs-string">&#x27;nrgl&#x27;</span>,<br>        meta: &#123; title: <span class="hljs-string">&#x27;内容管理&#x27;</span>, icon: <span class="hljs-string">&#x27;dashboard&#x27;</span>, affix: <span class="hljs-literal">true</span> &#125;<br>      &#125;,<br>      &#123;<br>        path: <span class="hljs-string">&#x27;detail&#x27;</span>,<br>        component: <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/views/myview/nrgl/detail&#x27;</span>),<br>        name: <span class="hljs-string">&#x27;nrgl&#x27;</span>,<br>        meta: &#123; title: <span class="hljs-string">&#x27;内容详情&#x27;</span>, icon: <span class="hljs-string">&#x27;dashboard&#x27;</span>, affix: <span class="hljs-literal">true</span> &#125;,<br>        hidden: <span class="hljs-literal">true</span><br>      &#125;,<br>    ]<br>  &#125;,<br><br><br><span class="hljs-regexp">//</span>详情页路由，面包屑无法追加问题<br>&#123;<br>    path: <span class="hljs-string">&#x27;/nrgl&#x27;</span>,<br>    component: Layout,<br>    redirect: <span class="hljs-string">&#x27;/nrgl/index&#x27;</span>,<br>    meta: &#123;<br>      title: <span class="hljs-string">&#x27;内容管理&#x27;</span>,<br>      icon: <span class="hljs-string">&#x27;el-icon-s-help&#x27;</span><br>    &#125;,<br>    children: [<br>      &#123;<br>        path: <span class="hljs-string">&#x27;index&#x27;</span>,<br>        component: <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/views/myview/nrgl/index&#x27;</span>),<br>        name: <span class="hljs-string">&#x27;index&#x27;</span>,<br>        meta: &#123; title: <span class="hljs-string">&#x27;内容列表&#x27;</span>, icon: <span class="hljs-string">&#x27;dashboard&#x27;</span> &#125;<br>      &#125;,<br>      &#123;<br>        path: <span class="hljs-string">&#x27;detail&#x27;</span>,<br>        component: <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/views/myview/nrgl/detail&#x27;</span>),<br>        name: <span class="hljs-string">&#x27;detail&#x27;</span>,<br>        meta: &#123; title: <span class="hljs-string">&#x27;内容详情&#x27;</span>, icon: <span class="hljs-string">&#x27;dashboard&#x27;</span>, noCache: <span class="hljs-literal">true</span>, activeMenu: <span class="hljs-string">&#x27;/nrgl/index&#x27;</span> &#125;,<br>        hidden: <span class="hljs-literal">true</span><br>      &#125;,<br>    ]<br>  &#125;,<br><span class="hljs-regexp">//</span>详情路由追加    meta: &#123; title: <span class="hljs-string">&#x27;内容详情&#x27;</span>, icon: <span class="hljs-string">&#x27;dashboard&#x27;</span>, noCache: <span class="hljs-literal">true</span>, activeMenu: <span class="hljs-string">&#x27;/nrgl/index&#x27;</span> &#125;,   路径定向到列表页<br>    &#123;<br>        path: <span class="hljs-string">&#x27;/jcxm&#x27;</span>,<br>        component: Layout,<br>        redirect: <span class="hljs-string">&#x27;/jcxm&#x27;</span>,<br>        children: [<br>            &#123;<br>                path: <span class="hljs-string">&#x27;jcxm&#x27;</span>,<br>                component: <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/myViews/jcxm&#x27;</span>),<br>                name: <span class="hljs-string">&#x27;jcxm&#x27;</span>,<br>                meta: &#123; title: <span class="hljs-string">&#x27;检测项目&#x27;</span>, icon: <span class="hljs-string">&#x27;dashboard&#x27;</span>, affix: <span class="hljs-literal">true</span> &#125;<br>            &#125;<br>        ]<br>    &#125;,<br>    &#123;<br>        path: <span class="hljs-string">&#x27;/htgl&#x27;</span>,<br>        component: Layout,<br>        redirect: <span class="hljs-string">&#x27;/htgl&#x27;</span>,<br>        children: [<br>            &#123;<br>                path: <span class="hljs-string">&#x27;htgl&#x27;</span>,<br>                component: <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/myViews/htgl&#x27;</span>),<br>                name: <span class="hljs-string">&#x27;htgl&#x27;</span>,<br>                meta: &#123; title: <span class="hljs-string">&#x27;合同管理&#x27;</span>, icon: <span class="hljs-string">&#x27;dashboard&#x27;</span>, affix: <span class="hljs-literal">true</span> &#125;<br>            &#125;<br>        ]<br>    &#125;,<br>]<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> componentsRouter<br></code></pre></td></tr></table></figure><h4 id="只显示父级"><a href="#只显示父级" class="headerlink" title="只显示父级"></a>只显示父级</h4><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">&#123;<br>    path: <span class="hljs-string">&#x27;/&#x27;</span>,<br>    component: Layout,<br>    redirect: <span class="hljs-string">&#x27;/homepage&#x27;</span>,<br>    children: [<br>        &#123;<br>            path: <span class="hljs-string">&#x27;homepage&#x27;</span>,<br>            component: <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/myViews/homepage/homepage&#x27;</span>),<br>            name: <span class="hljs-string">&#x27;homepage&#x27;</span>,<br>            meta: &#123; title: <span class="hljs-string">&#x27;首页&#x27;</span>, icon: <span class="hljs-string">&#x27;dashboard&#x27;</span>, affix: <span class="hljs-literal">true</span> &#125;<br>        &#125;<br>    ]<br>&#125;,<br></code></pre></td></tr></table></figure><h4 id="显示子集"><a href="#显示子集" class="headerlink" title="显示子集"></a>显示子集</h4><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xl">&#123;<br>    <span class="hljs-built_in">path</span>: <span class="hljs-string">&#x27;/xtgl&#x27;</span>,<br>    component: Layout,<br>    redirect: <span class="hljs-string">&#x27;/xtgl/bmgl&#x27;</span>,<br>    alwaysShow: <span class="hljs-literal">true</span>, <span class="hljs-comment">// will always show the root menu</span><br>    <span class="hljs-keyword">name</span>: <span class="hljs-string">&#x27;xtgl&#x27;</span>,<br>    meta: &#123;<br>        <span class="hljs-built_in">title</span>: <span class="hljs-string">&#x27;系统管理&#x27;</span>,<br>        <span class="hljs-comment">// icon: &#x27;lock&#x27;,</span><br>        icon: <span class="hljs-string">&#x27;icon-gengduo&#x27;</span>,<br>        roles: [<span class="hljs-string">&#x27;admin&#x27;</span>, <span class="hljs-string">&#x27;editor&#x27;</span>] <span class="hljs-comment">// you can set roles in root nav</span><br>    &#125;,<br>    children: [<br>        &#123;<br>            <span class="hljs-built_in">path</span>: <span class="hljs-string">&#x27;bmgl&#x27;</span>,<br>            component: () =&gt; <span class="hljs-keyword">import</span>(&#x27;@/myViews/xtgl/bmgl&#x27;),<br>            <span class="hljs-keyword">name</span>: <span class="hljs-string">&#x27;bmgl&#x27;</span>,<br>            meta: &#123;<br>                <span class="hljs-built_in">title</span>: <span class="hljs-string">&#x27;部门管理&#x27;</span>,<br>                roles: [<span class="hljs-string">&#x27;admin&#x27;</span>] <span class="hljs-comment">// or you can only set roles in sub nav</span><br>            &#125;<br>        &#125;,<br></code></pre></td></tr></table></figure><h4 id="详情页路由"><a href="#详情页路由" class="headerlink" title="详情页路由"></a>详情页路由</h4><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">&#123;<br>   path: <span class="hljs-string">&#x27;/nrgl&#x27;</span>,<br>   component: Layout,<br>   redirect: <span class="hljs-string">&#x27;/index&#x27;</span>,<br>   children: [<br>     &#123;<br>       path: <span class="hljs-string">&#x27;index&#x27;</span>,<br>       component: <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/views/myview/nrgl/index&#x27;</span>),<br>       name: <span class="hljs-string">&#x27;nrgl&#x27;</span>,<br>       meta: &#123; title: <span class="hljs-string">&#x27;内容管理&#x27;</span>, icon: <span class="hljs-string">&#x27;dashboard&#x27;</span>, affix: <span class="hljs-literal">true</span> &#125;<br>     &#125;,<br>     &#123;<br>       path: <span class="hljs-string">&#x27;detail&#x27;</span>,<br>       component: <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/views/myview/nrgl/detail&#x27;</span>),<br>       name: <span class="hljs-string">&#x27;nrgl&#x27;</span>,<br>       meta: &#123; title: <span class="hljs-string">&#x27;内容详情&#x27;</span>, icon: <span class="hljs-string">&#x27;dashboard&#x27;</span>, affix: <span class="hljs-literal">true</span> &#125;,<br>       hidden: <span class="hljs-literal">true</span><br>     &#125;,<br>   ]<br> &#125;,<br></code></pre></td></tr></table></figure><h4 id="详情页路由，面包屑无法追加问题"><a href="#详情页路由，面包屑无法追加问题" class="headerlink" title="详情页路由，面包屑无法追加问题"></a>详情页路由，面包屑无法追加问题</h4><p> noCache: true, activeMenu: ‘&#x2F;nrgl&#x2F;index’ },</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs xl"><span class="hljs-comment">//详情页路由，面包屑无法追加问题</span><br>&#123;<br>    <span class="hljs-built_in">path</span>: <span class="hljs-string">&#x27;/nrgl&#x27;</span>,<br>    component: Layout,<br>    redirect: <span class="hljs-string">&#x27;/nrgl/index&#x27;</span>,<br>    meta: &#123;<br>      <span class="hljs-built_in">title</span>: <span class="hljs-string">&#x27;内容管理&#x27;</span>,<br>      icon: <span class="hljs-string">&#x27;el-icon-s-help&#x27;</span><br>    &#125;,<br>    children: [<br>      &#123;<br>        <span class="hljs-built_in">path</span>: <span class="hljs-string">&#x27;index&#x27;</span>,<br>        component: () =&gt; <span class="hljs-keyword">import</span>(&#x27;@/views/myview/nrgl/index&#x27;),<br>        <span class="hljs-keyword">name</span>: <span class="hljs-string">&#x27;index&#x27;</span>,<br>        meta: &#123; <span class="hljs-built_in">title</span>: <span class="hljs-string">&#x27;内容列表&#x27;</span>, icon: <span class="hljs-string">&#x27;dashboard&#x27;</span> &#125;<br>      &#125;,<br>      &#123;<br>        <span class="hljs-built_in">path</span>: <span class="hljs-string">&#x27;detail&#x27;</span>,<br>        component: () =&gt; <span class="hljs-keyword">import</span>(&#x27;@/views/myview/nrgl/detail&#x27;),<br>        <span class="hljs-keyword">name</span>: <span class="hljs-string">&#x27;detail&#x27;</span>,<br>        meta: &#123; <span class="hljs-built_in">title</span>: <span class="hljs-string">&#x27;内容详情&#x27;</span>, icon: <span class="hljs-string">&#x27;dashboard&#x27;</span>, noCache: <span class="hljs-literal">true</span>, activeMenu: <span class="hljs-string">&#x27;/nrgl/index&#x27;</span> &#125;,<br>        hidden: <span class="hljs-literal">true</span><br>      &#125;,<br>    ]<br>  &#125;,<br><br></code></pre></td></tr></table></figure><p>&#x2F;&#x2F;详情路由追加    meta: { title: ‘内容详情’, icon: ‘dashboard’, noCache: true, activeMenu: ‘&#x2F;nrgl&#x2F;index’ },   路径定向到列表页</p><h4 id="路由详情页左侧没有高亮问题"><a href="#路由详情页左侧没有高亮问题" class="headerlink" title="路由详情页左侧没有高亮问题"></a>路由详情页左侧没有高亮问题</h4><p>详情页路由加上</p><p> meta: { title: ‘内容详情’, icon: ‘dashboard’, noCache: true, activeMenu: ‘&#x2F;nrgl&#x2F;index’ },</p><h3 id="左侧菜单图标自定义"><a href="#左侧菜单图标自定义" class="headerlink" title="左侧菜单图标自定义"></a>左侧菜单图标自定义</h3><p>1 去阿里图表库下载<br><a href="https://www.iconfont.cn/collections/index?spm=a313x.7781069.1998910419.42">https://www.iconfont.cn/collections/index?spm=a313x.7781069.1998910419.42</a></p><p>购物车 》 下载代码</p><p>2  src\assets   文件下新建   icon  文件夹   将下载好的文件放进去</p><p>src\assets\icon    demo_index.html。。。。等</p><p>3   src\main.js   文件下引入</p><p>import ‘@&#x2F;assets&#x2F;icon&#x2F;iconfont.css’</p><p>4  找到   Item.vue文件     src\layout\components\Sidebar\Item.vue</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">if</span> (icon) &#123;<br>      console.log(<span class="hljs-string">&#x27;icon&#x27;</span>,icon);<br>      <span class="hljs-keyword">if</span> (icon.<span class="hljs-keyword">includes</span>(<span class="hljs-string">&#x27;el-icon&#x27;</span>)) &#123;<br>        vnodes.<span class="hljs-keyword">push</span>(&lt;i <span class="hljs-keyword">class</span>=&#123;[icon, <span class="hljs-string">&#x27;sub-el-icon&#x27;</span>]&#125; /&gt;)<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (icon.<span class="hljs-keyword">includes</span>(<span class="hljs-string">&#x27;icon-&#x27;</span>)) &#123;<br>        vnodes.<span class="hljs-keyword">push</span>(&lt;i <span class="hljs-keyword">class</span>=&#123;[icon, <span class="hljs-string">&#x27;iconfont&#x27;</span>]&#125; style=<span class="hljs-string">&quot;margin-right:10px&quot;</span> /&gt;)<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        vnodes.<span class="hljs-keyword">push</span>(&lt;svg-icon icon-<span class="hljs-keyword">class</span>=&#123;icon&#125; /&gt;)<br>      &#125;<br>    &#125;<br><br><br></code></pre></td></tr></table></figure><p>加 下面的代码</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (icon.<span class="hljs-keyword">includes</span>(<span class="hljs-string">&#x27;icon-&#x27;</span>)) &#123;<br>        vnodes.<span class="hljs-keyword">push</span>(&lt;i <span class="hljs-keyword">class</span>=&#123;[icon, <span class="hljs-string">&#x27;iconfont&#x27;</span>]&#125; style=<span class="hljs-string">&quot;margin-right:10px&quot;</span> /&gt;)<br>      &#125;<br></code></pre></td></tr></table></figure><p>当  icon.includes(‘icon-‘  根据  路由配置里的</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus">meta: &#123;<br>            title: <span class="hljs-string">&#x27;系统管理&#x27;</span>,<br>            <span class="hljs-attribute">icon</span>: <span class="hljs-string">&#x27;icon-gengduo&#x27;</span>,<br>            roles: <span class="hljs-selector-attr">[<span class="hljs-string">&#x27;admin&#x27;</span>, <span class="hljs-string">&#x27;editor&#x27;</span>]</span> <span class="hljs-comment">// you can set roles in root nav</span><br>        &#125;,<br></code></pre></td></tr></table></figure><p>去判断<br>执行</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">vnodes<span class="hljs-selector-class">.push</span>(&lt;<span class="hljs-selector-tag">i</span> class=&#123;<span class="hljs-selector-attr">[icon, <span class="hljs-string">&#x27;iconfont&#x27;</span>]</span>&#125; style=<span class="hljs-string">&quot;margin-right:10px&quot;</span> /&gt;)<br></code></pre></td></tr></table></figure><p>5去配置路由   src\router\index.js   路由配置文件</p><h3 id="左侧菜单折叠后对不齐问题"><a href="#左侧菜单折叠后对不齐问题" class="headerlink" title="左侧菜单折叠后对不齐问题"></a>左侧菜单折叠后对不齐问题</h3><p>修改这个文件    src\styles\sidebar.scss   </p><p>加这么一个样式</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-id">#app</span> <span class="hljs-selector-class">.hideSidebar</span> <span class="hljs-selector-class">.el-scrollbar__view</span> .iconfont&#123;<br><span class="hljs-attribute">margin-right</span>: <span class="hljs-number">16px</span> <span class="hljs-meta">!important</span>;<br>        <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">20px</span> <span class="hljs-meta">!important</span>;<br><br>&#125;  <br><br></code></pre></td></tr></table></figure><p>后来发现在这里控制    加入新的图标类名  和样式   原来的是.svg-icon  加新图标后   类名变了  所以之前的样式不生效了</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.iconfont</span> &#123;<br>  <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">16px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">src</span>\styles\sidebar<span class="hljs-selector-class">.scss</span><br><br>  <span class="hljs-selector-class">.hideSidebar</span> &#123;<br>    <span class="hljs-selector-class">.sidebar-container</span> &#123;<br>      <span class="hljs-attribute">width</span>: <span class="hljs-number">54px</span> <span class="hljs-meta">!important</span>;<br>    &#125;<br><br>    <span class="hljs-selector-class">.main-container</span> &#123;<br>      <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">54px</span>;<br>    &#125;<br><br>    <span class="hljs-selector-class">.submenu-title-noDropdown</span> &#123;<br>      <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-meta">!important</span>;<br>      <span class="hljs-attribute">position</span>: relative;<br><br>      <span class="hljs-selector-class">.el-tooltip</span> &#123;<br>        <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-meta">!important</span>;<br>        <span class="hljs-attribute">display</span>: flex <span class="hljs-meta">!important</span>;<br>        <span class="hljs-attribute">justify-content</span>: center <span class="hljs-meta">!important</span>;<br><br>        <span class="hljs-selector-class">.iconfont</span> &#123;<br>          <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">16px</span>;<br>        &#125;<br>        <span class="hljs-selector-class">.svg-icon</span> &#123;<br>          <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">20px</span>;<br>        &#125;<br><br></code></pre></td></tr></table></figure><h3 id="修改框架布局"><a href="#修改框架布局" class="headerlink" title="修改框架布局"></a>修改框架布局</h3><p>找到这个文件   src\layout\index.vue</p><p>进行布局 修改</p><h3 id="样式修改"><a href="#样式修改" class="headerlink" title="样式修改"></a>样式修改</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;scss&quot;</span>&gt;</span><span class="language-css"></span><br><span class="language-css">　　<span class="hljs-selector-class">.form</span> &#123;</span><br><span class="language-css">　　　　<span class="hljs-attribute">background-color</span>: <span class="hljs-number">#fff</span>;</span><br><span class="language-css">　　　　/deep/ <span class="hljs-selector-class">.list</span>&#123;</span><br><span class="language-css">　　　　　　<span class="hljs-attribute">font-size</span>: <span class="hljs-number">18px</span>;</span><br><span class="language-css">　　　　&#125;</span><br><span class="language-css">　　&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p>scss文件中使用深度选择器&#x2F;deep&#x2F;报错 Expected selector解决方法<br>记得sass中使用&#x2F;deep&#x2F;没问题，但是在scss中使用&#x2F;deep&#x2F;报错了。<br>找到vue官网关于深度选择器是这样说的：</p><p>有些像 Sass 之类的预处理器无法正确解析 &gt;&gt;&gt;。这种情况下你可以使用 &#x2F;deep&#x2F; 或 ::v-deep 操作符取而代之——两者都是 &gt;&gt;&gt; 的别名，同样可以正常工作。</p><p>于是用 ::v-deep 就可以了</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">::v-deep .el-checkbox__input&#123;<br>  <span class="hljs-attribute">display</span>: none;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Cookies-存储-配合-vuex"><a href="#Cookies-存储-配合-vuex" class="headerlink" title="Cookies 存储 配合  vuex"></a>Cookies 存储 配合  vuex</h3><p>src\utils\auth.js    文件</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs ada">import Cookies from <span class="hljs-symbol">&#x27;js</span>-cookie&#x27;<br><br>const TokenKey = <span class="hljs-symbol">&#x27;Admin</span>-Token&#x27;<br><br>export <span class="hljs-keyword">function</span> <span class="hljs-title">getToken</span>() &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-type">Cookies.get(TokenKey)</span><br>&#125;<br><br>export <span class="hljs-keyword">function</span> <span class="hljs-title">setToken</span>(token) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-type">Cookies.set(TokenKey,</span> token)<br>&#125;<br><br>export <span class="hljs-keyword">function</span> <span class="hljs-title">removeToken</span>() &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-type">Cookies.remove(TokenKey)</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p>  src\permission.js  文件   使用 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; getToken &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/auth&#x27;</span> <span class="hljs-comment">// get token from cookie</span><br><br><br>  <span class="hljs-keyword">const</span> hasToken = <span class="hljs-title function_">getToken</span>()<br></code></pre></td></tr></table></figure><p>src\store\modules\user.js  vuex文件</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">import</span> &#123; <span class="hljs-keyword">login</span>, logout, getInfo &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/api/user&#x27;</span><br><span class="hljs-keyword">import</span> &#123; getToken, setToken, removeToken, getMenuEd &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/auth&#x27;</span><br><span class="hljs-keyword">import</span> router, &#123; resetRouter &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/router&#x27;</span><br><br>const state = &#123;<br>  token: getToken(),<br>  <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>  avatar: <span class="hljs-string">&#x27;&#x27;</span>,<br>  introduction: <span class="hljs-string">&#x27;&#x27;</span>,<br>  roles: [],<br>  xtMenuEd: <span class="hljs-string">&#x27;xtsz&#x27;</span>,<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="跨域代理配置"><a href="#跨域代理配置" class="headerlink" title="跨域代理配置"></a>跨域代理配置</h3><p>vue.config.js</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">&#x27;<span class="hljs-string">/api</span>&#x27;: &#123; <span class="hljs-string">//</span> 拦截以 <span class="hljs-string">/api</span> 开头的url接口<br>     <span class="hljs-string">//</span> target: &#x27;http:<span class="hljs-string">//192.168.1.22</span><span class="hljs-function">:8088</span>/meeting&#x27;,<span class="hljs-string">//</span>代理的地址和端口 志阳<br>     target: process.env.VUE_APP_BASE_FILE_API,<span class="hljs-string">//</span>冀川<br></code></pre></td></tr></table></figure><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">devServer: &#123;<br>    <span class="hljs-string">//</span> port: port,<br>    <span class="hljs-string">//</span> open: <span class="hljs-literal">true</span>,<br>    <span class="hljs-string">//</span> overlay: &#123;<br>    <span class="hljs-string">//</span>   warnings: <span class="hljs-literal">false</span>,<br>    <span class="hljs-string">//</span>   errors: <span class="hljs-literal">true</span><br>    <span class="hljs-string">//</span> &#125;,<br>    <span class="hljs-string">//</span> before: require<span class="hljs-params">(&#x27;./mock/mock-server.js&#x27;)</span><br>    <span class="hljs-string">//</span> 新。。。。。。。。。。。。。。。。。。。<br>    host: &#x27;0.0.0.0&#x27;,<span class="hljs-string">//</span>本地ip0.0.0.0&#x27;==192.168.1.18（我的）<br>    port: 3001,<span class="hljs-string">//</span>本地端口<br>    https: <span class="hljs-literal">false</span>, <span class="hljs-string">//</span>是否启用HTTPS协议<br>    <span class="hljs-string">//</span> <span class="hljs-string">//</span> hot: <span class="hljs-literal">true</span>, <span class="hljs-string">//</span>是否开启热加载<br>    open: <span class="hljs-literal">true</span>, <span class="hljs-string">//</span>配置自动启动浏览器<br>    proxy: &#123; <span class="hljs-string">//</span>目的是解决跨域，若测试环境不需要跨域，则不需要进行该配置<br>      &#x27;<span class="hljs-string">/api</span>&#x27;: &#123; <span class="hljs-string">//</span> 拦截以 <span class="hljs-string">/api</span> 开头的url接口<br>        <span class="hljs-string">//</span> target: &#x27;http:<span class="hljs-string">//192.168.1.22</span><span class="hljs-function">:8088</span>/meeting&#x27;,<span class="hljs-string">//</span>代理的地址和端口 志阳<br>        target: process.env.VUE_APP_BASE_FILE_API,<span class="hljs-string">//</span>冀川<br>        changeOrigin: <span class="hljs-literal">true</span>, <span class="hljs-string">//</span>是否跨域<br>        ws: <span class="hljs-literal">true</span>, <span class="hljs-string">//</span>如果要代理 websockets，配置这个参数<br>        secure: <span class="hljs-literal">false</span>, <span class="hljs-string">//</span> 如果是https接口，需要配置这个参数<br>        <span class="hljs-string">//</span> 标识替换<br>        <span class="hljs-string">//</span> 原请求地址为 <span class="hljs-string">/api/getData</span> 将&#x27;<span class="hljs-string">/api</span>&#x27;替换&#x27;&#x27;时，<br>        <span class="hljs-string">//</span> 代理后的请求地址为： http:<span class="hljs-string">//xxx.xxx.xxx/getData</span><br>        <span class="hljs-string">//</span> 若替换为&#x27;<span class="hljs-string">/other</span>&#x27;,则代理后的请求地址为 http:<span class="hljs-string">//xxx.xxx.xxx/other/getData</span><br>        <span class="hljs-string">//</span> rewrite: <span class="hljs-params">(path)</span> =&gt; path.replace<span class="hljs-params">(/^\/api/, &#x27;&#x27;)</span>,<br>        pathRewrite: &#123;<br>          <span class="hljs-string">//</span>重写接口 后台接口指向不统一  所以指向所有&#x27;&#x27;<br>          &#x27;^<span class="hljs-string">/api</span>&#x27;: &#x27;&#x27;<br>        &#125;<br>      &#125;,<br>    &#125;,<br>  &#125;,<br><br></code></pre></td></tr></table></figure><h3 id="环境变量配置"><a href="#环境变量配置" class="headerlink" title="环境变量配置"></a>环境变量配置</h3><p>.env.development</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># just a flag</span><br><span class="hljs-attr">ENV</span> = <span class="hljs-string">&#x27;development&#x27;</span><br><br><span class="hljs-attr">VUE_APP_BASE_API</span> = <span class="hljs-string">&#x27;/api&#x27;</span><br><span class="hljs-attr">VUE_APP_BASE_FILE_API</span> = <span class="hljs-string">&#x27;http://192.168.1.103:9999/&#x27;</span><br><br><br></code></pre></td></tr></table></figure><p>axios   请求  配置<br>src\utils\request.js</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><br>const service = axios<span class="hljs-selector-class">.create</span>(&#123;<br>  baseURL: process<span class="hljs-selector-class">.env</span><span class="hljs-selector-class">.VUE_APP_BASE_API</span>, <span class="hljs-comment">// url = base url + request url</span><br>  <span class="hljs-comment">// withCredentials: true, // send cookies when cross-domain requests</span><br>  timeout: <span class="hljs-number">5000</span> <span class="hljs-comment">// request timeout</span><br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="图片地址代理"><a href="#图片地址代理" class="headerlink" title="图片地址代理"></a>图片地址代理</h3><p>src\utils\request.js</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs smali">// create an axios<span class="hljs-built_in"> instance</span><br><span class="hljs-built_in"></span>const service = axios.create(&#123;<br>  baseURL: process.env.VUE_APP_BASE_API, // url = base url + request url<br>  // baseURL: process.env.VUE_APP_BASE_API, // url = base url + request url<br>  // withCredentials: true, // send cookies when cross-domain requests<br>  timeout: 5000 // request timeout<br>&#125;)<br><br></code></pre></td></tr></table></figure><p> <strong>process.env.VUE_APP_BASE_API</strong><br><strong>本地.env.development没有的时候是空</strong></p><p>vue.config.js</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs awk">proxy: &#123;<br>      <span class="hljs-regexp">//</span> 如果地址以 /api开头 就会请求到目标 ip<br>      <span class="hljs-string">&quot;/pc&quot;</span>: &#123;<br>        <span class="hljs-regexp">//</span> 目标代理服务器地址<br>        target: process.env.VUE_APP_BASE_API2,<span class="hljs-regexp">//</span>https:<span class="hljs-regexp">//</span>huzhou-safecode-nx.spacecig.com:<span class="hljs-number">8443</span><br>        <span class="hljs-regexp">//</span> 开启代理，本地创建一个虚拟服务器 允许跨域<br>        changeOrigin: true,<br>        <span class="hljs-regexp">//</span> 如果要代理 websockets，配置这个参数<br>        ws: true,<br>        <span class="hljs-regexp">//</span> 如果是https接口，需要配置这个参数<br>        secure: true,<br>        <span class="hljs-regexp">//</span> 标识替换<br>        <span class="hljs-regexp">//</span> 原请求地址为 <span class="hljs-regexp">/api/g</span>etData 将<span class="hljs-string">&#x27;/api&#x27;</span>替换<span class="hljs-string">&#x27;&#x27;</span>时，<br>        <span class="hljs-regexp">//</span> 代理后的请求地址为： http:<span class="hljs-regexp">//</span>xxx.xxx.xxx/getData<br>        <span class="hljs-regexp">//</span> 若替换为<span class="hljs-string">&#x27;/other&#x27;</span>,则代理后的请求地址为 http:<span class="hljs-regexp">//</span>xxx.xxx.xxx<span class="hljs-regexp">/other/g</span>etData <br>        <span class="hljs-regexp">//</span> 接口本身有api就注释掉<br>        pathRewrite: &#123;<br>          <span class="hljs-regexp">//</span>重写接口 后台接口指向不统一  所以指向所有<span class="hljs-string">&#x27;&#x27;</span><br>          <span class="hljs-string">&#x27;^/pc&#x27;</span>: <span class="hljs-string">&#x27;/pc&#x27;</span><br>        &#125;<br>      &#125;,<br>      <span class="hljs-string">&quot;/mini&quot;</span>: &#123;<br>        <span class="hljs-regexp">//</span> 目标代理服务器地址<br>        target: process.env.VUE_APP_BASE_API2,<span class="hljs-regexp">//</span>https:<span class="hljs-regexp">//</span>huzhou-safecode-nx.spacecig.com:<span class="hljs-number">8443</span><br>        <span class="hljs-regexp">//</span> 开启代理，本地创建一个虚拟服务器 允许跨域<br>        changeOrigin: true,<br>        <span class="hljs-regexp">//</span> 如果要代理 websockets，配置这个参数<br>        ws: true,<br>        <span class="hljs-regexp">//</span> 如果是https接口，需要配置这个参数<br>        secure: true,<br>        <span class="hljs-regexp">//</span> 标识替换<br>        <span class="hljs-regexp">//</span> 原请求地址为 <span class="hljs-regexp">/api/g</span>etData 将<span class="hljs-string">&#x27;/api&#x27;</span>替换<span class="hljs-string">&#x27;&#x27;</span>时，<br>        <span class="hljs-regexp">//</span> 代理后的请求地址为： http:<span class="hljs-regexp">//</span>xxx.xxx.xxx/getData<br>        <span class="hljs-regexp">//</span> 若替换为<span class="hljs-string">&#x27;/other&#x27;</span>,则代理后的请求地址为 http:<span class="hljs-regexp">//</span>xxx.xxx.xxx<span class="hljs-regexp">/other/g</span>etData <br>        <span class="hljs-regexp">//</span> 接口本身有api就注释掉<br>        pathRewrite: &#123;<br>          <span class="hljs-regexp">//</span>重写接口 后台接口指向不统一  所以指向所有<span class="hljs-string">&#x27;&#x27;</span><br>          <span class="hljs-string">&#x27;^/mini&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span><br>        &#125;<br>      &#125;,<br>    &#125;<br><br></code></pre></td></tr></table></figure><p>.env.production</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># just a flag</span><br><span class="hljs-attr">ENV</span> = <span class="hljs-string">&#x27;production&#x27;</span><br><br><span class="hljs-comment"># base api</span><br><span class="hljs-comment"># VUE_APP_BASE_API = &#x27;/prod-api&#x27;</span><br><span class="hljs-attr">VUE_APP_BASE_API</span> = <span class="hljs-string">&#x27;/mini&#x27;</span><br><span class="hljs-attr">VUE_APP_BASE_API2</span> = <span class="hljs-string">&#x27;https://wsq.tjxwyun.com/mini&#x27;</span><br></code></pre></td></tr></table></figure><p>.env.development</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><br><span class="hljs-meta"># just a flag</span><br>ENV = <span class="hljs-string">&#x27;development&#x27;</span><br><br><span class="hljs-meta"># base api</span><br><span class="hljs-meta"># VUE_APP_BASE_API = <span class="hljs-string">&#x27;/dev-api&#x27;</span></span><br><span class="hljs-meta"># VUE_APP_BASE_API = <span class="hljs-string">&#x27;/mini&#x27;</span></span><br>VUE_APP_BASE_API2 = <span class="hljs-string">&#x27;https://wsq.tjxwyun.com/mini&#x27;</span><br><span class="hljs-meta"># VUE_APP_BASE_API2 = <span class="hljs-string">&#x27;http://192.168.1.39:9095/mini&#x27;</span></span><br><span class="hljs-meta"># VUE_APP_BASE_API2 = <span class="hljs-string">&#x27;http://192.168.1.22:9095/mini&#x27;</span></span><br><br></code></pre></td></tr></table></figure><p>vue文件   <strong>&#96;&#x2F;mini</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;img :<span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;`/mini<span class="hljs-variable">$&#123;item.cusHead&#125;</span>`&quot;</span> <span class="hljs-attribute">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;<br></code></pre></td></tr></table></figure><p>知识点vue.config.js  只代理本地地址生效，线上地址不生效（需要后端代理</p><h3 id="每个请求设置token"><a href="#每个请求设置token" class="headerlink" title="每个请求设置token"></a>每个请求设置token</h3><p> config.headers[‘Token’] &#x3D; getToken()</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs stata">src\utils\request.js<br><br><br><br>service.interceptors.request.<span class="hljs-keyword">use</span>(<br>  config =&gt; &#123;<br>    <span class="hljs-comment">// do something before request is sent</span><br><br>    <span class="hljs-keyword">if</span> (store.getters.<span class="hljs-keyword">token</span>) &#123;<br>      <span class="hljs-comment">// let each request carry token</span><br>      <span class="hljs-comment">// [&#x27;X-Token&#x27;] is a custom headers key</span><br>      <span class="hljs-comment">// please modify it according to the actual situation</span><br>      <span class="hljs-comment">// config.headers[&#x27;X-Token&#x27;] = getToken()</span><br>      config.headers[&#x27;<span class="hljs-keyword">Token</span>&#x27;] = <span class="hljs-keyword">getToken</span>()<br>    &#125;<br>    <span class="hljs-keyword">return</span> config<br>  &#125;,<br>  <span class="hljs-keyword">error</span> =&gt; &#123;<br>    <span class="hljs-comment">// do something with request error</span><br>    console.<span class="hljs-built_in">log</span>(<span class="hljs-keyword">error</span>) <span class="hljs-comment">// for debug</span><br>    <span class="hljs-keyword">return</span> Promise.reject(<span class="hljs-keyword">error</span>)<br>  &#125;<br>)<br></code></pre></td></tr></table></figure><h3 id="git-post请求"><a href="#git-post请求" class="headerlink" title="git post请求"></a>git post请求</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php">import request <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/request&#x27;</span><br><br><br><span class="hljs-comment">// 登陆</span><br>export <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">login</span>(<span class="hljs-params">data</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">request</span>(&#123;<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;zljc-auth/login&#x27;</span>,<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;post&#x27;</span>,<br>    data<br>  &#125;)<br>&#125;<br><span class="hljs-comment">// 查询系统路由权限</span><br>export <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getuser</span>(<span class="hljs-params">data</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">request</span>(&#123;<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/zljc-system/menu/user&#x27;</span>,<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;get&#x27;</span>,<br>    <span class="hljs-attr">params</span>: data<br>  &#125;)<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="路由meta-操作"><a href="#路由meta-操作" class="headerlink" title="路由meta  操作"></a>路由meta  操作</h3><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-built_in">this</span>.<span class="hljs-variable">$route</span>.meta<br></code></pre></td></tr></table></figure><h3 id="菜单三级子集路由嵌套"><a href="#菜单三级子集路由嵌套" class="headerlink" title="菜单三级子集路由嵌套"></a>菜单三级子集路由嵌套</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">要再第二级  加   <span class="hljs-keyword">index</span>.vue<br><br><br>&lt;<span class="hljs-keyword">template</span>&gt;<br>  &lt;router-<span class="hljs-keyword">view</span> /&gt;<br>&lt;/<span class="hljs-keyword">template</span>&gt;<br><br></code></pre></td></tr></table></figure><p>修改hmlt页面标题和图标</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs ruby">src\settings.js<br><br><span class="hljs-keyword">module</span>.exports = &#123;<br>  <span class="hljs-symbol">title:</span> <span class="hljs-string">&#x27;微社区后台管理系统&#x27;</span>,<br>  <span class="hljs-regexp">//</span> <span class="hljs-symbol">title:</span> <span class="hljs-string">&#x27;Vue Element Admin&#x27;</span>,<br><br><br><br>图标<br><span class="hljs-keyword">public</span>\favicon.ico<br><br>把图片放这里  <span class="hljs-keyword">public</span>  文件夹下<br><br><br><br><span class="hljs-keyword">public</span>\index.html<br><br><br>修改图片名称<br>&lt;link rel=<span class="hljs-string">&quot;icon&quot;</span> href=<span class="hljs-string">&quot;&lt;%= BASE_URL %&gt;favicon.ico&quot;</span>&gt;<br></code></pre></td></tr></table></figure><h3 id="el-input"><a href="#el-input" class="headerlink" title="el-input"></a>el-input</h3><p>input  记忆连锁导致背景色bug</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css">::v-deep .el-input input:-webkit-autofill&#123;<br>      webkit-<span class="hljs-attribute">box-shadow</span>:none;<br>      <span class="hljs-attribute">box-shadow</span>:none <span class="hljs-meta">!important</span>;<br>//文字颜色<br>      -webkit-text-fill-<span class="hljs-attribute">color</span>:<span class="hljs-number">#000</span> <span class="hljs-meta">!important</span>;<br>      //背景色<br>    -webkit-<span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0px</span> <span class="hljs-number">1000px</span> <span class="hljs-number">#fff</span> inset <span class="hljs-meta">!important</span>;<br>      <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#fff</span> <span class="hljs-meta">!important</span>;<br>      <br>    &#125;<br></code></pre></td></tr></table></figure><p>只能输入数字并限制输入范围</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;el-input <span class="hljs-attribute">onkeyup</span>=<span class="hljs-string">&quot;value=value.replace(/[^\d||/.]/g,&#x27;&#x27;)&quot;</span><br>                            <span class="hljs-attribute">oninput</span>=<span class="hljs-string">&quot;if(value)&#123;value=value.replace(/[^\d]/g,&#x27;&#x27;)&#125; if(value&lt;=0)&#123;value= &#x27;&#x27;&#125; if(value&gt;60)&#123;value=60&#125;&quot;</span><br>                             <span class="hljs-attribute">v-model</span>=<span class="hljs-string">&quot;input&quot;</span>  <span class="hljs-attribute">type</span>=<span class="hljs-string">&quot;number&quot;</span> <span class="hljs-attribute">placeholder</span>=<span class="hljs-string">&quot;请输入内容&quot;</span>&gt;&lt;/el-input&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>element-Ui</category>
      
    </categories>
    
    
    <tags>
      
      <tag>element-Ui</tag>
      
      <tag>vue-element-admin</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>canvas画线</title>
    <link href="/2024/01/09/canvas%E7%94%BB%E7%BA%BF/"/>
    <url>/2024/01/09/canvas%E7%94%BB%E7%BA%BF/</url>
    
    <content type="html"><![CDATA[<p>参考地址  <a href="https://segmentfault.com/q/1010000018554255">https://segmentfault.com/q/1010000018554255</a></p><h2 id="自写案例"><a href="#自写案例" class="headerlink" title="自写案例"></a>自写案例</h2><h3 id="画线-移入线条路径内高亮显示"><a href="#画线-移入线条路径内高亮显示" class="headerlink" title="画线 移入线条路径内高亮显示"></a>画线 移入线条路径内高亮显示</h3><p>html</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">&lt;canvas <span class="hljs-keyword">class</span>=&quot;<span class="hljs-symbol">canvasbox</span>&quot; <span class="hljs-symbol">id</span>=&quot;<span class="hljs-symbol">canvas</span>&quot;&gt;&lt;/<span class="hljs-symbol">canvas</span>&gt;<br></code></pre></td></tr></table></figure><p>js</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mel">const <span class="hljs-keyword">canvas</span> = document.getElementById(<span class="hljs-string">&#x27;canvas&#x27;</span>)<br>     const ctx = <span class="hljs-keyword">canvas</span>.getContext(<span class="hljs-string">&#x27;2d&#x27;</span>)<br>     <span class="hljs-keyword">canvas</span>.style.width = <span class="hljs-number">1455</span> + <span class="hljs-string">&#x27;px&#x27;</span>;<br>     <span class="hljs-keyword">canvas</span>.style.height = <span class="hljs-number">300</span> + <span class="hljs-string">&#x27;px&#x27;</span>;<br>     <span class="hljs-keyword">canvas</span>.width = <span class="hljs-number">1455</span>;<br>     <span class="hljs-keyword">canvas</span>.height = <span class="hljs-number">300</span>;<br></code></pre></td></tr></table></figure><h3 id="模糊问题-把长宽高-写到-上面-不要写css-里"><a href="#模糊问题-把长宽高-写到-上面-不要写css-里" class="headerlink" title="模糊问题  把长宽高  写到 上面  不要写css 里"></a>模糊问题  把长宽高  写到 上面  不要写css 里</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> ctx.beginPath()<span class="hljs-regexp">//</span>开始画线<br>     <span class="hljs-regexp">//</span> ctx.strokeStyle = <span class="hljs-string">&#x27;green&#x27;</span>   <span class="hljs-regexp">//</span>颜色<br>     <span class="hljs-regexp">//</span> ctx.lineWidth = <span class="hljs-number">1</span><span class="hljs-regexp">//</span>宽度<br>     <span class="hljs-regexp">//</span> ctx.moveTo(<span class="hljs-number">168</span>, <span class="hljs-number">0</span>)<span class="hljs-regexp">//</span>起点坐标<br>     <span class="hljs-regexp">//</span> ctx.lineTo(<span class="hljs-number">615</span>, <span class="hljs-number">100</span>)<span class="hljs-regexp">//</span>终点坐标<br><span class="hljs-regexp">//</span>ctx.setLineDash(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>);        <span class="hljs-regexp">//</span>虚线  步长  （线段长  ，  间距<br>     <span class="hljs-regexp">//</span> ctx.stroke()<span class="hljs-regexp">//</span>结束<br><br>     <span class="hljs-regexp">//</span> ctx.beginPath()<br>     <span class="hljs-regexp">//</span> ctx.strokeStyle = <span class="hljs-string">&#x27;green&#x27;</span><br>     <span class="hljs-regexp">//</span> ctx.lineWidth = <span class="hljs-number">1</span><br>     <span class="hljs-regexp">//</span> ctx.moveTo(<span class="hljs-number">168</span>, <span class="hljs-number">0</span>)<br>     <span class="hljs-regexp">//</span> ctx.lineTo(<span class="hljs-number">840</span>, <span class="hljs-number">100</span>)<br>     <span class="hljs-regexp">//</span> ctx.stroke()<br><br>     <span class="hljs-regexp">//</span> ctx.beginPath()<br>     <span class="hljs-regexp">//</span> ctx.strokeStyle = <span class="hljs-string">&#x27;green&#x27;</span><br>     <span class="hljs-regexp">//</span> ctx.lineWidth = <span class="hljs-number">1</span><br>     <span class="hljs-regexp">//</span> ctx.moveTo(<span class="hljs-number">168</span>, <span class="hljs-number">0</span>)<br>     <span class="hljs-regexp">//</span> ctx.lineTo(<span class="hljs-number">1065</span>, <span class="hljs-number">100</span>)<br>     <span class="hljs-regexp">//</span> ctx.stroke()<br></code></pre></td></tr></table></figure><h3 id="坐标获取可用"><a href="#坐标获取可用" class="headerlink" title="坐标获取可用"></a>坐标获取可用</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">&lt;canvas <span class="hljs-keyword">class</span>=&quot;<span class="hljs-symbol">canvasbox</span>&quot; <span class="hljs-symbol">id</span>=&quot;<span class="hljs-symbol">canvas</span>&quot; @<span class="hljs-symbol">mousemove</span>=&quot;<span class="hljs-symbol">mousemoveFN</span>&quot;&gt;&lt;/<span class="hljs-symbol">canvas</span>&gt;<br> <span class="hljs-symbol">mousemoveFN</span>(<span class="hljs-symbol">event</span>) &#123;<br>      <span class="hljs-comment">// console.log(&#x27;event&#x27;, event);</span><br>      <span class="hljs-comment">// console.log(&#x27;x&#x27;, event.offsetX)</span><br>      <span class="hljs-comment">// console.log(&#x27;y&#x27;, event.offsetY)</span><br>    &#125;,<br><br></code></pre></td></tr></table></figure><h3 id="选中高亮核心属性"><a href="#选中高亮核心属性" class="headerlink" title="选中高亮核心属性"></a>选中高亮核心属性</h3><p> ctx.isPointInStroke（x,y）<br>&#x2F;&#x2F; 测试后发现这个方法不适合，这个适用于图形范围<br>        &#x2F;&#x2F; if (ctx.isPointInPath(event.offsetX, event.offsetY)) {<br>        &#x2F;&#x2F;   console.log(‘在区域上。。。。。。。。。。。’);<br>        &#x2F;&#x2F; }<br>        &#x2F;&#x2F; 测试后发现这个方法可以（主要用于边缘线<br>        if (ctx.isPointInStroke(event.offsetX, event.offsetY)) {<br>          console.log(‘在綫上。。。。。。。。。。。’);<br>          ctx.stroke();<br>        };<br>isPointInStroke   只能监听到最后一次画线的路径 所以要循环渲染</p><p>canvas  添加监听属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs javascript">canvas.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;mousemove&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">clickFN</span>()<br><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(event.<span class="hljs-property">offsetX</span>, event.<span class="hljs-property">offsetY</span>);<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> k <span class="hljs-keyword">in</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">lineData</span>) &#123;<br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">lineData</span>[k].<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">row, index</span>) =&gt;</span> &#123;<br><br><br>            <br>            <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">drawWire</span>(ctx, row)<br>            <span class="hljs-keyword">if</span> (ctx.<span class="hljs-title function_">isPointInStroke</span>(event.<span class="hljs-property">offsetX</span>, event.<span class="hljs-property">offsetY</span>)) &#123;<br>              <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;在綫上。。。。。。。。。。。&#x27;</span>, <span class="hljs-string">`k:<span class="hljs-subst">$&#123;k&#125;</span>`</span>, <span class="hljs-string">`index:<span class="hljs-subst">$&#123;index&#125;</span>`</span>);<br>              ctx.<span class="hljs-title function_">stroke</span>();<br>              <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1111111111111</span>,<span class="hljs-variable language_">this</span>.<span class="hljs-property">lineData</span>[k][index]);<br>              <span class="hljs-variable language_">this</span>.<span class="hljs-property">lineData</span>[k][index].<span class="hljs-property">color</span> = <span class="hljs-string">&#x27;red&#x27;</span><br>              <span class="hljs-variable language_">this</span>.<span class="hljs-property">lineData</span>[k][index].<span class="hljs-property">lineWidth</span> = <span class="hljs-number">3</span><br>              <span class="hljs-variable language_">this</span>.<span class="hljs-property">lineData</span>[k][index].<span class="hljs-property">setLineDash</span> = [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>],<br>              <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">drawWire</span>(ctx, row)<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>              <span class="hljs-variable language_">this</span>.<span class="hljs-property">lineData</span>[k][index].<span class="hljs-property">color</span> = <span class="hljs-string">&#x27;green&#x27;</span><br>              <span class="hljs-variable language_">this</span>.<span class="hljs-property">lineData</span>[k][index].<span class="hljs-property">lineWidth</span> = <span class="hljs-number">1</span><br>              <span class="hljs-variable language_">this</span>.<span class="hljs-property">lineData</span>[k][index].<span class="hljs-property">setLineDash</span> = [<span class="hljs-number">4</span>, <span class="hljs-number">2</span>],<br>              <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">drawWire</span>(ctx, row)<br>            &#125;<br>          &#125;);<br>        &#125;<br><br>        <span class="hljs-comment">// 测试后发现这个方法不适合，这个适用于图形范围</span><br>        <span class="hljs-comment">// if (ctx.isPointInPath(event.offsetX, event.offsetY)) &#123;</span><br>        <span class="hljs-comment">//   console.log(&#x27;在区域上。。。。。。。。。。。&#x27;);</span><br>        <span class="hljs-comment">// &#125;</span><br>        <span class="hljs-comment">// 测试后发现这个方法可以（主要用于边缘线</span><br>        <span class="hljs-keyword">if</span> (ctx.<span class="hljs-title function_">isPointInStroke</span>(event.<span class="hljs-property">offsetX</span>, event.<span class="hljs-property">offsetY</span>)) &#123;<br>          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;在綫上。。。。。。。。。。。&#x27;</span>);<br>          ctx.<span class="hljs-title function_">stroke</span>();<br>        &#125;;<br><br>      &#125;)<br><br>vanvas 重画重叠问题   清除canvas 画布<br>ctx.<span class="hljs-title function_">save</span>();<br>ctx.<span class="hljs-title function_">clearRect</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, canvas.<span class="hljs-property">width</span>, canvas.<span class="hljs-property">height</span>);<br>ctx.<span class="hljs-title function_">restore</span>();<br><br> <span class="hljs-comment">//根据传进来的坐标点数组画出一条线</span><br>    <span class="hljs-title function_">drawWire</span>(<span class="hljs-params">ctx, row</span>) &#123;<br>      ctx.<span class="hljs-title function_">beginPath</span>()<br>      ctx.<span class="hljs-property">strokeStyle</span> = row.<span class="hljs-property">color</span><br>      ctx.<span class="hljs-property">lineWidth</span> = row.<span class="hljs-property">lineWidth</span><br>      ctx.<span class="hljs-title function_">setLineDash</span>(row.<span class="hljs-property">setLineDash</span>);<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(row.<span class="hljs-property">moveTo</span>.<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;,&#x27;</span>));<br>      ctx.<span class="hljs-title function_">moveTo</span>(<span class="hljs-title class_">Number</span>(row.<span class="hljs-property">moveTo</span>[<span class="hljs-number">0</span>]), <span class="hljs-title class_">Number</span>(row.<span class="hljs-property">moveTo</span>[<span class="hljs-number">1</span>]))<br>      ctx.<span class="hljs-title function_">lineTo</span>(<span class="hljs-title class_">Number</span>(row.<span class="hljs-property">lineTo</span>[<span class="hljs-number">0</span>]), <span class="hljs-title class_">Number</span>(row.<span class="hljs-property">lineTo</span>[<span class="hljs-number">1</span>]))<br>      ctx.<span class="hljs-title function_">stroke</span>()<br>    &#125;,<br></code></pre></td></tr></table></figure><h3 id="测试数据"><a href="#测试数据" class="headerlink" title="测试数据"></a>测试数据</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">lineData:</span> &#123;<br>        <span class="hljs-attr">CPU0:</span> [<br>          &#123;<br>            <span class="hljs-attr">color:</span> <span class="hljs-string">&#x27;green&#x27;</span>,<br>            <span class="hljs-attr">lineWidth:</span> <span class="hljs-number">1</span>,<br>            <span class="hljs-attr">moveTo:</span> [<span class="hljs-number">168</span>, <span class="hljs-number">0</span>],<br>            <span class="hljs-attr">lineTo:</span> [<span class="hljs-number">390</span>, <span class="hljs-number">100</span>],<br>            <span class="hljs-attr">setLineDash:</span> [<span class="hljs-number">4</span>, <span class="hljs-number">2</span>],<br>            <span class="hljs-attr">isMouseOver:</span> <span class="hljs-literal">false</span>,<br>          &#125;,<br>          &#123;<br>            <span class="hljs-attr">color:</span> <span class="hljs-string">&#x27;green&#x27;</span>,<br>            <span class="hljs-attr">lineWidth:</span> <span class="hljs-number">1</span>,<br>            <span class="hljs-attr">moveTo:</span> [<span class="hljs-number">168</span>, <span class="hljs-number">0</span>],<br>            <span class="hljs-attr">lineTo:</span> [<span class="hljs-number">615</span>, <span class="hljs-number">100</span>],<br>            <span class="hljs-attr">setLineDash:</span> [<span class="hljs-number">4</span>, <span class="hljs-number">2</span>],<br>            <span class="hljs-attr">isMouseOver:</span> <span class="hljs-literal">false</span>,<br>          &#125;,<br>          &#123;<br>            <span class="hljs-attr">color:</span> <span class="hljs-string">&#x27;green&#x27;</span>,<br>            <span class="hljs-attr">lineWidth:</span> <span class="hljs-number">1</span>,<br>            <span class="hljs-attr">moveTo:</span> [<span class="hljs-number">168</span>, <span class="hljs-number">0</span>],<br>            <span class="hljs-attr">lineTo:</span> [<span class="hljs-number">840</span>, <span class="hljs-number">100</span>],<br>            <span class="hljs-attr">setLineDash:</span> [<span class="hljs-number">4</span>, <span class="hljs-number">2</span>],<br>            <span class="hljs-attr">isMouseOver:</span> <span class="hljs-literal">false</span>,<br>          &#125;,<br>          &#123;<br>            <span class="hljs-attr">color:</span> <span class="hljs-string">&#x27;green&#x27;</span>,<br>            <span class="hljs-attr">lineWidth:</span> <span class="hljs-number">1</span>,<br>            <span class="hljs-attr">moveTo:</span> [<span class="hljs-number">168</span>, <span class="hljs-number">0</span>],<br>            <span class="hljs-attr">lineTo:</span> [<span class="hljs-number">1065</span>, <span class="hljs-number">100</span>],<br>            <span class="hljs-attr">setLineDash:</span> [<span class="hljs-number">4</span>, <span class="hljs-number">2</span>],<br>            <span class="hljs-attr">isMouseOver:</span> <span class="hljs-literal">false</span>,<br>          &#125;,<br>        ],<br>      &#125;<span class="hljs-string">,</span><br></code></pre></td></tr></table></figure><p>参考文献</p><p>参考  <a href="https://segmentfault.com/q/1010000018554255">https://segmentfault.com/q/1010000018554255</a></p><p><a href="https://blog.csdn.net/weixin_48963720/article/details/125219790">https://blog.csdn.net/weixin_48963720/article/details/125219790</a></p><p>ctx.isPointInPath(80,80)：判断点是否在上面路径的区域内。</p><p>ctx.isPointInStroke(80,50)：判断点是否在上面路径的边缘线上</p><p><a href="https://blog.csdn.net/zyz00000000/article/details/82714454">https://blog.csdn.net/zyz00000000/article/details/82714454</a></p>]]></content>
    
    
    <categories>
      
      <category>canvas</category>
      
    </categories>
    
    
    <tags>
      
      <tag>canvas</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>element-Ui遇到的一些问题点记录</title>
    <link href="/2024/01/02/element-Ui/"/>
    <url>/2024/01/02/element-Ui/</url>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>饿了么vue的ui框架  </p><h2 id="npm-安装"><a href="#npm-安装" class="headerlink" title="npm 安装"></a>npm 安装</h2><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> i element-ui -S<br></code></pre></td></tr></table></figure><h2 id="深层样式修改"><a href="#深层样式修改" class="headerlink" title="深层样式修改"></a>深层样式修改</h2><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">&lt;style scoped lang=<span class="hljs-string">&quot;scss&quot;</span>&gt;<br>　　<span class="hljs-string">.form</span> &#123;<br>　　　　background-color: <span class="hljs-comment">#fff;</span><br>　　　　<span class="hljs-string">/deep/</span> <span class="hljs-string">.list</span>&#123;<br>　　　　　　font-size: 18px;<br>　　　　&#125;<br>　　&#125;<br>&lt;<span class="hljs-string">/style</span>&gt;<br><br>scss文件中使用深度选择器<span class="hljs-string">/deep/</span>报错 Expected selector解决方法<br>记得sass中使用<span class="hljs-string">/deep/</span>没问题，但是在scss中使用<span class="hljs-string">/deep/</span>报错了。<br>找到vue官网关于深度选择器是这样说的：<br> <br>有些像 Sass 之类的预处理器无法正确解析 &gt;&gt;&gt;。这种情况下你可以使用 <span class="hljs-string">/deep/</span> 或 :<span class="hljs-function">:v-deep</span> 操作符取而代之——两者都是 &gt;&gt;&gt; 的别名，同样可以正常工作。<br> <br>于是用 :<span class="hljs-function">:v-deep</span> 就可以了<br><br>:<span class="hljs-function">:v-deep</span> <span class="hljs-string">.el-checkbox__input</span>&#123;<br>  display: none;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="input的placeholder字体颜色"><a href="#input的placeholder字体颜色" class="headerlink" title="input的placeholder字体颜色"></a>input的placeholder字体颜色</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.el-input__inner</span><span class="hljs-selector-pseudo">::placeholder</span> &#123;<br>  <span class="hljs-attribute">color</span>:  <span class="hljs-number">#31E5F5</span>;<br>&#125;<br><span class="hljs-comment">/* 谷歌 */</span><br><span class="hljs-selector-class">.el-input__inner</span>::-webkit-input-placeholder &#123;<br>  <span class="hljs-attribute">color</span>:  <span class="hljs-number">#31E5F5</span>;<br>&#125;<br><span class="hljs-comment">/* 火狐 */</span><br><span class="hljs-selector-class">.el-input__inner</span>:-moz-placeholder &#123;<br>  <span class="hljs-attribute">color</span>:  <span class="hljs-number">#31E5F5</span>;<br>&#125;<br><span class="hljs-comment">/*ie*/</span><br><span class="hljs-selector-class">.el-input__inner</span>:-ms-input-placeholder &#123;<br>  <span class="hljs-attribute">color</span>:  <span class="hljs-number">#31E5F5</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="左侧菜单点击后菜单详情后，左侧菜单默认选中状态"><a href="#左侧菜单点击后菜单详情后，左侧菜单默认选中状态" class="headerlink" title="左侧菜单点击后菜单详情后，左侧菜单默认选中状态"></a>左侧菜单点击后菜单详情后，左侧菜单默认选中状态</h2><p> :default-active&#x3D;”activeMenu”</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs elixir">&lt;el-scrollbar wrap-class=<span class="hljs-string">&quot;scrollbar-wrapper&quot;</span>&gt;<br>      &lt;el-menu<br>        <span class="hljs-symbol">:default-active=<span class="hljs-string">&quot;activeMenu&quot;</span></span><br>        <span class="hljs-symbol">:collapse=<span class="hljs-string">&quot;isCollapse&quot;</span></span><br>        <span class="hljs-symbol">:background-color=<span class="hljs-string">&quot;variables.menuBg&quot;</span></span><br>        <span class="hljs-symbol">:text-color=<span class="hljs-string">&quot;variables.menuText&quot;</span></span><br>        <span class="hljs-symbol">:unique-opened=<span class="hljs-string">&quot;false&quot;</span></span><br>        <span class="hljs-symbol">:active-text-color=<span class="hljs-string">&quot;variables.menuActiveText&quot;</span></span><br>        <span class="hljs-symbol">:collapse-transition=<span class="hljs-string">&quot;false&quot;</span></span><br>        mode=<span class="hljs-string">&quot;vertical&quot;</span><br>      &gt;<br>        &lt;sidebar-item v-<span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;route in permission_routes&quot;</span> <span class="hljs-symbol">:key=<span class="hljs-string">&quot;route.path&quot;</span></span> <span class="hljs-symbol">:item=<span class="hljs-string">&quot;route&quot;</span></span> <span class="hljs-symbol">:base-path=<span class="hljs-string">&quot;route.path&quot;</span></span> /&gt;<br>      &lt;/el-menu&gt;<br>    &lt;/el-scrollbar&gt;<br></code></pre></td></tr></table></figure><p>详情页路由配置   activeMenu:’&#x2F;organization&#x2F;cysq’,</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">const organizationRouter = &#123;<br>    <span class="hljs-type">path</span>: <span class="hljs-string">&#x27;/organization&#x27;</span>,<br>    component: Layout,<br>    redirect: <span class="hljs-string">&#x27;/organization/cygl&#x27;</span>,<br>    // alwaysShow: <span class="hljs-keyword">true</span>, // will <span class="hljs-keyword">always</span> <span class="hljs-keyword">show</span> the root menu<br>    <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;Permission&#x27;</span>,<br>    meta: &#123;<br>      title: <span class="hljs-string">&#x27;组织管理&#x27;</span>,<br>      icon: <span class="hljs-string">&#x27;icon-a-zu315&#x27;</span>,<br>    &#125;,<br>    children: [<br>        &#123;<br>            <span class="hljs-type">path</span>: <span class="hljs-string">&#x27;bmgl&#x27;</span>,<br>            component: () =&gt; <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/views/myView/organization/bmgl&#x27;</span>),<br>            <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;bmgl&#x27;</span>,<br>            meta: &#123;<br>                title: <span class="hljs-string">&#x27;部门管理&#x27;</span>,<br>                // icon: <span class="hljs-string">&#x27;icon-a-zu315&#x27;</span>,<br>                <span class="hljs-keyword">search</span>: <span class="hljs-keyword">true</span>,<br>                placeholder: <span class="hljs-string">&#x27;搜索场所&#x27;</span>,<br>            &#125;,<br>        &#125;,<br>        &#123;<br>            <span class="hljs-type">path</span>: <span class="hljs-string">&#x27;cygl&#x27;</span>,<br>            component: () =&gt; <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/views/myView/organization/cygl&#x27;</span>),<br>            <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;cygl&#x27;</span>,<br>            meta: &#123;<br>                title: <span class="hljs-string">&#x27;成员管理&#x27;</span>,<br>                // icon: <span class="hljs-string">&#x27;icon-a-zu315&#x27;</span>,<br>                <span class="hljs-keyword">search</span>: <span class="hljs-keyword">true</span>,<br>                placeholder: <span class="hljs-string">&#x27;搜索场所&#x27;</span>,<br>            &#125;,<br>        &#125;,<br>        &#123;<br>            <span class="hljs-type">path</span>: <span class="hljs-string">&#x27;cysq&#x27;</span>,<br>            component: () =&gt; <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/views/myView/organization/cysq&#x27;</span>),<br>            <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;cysq&#x27;</span>,<br>            meta: &#123;<br>                title: <span class="hljs-string">&#x27;成员申请&#x27;</span>,<br>                // icon: <span class="hljs-string">&#x27;icon-a-zu315&#x27;</span>,<br>                <span class="hljs-keyword">search</span>: <span class="hljs-keyword">true</span>,<br>                placeholder: <span class="hljs-string">&#x27;搜索姓名&#x27;</span>,<br>            &#125;,<br>        &#125;,<br>        &#123;<br>            <span class="hljs-type">path</span>: <span class="hljs-string">&#x27;sqDetail&#x27;</span>,<br>            component: () =&gt; <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/views/myView/organization/sqDetail&#x27;</span>),<br>            <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;sqDetail&#x27;</span>,<br>            hidden: <span class="hljs-keyword">true</span>,<br>            meta: &#123;<br>                activeMenu:<span class="hljs-string">&#x27;/organization/cysq&#x27;</span>,<br>                title: <span class="hljs-string">&#x27;申请详情&#x27;</span>,<br>                // icon: <span class="hljs-string">&#x27;icon-a-zu315&#x27;</span>,<br>                // <span class="hljs-keyword">search</span>: <span class="hljs-keyword">true</span>,<br>                back: <span class="hljs-keyword">true</span>,<br>                placeholder: <span class="hljs-string">&#x27;搜索场所&#x27;</span>,<br>            &#125;,<br>        &#125;,<br>    ]<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="菜单路由跳转"><a href="#菜单路由跳转" class="headerlink" title="菜单路由跳转"></a>菜单路由跳转</h2><p>是否使用 vue-router 的模式，启用该模式会在激活导航时以 index 作为 path 进行路由跳转    &lt;el-menu   里属性  router</p><p>代码</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">el-menu</span></span></span><br><span class="hljs-tag"><span class="language-xml">                <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 290px;&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                <span class="hljs-attr">:default-active</span>=<span class="hljs-string">&quot;activePath&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;el-menu-vertical-demo&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                <span class="hljs-attr">bckground-color</span>=<span class="hljs-string">&quot;#fff&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                <span class="hljs-attr">text-color</span>=<span class="hljs-string">&quot;#333&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                <span class="hljs-attr">active-text-color</span>=<span class="hljs-string">&quot;#4385F8&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                <span class="hljs-attr">:unique-opened</span>=<span class="hljs-string">&quot;true&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                <span class="hljs-attr">router</span></span></span><br><span class="hljs-tag"><span class="language-xml">                @<span class="hljs-attr">select</span>=<span class="hljs-string">&quot;menuSelect&quot;</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(menu, index) in menuList&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;index&quot;</span>&gt;</span></span><br><span class="language-xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">el-submenu</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;menu.children.length&quot;</span> <span class="hljs-attr">:index</span>=<span class="hljs-string">&quot;menu.index&quot;</span>&gt;</span></span><br><span class="language-xml">                        <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span></span><br><span class="language-xml">                            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;menu-icon-img&quot;</span> <span class="hljs-attr">:src</span>=<span class="hljs-string">&quot;activeClassAPath == menu.index ? menu.iconUrl : menu.defaultIconUrl&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span></span><br><span class="language-xml">                            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;menu-icon-name f-20 color-3&quot;</span> <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;&#123;color: activeClassAPath == menu.index ? &#x27;#333&#x27; : &#x27;#333&#x27;&#125;&quot;</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">menu.name</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">                        <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">                        <span class="hljs-tag">&lt;<span class="hljs-name">el-menu-item</span> </span></span><br><span class="hljs-tag"><span class="language-xml">                            <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item, itemI) in menu.children&quot;</span> </span></span><br><span class="hljs-tag"><span class="language-xml">                            <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;itemI&quot;</span> </span></span><br><span class="hljs-tag"><span class="language-xml">                            <span class="hljs-attr">:index</span>=<span class="hljs-string">&quot;item.index&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;f-18&quot;</span>&gt;</span></span><br><span class="language-xml">                            <span class="hljs-comment">&lt;!-- &lt;span class=&quot;identification&quot; :class=&quot;activeClassAPath == item.index ? &#x27;identification1&#x27;:&#x27;identification&#x27;&quot;&gt;&lt;/span&gt; --&gt;</span></span><br><span class="language-xml">                            </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">item.name</span>&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">                        <span class="hljs-tag">&lt;/<span class="hljs-name">el-menu-item</span>&gt;</span></span><br><span class="language-xml">                    <span class="hljs-tag">&lt;/<span class="hljs-name">el-submenu</span>&gt;</span></span><br><span class="language-xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">el-menu-item</span> <span class="hljs-attr">v-else</span> <span class="hljs-attr">:index</span>=<span class="hljs-string">&quot;menu.index&quot;</span>&gt;</span></span><br><span class="language-xml">                        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;menu-icon-img&quot;</span> <span class="hljs-attr">:src</span>=<span class="hljs-string">&quot;activePath == menu.index ? menu.iconUrl : menu.defaultIconUrl&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span></span><br><span class="language-xml">                        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">menu.name</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">                    <span class="hljs-tag">&lt;/<span class="hljs-name">el-menu-item</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;/<span class="hljs-name">el-menu</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">是否使用 vue-router 的模式，启用该模式会在激活导航时以 index 作为 path 进行路由跳转</span><br></code></pre></td></tr></table></figure><h2 id="省市区三级联动"><a href="#省市区三级联动" class="headerlink" title="省市区三级联动"></a>省市区三级联动</h2><p>案例</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs typescript">npm install element-china-area-data -S<br><br><br><span class="hljs-keyword">import</span> &#123; provinceAndCityData, regionData, provinceAndCityDataPlus, regionDataPlus, <span class="hljs-title class_">CodeToText</span>, <span class="hljs-title class_">TextToCode</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;element-china-area-data&#x27;</span><br><br>provinceAndCityData是省市二级联动数据（不带“全部”选项）<br>regionData是省市区三级联动数据（不带“全部”选项）<br>provinceAndCityDataPlus是省市区三级联动数据（带“全部”选项）<br>regionDataPlus是省市区三级联动数据（带“全部”选项）<br>“全部<span class="hljs-string">&quot;选项绑定的value是空字符串”&quot;</span><br><span class="hljs-title class_">CodeToText</span>是个大对象，属性是区域码，属性值是汉字 用法例如：<span class="hljs-title class_">CodeToText</span>[‘<span class="hljs-number">110000</span>’]输出北京市<br>extToCode是个大对象，属性是汉字，属性值是区域码<br>用法例如：<span class="hljs-title class_">TextToCode</span>[‘北京市’].<span class="hljs-property">code</span>输出<span class="hljs-number">110000</span>,<span class="hljs-title class_">TextToCode</span>[‘北京市’][‘市辖区’].<span class="hljs-property">code</span>输出<span class="hljs-number">110100</span>,<span class="hljs-title class_">TextToCode</span>[‘北京市’][‘市辖区’][‘朝阳区’].<span class="hljs-property">code</span>输出<span class="hljs-number">110105</span><br><br>&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">el-cascader</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;large&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">:options</span>=<span class="hljs-string">&quot;options&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;selectedOptions&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      @<span class="hljs-attr">change</span>=<span class="hljs-string">&quot;handleChange&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">el-cascader</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br> <br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">import</span> &#123; provinceAndCityData &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;element-china-area-data&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    data () &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">options</span>: provinceAndCityData,</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">selectedOptions</span>: []</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml"> </span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">methods</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      handleChange (value) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value)</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br><br><span class="hljs-attr">https</span>:<span class="hljs-comment">//blog.csdn.net/xiejnpeng/article/details/111400199</span><br><br>dwy代码 案例<br><br><br><br><br>&lt;el-cascader style=<span class="hljs-string">&quot;width: 100%;&quot;</span> :options=<span class="hljs-string">&quot;options&quot;</span> v-model=<span class="hljs-string">&quot;formZzxx.address&quot;</span><br>                                    <span class="hljs-meta">@change</span>=<span class="hljs-string">&quot;handleChange&quot;</span> filterable :props=<span class="hljs-string">&quot;&#123; value: &#x27;label&#x27; &#125;&quot;</span><br>                                    placeholder=<span class="hljs-string">&quot;省/市/区&quot;</span>&gt;&lt;/el-cascader&gt;<br><br><br><span class="hljs-keyword">import</span> &#123; regionData &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;element-china-area-data&#x27;</span><br><br><span class="hljs-comment">// 组织信息</span><br><span class="hljs-comment">// 省市区</span><br>            <span class="hljs-attr">options</span>: regionData,<br>            <span class="hljs-attr">formZzxx</span>: &#123;<br>                <span class="hljs-attr">address</span>: [<span class="hljs-string">&quot;山西省&quot;</span>, <span class="hljs-string">&quot;阳泉市&quot;</span>, <span class="hljs-string">&quot;矿区&quot;</span>],<br>            &#125;,<br><br> <span class="hljs-title function_">handleChange</span>(<span class="hljs-params">value</span>) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;value&#x27;</span>, value);<br>        &#125;<br><br><br></code></pre></td></tr></table></figure><h2 id="el-cascader多级选择联动数据，配置value-lable"><a href="#el-cascader多级选择联动数据，配置value-lable" class="headerlink" title="el-cascader多级选择联动数据，配置value,lable"></a>el-cascader多级选择联动数据，配置value,lable</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript">   &lt;el-form-item<br>     label=<span class="hljs-string">&quot;类型&quot;</span><br>    &gt;<br>     <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">el-cascader</span></span></span><br><span class="hljs-tag"><span class="language-xml">       <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;form.flzj&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">       <span class="hljs-attr">:options</span>=<span class="hljs-string">&quot;flzjlist&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">       <span class="hljs-attr">:props</span>=<span class="hljs-string">&quot;defaultParams&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">       <span class="hljs-attr">clearable</span></span></span><br><span class="hljs-tag"><span class="language-xml">     &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-cascader</span>&gt;</span></span><br>   &lt;/el-form-item&gt;<br><br><span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>   <span class="hljs-keyword">return</span> &#123;<br>     <span class="hljs-comment">//定义级联选择器的props</span><br>     <span class="hljs-attr">defaultParams</span>: &#123;<br>       <span class="hljs-attr">label</span>: <span class="hljs-string">&quot;dwmc&quot;</span>,<br>       <span class="hljs-attr">value</span>: <span class="hljs-string">&quot;id&quot;</span>,<br>       <span class="hljs-attr">children</span>: <span class="hljs-string">&quot;children&quot;</span>,<br>       <span class="hljs-attr">checkStrictly</span>: <span class="hljs-literal">true</span><br>     &#125;,<br>     <span class="hljs-comment">//级联样式选择器遍历的数组</span><br>     <span class="hljs-attr">flzjlist</span>: [],<br>   &#125;;<br> &#125;,<br></code></pre></td></tr></table></figure><h2 id="element组件文字切换中文模式"><a href="#element组件文字切换中文模式" class="headerlink" title="element组件文字切换中文模式"></a>element组件文字切换中文模式</h2><p>修改  src\main.js   &#x2F; locale: enLang &#x2F;&#x2F; 如果使用中文，无需设置，请删除</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dart">Vue.use(<span class="hljs-built_in">Element</span>, &#123;<br>  size: Cookies.<span class="hljs-keyword">get</span>(<span class="hljs-string">&#x27;size&#x27;</span>) || <span class="hljs-string">&#x27;medium&#x27;</span>, <span class="hljs-comment">// set element-ui default size</span><br>  <span class="hljs-comment">// locale: enLang // 如果使用中文，无需设置，请删除</span><br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="样式修改代码"><a href="#样式修改代码" class="headerlink" title="样式修改代码"></a>样式修改代码</h2><h3 id="左侧菜单选中背景颜色父级"><a href="#左侧菜单选中背景颜色父级" class="headerlink" title="左侧菜单选中背景颜色父级"></a>左侧菜单选中背景颜色父级</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-id">#app</span> <span class="hljs-selector-class">.sidebar-container</span> <span class="hljs-selector-class">.el-menu-item</span><span class="hljs-selector-class">.is-active</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span> <span class="hljs-meta">!important</span>;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#296DD8</span> <span class="hljs-meta">!important</span>;<br><br>  <span class="hljs-selector-class">.el-submenu__title</span> <span class="hljs-selector-tag">i</span> &#123;<br>    <span class="hljs-attribute">color</span>: pink;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="左侧菜单选中图标颜色父级"><a href="#左侧菜单选中图标颜色父级" class="headerlink" title="左侧菜单选中图标颜色父级"></a>左侧菜单选中图标颜色父级</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-class">.is-active</span> <span class="hljs-selector-class">.el-submenu__title</span> <span class="hljs-selector-tag">i</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#296DD8</span> <span class="hljs-meta">!important</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="左侧菜单选中背景颜色子集"><a href="#左侧菜单选中背景颜色子集" class="headerlink" title="左侧菜单选中背景颜色子集"></a>左侧菜单选中背景颜色子集</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-id">#app</span> <span class="hljs-selector-class">.sidebar-container</span> <span class="hljs-selector-class">.el-submenu</span> <span class="hljs-selector-class">.el-menu-item</span><span class="hljs-selector-class">.is-active</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#296DD8</span> <span class="hljs-meta">!important</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="表格样式"><a href="#表格样式" class="headerlink" title="表格样式"></a>表格样式</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">// 表格头样式</span><br><span class="hljs-selector-class">.el-table</span> <span class="hljs-selector-tag">th</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#4284DC</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">40px</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// 表格体单行样式</span><br><span class="hljs-selector-class">.el-table</span> <span class="hljs-selector-tag">td</span> &#123;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">40px</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// 表格斑马线样式</span><br><span class="hljs-selector-class">.el-table--striped</span> <span class="hljs-selector-class">.el-table__body</span> <span class="hljs-selector-tag">tr</span><span class="hljs-selector-class">.el-table__row--striped</span> <span class="hljs-selector-tag">td</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-number">#EAF3FC</span>;<br>&#125;<br><br><span class="hljs-comment">// 表格下面有一条线  去掉了</span><br><span class="hljs-selector-class">.el-table</span><span class="hljs-selector-pseudo">::before</span> &#123;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="下拉菜单"><a href="#下拉菜单" class="headerlink" title="下拉菜单"></a>下拉菜单</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs css">* selecte 框的高度设置，默认是 <span class="hljs-number">40px</span>*/<br><span class="hljs-selector-class">.el-input__inner</span>&#123;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">32px</span>;<br>&#125;<br><span class="hljs-comment">/* 下面设置右侧按钮居中 */</span><br><span class="hljs-selector-class">.el-input__suffix</span> &#123;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">8px</span>;<br>&#125;<br><span class="hljs-selector-class">.el-input__icon</span> &#123;<br>  <span class="hljs-attribute">line-height</span>: inherit;<br>&#125;<br><span class="hljs-selector-class">.el-input__suffix-inner</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>&#125;<br><br>// element按钮样式<br><span class="hljs-selector-class">.el-button</span> &#123;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">32px</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">10px</span>;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#296DD8</span>;<br>  <span class="hljs-attribute">border</span>: none;<br>&#125;<br></code></pre></td></tr></table></figure><p>左侧路由记得有个样式配置文件，忘记录了</p><h2 id="日期选择器"><a href="#日期选择器" class="headerlink" title="日期选择器"></a>日期选择器</h2><p>日期选择器选中格式和显示格式</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs abnf">&lt;el-date-picker v-model<span class="hljs-operator">=</span><span class="hljs-string">&quot;timevalue&quot;</span> type<span class="hljs-operator">=</span><span class="hljs-string">&quot;daterange&quot;</span> range-separator<span class="hljs-operator">=</span><span class="hljs-string">&quot;至&quot;</span> start-placeholder<span class="hljs-operator">=</span><span class="hljs-string">&quot;开始日期&quot;</span><br>                            end-placeholder<span class="hljs-operator">=</span><span class="hljs-string">&quot;结束日期&quot;</span> format<span class="hljs-operator">=</span><span class="hljs-string">&quot;yyyy-MM-dd&quot;</span> value-format<span class="hljs-operator">=</span><span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>&gt;<br>                        &lt;/el-date-picker&gt;<br><br><span class="hljs-attribute">format</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>  展示各式<br><span class="hljs-attribute">value-format</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>   v-model   打印的数据格式<br><br>详情参考官方文档<br></code></pre></td></tr></table></figure><h2 id="上传图片"><a href="#上传图片" class="headerlink" title="上传图片"></a>上传图片</h2><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs elixir">&lt;el-upload class=<span class="hljs-string">&quot;avatar-uploader&quot;</span> action=<span class="hljs-string">&quot;#&quot;</span> list-type=<span class="hljs-string">&quot;picture-card&quot;</span> <span class="hljs-symbol">:auto-upload=<span class="hljs-string">&quot;false&quot;</span></span><br>                   <span class="hljs-symbol">:show-file-list=<span class="hljs-string">&quot;false&quot;</span></span> <span class="hljs-symbol">:on-change=<span class="hljs-string">&quot;changeFn&quot;</span>&gt;</span><br>                   &lt;div class=<span class="hljs-string">&quot;imgbox&quot;</span>&gt;&lt;/div&gt;<br>               &lt;/el-upload&gt;<br><br>changeFn(file, fileList) &#123;<br>           console.log(<span class="hljs-string">&#x27;file&#x27;</span>, file);<br>           console.log(<span class="hljs-string">&#x27;fileList&#x27;</span>, fileList);<br>       &#125;,<br></code></pre></td></tr></table></figure><p>如果要显示上传的图片的话要加上  list-type&#x3D;”picture-card” </p><p>file  里 的url 就是图片地址</p><p>也可以不加</p><p>通过接口获取服务器上的地址</p><h2 id="table表格"><a href="#table表格" class="headerlink" title="table表格"></a>table表格</h2><h3 id="滚动条位置"><a href="#滚动条位置" class="headerlink" title="滚动条位置"></a>滚动条位置</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs stylus"> this.<span class="hljs-variable">$refs</span><span class="hljs-selector-class">.table</span><span class="hljs-selector-class">.bodyWrapper</span><span class="hljs-selector-class">.scrollTo</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>)<br><br>https:<span class="hljs-comment">//blog.csdn.net/qq_41646249/article/details/121532349</span><br><br>this.<span class="hljs-variable">$nextTick</span>(() =&gt; &#123;<br>  let scrollHeight = this.<span class="hljs-variable">$refs</span><span class="hljs-selector-class">.table</span><span class="hljs-selector-class">.bodyWrapper</span><span class="hljs-selector-class">.scrollHeight</span><br>  this.<span class="hljs-variable">$refs</span><span class="hljs-selector-class">.table</span><span class="hljs-selector-class">.bodyWrapper</span><span class="hljs-selector-class">.scrollTop</span> = scrollHeight<br>&#125;)<br><br> this.<span class="hljs-variable">$nextTick</span>(() =&gt; &#123;<br>            this.<span class="hljs-variable">$refs</span><span class="hljs-selector-class">.table</span><span class="hljs-selector-class">.bodyWrapper</span><span class="hljs-selector-class">.scrollTo</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>)<br>            this<span class="hljs-selector-class">.isLoading</span> = false<br>          &#125;)<br></code></pre></td></tr></table></figure><h3 id="组件插槽"><a href="#组件插槽" class="headerlink" title="组件插槽"></a>组件插槽</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;list list-page&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="引用组件"><a href="#引用组件" class="headerlink" title="引用组件"></a>引用组件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> myTable <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/componentsNew/table&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">components</span>: &#123;<br>    myTable,<br>    myPagination,<br>    dictPop,<br>  &#125;,<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">my-table</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">el-table</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;table&quot;</span> <span class="hljs-attr">v-loading</span>=<span class="hljs-string">&quot;isLoading&quot;</span> <span class="hljs-attr">:data</span>=<span class="hljs-string">&quot;tableData&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;100%&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 100%&quot;</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;selection&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;55&quot;</span> /&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;dictIds&quot;</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;字典编号&quot;</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span> /&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;dictName&quot;</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;字典名称&quot;</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span> /&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;dictType&quot;</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;字典类型&quot;</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">slot-scope</span>=<span class="hljs-string">&quot;scope&quot;</span>&gt;</span></span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;cursor:pointer;color:#02C2B0;&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;goData(scope.row)&quot;</span>&gt;</span>&#123;&#123; scope.row.dictType &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;状态&quot;</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">slot-scope</span>=<span class="hljs-string">&quot;scope&quot;</span>&gt;</span></span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">el-tag</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;scope.row.status == 0&quot;</span>&gt;</span>正常<span class="hljs-tag">&lt;/<span class="hljs-name">el-tag</span>&gt;</span></span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">el-tag</span> <span class="hljs-attr">v-else</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;danger&quot;</span>&gt;</span>停用<span class="hljs-tag">&lt;/<span class="hljs-name">el-tag</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;notes&quot;</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;备注&quot;</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span> /&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;createTime&quot;</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;创建时间&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;170&quot;</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span> /&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;操作&quot;</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">slot-scope</span>=<span class="hljs-string">&quot;scope&quot;</span>&gt;</span></span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;smallBtn&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;createUser(&#x27;修改&#x27;, scope.row)&quot;</span>&gt;</span>修改<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;smallBtn remove&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;removeUser(scope.row)&quot;</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">el-table</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">my-table</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="有开关的渲染"><a href="#有开关的渲染" class="headerlink" title="有开关的渲染"></a>有开关的渲染</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs stylus">this<span class="hljs-selector-class">.tableData</span> = res<span class="hljs-selector-class">.data</span><span class="hljs-selector-class">.records</span><span class="hljs-selector-class">.map</span>(el=&gt;&#123;<br>             <span class="hljs-comment">// 启用 2禁用</span><br>            <span class="hljs-built_in">if</span>(el<span class="hljs-selector-class">.isDelete</span> == <span class="hljs-number">0</span>)&#123;<br>             el<span class="hljs-selector-class">.ifswitch</span> = true<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-built_in">if</span>(el<span class="hljs-selector-class">.isDelete</span> == <span class="hljs-number">2</span>)&#123;<br>              el<span class="hljs-selector-class">.ifswitch</span> = false<br>            &#125;<br>            return el<br>          &#125;)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>element-Ui</category>
      
    </categories>
    
    
    <tags>
      
      <tag>element-Ui</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue随笔_路由vue-router2</title>
    <link href="/2023/08/08/vue%E9%9A%8F%E7%AC%94_%E8%B7%AF%E7%94%B1vue-router/"/>
    <url>/2023/08/08/vue%E9%9A%8F%E7%AC%94_%E8%B7%AF%E7%94%B1vue-router/</url>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Vue Router 是 <a href="https://cn.vuejs.org/">Vue.js</a> 的官方路由。它与 Vue.js 核心深度集成，让用 Vue.js 构建单页应用变得轻而易举。功能包括：</p><ul><li>嵌套路由映射</li><li>动态路由选择</li><li>模块化、基于组件的路由配置</li><li>路由参数、查询、通配符</li><li>展示由 Vue.js 的过渡系统提供的过渡效果</li><li>细致的导航控制</li><li>自动激活 CSS 类的链接</li><li>HTML5 history 模式或 hash 模式</li><li>可定制的滚动行为</li><li>URL 的正确编码</li></ul><p>官方文档地址</p><p><a href="https://router.vuejs.org/zh/introduction.html">https://router.vuejs.org/zh/introduction.html</a></p><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/vue@3&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/vue-router@4&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello App!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 使用 router-link 组件进行导航 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 通过传递 `to` 来指定链接 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- `&lt;router-link&gt;` 将呈现一个带有正确 `href` 属性的 `&lt;a&gt;` 标签 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/&quot;</span>&gt;</span>Go to Home<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/about&quot;</span>&gt;</span>Go to About<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 路由出口 --&gt;</span><br>  <span class="hljs-comment">&lt;!-- 路由匹配到的组件将渲染在这里 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="router-link"><a href="#router-link" class="headerlink" title="router-link"></a>router-link</h2><p>请注意，我们没有使用常规的 <code>a</code> 标签，而是使用一个自定义组件 <code>router-link</code> 来创建链接。这使得 Vue Router 可以在不重新加载页面的情况下更改 URL，处理 URL 的生成以及编码。我们将在后面看到如何从这些功能中获益。 </p><h2 id="router-view"><a href="#router-view" class="headerlink" title="router-view"></a>router-view</h2><p><code>router-view</code> 将显示与 URL 对应的组件。你可以把它放在任何地方，以适应你的布局。 </p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-comment">// 1. 定义路由组件.</span><br><span class="hljs-comment">// 也可以从其他文件导入</span><br><span class="hljs-keyword">const</span> Home = &#123; template: &#x27;&lt;div&gt;Home&lt;/div&gt;&#x27; &#125;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">About</span> = &#123; template: &#x27;&lt;div&gt;<span class="hljs-keyword">About</span>&lt;/div&gt;&#x27; &#125;<br><br><span class="hljs-comment">// 2. 定义一些路由</span><br><span class="hljs-comment">// 每个路由都需要映射到一个组件。</span><br><span class="hljs-comment">// 我们后面再讨论嵌套路由。</span><br><span class="hljs-keyword">const</span> routes = [<br>  &#123; path: &#x27;/&#x27;, component: Home &#125;,<br>  &#123; path: &#x27;/<span class="hljs-keyword">about</span>&#x27;, component: <span class="hljs-keyword">About</span> &#125;,<br>]<br><br><span class="hljs-comment">// 3. 创建路由实例并传递 `routes` 配置</span><br><span class="hljs-comment">// 你可以在这里输入更多的配置，但我们在这里</span><br><span class="hljs-comment">// 暂时保持简单</span><br><span class="hljs-keyword">const</span> router = VueRouter.createRouter(&#123;<br>  <span class="hljs-comment">// 4. 内部提供了 history 模式的实现。为了简单起见，我们在这里使用 hash 模式。</span><br>  history: VueRouter.createWebHashHistory(),<br>  routes, <span class="hljs-comment">// `routes: routes` 的缩写</span><br>&#125;)<br><br><span class="hljs-comment">// 5. 创建并挂载根实例</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">app</span> = Vue.createApp(&#123;&#125;)<br><span class="hljs-comment">// 确保 _use_ 路由实例使</span><br><span class="hljs-comment">// 整个应用支持路由。</span><br><span class="hljs-keyword">app</span>.<span class="hljs-keyword">use</span>(router)<br><br><span class="hljs-keyword">app</span>.mount(&#x27;#<span class="hljs-keyword">app</span>&#x27;)<br><br><span class="hljs-comment">// 现在，应用已经启动了！</span><br></code></pre></td></tr></table></figure><p>通过调用 <code>app.use(router)</code>，我们会触发第一次导航且可以在任意组件中以 <code>this.$router</code> 的形式访问它，并且以 <code>this.$route</code> 的形式访问当前路由： </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// Home.vue</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">computed</span>: &#123;<br>    <span class="hljs-title function_">username</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-comment">// 我们很快就会看到 `params` 是什么</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">$route</span>.<span class="hljs-property">params</span>.<span class="hljs-property">username</span><br>    &#125;,<br>  &#125;,<br>  <span class="hljs-attr">methods</span>: &#123;<br>    <span class="hljs-title function_">goToDashboard</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-keyword">if</span> (isAuthenticated) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span>.<span class="hljs-title function_">push</span>(<span class="hljs-string">&#x27;/dashboard&#x27;</span>)<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span>.<span class="hljs-title function_">push</span>(<span class="hljs-string">&#x27;/login&#x27;</span>)<br>      &#125;<br>    &#125;,<br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml">vue文件<br><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/demo&quot;</span>&gt;</span>demo<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br><br>要有<span class="hljs-tag">&lt;<span class="hljs-name">router-view</span> /&gt;</span> 作为容器<br><br>子路由页面必须有容器<span class="hljs-tag">&lt;<span class="hljs-name">router-view</span> /&gt;</span> <br></code></pre></td></tr></table></figure><h3 id="路由跳转"><a href="#路由跳转" class="headerlink" title="路由跳转"></a>路由跳转</h3><p>html跳转</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">跳转到index下的子路由news<br><span class="hljs-section">&lt;router-link to=&quot;/index/news&quot;&gt;demo&lt;/router-link&gt;</span><br><span class="hljs-section">===</span><br>&lt;router-link :to=&quot;&#123;name:<span class="hljs-emphasis">&#x27;news&#x27;</span>&#125;&quot; &gt;新闻列表&lt;/router-link&gt;<br>注意 坑    这里是单花括号<br></code></pre></td></tr></table></figure><p>方法跳转</p><p>方法this.$router.push(‘&#x2F;‘)</p><h2 id="路由传参"><a href="#路由传参" class="headerlink" title="路由传参"></a>路由传参</h2><p>注意：和name配对的是params，和path配对的是query</p><h3 id="params传参"><a href="#params传参" class="headerlink" title="params传参"></a>params传参</h3><p>命名路由传参params</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">this.<span class="hljs-variable">$router</span>.<span class="hljs-title function_ invoke__">push</span>(&#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;news&#x27;</span>, <span class="hljs-attr">params</span>: &#123; <span class="hljs-attr">userId</span>: <span class="hljs-number">123</span> &#125;&#125;)<br></code></pre></td></tr></table></figure><p>接受参数</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">this.<span class="hljs-variable">$route</span><span class="hljs-selector-class">.params</span><span class="hljs-selector-class">.userId</span><br><br></code></pre></td></tr></table></figure><h3 id="query传参"><a href="#query传参" class="headerlink" title="query传参"></a>query传参</h3><p>命名路由传参params</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">this.<span class="hljs-variable">$router</span>.<span class="hljs-title function_ invoke__">push</span>(&#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/news&#x27;</span>, <span class="hljs-attr">query</span>: &#123; <span class="hljs-attr">userId</span>: <span class="hljs-number">123</span> &#125;&#125;);接受参数<br></code></pre></td></tr></table></figure><p>接受参数</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-built_in">this</span>.<span class="hljs-variable">$route</span>.query.userId<br></code></pre></td></tr></table></figure><p>router-link写法</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">:to</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123; name: &#x27;news&#x27;, params: &#123; userId: 1111&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&#125;&quot;</span>&gt;</span>click to news page<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>1.命名路由搭配params，刷新页面参数会丢失<br>2.查询参数搭配query，刷新页面数据不会丢失<br>3.接受参数使用this.$router后面就是搭配路由的名称就能获取到参数的值</p><blockquote><p>传参跳转this.$router.push<br>接受参数this.$route</p></blockquote><h2 id="新打开页面跳转"><a href="#新打开页面跳转" class="headerlink" title="新打开页面跳转"></a>新打开页面跳转</h2><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs xquery"><span class="hljs-keyword">let</span> routeUrl = this.<span class="hljs-variable">$router</span>.resolve(&#123;<br><span class="hljs-built_in"></span><br><span class="hljs-built_in">path</span>: <span class="hljs-string">&quot;/share&quot;</span>,<br><br>query: <span class="hljs-built_in">&#123;id</span>:<span class="hljs-number">96</span>&#125;<br><br>&#125;);<br><br><span class="hljs-keyword">window</span>.open(routeUrl.href, <span class="hljs-string">&#x27;_blank&#x27;</span>);<br><br><br>案例<br>// this.<span class="hljs-variable">$router</span>.push(&#123;<br>      //  <span class="hljs-built_in"> path</span>: <span class="hljs-string">&quot;/postManagement/jobDetails&quot;</span>,<br>      //   query: &#123;<span class="hljs-built_in"> id</span>:<span class="hljs-built_in"> id</span> &#125;,<br>      // &#125;);<br>      <span class="hljs-keyword">let</span> routeData = this.<span class="hljs-variable">$router</span>.resolve(&#123;<br>       <span class="hljs-built_in"> path</span>: <span class="hljs-string">&quot;/postManagement/jobDetails&quot;</span>,<br>        query: &#123;<br>         <span class="hljs-built_in"> id</span>:<span class="hljs-built_in"> id</span><br>        &#125;,<br>      &#125;);<br>      <span class="hljs-keyword">window</span>.open(routeData.href, <span class="hljs-string">&#x27;_blank&#x27;</span>);<br><br><br></code></pre></td></tr></table></figure><p>this.$router.replace() (用法同上,push)</p><p>路由前进后退</p><p>this.$router.go(n) ()</p><h2 id="路由监听"><a href="#路由监听" class="headerlink" title="路由监听"></a>路由监听</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus">watch: &#123;<br>           <span class="hljs-variable">$route</span> (route) &#123;<br>               this<span class="hljs-selector-class">.activePath</span> = route<span class="hljs-selector-class">.path</span><br>               this<span class="hljs-selector-class">.activeClassAPath</span> = route<span class="hljs-selector-class">.path</span><br>           &#125;<br>       &#125;,<br></code></pre></td></tr></table></figure><h2 id="路由守卫"><a href="#路由守卫" class="headerlink" title="路由守卫"></a>路由守卫</h2><h3 id="全局前置守卫"><a href="#全局前置守卫" class="headerlink" title="全局前置守卫"></a>全局前置守卫</h3><p>你可以使用 <code>router.beforeEach</code> 注册一个全局前置守卫： </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> router = <span class="hljs-title function_">createRouter</span>(&#123; ... &#125;)<br><br>router.<span class="hljs-title function_">beforeEach</span>(<span class="hljs-function">(<span class="hljs-params">to, <span class="hljs-keyword">from</span></span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// ...</span><br>  <span class="hljs-comment">// 返回 false 以取消导航</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;)<br></code></pre></td></tr></table></figure><p>当一个导航触发时，全局前置守卫按照创建顺序调用。守卫是异步解析执行，此时导航在所有守卫 resolve 完之前一直处于<strong>等待中</strong>。</p><p>每个守卫方法接收两个参数：</p><ul><li><strong>to</strong>: 即将要进入的目标 <a href="https://router.vuejs.org/zh/api/#routelocationnormalized">用一种标准化的方式</a></li><li><strong>from</strong>: 当前导航正要离开的路由 <a href="https://router.vuejs.org/zh/api/#routelocationnormalized">用一种标准化的方式</a></li></ul><p>可以返回的值如下:</p><ul><li><code>false</code>: 取消当前的导航。如果浏览器的 URL 改变了(可能是用户手动或者浏览器后退按钮)，那么 URL 地址会重置到 <code>from</code> 路由对应的地址。</li><li>一个<a href="https://router.vuejs.org/zh/api/#routelocationraw">路由地址</a>: 通过一个路由地址重定向到一个不同的地址，如同调用 <code>router.push()</code>，且可以传入诸如 <code>replace: true</code> 或 <code>name: &#39;home&#39;</code> 之类的选项。它会中断当前的导航，同时用相同的 <code>from</code> 创建一个新导航。</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs csharp">router.beforeEach(<span class="hljs-keyword">async</span> (to, <span class="hljs-keyword">from</span>) =&gt; &#123;<br>  <span class="hljs-keyword">if</span> (<br>    <span class="hljs-comment">// 检查用户是否已登录</span><br>    !isAuthenticated &amp;&amp;<br>    <span class="hljs-comment">// ❗️ 避免无限重定向</span><br>    to.name !== <span class="hljs-string">&#x27;Login&#x27;</span><br>  ) &#123;<br>    <span class="hljs-comment">// 将用户重定向到登录页面</span><br>    <span class="hljs-keyword">return</span> &#123; name: <span class="hljs-string">&#x27;Login&#x27;</span> &#125;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>如果遇到了意料之外的情况，可能会抛出一个 <code>Error</code>。这会取消导航并且调用 <a href="https://router.vuejs.org/zh/api/interfaces/Router.html#onError"><code>router.onError()</code></a> 注册过的回调。</p><p>如果什么都没有，<code>undefined</code> 或返回 <code>true</code>，<strong>则导航是有效的</strong>，并调用下一个导航守卫</p><p>以上所有都同 <strong>async 函数</strong> 和 Promise 工作方式一样：</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs autoit">router.beforeEach(async (<span class="hljs-keyword">to</span>, from) =&gt; &#123;<br>  // canUserAccess() 返回 `<span class="hljs-literal">true</span>` 或 `<span class="hljs-literal">false</span>`<br>  <span class="hljs-keyword">const</span> canAccess = await canUserAccess(<span class="hljs-keyword">to</span>)<br>  <span class="hljs-keyword">if</span> (!canAccess) <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;/login&#x27;</span><br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="可选的第三个参数"><a href="#可选的第三个参数" class="headerlink" title="可选的第三个参数"></a>可选的第三个参数</h3><p>在之前的 Vue Router 版本中，还可以使用 <em>第三个参数</em> <code>next</code> 。这是一个常见的错误来源，我们经过 <a href="https://github.com/vuejs/rfcs/blob/master/active-rfcs/0037-router-return-guards.md#motivation">RFC</a> 讨论将其移除。然而，它仍然是被支持的，这意味着你可以向任何导航守卫传递第三个参数。在这种情况下，<strong>确保 next</strong> 在任何给定的导航守卫中都被<strong>严格调用一次</strong>。它可以出现多于一次，但是只能在所有的逻辑路径都不重叠的情况下，否则钩子永远都不会被解析或报错。这里有一个在用户未能验证身份时重定向到<code>/login</code>的<strong>错误用例</strong>： </p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">// BAD<br>router.beforeEach(<span class="hljs-function"><span class="hljs-params">(to, <span class="hljs-keyword">from</span>, <span class="hljs-built_in">next</span>)</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (to.name !== <span class="hljs-string">&#x27;Login&#x27;</span> &amp;&amp; !isAuthenticated) <span class="hljs-built_in">next</span>(&#123; <span class="hljs-name">name</span>: <span class="hljs-string">&#x27;Login&#x27;</span> &#125;)<br>  // 如果用户未能验证身份，则 `<span class="hljs-built_in">next</span>` 会被调用两次<br>  <span class="hljs-built_in">next</span>()<br>&#125;)<br></code></pre></td></tr></table></figure><p>下面是正确的版本: </p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">// GOOD<br>router.beforeEach(<span class="hljs-function"><span class="hljs-params">(to, <span class="hljs-keyword">from</span>, <span class="hljs-built_in">next</span>)</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (to.name !== <span class="hljs-string">&#x27;Login&#x27;</span> &amp;&amp; !isAuthenticated) <span class="hljs-built_in">next</span>(&#123; <span class="hljs-name">name</span>: <span class="hljs-string">&#x27;Login&#x27;</span> &#125;)<br>  <span class="hljs-keyword">else</span> <span class="hljs-built_in">next</span>()<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="全局解析守卫"><a href="#全局解析守卫" class="headerlink" title="全局解析守卫"></a>全局解析守卫</h3><p>你可以用 <code>router.beforeResolve</code> 注册一个全局守卫。这和 <code>router.beforeEach</code> 类似，因为它在<strong>每次导航</strong>时都会触发，不同的是，解析守卫刚好会在导航被确认之前、<strong>所有组件内守卫和异步路由组件被解析之后</strong>调用。这里有一个例子，确保用户可以访问<a href="https://router.vuejs.org/zh/guide/advanced/meta.html">自定义 meta</a> 属性 <code>requiresCamera</code> 的路由： </p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs aspectj">router.beforeResolve(async to =&gt; &#123;<br>  <span class="hljs-keyword">if</span> (to.meta.requiresCamera) &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      await askForCameraPermission()<br>    &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-keyword">error</span>) &#123;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">error</span> <span class="hljs-keyword">instanceof</span> NotAllowedError) &#123;<br>        <span class="hljs-comment">// ... 处理错误，然后取消导航</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span><br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 意料之外的错误，取消导航并把错误传给全局处理器</span><br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">error</span><br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p><code>router.beforeResolve</code> 是获取数据或执行任何其他操作（如果用户无法进入页面时你希望避免执行的操作）的理想位置。 </p><h3 id="全局后置钩子"><a href="#全局后置钩子" class="headerlink" title="全局后置钩子"></a>全局后置钩子</h3><p>你也可以注册全局后置钩子，然而和守卫不同的是，这些钩子不会接受 <code>next</code> 函数也不会改变导航本身： </p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">router.afterEach(<span class="hljs-function"><span class="hljs-params">(to, <span class="hljs-keyword">from</span>)</span> =&gt;</span> &#123;<br>  sendToAnalytics(to.fullPath)<br>&#125;)<br></code></pre></td></tr></table></figure><p>它们对于分析、更改页面标题、声明页面等辅助功能以及许多其他事情都很有用。</p><p>它们也反映了 <a href="https://router.vuejs.org/zh/guide/advanced/navigation-failures.html">navigation failures</a> 作为第三个参数：</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">router.afterEach(<span class="hljs-function"><span class="hljs-params">(to, <span class="hljs-keyword">from</span>, failure)</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (!failure) sendToAnalytics(to.fullPath)<br>&#125;)<br></code></pre></td></tr></table></figure><p>了解更多关于 navigation failures 的信息在<a href="https://router.vuejs.org/zh/guide/advanced/navigation-failures.html">它的指南</a>中。 </p>]]></content>
    
    
    <categories>
      
      <category>vue笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>uni-app随笔项目结构，页面结构，生命周期</title>
    <link href="/2023/02/20/uni-app%E9%9A%8F%E7%AC%94%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84%EF%BC%8C%E9%A1%B5%E9%9D%A2%E7%BB%93%E6%9E%84%EF%BC%8C%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <url>/2023/02/20/uni-app%E9%9A%8F%E7%AC%94%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84%EF%BC%8C%E9%A1%B5%E9%9D%A2%E7%BB%93%E6%9E%84%EF%BC%8C%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p><code>uni-app</code> 是一个使用 <a href="https://vuejs.org/">Vue.js</a> 开发所有前端应用的框架，开发者编写一套代码，可发布到iOS、Android、Web（响应式）、以及各种小程序（微信&#x2F;支付宝&#x2F;百度&#x2F;头条&#x2F;飞书&#x2F;QQ&#x2F;快手&#x2F;钉钉&#x2F;淘宝）、快应用等多个平台。 </p><h2 id="创建uni-app"><a href="#创建uni-app" class="headerlink" title="创建uni-app"></a>创建uni-app</h2><p>首先下载HBuilderX开发工具</p><ul><li>HBuilderX：<a href="https://www.dcloud.io/hbuilderx.html">官方IDE下载地址</a></li></ul><p>在点击工具栏里的文件 -&gt; 新建 -&gt; 项目（快捷键<code>Ctrl+N</code>）： </p><h2 id="运行uni-app"><a href="#运行uni-app" class="headerlink" title="运行uni-app"></a>运行uni-app</h2><p>1浏览器运行：进入hello-uniapp项目，点击工具栏的运行 -&gt; 运行到浏览器 -&gt; 选择浏览器，即可体验 uni-app 的 web 版 </p><p>2运行App到手机或模拟器：使用电压足够的usb端口连接手机，设置中开启USB调试，手机上允许电脑设备调试手机，进入hello-uniapp项目，点击工具栏的运行 -&gt; 运行App到手机或模拟器，即可在该设备里面体验uni-app。 </p><p>3在微信开发者工具里运行：进入hello-uniapp项目，点击工具栏的运行 -&gt; 运行到小程序模拟器 -&gt; 微信开发者工具，即可在微信开发者工具里面体验uni-app。 </p><p>4在支付宝小程序开发者工具里运行：进入hello-uniapp项目，点击工具栏的运行 -&gt; 运行到小程序模拟器 -&gt; 支付宝小程序开发者工具，即可在支付宝小程序开发者工具里面体验uni-app。 </p><h2 id="发布uni-app"><a href="#发布uni-app" class="headerlink" title="发布uni-app"></a>发布uni-app</h2><h3 id="打包为原生App"><a href="#打包为原生App" class="headerlink" title="#打包为原生App"></a><a href="https://uniapp.dcloud.net.cn/quickstart-hx.html#%E6%89%93%E5%8C%85%E4%B8%BA%E5%8E%9F%E7%94%9Fapp">#</a>打包为原生App</h3><p>在HBuilderX工具栏，点击发行，选择原生app-云端打包 </p><p>具体参考官方文档</p><h3 id="发布为Web网站"><a href="#发布为Web网站" class="headerlink" title="发布为Web网站"></a>发布为Web网站</h3><p>1在 <code>manifest.json</code> 的可视化界面，进行如下配置（发行在网站根目录可不配置应用基本路径），此时发行网站路径是 <a href="http://www.xxx.com/h5%EF%BC%8C%E5%A6%82%EF%BC%9A[https://hellouniapp.dcloud.net.cn](https://hellouniapp.dcloud.net.cn/)%E3%80%82">www.xxx.com/h5，如：[https://hellouniapp.dcloud.net.cn](https://hellouniapp.dcloud.net.cn/)。</a> </p><p>2在HBuilderX工具栏，点击发行，选择网站-H5手机版，如下图，点击即可生成 H5 的相关资源文件，保存于 unpackage 目录。</p><p><strong>注意</strong></p><ul><li><code>history</code> 模式发行需要后台配置支持，详见：<a href="https://router.vuejs.org/zh/guide/essentials/history-mode.html#%E5%90%8E%E7%AB%AF%E9%85%8D%E7%BD%AE%E4%BE%8B%E5%AD%90">history 模式的后端配置</a></li><li>打包后，推荐使用<a href="https://doc.dcloud.net.cn/uniCloud/hosting">前端网页托管服务</a>，一键上传，自带CDN加速，无需购买虚拟机，无需安装nginx等；</li><li>若使用传统服务器部署，建议在服务器端开启 <code>gzip</code> 压缩。参考网上的分享：<a href="https://juejin.im/post/5af003286fb9a07aac24611b">https://juejin.im/post/5af003286fb9a07aac24611b</a></li></ul><h3 id="发布为小程序"><a href="#发布为小程序" class="headerlink" title="发布为小程序"></a>发布为小程序</h3><h4 id="发布为微信小程序："><a href="#发布为微信小程序：" class="headerlink" title="#发布为微信小程序："></a><a href="https://uniapp.dcloud.net.cn/quickstart-hx.html#%E5%8F%91%E5%B8%83%E4%B8%BA%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F">#</a>发布为微信小程序：</h4><ol><li><p>申请微信小程序AppID，参考：<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/quickstart/getstart.html#%E7%94%B3%E8%AF%B7%E5%B8%90%E5%8F%B7">微信教程</a>。</p></li><li><p>在HBuilderX中顶部菜单依次点击 “发行” &#x3D;&gt; “小程序-微信”，输入小程序名称和appid点击发行即可</p></li><li><p>如果手动发行，则点击发行按钮后，会在项目的目录 <code>unpackage/dist/build/mp-weixin</code> 生成微信小程序项目代码。在微信小程序开发者工具中，导入生成的微信小程序项目，测试项目代码运行正常后，点击“上传”按钮，之后按照 “提交审核” &#x3D;&gt; “发布” 小程序标准流程，逐步操作即可，详细查看：<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/quickstart/release.html#%E5%8F%91%E5%B8%83%E4%B8%8A%E7%BA%BF">微信官方教程</a>。</p><p>如果在发行界面勾选了<code>自动上传微信平台</code>，则无需再打开微信工具手动操作，将直接上传到微信服务器提交审核</p></li></ol><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p>一个uni-app工程，默认包含如下目录及文件： </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><br>┌─uniCloud              云空间目录，支付宝小程序云为uniCloud-alipay，阿里云为uniCloud-aliyun，腾讯云为uniCloud-tcb（详见uniCloud）<br>│─components            符合vue组件规范的uni-app组件目录<br>│  └─comp-a.vue         可复用的a组件<br>├─utssdk                存放uts文件<br>├─pages                 业务页面文件存放的目录<br>│  ├─<span class="hljs-keyword">index</span><br>│  │  └─<span class="hljs-keyword">index</span>.vue       <span class="hljs-keyword">index</span>页面<br>│  └─list<br>│     └─list.vue        list页面<br>├─static                存放应用引用的本地静态资源（如图片、视频等）的目录，注意：静态资源都应存放于此目录<br>├─uni_modules           存放uni_module 详见<br>├─platforms             存放各平台专用页面的目录，详见<br>├─nativeplugins         App原生语言插件 详见<br>├─nativeResources       App端原生资源目录<br>│  ├─android            Android原生资源目录 详见<br>|  └─ios                iOS原生资源目录 详见<br>├─hybrid                App端存放本地html文件的目录，详见<br>├─wxcomponents          存放小程序组件的目录，详见<br>├─unpackage             非工程代码，一般存放运行或发行的编译结果<br>├─main.js               Vue初始化入口文件<br>├─App.vue               应用配置，用来配置App全局样式以及监听 应用生命周期<br>├─pages.json            配置页面路由、导航条、选项卡等页面类信息，详见<br>├─manifest.json         配置应用名称、appid、logo、版本等打包信息，详见<br>├─AndroidManifest.xml   Android原生应用清单文件 详见<br>├─<span class="hljs-keyword">Info</span>.plist            iOS原生应用配置文件 详见<br>└─uni.scss              内置的常用样式变量<br><br></code></pre></td></tr></table></figure><p>页面管理</p><h3 id="新建页面"><a href="#新建页面" class="headerlink" title="新建页面"></a>新建页面</h3><p><code>uni-app</code>中的页面，默认保存在工程根目录下的<code>pages</code>目录下。</p><p>每次新建页面，均需在<code>pages.json</code>中配置<code>pages</code>列表；未在<code>pages.json -&gt; pages</code> 中注册的页面，<code>uni-app</code>会在编译阶段进行忽略。pages.json的完整配置参考：<a href="https://uniapp.dcloud.net.cn/collocation/pages.html">页面配置</a>。</p><p>通过HBuilderX开发 <code>uni-app</code> 项目时，在 <code>uni-app</code> 项目上右键“新建页面”，HBuilderX会自动在<code>pages.json</code>中完成页面注册，开发更方便。</p><p>同时，HBuilderX 还内置了常用的页面模板（如图文列表、商品列表等），选择这些模板，可以大幅提升你的开发效率。</p><h3 id="删除页面"><a href="#删除页面" class="headerlink" title="删除页面"></a>删除页面</h3><h3 id="页面改名"><a href="#页面改名" class="headerlink" title="页面改名"></a>页面改名</h3><p>操作和删除页面同理，依次修改文件和 <code>pages.json</code>。 </p><h3 id="pages-json"><a href="#pages-json" class="headerlink" title="pages.json"></a>pages.json</h3><p>p</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;pages&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;path&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;pages/index/index&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">//名字叫不叫index无所谓，位置在第一个，就是首页</span><br><span class="hljs-attr">&quot;style&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;navigationBarTitleText&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;首页&quot;</span> <span class="hljs-comment">//页面标题</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;path&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;pages/my&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;style&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;navigationBarTitleText&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;我的&quot;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><p>ages.json是工程的页面管理配置文件，包括：页面路由注册、页面参数配置（原生标题栏、下拉刷新…）、首页tabbar等众多功能。</p><h3 id="页面内容构成"><a href="#页面内容构成" class="headerlink" title="页面内容构成"></a>页面内容构成</h3><p>uni-app 页面基于 vue 规范。一个页面内，有3个根节点标签：</p><ul><li>模板组件区 <code>&lt;template&gt;</code></li><li>脚本区 <code>&lt;script&gt;</code></li><li>样式区 <code>&lt;style&gt;</code></li></ul><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;buttonClick&quot;</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">title</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">return</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">title</span>: <span class="hljs-string">&quot;Hello world&quot;</span>, <span class="hljs-comment">// 定义绑定在页面上的data数据</span></span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;,</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-title function_">onLoad</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// 页面启动的生命周期，这里编写页面加载时的逻辑</span></span></span><br><span class="language-javascript"><span class="language-xml">&#125;,</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">methods</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">buttonClick</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;按钮被点了&quot;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">&#125;,</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.content</span> &#123;</span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-attribute">width</span>: <span class="hljs-number">750</span>rpx;</span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-attribute">background-color</span>: white;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br><span class="language-xml"></span><br></code></pre></td></tr></table></figure><h2 id="页面生命周期"><a href="#页面生命周期" class="headerlink" title="页面生命周期"></a>页面生命周期</h2><p><code>uni-app</code> 页面除支持 Vue 组件生命周期外还支持下方页面生命周期函数，当以组合式 API 使用时，在 Vue2 和 Vue3 中存在一定区别，请分别参考：<a href="https://uniapp.dcloud.net.cn/tutorial/vue-composition-api.html">Vue2 组合式 API 使用文档</a> 和 <a href="https://uniapp.dcloud.net.cn/tutorial/vue3-composition-api.html">Vue3 组合式 API 使用文档</a>。</p><table><thead><tr><th>函数名</th><th>说明</th><th>平台差异说明</th><th>最低版本</th></tr></thead><tbody><tr><td>onInit</td><td>监听页面初始化，其参数同 onLoad 参数，为上个页面传递的数据，参数类型为 Object（用于页面传参），触发时机早于 onLoad</td><td>百度小程序</td><td>3.1.0+</td></tr><tr><td>onLoad</td><td>监听页面加载，该钩子被调用时，响应式数据、计算属性、方法、侦听器、props、slots 已设置完成，其参数为上个页面传递的数据，参数类型为 Object（用于页面传参），参考<a href="https://uniapp.dcloud.net.cn/api/router#navigateto">示例</a>。</td><td></td><td></td></tr><tr><td>onShow</td><td>监听页面显示，页面每次出现在屏幕上都触发，包括从下级页面点返回露出当前页面</td><td></td><td></td></tr><tr><td>onReady</td><td>监听页面初次渲染完成，此时组件已挂载完成，DOM 树($el)已可用，注意如果渲染速度快，会在页面进入动画完成前触发</td><td></td><td></td></tr><tr><td>onHide</td><td>监听页面隐藏</td><td></td><td></td></tr><tr><td>onUnload</td><td>监听页面卸载</td><td></td><td></td></tr><tr><td>onResize</td><td>监听窗口尺寸变化</td><td>App、微信小程序、快手小程序</td><td></td></tr><tr><td>onPullDownRefresh</td><td>监听用户下拉动作，一般用于下拉刷新，参考<a href="https://uniapp.dcloud.net.cn/api/ui/pulldown.html">示例</a></td><td></td><td></td></tr><tr><td>onReachBottom</td><td>页面滚动到底部的事件（不是scroll-view滚到底），常用于下拉下一页数据。具体见下方注意事项</td><td></td><td></td></tr><tr><td>onTabItemTap</td><td>点击 tab 时触发，参数为Object，具体见下方注意事项</td><td>微信小程序、QQ小程序、支付宝小程序、百度小程序、H5、App、快手小程序、京东小程序</td><td></td></tr><tr><td>onShareAppMessage</td><td>用户点击右上角分享</td><td>微信小程序、QQ小程序、支付宝小程序、抖音小程序、飞书小程序、快手小程序、京东小程序</td><td></td></tr><tr><td>onPageScroll</td><td>监听页面滚动，参数为Object</td><td>nvue不支持</td><td></td></tr><tr><td>onNavigationBarButtonTap</td><td>监听原生标题栏按钮点击事件，参数为Object</td><td>App、H5</td><td></td></tr><tr><td>onBackPress</td><td>监听页面返回，返回 event &#x3D; {from:backbutton、 navigateBack} ，backbutton 表示来源是左上角返回按钮或 android 返回键；navigateBack表示来源是 uni.navigateBack；<a href="https://uniapp.dcloud.net.cn/tutorial/page.html#onbackpress">详见</a></td><td>app、H5、支付宝小程序</td><td></td></tr><tr><td>onNavigationBarSearchInputChanged</td><td>监听原生标题栏搜索输入框输入内容变化事件</td><td>App、H5</td><td>1.6.0</td></tr><tr><td>onNavigationBarSearchInputConfirmed</td><td>监听原生标题栏搜索输入框搜索事件，用户点击软键盘上的“搜索”按钮时触发。</td><td>App、H5</td><td>1.6.0</td></tr><tr><td>onNavigationBarSearchInputClicked</td><td>监听原生标题栏搜索输入框点击事件（pages.json 中的 searchInput 配置 disabled 为 true 时才会触发）</td><td>App、H5</td><td>1.6.0</td></tr><tr><td>onShareTimeline</td><td>监听用户点击右上角转发到朋友圈</td><td>微信小程序</td><td>2.8.1+</td></tr><tr><td>onAddToFavorites</td><td>监听用户点击右上角收藏</td><td>微信小程序、QQ小程序</td><td>2.8.1+</td></tr></tbody></table><h3 id="页面加载时序介绍"><a href="#页面加载时序介绍" class="headerlink" title="页面加载时序介绍"></a>页面加载时序介绍</h3><p>接下来我们介绍onLoad、onReady、onShow的先后关系，页面加载的详细流程。</p><ol><li>uni-app框架，首先根据pages.json的配置，创建页面</li></ol><p>所以原生导航栏是最快显示的。页面背景色也应该在这里配置。</p><ol><li>根据页面template里的组件，创建dom。</li></ol><p>这里的dom创建仅包含第一批处理的静态dom。对于通过js&#x2F;uts更新data然后通过v-for再创建的列表数据，不在第一批处理。</p><p>要注意一个页面静态dom元素过多，会影响页面加载速度。在uni-app x Android版本上，可能会阻碍页面进入的转场动画。 因为此时，页面转场动画还没有启动。</p><ol><li>触发onLoad</li></ol><p>此时页面还未显示，没有开始进入的转场动画，页面dom还不存在。</p><p>所以这里不能直接操作dom（可以修改data，因为vue框架会等待dom准备后再更新界面）；在 app-uvue 中获取当前的activity拿到的是老页面的activity，只能通过页面栈获取activity。</p><p>onLoad比较适合的操作是：接受上页的参数，联网取数据，更新data。</p><p>手机都是多核的，uni.request或云开发联网，在子线程运行，不会干扰UI线程的入场动画，并行处理可以更快的拿到数据、渲染界面。</p><p>但onLoad里不适合进行大量同步耗时运算，因为此时转场动画还没开始。</p><p>尤其uni-app x 在 Android上，onLoad里的代码（除了联网和加载图片）默认是在UI线程运行的，大量同步耗时计算很容易卡住页面动画不启动。除非开发者显式指定在其他线程运行。</p><ol><li>转场动画开始</li></ol><p>新页面开始进入的转场动画，动画默认耗时300ms，可以在路由API中调节时长。</p><ol><li>页面onReady</li></ol><p>第2步创建dom是虚拟dom，dom创建后需要经历一段时间，UI层才能完成了页面上真实元素的创建，即触发了onReady。</p><p>onReady后，页面元素就可以自由操作了，比如ref获取节点。同时首批界面也渲染了。</p><p>注意：onReady和转场动画开始、结束之间，没有必然的先后顺序，完全取决于dom的数量和复杂度。</p><p>如果元素排版和渲染够快，转场动画刚开始就渲染好了；</p><p>大多情况下，转场动画走几格就看到了首批渲染内容；</p><p>如果元素排版和渲染过慢，转场动画结束都没有内容，就会造成白屏。</p><p>联网进程从onLoad起就在异步获取数据更新data，如果服务器速度够快，第二批数据也可能在转场动画结束前渲染。</p><ol><li>转场动画结束</li></ol><p>再次强调，5和6的先后顺序不一定，取决于首批dom渲染的速度。</p><h2 id="组件生命周期"><a href="#组件生命周期" class="headerlink" title="组件生命周期"></a>组件生命周期</h2><p><code>uni-app</code> 组件支持的生命周期，与vue标准组件的生命周期相同。这里没有页面级的onLoad等生命周期：</p><table><thead><tr><th>函数名</th><th>说明</th><th>平台差异说明</th><th>最低版本</th></tr></thead><tbody><tr><td>beforeCreate</td><td>在实例初始化之前被调用。<a href="https://v2.cn.vuejs.org/v2/api/#beforeCreate">详见</a></td><td></td><td></td></tr><tr><td>created</td><td>在实例创建完成后被立即调用。<a href="https://v2.cn.vuejs.org/v2/api/#created">详见</a></td><td></td><td></td></tr><tr><td>beforeMount</td><td>在挂载开始之前被调用。<a href="https://v2.cn.vuejs.org/v2/api/#beforeMount">详见</a></td><td></td><td></td></tr><tr><td>mounted</td><td>挂载到实例上去之后调用。<a href="https://v2.cn.vuejs.org/v2/api/#mounted">详见</a> 注意：此处并不能确定子组件被全部挂载，如果需要子组件完全挂载之后在执行操作可以使用<code>$nextTick</code><a href="https://v2.cn.vuejs.org/v2/api/#vm-nextTick">Vue官方文档</a></td><td></td><td></td></tr><tr><td>beforeUpdate</td><td>数据更新时调用，发生在虚拟 DOM 打补丁之前。<a href="https://v2.cn.vuejs.org/v2/api/#beforeUpdate">详见</a></td><td>仅H5平台支持</td><td></td></tr><tr><td>updated</td><td>由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。<a href="https://v2.cn.vuejs.org/v2/api/#updated">详见</a></td><td>仅H5平台支持</td><td></td></tr><tr><td>beforeDestroy</td><td>实例销毁之前调用。在这一步，实例仍然完全可用。<a href="https://v2.cn.vuejs.org/v2/api/#beforeDestroy">详见</a></td><td></td><td></td></tr><tr><td>destroyed</td><td>Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。<a href="https://v2.cn.vuejs.org/v2/api/#destroyed">详见</a></td><td></td><td></td></tr></tbody></table><h2 id="页面调用接口"><a href="#页面调用接口" class="headerlink" title="页面调用接口"></a>页面调用接口</h2><h3 id="getApp"><a href="#getApp" class="headerlink" title="#getApp()"></a><a href="https://uniapp.dcloud.net.cn/tutorial/page.html#getapp">#</a>getApp()</h3><p><code>getApp()</code> 函数用于获取当前应用实例，一般用于获取globalData。也可通过应用实例调用 <code>App.vue methods</code> 中定义的方法。 </p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">const</span> <span class="hljs-keyword">app</span> = getApp()<br>console.<span class="hljs-built_in">log</span>(<span class="hljs-keyword">app</span>.globalData)<br><span class="hljs-keyword">app</span>.doSomething() <span class="hljs-comment">// 调用 App.vue methods 中的 doSomething 方法</span><br><br></code></pre></td></tr></table></figure><p><strong>注意：</strong></p><ul><li>不要在定义于 <code>App()</code> 内的函数中，或调用 <code>App</code> 前调用 <code>getApp()</code> ，可以通过 <code>this.$scope</code> 获取对应的app实例</li><li>通过 <code>getApp()</code> 获取实例之后，不要私自调用生命周期函数。</li><li>当在首页<code>nvue</code>中使用<code>getApp()</code>不一定可以获取真正的<code>App</code>对象。对此提供了<code>const app = getApp(&#123;allowDefault: true&#125;)</code>用来获取原始的<code>App</code>对象，可以用来在首页对<code>globalData</code>等初始化</li></ul><h2 id="页面通讯"><a href="#页面通讯" class="headerlink" title="页面通讯"></a>页面通讯</h2><h3 id="uni-emit-eventName-OBJECT"><a href="#uni-emit-eventName-OBJECT" class="headerlink" title="#uni.$emit(eventName,OBJECT)"></a><a href="https://uniapp.dcloud.net.cn/tutorial/page.html#emit">#</a>uni.$emit(eventName,OBJECT)</h3><p>触发全局的自定义事件。附加参数都会传给监听器回调。</p><table><thead><tr><th>属性</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>eventName</td><td>String</td><td>事件名</td></tr><tr><td>OBJECT</td><td>Object</td><td>触发事件携带的附加参数</td></tr></tbody></table><p><strong>代码示例</strong></p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">uni.<span class="hljs-symbol">$emit</span>(<span class="hljs-string">&#x27;update&#x27;</span>,&#123;<span class="hljs-attr">msg</span>:<span class="hljs-string">&#x27;页面更新&#x27;</span>&#125;)<br></code></pre></td></tr></table></figure><p>复制代码</p><h3 id="uni-on-eventName-callback"><a href="#uni-on-eventName-callback" class="headerlink" title="#uni.$on(eventName,callback)"></a><a href="https://uniapp.dcloud.net.cn/tutorial/page.html#on">#</a>uni.$on(eventName,callback)</h3><p>监听全局的自定义事件。事件可以由 uni.$emit 触发，回调函数会接收所有传入事件触发函数的额外参数。</p><table><thead><tr><th>属性</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>eventName</td><td>String</td><td>事件名</td></tr><tr><td>callback</td><td>Function</td><td>事件的回调函数</td></tr></tbody></table><p><strong>代码示例</strong></p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade">uni.<span class="hljs-symbol">$o</span>n(<span class="hljs-string">&#x27;update&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)&#123;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;监听到事件来自 update ，携带参数 msg 为：&#x27;</span> + data.msg);<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="uni-once-eventName-callback"><a href="#uni-once-eventName-callback" class="headerlink" title="uni.$once(eventName,callback)"></a>uni.$once(eventName,callback)</h3><p>监听全局的自定义事件。事件可以由 uni.$emit 触发，但是只触发一次，在第一次触发之后移除监听器。</p><table><thead><tr><th>属性</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>eventName</td><td>String</td><td>事件名</td></tr><tr><td>callback</td><td>Function</td><td>事件的回调函数</td></tr></tbody></table><p><strong>代码示例</strong></p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade">uni.<span class="hljs-symbol">$o</span>nce(<span class="hljs-string">&#x27;update&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)&#123;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;监听到事件来自 update ，携带参数 msg 为：&#x27;</span> + data.msg);<br>&#125;)<br></code></pre></td></tr></table></figure><p>复制代码</p><h3 id="uni-off-eventName-callback"><a href="#uni-off-eventName-callback" class="headerlink" title="#uni.$off([eventName, callback])"></a><a href="https://uniapp.dcloud.net.cn/tutorial/page.html#off">#</a>uni.$off([eventName, callback])</h3><p>移除全局自定义事件监听器。</p><table><thead><tr><th>属性</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>eventName</td><td>Array＜String＞</td><td>事件名</td></tr><tr><td>callback</td><td>Function</td><td>事件的回调函数</td></tr></tbody></table><p><strong>Tips</strong></p><ul><li><p>如果没有提供参数，则移除所有的事件监听器；</p></li><li><p>如果只提供了事件，则移除该事件所有的监听器；</p></li><li><p>如果同时提供了事件与回调，则只移除这个回调的监听器；</p></li><li><p>提供的回调必须跟$on的回调为同一个才能移除这个回调的监听器；</p></li><li><p><strong>代码示例</strong></p><p><code>$emit</code>、<code>$on</code>、<code>$off</code>常用于跨页面、跨组件通讯，这里为了方便演示放在同一个页面</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;data&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">text</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">val</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">text</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;comunicationOff&quot;</span>&gt;</span>结束监听<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">  </span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">return</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">val</span>: <span class="hljs-number">0</span></span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;,</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-title function_">onLoad</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-built_in">setInterval</span>(<span class="hljs-function">()=&gt;</span>&#123;</span></span><br><span class="language-javascript"><span class="language-xml">uni.$emit(<span class="hljs-string">&#x27;add&#x27;</span>, &#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">data</span>: <span class="hljs-number">2</span></span></span><br><span class="language-javascript"><span class="language-xml">&#125;)</span></span><br><span class="language-javascript"><span class="language-xml">&#125;,<span class="hljs-number">1000</span>)</span></span><br><span class="language-javascript"><span class="language-xml">uni.$on(<span class="hljs-string">&#x27;add&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">add</span>)</span></span><br><span class="language-javascript"><span class="language-xml">&#125;,</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">methods</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-title function_">comunicationOff</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">uni.$off(<span class="hljs-string">&#x27;add&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">add</span>)</span></span><br><span class="language-javascript"><span class="language-xml">&#125;,</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-title function_">add</span>(<span class="hljs-params">e</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">this</span>.<span class="hljs-property">val</span> += e.<span class="hljs-property">data</span></span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml">  </span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.content</span> &#123;</span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-attribute">display</span>: flex;</span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-attribute">flex-direction</span>: column;</span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-attribute">align-items</span>: center;</span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-attribute">justify-content</span>: center;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml">  </span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.data</span> &#123;</span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-attribute">text-align</span>: center;</span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-attribute">line-height</span>: <span class="hljs-number">40px</span>;</span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-attribute">margin-top</span>: <span class="hljs-number">40px</span>;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml">  </span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-tag">button</span> &#123;</span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-attribute">margin</span>: <span class="hljs-number">20px</span> <span class="hljs-number">0</span>;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>复制代码</p><p><strong>注意事项</strong></p><ul><li>uni.$emit、 uni.$on 、 uni.$once 、uni.$off 触发的事件都是 App 全局级别的，跨任意组件，页面，nvue，vue 等</li><li>使用时，注意及时销毁事件监听，比如，页面 onLoad 里边 uni.$on 注册监听，onUnload 里边 uni.$off 移除，或者一次性的事件，直接使用 uni.$once 监听</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>uni-app</category>
      
    </categories>
    
    
    <tags>
      
      <tag>uni-app</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>uni-app随笔页面路由与资源的引用</title>
    <link href="/2023/02/14/uni-app%E9%9A%8F%E7%AC%94%E9%A1%B5%E9%9D%A2%E8%B7%AF%E7%94%B1/"/>
    <url>/2023/02/14/uni-app%E9%9A%8F%E7%AC%94%E9%A1%B5%E9%9D%A2%E8%B7%AF%E7%94%B1/</url>
    
    <content type="html"><![CDATA[<h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><p><code>uni-app</code>页面路由为框架统一管理，开发者需要在<a href="https://uniapp.dcloud.net.cn/collocation/pages#pages">pages.json</a>里配置每个路由页面的路径及页面样式。类似小程序在 app.json 中配置页面路由一样。所以 <code>uni-app</code> 的路由用法与 <code>Vue Router</code> 不同，如仍希望采用 <code>Vue Router</code> 方式管理路由，可在插件市场搜索 <a href="https://ext.dcloud.net.cn/search?q=vue-router">Vue-Router</a>。</p><h3 id="路由跳转"><a href="#路由跳转" class="headerlink" title="#路由跳转"></a><a href="https://uniapp.dcloud.net.cn/tutorial/page.html#%E8%B7%AF%E7%94%B1%E8%B7%B3%E8%BD%AC">#</a>路由跳转</h3><p><code>uni-app</code> 有两种页面路由跳转方式：使用<a href="https://uniapp.dcloud.net.cn/component/navigator">navigator</a>组件跳转、调用<a href="https://uniapp.dcloud.net.cn/api/router">API</a>跳转。</p><p><strong>注意</strong>：</p><p>页面返回时会自动关闭 loading 及 toast, modal 及 actionSheet 不会自动关闭。<br>页面关闭时，只是销毁了页面实例，未完成的网络请求、计时器等副作用需开发者自行处理。</p><h2 id="页面栈"><a href="#页面栈" class="headerlink" title="页面栈"></a>页面栈</h2><p>框架以栈的形式管理当前所有页面， 当发生路由切换的时候，页面栈的表现如下：</p><table><thead><tr><th>路由方式</th><th>页面栈表现</th><th>触发时机</th></tr></thead><tbody><tr><td>初始化</td><td>新页面入栈</td><td>uni-app 打开的第一个页面</td></tr><tr><td>打开新页面</td><td>新页面入栈</td><td>调用 API   <a href="https://uniapp.dcloud.net.cn/api/router#navigateto">uni.navigateTo</a>  、使用组件  <navigator open-type="navigate"/></td></tr><tr><td>页面重定向</td><td>当前页面出栈，新页面入栈</td><td>调用 API   <a href="https://uniapp.dcloud.net.cn/api/router#redirectto">uni.redirectTo</a>  、使用组件  <navigator open-type="redirectTo"/></td></tr><tr><td>页面返回</td><td>页面不断出栈，直到目标返回页</td><td>调用 API  <a href="https://uniapp.dcloud.net.cn/api/router#navigateback">uni.navigateBack</a>   、使用组件 <navigator open-type="navigateBack"/> 、用户按左上角返回按钮、安卓用户点击物理back按键</td></tr><tr><td>Tab 切换</td><td>页面全部出栈，只留下新的 Tab 页面</td><td>调用 API  <a href="https://uniapp.dcloud.net.cn/api/router#switchtab">uni.switchTab</a>  、使用组件  <navigator open-type="switchTab"/>  、用户切换 Tab</td></tr><tr><td>重加载</td><td>页面全部出栈，只留下新的页面</td><td>调用 API  <a href="https://uniapp.dcloud.net.cn/api/router#relaunch">uni.reLaunch</a>  、使用组件  <navigator open-type="reLaunch"/></td></tr></tbody></table><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">uni<span class="hljs-selector-class">.navigateTo</span>(&#123;<br>url: <span class="hljs-string">&#x27;/pages/face/face&#x27;</span><br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="互相引用"><a href="#互相引用" class="headerlink" title="互相引用"></a>互相引用</h2><h3 id="引用组件"><a href="#引用组件" class="headerlink" title="引用组件"></a>引用组件</h3><p>传统vue项目开发，引用组件需要<code>导入 - 注册 - 使用</code>三个步骤，如下：</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-comment">&lt;!-- 3.使用组件 --&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">uni-rate</span> <span class="hljs-attr">text</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">uni-rate</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// 1. 导入组件</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> uniRate <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/components/uni-rate/uni-rate.vue&#x27;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> </span></span><span class="hljs-template-variable">&#123;</span><br><span class="hljs-template-variable">components: &#123; uniRate &#125;</span><span class="language-xml"><span class="language-javascript"> <span class="hljs-comment">// 2. 注册组件</span></span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>复制代码</p><p>Vue 3.x增加了<code>script setup</code>特性，将三步优化为两步，无需注册步骤，更为简洁：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 2.使用组件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uni-rate</span> <span class="hljs-attr">text</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">uni-rate</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// 1. 导入组件</span></span><br><span class="language-javascript"><span class="hljs-keyword">import</span> uniRate <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/components/uni-rate/uni-rate.vue&#x27;</span>;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>uni-app</code>的<code>easycom</code>机制，将组件引用进一步优化，开发者只管使用，无需考虑导入和注册，更为高效：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 1.使用组件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uni-rate</span> <span class="hljs-attr">text</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">uni-rate</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在 uni-app 项目中，页面引用组件和组件引用组件的方式都是一样的（可以理解为：页面是一种特殊的组件），均支持通过 <code>easycom</code> 方式直接引用。</p><p>easycom 规范详细介绍，参考：<a href="https://uniapp.dcloud.net.cn/collocation/pages.html#easycom">easycom</a></p><h3 id="js-文件引入"><a href="#js-文件引入" class="headerlink" title="js 文件引入"></a>js 文件引入</h3><blockquote><p><code>js</code>文件或<code>script</code>标签内（包括 renderjs 等）引入<code>js</code>文件时，可以使用相对路径和绝对路径，形式如下</p></blockquote><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs clean"><span class="hljs-comment">// 绝对路径，@指向项目根目录，在cli项目中@指向src目录</span><br><span class="hljs-keyword">import</span> add <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/common/add.js&#x27;</span>;<br><span class="hljs-comment">// 相对路径</span><br><span class="hljs-keyword">import</span> add <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../common/add.js&#x27;</span>;<br></code></pre></td></tr></table></figure><p><strong>注意</strong></p><ul><li>js 文件不支持使用<code>/</code>开头的方式引入</li></ul><h2 id="NPM支持"><a href="#NPM支持" class="headerlink" title="#NPM支持"></a><a href="https://uniapp.dcloud.net.cn/tutorial/page-script.html#npm%E6%94%AF%E6%8C%81">#</a>NPM支持</h2><p>uni-app支持使用<strong>npm</strong>安装第三方包。</p><p>此文档要求开发者们对<strong>npm</strong>有一定的了解，因此不会再去介绍<strong>npm</strong>的基本功能。如若之前未接触过<strong>npm</strong>，请翻阅<a href="https://docs.npmjs.com/getting-started/what-is-npm">NPM官方文档</a>进行学习。</p><p><strong>初始化npm工程</strong></p><p>若项目之前未使用npm管理依赖（项目根目录下无package.json文件），先在项目根目录执行命令初始化npm工程：</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> init -y<br></code></pre></td></tr></table></figure><p>复制代码</p><p>cli项目默认已经有package.json了。HBuilderX创建的项目默认没有，需要通过初始化命令来创建。</p><p><strong>安装依赖</strong></p><p>在项目根目录执行命令安装npm包：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install packageName <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure><p>复制代码</p><p><strong>使用</strong></p><p>安装完即可使用npm包，js中引入npm包：</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs moonscript"><span class="hljs-keyword">import</span> <span class="hljs-built_in">package</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;packageName&#x27;</span><br>const <span class="hljs-built_in">package</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;packageName&#x27;</span>)<br></code></pre></td></tr></table></figure><p>复制代码</p><p><strong>注意</strong></p><ul><li>为多端兼容考虑，建议优先从 <a href="https://ext.dcloud.net.cn/">uni-app插件市场</a> 获取插件。直接从 npm 下载库很容易只兼容H5端。</li><li>非 H5 端不支持使用含有 dom、window 等操作的 vue 组件和 js 模块，安装的模块及其依赖的模块使用的 API 必须是 uni-app 已有的 <a href="https://uniapp.dcloud.net.cn/api/">API</a>（兼容小程序 API），比如：支持<a href="https://www.npmjs.com/package/amap-wx">高德地图微信小程序 SDK</a>。类似<a href="https://www.npmjs.com/package/jquery">jQuery</a> 等库只能用于H5端。</li><li>node_modules 目录必须在项目根目录下。不管是cli项目还是HBuilderX创建的项目。</li><li>关于ui库的获取，详见<a href="https://ask.dcloud.net.cn/article/35489">多端UI库</a></li></ul><h3 id="引用css"><a href="#引用css" class="headerlink" title="引用css"></a>引用css</h3><p>使用<code>@import</code>语句可以导入外联样式表，<code>@import</code>后跟需要导入的外联样式表的相对路径，用<code>;</code>表示语句结束。 </p><p><strong>示例代码：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-keyword">@import</span> <span class="hljs-string">&quot;../../common/uni.css&quot;</span>;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.uni-card</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">box-shadow</span>: none;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="模板内引入静态资源"><a href="#模板内引入静态资源" class="headerlink" title="模板内引入静态资源"></a>模板内引入静态资源</h3><blockquote><p><code>template</code>内引入静态资源，如<code>image</code>、<code>video</code>等标签的<code>src</code>属性时，可以使用相对路径或者绝对路径，形式如下</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 绝对路径，/static指根目录下的static目录，在cli项目中/static指src目录下的static目录 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">image</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;logo&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/static/logo.png&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">image</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">image</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;logo&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;@/static/logo.png&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">image</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 相对路径 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">image</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;logo&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../../static/logo.png&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">image</span>&gt;</span><br></code></pre></td></tr></table></figure><p>复制代码</p><p><strong>注意</strong></p><ul><li><code>@</code>开头的绝对路径以及相对路径会经过 base64 转换规则校验</li><li>引入的静态资源在非 web 平台，均不转为 base64。</li><li>web 平台，小于 4kb 的资源会被转换成 base64，其余不转。</li><li>自<code>HBuilderX 2.6.6</code>起<code>template</code>内支持<code>@</code>开头路径引入静态资源，旧版本不支持此方式</li><li>App 平台自<code>HBuilderX 2.6.9</code>起<code>template</code>节点中引用静态资源文件时（如：图片），调整查找策略为【基于当前文件的路径搜索】，与其他平台保持一致</li><li>支付宝小程序组件内 image 标签不可使用相对路径</li></ul><h3 id="css-引入静态资源"><a href="#css-引入静态资源" class="headerlink" title="#css 引入静态资源"></a><a href="https://uniapp.dcloud.net.cn/tutorial/page-static-assets.html#css-%E5%BC%95%E5%85%A5%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90">#</a>css 引入静态资源</h3><blockquote><p><code>css</code>文件或<code>style标签</code>内引入<code>css</code>文件时（scss、less 文件同理），可以使用相对路径或绝对路径（<code>HBuilderX 2.6.6</code>）</p></blockquote><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-comment">/* 绝对路径 */</span><br><span class="hljs-keyword">@import</span> url(<span class="hljs-string">&#x27;/common/uni.css&#x27;</span>);<br><span class="hljs-keyword">@import</span> url(<span class="hljs-string">&#x27;@/common/uni.css&#x27;</span>);<br><span class="hljs-comment">/* 相对路径 */</span><br><span class="hljs-keyword">@import</span> url(<span class="hljs-string">&#x27;../../common/uni.css&#x27;</span>);<br></code></pre></td></tr></table></figure><h3 id="静态资源引入注意事项"><a href="#静态资源引入注意事项" class="headerlink" title="静态资源引入注意事项"></a>静态资源引入注意事项</h3><p>通常项目中规定根目录下的 static 为静态资源文件夹（目前暂不支持修改），资源存放此处后，可在任意文件直接使用相对或者绝对路径引用,具体参考上述模板 <code>css/js/uts</code> 中引入静态资源的说明。</p><p>而非 <code>static</code> 目录的静态资源，不支持直接引用，需要在 <code>js/uts</code> 中使用 <code>import</code> 来引入，确保路径正确。</p><p>综上所述，我们总结一下静态资源引用的注意事项：</p><ul><li><p>在模板或者 <code>css</code> 文件使用 <code>static</code> 目录中的静态资源，无需特殊处理，可直接通过相对路径或者绝对路径直接引入。</p></li><li><p>在 <code>js/uts</code> 文件使用静态资源，需要使用 <code>import</code> 来引入。</p></li><li><p>不管在任何文件引入非 <code>static</code> 目中的静态资源，均需在 <code>js/uts</code> 文件使用 <code>import</code> 来引入。</p></li><li><h3 id="本地插件-非内置原生插件"><a href="#本地插件-非内置原生插件" class="headerlink" title="本地插件(非内置原生插件)"></a>本地插件(非内置原生插件)</h3><p><strong>本地插件</strong>，是uni-app项目nativeplugins目录(目录不存在则创建)下的原生插件。</p><h5 id="第一步：获取本地原生插件"><a href="#第一步：获取本地原生插件" class="headerlink" title="#第一步：获取本地原生插件"></a><a href="https://uniapp.dcloud.net.cn/plugin/native-plugin.html#%E7%AC%AC%E4%B8%80%E6%AD%A5-%E8%8E%B7%E5%8F%96%E6%9C%AC%E5%9C%B0%E5%8E%9F%E7%94%9F%E6%8F%92%E4%BB%B6">#</a>第一步：获取本地原生插件</h5><ul><li>方式一：插件市场下载免费uni-app原生插件</li></ul><p>可以登录<a href="https://ext.dcloud.net.cn/?cat1=5&cat2=51">uni原生插件市场</a>，在免费的插件详情页中点击“下载for离线打包”下载原生插件（zip格式），解压到HBuilderX的uni-app项目下的“nativeplugins”目录（如不存在则创建），以下是“DCloud-RichAlert”插件举例，它的下载地址是：<a href="https://ext.dcloud.net.cn/plugin?id=36">https://ext.dcloud.net.cn/plugin?id=36</a></p><p>下载解压后目录结构如下：</p><ul><li>方式二：开发者自己开发uni-app原生插件</li></ul><p>原生插件开发完成后按指定格式压缩为zip包，参考<a href="https://nativesupport.dcloud.net.cn/NativePlugin/course/package">uni-app原生插件格式说明文档</a>。 按上图的格式配置到uni-app项目下的“nativeplugins”目录。</p><h5 id="第二步：配置本地原生插件"><a href="#第二步：配置本地原生插件" class="headerlink" title="#第二步：配置本地原生插件"></a><a href="https://uniapp.dcloud.net.cn/plugin/native-plugin.html#%E7%AC%AC%E4%BA%8C%E6%AD%A5-%E9%85%8D%E7%BD%AE%E6%9C%AC%E5%9C%B0%E5%8E%9F%E7%94%9F%E6%8F%92%E4%BB%B6">#</a>第二步：配置本地原生插件</h5><p>在manifest.json -&gt; App原生插件配置 -&gt; 选择本地插件 -&gt; 选择需要打包生效的插件 -&gt; 保存后提交云端打包生效。</p><h5 id="第三步：开发调试本地原生插件"><a href="#第三步：开发调试本地原生插件" class="headerlink" title="#第三步：开发调试本地原生插件"></a><a href="https://uniapp.dcloud.net.cn/plugin/native-plugin.html#%E7%AC%AC%E4%B8%89%E6%AD%A5-%E5%BC%80%E5%8F%91%E8%B0%83%E8%AF%95%E6%9C%AC%E5%9C%B0%E5%8E%9F%E7%94%9F%E6%8F%92%E4%BB%B6">#</a>第三步：开发调试本地原生插件</h5><p>在vue页面或nvue页面引入这个原生插件。</p><p>使用uni.requireNativePlugin的api，参数为插件的id。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">const</span> dcRichAlert = uni.requireNativePlugin(<span class="hljs-string">&#x27;DCloud-RichAlert&#x27;</span>)<br></code></pre></td></tr></table></figure><p>复制代码</p><h5 id="第四步：打包发布"><a href="#第四步：打包发布" class="headerlink" title="#第四步：打包发布"></a><a href="https://uniapp.dcloud.net.cn/plugin/native-plugin.html#%E7%AC%AC%E5%9B%9B%E6%AD%A5-%E6%89%93%E5%8C%85%E5%8F%91%E5%B8%83">#</a>第四步：打包发布</h5><p>使用自定义基座开发调试本地原生插件后，不可直接将自定义基座apk作为正式版发布。 应该重新提交云端打包（不能勾选“自定义基座”）生成正式版本。</p><h1 id="页面样式与布局"><a href="#页面样式与布局" class="headerlink" title="页面样式与布局"></a>页面样式与布局</h1><p>uni-app 有 vue 页面、nvue 页面、uvue页面。</p><ul><li>vue 页面是 webview 渲染的</li><li>app-nvue 页面是原生渲染的，其样式比 web 会限制更多，另见<a href="https://uniapp.dcloud.net.cn/tutorial/nvue-css">nvue的css</a></li><li>app-uvue 页面是原生渲染的，是 web 的css子集，另见<a href="https://doc.dcloud.net.cn/uni-app-x/css/">uvue的css</a></li></ul><p>uni-app 的 css 与 web 的 css 基本一致。本文没有讲解 css 的用法。在你了解 web 的 css 的基础之上，本文讲述一些样式相关的注意事项。</p><p>本文重点介绍 vue 页面，也就是webview中的样式注意事项。</p><h2 id="css预处理器支持"><a href="#css预处理器支持" class="headerlink" title="#css预处理器支持"></a><a href="https://uniapp.dcloud.net.cn/tutorial/syntax-css.html#css%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8%E6%94%AF%E6%8C%81">#</a>css预处理器支持</h2><p>uni-app 支持less、sass、scss、stylus等预处理器。</p><p>参考： <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/CSS_preprocessor">css预处理器</a></p><h2 id="尺寸单位"><a href="#尺寸单位" class="headerlink" title="#尺寸单位"></a><a href="https://uniapp.dcloud.net.cn/tutorial/syntax-css.html#%E5%B0%BA%E5%AF%B8%E5%8D%95%E4%BD%8D">#</a>尺寸单位</h2><p><code>uni-app</code> 支持的通用 css 单位包括 px、rpx</p><ul><li>px 即屏幕像素</li><li>rpx 即响应式 px，一种根据屏幕宽度自适应的动态单位。以 750 宽的屏幕为基准，750rpx 恰好为屏幕宽度。屏幕变宽，rpx 实际显示效果会等比放大，但在 App（vue2 不含 nvue） 端和 H5（vue2） 端屏幕宽度达到 960px 时，默认将按照 375px 的屏幕宽度进行计算，具体配置参考：<a href="https://uniapp.dcloud.net.cn/collocation/pages#globalstyle">rpx 计算配置</a> 。</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>uni-app</category>
      
    </categories>
    
    
    <tags>
      
      <tag>uni-app</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>uni-app随笔_组件</title>
    <link href="/2023/02/07/uni-app%E9%9A%8F%E7%AC%94_%E7%BB%84%E4%BB%B6/"/>
    <url>/2023/02/07/uni-app%E9%9A%8F%E7%AC%94_%E7%BB%84%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h1><ul><li>组件是视图层的基本组成单元。</li><li>组件是一个单独且可复用的功能模块的封装。</li><li>每个组件，包括如下几个部分：以组件名称为标记的开始标签和结束标签、组件内容、组件属性、组件属性值。</li></ul><blockquote><p>注意：所有组件与属性名都是小写，单词之间以连字符<code>-</code>连接。 </p></blockquote><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">&lt;component-name property1<span class="hljs-operator">=</span><span class="hljs-string">&quot;value&quot;</span> property2<span class="hljs-operator">=</span><span class="hljs-string">&quot;value&quot;</span>&gt;<br>content<br>&lt;/component-name&gt;<br></code></pre></td></tr></table></figure><p>下面是一个基本组件的实例，在一个vue页面的根<code>&lt;view&gt;</code>组件下插入一个<code>&lt;button&gt;</code>组件。给这个组件的内容区写上文字“按钮”，同时给这个组件设置了一个属性“size”，并且“size”属性的值设为了“mini”。 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;mini&quot;</span>&gt;</span>按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h2 id="组件的事件"><a href="#组件的事件" class="headerlink" title="组件的事件"></a>组件的事件</h2><p>每个组件都有“事件”。事件就是在指定的条件下触发某个js方法。</p><p>比如button组件，有点击事件，也就是当手机用户点击这个button组件时，会触发这个事件。</p><p>事件也是组件的属性，只不过这类属性以<code>@</code>为前缀。</p><p>事件的属性值，指向一个在script的methods里定义过的js方法，还可以给方法传参数。</p><p>下面是组件事件的示例：</p><ul><li>click是button组件的点击事件，在用户点击这个button时触发</li><li>click指向了methods中定义的goto方法，并且传递了一个参数’&#x2F;pages&#x2F;about&#x2F;about’</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;mini&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;goto(&#x27;/pages/about/about&#x27;)&quot;</span>&gt;</span>按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">goto</span>(<span class="hljs-params">url</span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;按钮被点击了，且传入的参数是：&quot;</span> + url)</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h2 id="基础组件"><a href="#基础组件" class="headerlink" title="基础组件"></a>基础组件</h2><p>uni-app的组件，分为基础组件和扩展组件。</p><p>基础组件在uni-app框架中已经内置，无需将内置组件的文件导入项目，也无需注册内置组件，随时可以直接使用，比如<code>&lt;view&gt;</code>组件。</p><p>除了基础组件，都称为扩展组件。扩展组件需要将组件导入项目中才可以使用。</p><p>虽然不推荐使用HTML标签，但实际上如果开发者写了<code>div</code>等标签，在编译到非H5平台时也会被编译器转换为<code>view</code>标签，类似的还有<code>span</code>转<code>text</code>、<code>a</code>转<code>navigator</code>等，包括css里的元素选择器也会转。但为了管理方便、策略统一，新写代码时仍然建议使用view等组件 </p><p><code>uni-app</code> 基础组件规范，与小程序规范相近。如果了解小程序开发的话，uni-app的基础组件会感觉很熟悉。但需要注意组件上的事件绑定，需要以 vue 的事件绑定语法来绑定，如 bindchange&#x3D;”eventName” 事件，需要写成 <code>@change=&quot;eventName&quot;</code> </p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">picker</span> <span class="hljs-attr">mode</span>=<span class="hljs-string">&quot;date&quot;</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">&quot;date&quot;</span> <span class="hljs-attr">start</span>=<span class="hljs-string">&quot;2015-09-01&quot;</span> <span class="hljs-attr">end</span>=<span class="hljs-string">&quot;2020-09-01&quot;</span> @<span class="hljs-attr">change</span>=<span class="hljs-string">&quot;bindDateChange&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;picker&quot;</span>&gt;</span></span><br><span class="language-xml">  当前选择: </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">date</span>&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">picker</span>&gt;</span></span><br><span class="language-xml"></span><br></code></pre></td></tr></table></figure><h3 id="基础组件列表"><a href="#基础组件列表" class="headerlink" title="基础组件列表"></a>基础组件列表</h3><p><strong>视图容器（View Container）：</strong></p><table><thead><tr><th>组件名</th><th>说明</th></tr></thead><tbody><tr><td><a href="https://uniapp.dcloud.net.cn/component/view.html">view</a></td><td>视图容器，类似于HTML中的div</td></tr><tr><td><a href="https://uniapp.dcloud.net.cn/component/scroll-view.html">scroll-view</a></td><td>可滚动视图容器</td></tr><tr><td><a href="https://uniapp.dcloud.net.cn/component/swiper.html">swiper</a></td><td>滑块视图容器，比如用于轮播banner</td></tr><tr><td><a href="https://uniapp.dcloud.net.cn/component/match-media.html">match-media</a></td><td>屏幕动态适配组件，比如窄屏上不显示某些内容</td></tr><tr><td><a href="https://uniapp.dcloud.net.cn/component/movable-view.html#movable-area">movable-area</a></td><td>可拖动区域</td></tr><tr><td><a href="https://uniapp.dcloud.net.cn/component/movable-view.html#movable-view">movable-view</a></td><td>可移动的视图容器，在页面中可以拖拽滑动或双指缩放。movable-view必须在movable-area组件中</td></tr><tr><td><a href="https://uniapp.dcloud.net.cn/component/cover-view#cover-view">cover-view</a></td><td>可覆盖在原生组件的上的文本组件</td></tr><tr><td><a href="https://uniapp.dcloud.net.cn/component/cover-view#cover-image">cover-image</a></td><td>可覆盖在原生组件的上的图片组件</td></tr></tbody></table><p><strong>基础内容（Basic Content）：</strong></p><table><thead><tr><th>组件名</th><th>说明</th></tr></thead><tbody><tr><td><a href="https://uniapp.dcloud.net.cn/component/icon.html">icon</a></td><td>图标</td></tr><tr><td><a href="https://uniapp.dcloud.net.cn/component/text.html">text</a></td><td>文字</td></tr><tr><td><a href="https://uniapp.dcloud.net.cn/component/rich-text.html">rich-text</a></td><td>富文本显示组件</td></tr><tr><td><a href="https://uniapp.dcloud.net.cn/component/progress.html">progress</a></td><td>进度条</td></tr></tbody></table><p><strong>表单组件（Form）：</strong></p><table><thead><tr><th>标签名</th><th>说明</th></tr></thead><tbody><tr><td><a href="https://uniapp.dcloud.net.cn/component/button.html">button</a></td><td>按钮</td></tr><tr><td><a href="https://uniapp.dcloud.net.cn/component/checkbox.html">checkbox</a></td><td>多项选择器</td></tr><tr><td><a href="https://uniapp.dcloud.net.cn/component/editor.html">editor</a></td><td>富文本输入框</td></tr><tr><td><a href="https://uniapp.dcloud.net.cn/component/form.html">form</a></td><td>表单</td></tr><tr><td><a href="https://uniapp.dcloud.net.cn/component/input.html">input</a></td><td>输入框</td></tr><tr><td><a href="https://uniapp.dcloud.net.cn/component/label.html">label</a></td><td>标签</td></tr><tr><td><a href="https://uniapp.dcloud.net.cn/component/picker.html">picker</a></td><td>弹出式列表选择器</td></tr><tr><td><a href="https://uniapp.dcloud.net.cn/component/picker-view.html">picker-view</a></td><td>窗体内嵌式列表选择器</td></tr><tr><td><a href="https://uniapp.dcloud.net.cn/component/radio.html">radio</a></td><td>单项选择器</td></tr><tr><td><a href="https://uniapp.dcloud.net.cn/component/slider.html">slider</a></td><td>滑动选择器</td></tr><tr><td><a href="https://uniapp.dcloud.net.cn/component/switch.html">switch</a></td><td>开关选择器</td></tr><tr><td><a href="https://uniapp.dcloud.net.cn/component/textarea.html">textarea</a></td><td>多行文本输入框</td></tr></tbody></table><p><strong>路由与页面跳转（Navigation）：</strong></p><table><thead><tr><th>组件名</th><th>说明</th></tr></thead><tbody><tr><td><a href="https://uniapp.dcloud.net.cn/component/navigator.html">navigator</a></td><td>页面链接。类似于HTML中的a标签</td></tr></tbody></table><p><strong>媒体组件（Media）：</strong></p><table><thead><tr><th>组件名</th><th>说明</th></tr></thead><tbody><tr><td><a href="https://uniapp.dcloud.net.cn/component/audio.html">audio</a></td><td>音频</td></tr><tr><td><a href="https://uniapp.dcloud.net.cn/component/camera.html">camera</a></td><td>相机</td></tr><tr><td><a href="https://uniapp.dcloud.net.cn/component/image.html">image</a></td><td>图片</td></tr><tr><td><a href="https://uniapp.dcloud.net.cn/component/video.html">video</a></td><td>视频</td></tr><tr><td><a href="https://uniapp.dcloud.net.cn/component/live-player.html">live-player</a></td><td>直播播放</td></tr><tr><td><a href="https://uniapp.dcloud.net.cn/component/live-pusher.html">live-pusher</a></td><td>实时音视频录制，也称直播推流</td></tr></tbody></table><p><strong>地图（Map）：</strong></p><table><thead><tr><th>组件名</th><th>说明</th></tr></thead><tbody><tr><td><a href="https://uniapp.dcloud.net.cn/component/map.html">map</a></td><td>地图</td></tr></tbody></table><p><strong>画布（Canvas）：</strong></p><table><thead><tr><th>组件名</th><th>说明</th></tr></thead><tbody><tr><td><a href="https://uniapp.dcloud.net.cn/component/canvas.html">canvas</a></td><td>画布</td></tr></tbody></table><p><strong>webview（Web-view）：</strong></p><table><thead><tr><th>组件名</th><th>说明</th></tr></thead><tbody><tr><td><a href="https://uniapp.dcloud.net.cn/component/web-view.html">web-view</a></td><td>web浏览器组件</td></tr></tbody></table><p><strong>广告</strong></p><table><thead><tr><th>组件名</th><th>说明</th></tr></thead><tbody><tr><td><a href="https://uniapp.dcloud.net.cn/component/ad.html">ad</a></td><td>广告组件</td></tr><tr><td><a href="https://uniapp.dcloud.net.cn/component/ad-draw.html">ad-draw</a></td><td>沉浸视频流广告组件</td></tr></tbody></table><p><strong>页面属性配置</strong></p><table><thead><tr><th>组件名</th><th>说明</th></tr></thead><tbody><tr><td><a href="https://uniapp.dcloud.net.cn/component/custom-tab-bar.html">custom-tab-bar</a></td><td>底部tabbar自定义组件</td></tr><tr><td><a href="https://uniapp.dcloud.net.cn/component/navigation-bar.html">navigation-bar</a></td><td>页面顶部导航</td></tr><tr><td><a href="https://uniapp.dcloud.net.cn/component/page-meta.html">page-meta</a></td><td>页面属性配置节点</td></tr></tbody></table><p>详细使用方法参考官方文档</p>]]></content>
    
    
    <categories>
      
      <category>uni-app</category>
      
    </categories>
    
    
    <tags>
      
      <tag>uni-app</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>uni-app随笔_全局文件配置</title>
    <link href="/2023/02/03/uni-app%E9%9A%8F%E7%AC%94_%E5%85%A8%E5%B1%80%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE/"/>
    <url>/2023/02/03/uni-app%E9%9A%8F%E7%AC%94_%E5%85%A8%E5%B1%80%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="pages-json-页面路由"><a href="#pages-json-页面路由" class="headerlink" title="pages.json 页面路由"></a>pages.json 页面路由</h1><h1 id="配置项列表"><a href="#配置项列表" class="headerlink" title="配置项列表"></a>配置项列表</h1><p>常用</p><p><a href="https://uniapp.dcloud.net.cn/collocation/pages#globalstyle">globalStyle</a>   设置默认页面的窗口表现 </p><p><a href="https://uniapp.dcloud.net.cn/collocation/pages#pages">pages</a>  设置页面路径及窗口表现 </p><p><a href="https://uniapp.dcloud.net.cn/collocation/pages#tabbar">tabBar</a>   设置底部 tab 的表现 </p><p>entryPagePath   默认启动首页，新增于HBuilderX 3.7.0 </p><p>更多参考下面列表</p><table><thead><tr><th>属性</th><th>类型</th><th>必填</th><th>描述</th><th>平台兼容</th></tr></thead><tbody><tr><td><a href="https://uniapp.dcloud.net.cn/collocation/pages#globalstyle">globalStyle</a></td><td>Object</td><td>否</td><td>设置默认页面的窗口表现</td><td></td></tr><tr><td><a href="https://uniapp.dcloud.net.cn/collocation/pages#pages">pages</a></td><td>Object Array</td><td>是</td><td>设置页面路径及窗口表现</td><td></td></tr><tr><td><a href="https://uniapp.dcloud.net.cn/collocation/pages#easycom">easycom</a></td><td>Object</td><td>否</td><td>组件自动引入规则</td><td>2.5.5+</td></tr><tr><td><a href="https://uniapp.dcloud.net.cn/collocation/pages#tabbar">tabBar</a></td><td>Object</td><td>否</td><td>设置底部 tab 的表现</td><td></td></tr><tr><td><a href="https://uniapp.dcloud.net.cn/collocation/pages#condition">condition</a></td><td>Object</td><td>否</td><td>启动模式配置</td><td></td></tr><tr><td><a href="https://uniapp.dcloud.net.cn/collocation/pages#subPackages">subPackages</a></td><td>Object Array</td><td>否</td><td>分包加载配置</td><td>H5 不支持</td></tr><tr><td><a href="https://uniapp.dcloud.net.cn/collocation/pages#preloadrule">preloadRule</a></td><td>Object</td><td>否</td><td>分包预下载规则</td><td>微信小程序</td></tr><tr><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/workers.html">workers</a></td><td>String</td><td>否</td><td><code>Worker</code> 代码放置的目录</td><td>微信小程序</td></tr><tr><td><a href="https://uniapp.dcloud.net.cn/collocation/pages#leftwindow">leftWindow</a></td><td>Object</td><td>否</td><td>大屏左侧窗口</td><td>H5</td></tr><tr><td><a href="https://uniapp.dcloud.net.cn/collocation/pages#topwindow">topWindow</a></td><td>Object</td><td>否</td><td>大屏顶部窗口</td><td>H5</td></tr><tr><td><a href="https://uniapp.dcloud.net.cn/collocation/pages#rightwindow">rightWindow</a></td><td>Object</td><td>否</td><td>大屏右侧窗口</td><td>H5</td></tr><tr><td><a href="https://doc.dcloud.net.cn/uniCloud/uni-id/summary.html#uni-id-router">uniIdRouter</a></td><td>Object</td><td>否</td><td>自动跳转相关配置，新增于HBuilderX 3.5.0</td><td></td></tr><tr><td>entryPagePath</td><td>String</td><td>否</td><td>默认启动首页，新增于HBuilderX 3.7.0</td><td>微信小程序、支付宝小程序</td></tr></tbody></table><p>以下是一个包含了所有配置选项的 <code>pages.json</code> ：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">&#123;<br>&quot;pages&quot;: [&#123;<br>&quot;path&quot;: &quot;pages/component/<span class="hljs-keyword">index</span><span class="hljs-string">&quot;,</span><br><span class="hljs-string">&quot;</span>style<span class="hljs-string">&quot;: &#123;</span><br><span class="hljs-string">&quot;</span>navigationBarTitleText<span class="hljs-string">&quot;: &quot;</span>组件<span class="hljs-string">&quot;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">&#125;, &#123;</span><br><span class="hljs-string">&quot;</span><span class="hljs-keyword">path</span><span class="hljs-string">&quot;: &quot;</span>pages/API/<span class="hljs-keyword">index</span><span class="hljs-string">&quot;,</span><br><span class="hljs-string">&quot;</span>style<span class="hljs-string">&quot;: &#123;</span><br><span class="hljs-string">&quot;</span>navigationBarTitleText<span class="hljs-string">&quot;: &quot;</span>接口<span class="hljs-string">&quot;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">&#125;, &#123;</span><br><span class="hljs-string">&quot;</span><span class="hljs-keyword">path</span><span class="hljs-string">&quot;: &quot;</span>pages/component/<span class="hljs-keyword">view</span>/<span class="hljs-keyword">index</span><span class="hljs-string">&quot;,</span><br><span class="hljs-string">&quot;</span>style<span class="hljs-string">&quot;: &#123;</span><br><span class="hljs-string">&quot;</span>navigationBarTitleText<span class="hljs-string">&quot;: &quot;</span><span class="hljs-keyword">view</span><span class="hljs-string">&quot;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">&#125;],</span><br><span class="hljs-string">&quot;</span>condition<span class="hljs-string">&quot;: &#123; //模式配置，仅开发期间生效</span><br><span class="hljs-string">&quot;</span>current<span class="hljs-string">&quot;: 0, //当前激活的模式（list 的索引项）</span><br><span class="hljs-string">&quot;</span>list<span class="hljs-string">&quot;: [&#123;</span><br><span class="hljs-string">&quot;</span>name<span class="hljs-string">&quot;: &quot;</span>test<span class="hljs-string">&quot;, //模式名称</span><br><span class="hljs-string">&quot;</span><span class="hljs-keyword">path</span><span class="hljs-string">&quot;: &quot;</span>pages/component/<span class="hljs-keyword">view</span>/<span class="hljs-keyword">index</span><span class="hljs-string">&quot; //启动页面，必选</span><br><span class="hljs-string">&#125;]</span><br><span class="hljs-string">&#125;,</span><br><span class="hljs-string">&quot;</span>globalStyle<span class="hljs-string">&quot;: &#123;</span><br><span class="hljs-string">&quot;</span>navigationBarTextStyle<span class="hljs-string">&quot;: &quot;</span>black<span class="hljs-string">&quot;,</span><br><span class="hljs-string">&quot;</span>navigationBarTitleText<span class="hljs-string">&quot;: &quot;</span>演示<span class="hljs-string">&quot;,</span><br><span class="hljs-string">&quot;</span>navigationBarBackgroundColor<span class="hljs-string">&quot;: &quot;</span>#F8F8F8<span class="hljs-string">&quot;,</span><br><span class="hljs-string">&quot;</span>backgroundColor<span class="hljs-string">&quot;: &quot;</span>#F8F8F8<span class="hljs-string">&quot;,</span><br><span class="hljs-string">&quot;</span>usingComponents<span class="hljs-string">&quot;:&#123;</span><br><span class="hljs-string">&quot;</span>collapse-tree-item<span class="hljs-string">&quot;:&quot;</span>/components/collapse-tree-item<span class="hljs-string">&quot;</span><br><span class="hljs-string">&#125;,</span><br><span class="hljs-string">&quot;</span>renderingMode<span class="hljs-string">&quot;: &quot;</span>seperated<span class="hljs-string">&quot;, // 仅微信小程序，webrtc 无法正常时尝试强制关闭同层渲染</span><br><span class="hljs-string">&quot;</span>pageOrientation<span class="hljs-string">&quot;: &quot;</span>portrait<span class="hljs-string">&quot;, //横屏配置，全局屏幕旋转设置(仅 APP/微信/QQ小程序)，支持 auto / portrait / landscape</span><br><span class="hljs-string">&quot;</span>rpxCalcMaxDeviceWidth<span class="hljs-string">&quot;: 960,</span><br><span class="hljs-string">&quot;</span>rpxCalcBaseDeviceWidth<span class="hljs-string">&quot;: 375,</span><br><span class="hljs-string">&quot;</span>rpxCalcIncludeWidth<span class="hljs-string">&quot;: 750</span><br><span class="hljs-string">&#125;,</span><br><span class="hljs-string">&quot;</span>tabBar<span class="hljs-string">&quot;: &#123;</span><br><span class="hljs-string">&quot;</span>color<span class="hljs-string">&quot;: &quot;</span>#<span class="hljs-number">7</span>A7E83<span class="hljs-string">&quot;,</span><br><span class="hljs-string">&quot;</span>selectedColor<span class="hljs-string">&quot;: &quot;</span>#<span class="hljs-number">3</span>cc51f<span class="hljs-string">&quot;,</span><br><span class="hljs-string">&quot;</span>borderStyle<span class="hljs-string">&quot;: &quot;</span>black<span class="hljs-string">&quot;,</span><br><span class="hljs-string">&quot;</span>backgroundColor<span class="hljs-string">&quot;: &quot;</span>#ffffff<span class="hljs-string">&quot;,</span><br><span class="hljs-string">&quot;</span>height<span class="hljs-string">&quot;: &quot;</span><span class="hljs-number">50</span>px<span class="hljs-string">&quot;,</span><br><span class="hljs-string">&quot;</span>fontSize<span class="hljs-string">&quot;: &quot;</span><span class="hljs-number">10</span>px<span class="hljs-string">&quot;,</span><br><span class="hljs-string">&quot;</span>iconWidth<span class="hljs-string">&quot;: &quot;</span><span class="hljs-number">24</span>px<span class="hljs-string">&quot;,</span><br><span class="hljs-string">&quot;</span>spacing<span class="hljs-string">&quot;: &quot;</span><span class="hljs-number">3</span>px<span class="hljs-string">&quot;,</span><br><span class="hljs-string">    &quot;</span>iconfontSrc<span class="hljs-string">&quot;:&quot;</span>static/iconfont.ttf<span class="hljs-string">&quot;, // app tabbar 字体.ttf文件路径 app 3.4.4+</span><br><span class="hljs-string">&quot;</span>list<span class="hljs-string">&quot;: [&#123;</span><br><span class="hljs-string">&quot;</span>pagePath<span class="hljs-string">&quot;: &quot;</span>pages/component/<span class="hljs-keyword">index</span><span class="hljs-string">&quot;,</span><br><span class="hljs-string">&quot;</span>iconPath<span class="hljs-string">&quot;: &quot;</span>static/image/icon_component.png<span class="hljs-string">&quot;,</span><br><span class="hljs-string">&quot;</span>selectedIconPath<span class="hljs-string">&quot;: &quot;</span>static/image/icon_component_HL.png<span class="hljs-string">&quot;,</span><br><span class="hljs-string">&quot;</span>text<span class="hljs-string">&quot;: &quot;</span>组件<span class="hljs-string">&quot;,</span><br><span class="hljs-string">      &quot;</span>iconfont<span class="hljs-string">&quot;: &#123; // 优先级高于 iconPath，该属性依赖 tabbar 根节点的 iconfontSrc</span><br><span class="hljs-string">       &quot;</span>text<span class="hljs-string">&quot;: &quot;</span>\ue102<span class="hljs-string">&quot;,</span><br><span class="hljs-string">        &quot;</span>selectedText<span class="hljs-string">&quot;: &quot;</span>\ue103<span class="hljs-string">&quot;,</span><br><span class="hljs-string">        &quot;</span>fontSize<span class="hljs-string">&quot;: &quot;</span><span class="hljs-number">17</span>px<span class="hljs-string">&quot;,</span><br><span class="hljs-string">        &quot;</span>color<span class="hljs-string">&quot;: &quot;</span>#<span class="hljs-number">000000</span><span class="hljs-string">&quot;,</span><br><span class="hljs-string">        &quot;</span>selectedColor<span class="hljs-string">&quot;: &quot;</span>#<span class="hljs-number">0000</span>ff<span class="hljs-string">&quot;</span><br><span class="hljs-string">      &#125;</span><br><span class="hljs-string">&#125;, &#123;</span><br><span class="hljs-string">&quot;</span>pagePath<span class="hljs-string">&quot;: &quot;</span>pages/API/<span class="hljs-keyword">index</span><span class="hljs-string">&quot;,</span><br><span class="hljs-string">&quot;</span>iconPath<span class="hljs-string">&quot;: &quot;</span>static/image/icon_API.png<span class="hljs-string">&quot;,</span><br><span class="hljs-string">&quot;</span>selectedIconPath<span class="hljs-string">&quot;: &quot;</span>static/image/icon_API_HL.png<span class="hljs-string">&quot;,</span><br><span class="hljs-string">&quot;</span>text<span class="hljs-string">&quot;: &quot;</span>接口<span class="hljs-string">&quot;</span><br><span class="hljs-string">&#125;],</span><br><span class="hljs-string">&quot;</span>midButton<span class="hljs-string">&quot;: &#123;</span><br><span class="hljs-string">&quot;</span>width<span class="hljs-string">&quot;: &quot;</span><span class="hljs-number">80</span>px<span class="hljs-string">&quot;,</span><br><span class="hljs-string">&quot;</span>height<span class="hljs-string">&quot;: &quot;</span><span class="hljs-number">50</span>px<span class="hljs-string">&quot;,</span><br><span class="hljs-string">&quot;</span>text<span class="hljs-string">&quot;: &quot;</span>文字<span class="hljs-string">&quot;,</span><br><span class="hljs-string">&quot;</span>iconPath<span class="hljs-string">&quot;: &quot;</span>static/image/midButton_iconPath.png<span class="hljs-string">&quot;,</span><br><span class="hljs-string">&quot;</span>iconWidth<span class="hljs-string">&quot;: &quot;</span><span class="hljs-number">24</span>px<span class="hljs-string">&quot;,</span><br><span class="hljs-string">&quot;</span>backgroundImage<span class="hljs-string">&quot;: &quot;</span>static/image/midButton_backgroundImage.png<span class="hljs-string">&quot;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">&#125;,</span><br><span class="hljs-string">  &quot;</span>easycom<span class="hljs-string">&quot;: &#123;</span><br><span class="hljs-string">    &quot;</span>autoscan<span class="hljs-string">&quot;: true, //是否自动扫描组件</span><br><span class="hljs-string">    &quot;</span>custom<span class="hljs-string">&quot;: &#123;//自定义扫描规则</span><br><span class="hljs-string">      &quot;</span>^uni-(.*)<span class="hljs-string">&quot;: &quot;</span>@/components/uni-$<span class="hljs-number">1.</span>vue<span class="hljs-string">&quot;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">  &#125;,</span><br><span class="hljs-string">  &quot;</span>topWindow<span class="hljs-string">&quot;: &#123;</span><br><span class="hljs-string">    &quot;</span><span class="hljs-keyword">path</span><span class="hljs-string">&quot;: &quot;</span>responsive/top-window.vue<span class="hljs-string">&quot;,</span><br><span class="hljs-string">    &quot;</span>style<span class="hljs-string">&quot;: &#123;</span><br><span class="hljs-string">      &quot;</span>height<span class="hljs-string">&quot;: &quot;</span><span class="hljs-number">44</span>px<span class="hljs-string">&quot;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">  &#125;,</span><br><span class="hljs-string">  &quot;</span>leftWindow<span class="hljs-string">&quot;: &#123;</span><br><span class="hljs-string">    &quot;</span><span class="hljs-keyword">path</span><span class="hljs-string">&quot;: &quot;</span>responsive/<span class="hljs-keyword">left</span>-window.vue<span class="hljs-string">&quot;,</span><br><span class="hljs-string">    &quot;</span>style<span class="hljs-string">&quot;: &#123;</span><br><span class="hljs-string">      &quot;</span>width<span class="hljs-string">&quot;: &quot;</span><span class="hljs-number">300</span>px<span class="hljs-string">&quot;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">  &#125;,</span><br><span class="hljs-string">  &quot;</span>rightWindow<span class="hljs-string">&quot;: &#123;</span><br><span class="hljs-string">    &quot;</span><span class="hljs-keyword">path</span><span class="hljs-string">&quot;: &quot;</span>responsive/<span class="hljs-keyword">right</span>-window.vue<span class="hljs-string">&quot;,</span><br><span class="hljs-string">    &quot;</span>style<span class="hljs-string">&quot;: &#123;</span><br><span class="hljs-string">      &quot;</span>width<span class="hljs-string">&quot;: &quot;</span><span class="hljs-number">300</span>px<span class="hljs-string">&quot;</span><br><span class="hljs-string">    &#125;,</span><br><span class="hljs-string">    &quot;</span>matchMedia<span class="hljs-string">&quot;: &#123;</span><br><span class="hljs-string">      &quot;</span>minWidth<span class="hljs-string">&quot;: 768</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string">&#125;</span><br></code></pre></td></tr></table></figure><p>复制代码</p><h2 id="globalStyle"><a href="#globalStyle" class="headerlink" title="#globalStyle"></a><a href="https://uniapp.dcloud.net.cn/collocation/pages.html#globalstyle">#</a>globalStyle</h2><p>用于设置应用的状态栏、导航条、标题、窗口背景色等。</p><table><thead><tr><th>属性</th><th>类型</th><th>默认值</th><th>描述</th><th>平台差异说明</th></tr></thead><tbody><tr><td>navigationBarBackgroundColor</td><td>HexColor</td><td>#F8F8F8</td><td>导航栏背景颜色（同状态栏背景色）</td><td>APP与H5为#F8F8F8，小程序平台请参考相应小程序文档</td></tr><tr><td>navigationBarTextStyle</td><td>String</td><td>black</td><td>导航栏标题颜色及状态栏前景颜色，仅支持 black&#x2F;white</td><td>支付宝小程序不支持，请使用 <a href="https://opendocs.alipay.com/mini/api/xwq8e6">my.setNavigationBar</a></td></tr><tr><td>navigationBarTitleText</td><td>String</td><td></td><td>导航栏标题文字内容</td><td></td></tr><tr><td>navigationStyle</td><td>String</td><td>default</td><td>导航栏样式，仅支持 default&#x2F;custom。custom即取消默认的原生导航栏，需看<a href="https://uniapp.dcloud.net.cn/collocation/pages#customnav">使用注意</a></td><td>微信小程序 7.0+、百度小程序、H5、App（2.0.3+）</td></tr><tr><td>backgroundColor</td><td>HexColor</td><td>#ffffff</td><td>下拉显示出来的窗口的背景色</td><td>微信小程序</td></tr><tr><td>backgroundTextStyle</td><td>String</td><td>dark</td><td>下拉 loading 的样式，仅支持 dark &#x2F; light</td><td>微信小程序</td></tr><tr><td>enablePullDownRefresh</td><td>Boolean</td><td>false</td><td>是否开启下拉刷新，详见<a href="https://uniapp.dcloud.net.cn/tutorial/page.html#lifecycle">页面生命周期</a>。</td><td></td></tr><tr><td>onReachBottomDistance</td><td>Number</td><td>50</td><td>页面上拉触底事件触发时距页面底部距离，单位只支持px，详见<a href="https://uniapp.dcloud.net.cn/tutorial/page.html#lifecycle">页面生命周期</a></td><td></td></tr><tr><td>backgroundColorTop</td><td>HexColor</td><td>#ffffff</td><td>顶部窗口的背景色（bounce回弹区域）</td><td>仅 iOS 平台</td></tr><tr><td>backgroundColorBottom</td><td>HexColor</td><td>#ffffff</td><td>底部窗口的背景色（bounce回弹区域）</td><td>仅 iOS 平台</td></tr><tr><td>titleImage</td><td>String</td><td></td><td>导航栏图片地址（替换当前文字标题），支付宝小程序内必须使用https的图片链接地址</td><td>支付宝小程序、H5、APP</td></tr><tr><td>transparentTitle</td><td>String</td><td>none</td><td>导航栏整体（前景、背景）透明设置。支持 always 一直透明 &#x2F; auto 滑动自适应 &#x2F; none 不透明</td><td>支付宝小程序、H5、APP</td></tr><tr><td>titlePenetrate</td><td>String</td><td>NO</td><td>导航栏点击穿透</td><td>支付宝小程序、H5</td></tr><tr><td>pageOrientation</td><td>String</td><td>portrait</td><td>横屏配置，屏幕旋转设置，仅支持 auto &#x2F; portrait &#x2F; landscape 详见 <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/resizable.html">响应显示区域变化</a></td><td>App 2.4.7+、微信小程序、QQ小程序</td></tr><tr><td>animationType</td><td>String</td><td>pop-in</td><td>窗口显示的动画效果，详见：<a href="https://uniapp.dcloud.net.cn/api/router#animation">窗口动画</a></td><td>App</td></tr><tr><td>animationDuration</td><td>Number</td><td>300</td><td>窗口显示动画的持续时间，单位为 ms</td><td>App</td></tr><tr><td>app-plus</td><td>Object</td><td></td><td>设置编译到 App 平台的特定样式，配置项参考下方 <a href="https://uniapp.dcloud.net.cn/collocation/pages#app-plus">app-plus</a></td><td>App</td></tr><tr><td>h5</td><td>Object</td><td></td><td>设置编译到 H5 平台的特定样式，配置项参考下方 <a href="https://uniapp.dcloud.net.cn/collocation/pages#h5">H5</a></td><td>H5</td></tr><tr><td>mp-alipay</td><td>Object</td><td></td><td>设置编译到 mp-alipay 平台的特定样式，配置项参考下方 <a href="https://uniapp.dcloud.net.cn/collocation/pages#mp-alipay">MP-ALIPAY</a></td><td>支付宝小程序</td></tr><tr><td>mp-weixin</td><td>Object</td><td></td><td>设置编译到 mp-weixin 平台的特定样式，配置项参考下方 <a href="https://uniapp.dcloud.net.cn/collocation/pages#mp-weixin">MP-WEIXIN</a></td><td>微信小程序</td></tr><tr><td>mp-baidu</td><td>Object</td><td></td><td>设置编译到 mp-baidu 平台的特定样式，配置项参考下方 <a href="https://uniapp.dcloud.net.cn/collocation/pages#mp-baidu">MP-BAIDU</a></td><td>百度小程序</td></tr><tr><td>mp-toutiao</td><td>Object</td><td></td><td>设置编译到 mp-toutiao 平台的特定样式</td><td>抖音小程序</td></tr><tr><td>mp-lark</td><td>Object</td><td></td><td>设置编译到 mp-lark 平台的特定样式</td><td>飞书小程序</td></tr><tr><td>mp-qq</td><td>Object</td><td></td><td>设置编译到 mp-qq 平台的特定样式</td><td>QQ小程序</td></tr><tr><td>mp-kuaishou</td><td>Object</td><td></td><td>设置编译到 mp-kuaishou 平台的特定样式</td><td>快手小程序</td></tr><tr><td>mp-jd</td><td>Object</td><td></td><td>设置编译到 mp-jd 平台的特定样式</td><td>京东小程序</td></tr><tr><td>usingComponents</td><td>Object</td><td></td><td>引用小程序组件，参考 <a href="https://uniapp.dcloud.net.cn/tutorial/miniprogram-subject.html#%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%84%E4%BB%B6%E6%94%AF%E6%8C%81">小程序组件</a></td><td></td></tr><tr><td>renderingMode</td><td>String</td><td></td><td>同层渲染，webrtc(实时音视频) 无法正常时尝试配置 seperated 强制关掉同层</td><td>微信小程序</td></tr><tr><td>leftWindow</td><td>Boolean</td><td>true</td><td>当存在 leftWindow 时，默认是否显示 leftWindow</td><td>H5</td></tr><tr><td>topWindow</td><td>Boolean</td><td>true</td><td>当存在 topWindow 时，默认是否显示 topWindow</td><td>H5</td></tr><tr><td>rightWindow</td><td>Boolean</td><td>true</td><td>当存在 rightWindow 时，默认是否显示 rightWindow</td><td>H5</td></tr><tr><td>rpxCalcMaxDeviceWidth</td><td>Number</td><td>960</td><td>rpx 计算所支持的最大设备宽度，单位 px</td><td>App（vue2 且不含 nvue）、H5（2.8.12+）</td></tr><tr><td>rpxCalcBaseDeviceWidth</td><td>Number</td><td>375</td><td>rpx 计算使用的基准设备宽度，设备实际宽度超出 rpx 计算所支持的最大设备宽度时将按基准宽度计算，单位 px</td><td>App（vue2 且不含 nvue）、H5（2.8.12+）</td></tr><tr><td>rpxCalcIncludeWidth</td><td>Number</td><td>750</td><td>rpx 计算特殊处理的值，始终按实际的设备宽度计算，单位 rpx</td><td>App（vue2 且不含 nvue）、H5（2.8.12+）</td></tr><tr><td>dynamicRpx</td><td>Boolean</td><td>false</td><td>动态 rpx，屏幕大小变化会重新渲染 rpx</td><td>App-nvue（vue3 固定值为 true） 3.2.13+</td></tr><tr><td>maxWidth</td><td>Number</td><td></td><td>单位px，当浏览器可见区域宽度大于maxWidth时，两侧留白，当小于等于maxWidth时，页面铺满；不同页面支持配置不同的maxWidth；maxWidth &#x3D; leftWindow(可选)+page(页面主体)+rightWindow(可选)</td><td>H5（2.9.9+）</td></tr></tbody></table><p><strong>注意</strong></p><ul><li><p>支付宝小程序使用<code>titleImage</code>时必须使用<code>https</code>的图片链接地址，需要真机调试才能看到效果，支付宝开发者工具内无效果</p></li><li><p><code>globalStyle</code>中设置的<code>titleImage</code>也会覆盖掉<code>pages</code>-&gt;<code>style</code>内的设置文字标题</p></li><li><p>使用 <code>maxWidth</code> 时，页面内fixed元素需要使用–window-left,–window-right来保证布局位置正确</p></li><li><p><code>dynamicRpx</code> vue3 nvue页面已移除此配置，升级为横竖屏切换自动rpx，如果不需要可以使用 px</p></li></ul><p>tabBar</p><p>如果应用是一个多 tab 应用，可以通过 tabBar 配置项指定一级导航栏，以及 tab 切换时显示的对应页。</p><p>在 pages.json 中提供 tabBar 配置，不仅仅是为了方便快速开发导航，更重要的是在App和小程序端提升性能。在这两个平台，底层原生引擎在启动时无需等待js引擎初始化，即可直接读取 pages.json 中配置的 tabBar 信息，渲染原生tab。</p><p><strong>Tips</strong></p><ul><li>当设置 position 为 top 时，将不会显示 icon</li><li>tabBar 中的 list 是一个数组，只能配置最少2个、最多5个 tab，tab 按数组的顺序排序。</li><li>tabbar 切换第一次加载时可能渲染不及时，可以在每个tabbar页面的onLoad生命周期里先弹出一个等待雪花（hello uni-app使用了此方式）</li><li>tabbar 的页面展现过一次后就保留在内存中，再次切换 tabbar 页面，只会触发每个页面的onShow，不会再触发onLoad。</li><li>顶部的 tabbar 目前仅微信小程序上支持。需要用到顶部选项卡的话，建议不使用 tabbar 的顶部设置，而是自己做顶部选项卡，可参考 hello uni-app-&gt;模板-&gt;顶部选项卡。</li></ul><p><strong>属性说明：</strong></p><table><thead><tr><th>属性</th><th>类型</th><th>必填</th><th>默认值</th><th>描述</th><th>平台差异说明</th></tr></thead><tbody><tr><td>color</td><td>HexColor</td><td>是</td><td></td><td>tab 上的文字默认颜色</td><td></td></tr><tr><td>selectedColor</td><td>HexColor</td><td>是</td><td></td><td>tab 上的文字选中时的颜色</td><td></td></tr><tr><td>backgroundColor</td><td>HexColor</td><td>是</td><td></td><td>tab 的背景色</td><td></td></tr><tr><td>borderStyle</td><td>String</td><td>否</td><td>black</td><td>tabbar 上边框的颜色，可选值 black&#x2F;white，也支持其他颜色值</td><td>App 2.3.4+ 、H5 3.0.0+</td></tr><tr><td>blurEffect</td><td>String</td><td>否</td><td>none</td><td>iOS 高斯模糊效果，可选值 dark&#x2F;extralight&#x2F;light&#x2F;none（参考:<a href="https://ask.dcloud.net.cn/article/36617">使用说明</a>）</td><td>App 2.4.0+ 支持、H5 3.0.0+（只有最新版浏览器才支持）</td></tr><tr><td>list</td><td>Array</td><td>是</td><td></td><td>tab 的列表，详见 list 属性说明，最少2个、最多5个 tab</td><td></td></tr><tr><td>position</td><td>String</td><td>否</td><td>bottom</td><td>可选值 bottom、top</td><td>top 值仅微信小程序支持</td></tr><tr><td>fontSize</td><td>String</td><td>否</td><td>10px</td><td>文字默认大小</td><td>App 2.3.4+、H5 3.0.0+</td></tr><tr><td>iconWidth</td><td>String</td><td>否</td><td>24px</td><td>图标默认宽度（高度等比例缩放）</td><td>App 2.3.4+、H5 3.0.0+</td></tr><tr><td>spacing</td><td>String</td><td>否</td><td>3px</td><td>图标和文字的间距</td><td>App 2.3.4+、H5 3.0.0+</td></tr><tr><td>height</td><td>String</td><td>否</td><td>50px</td><td>tabBar 默认高度</td><td>App 2.3.4+、H5 3.0.0+</td></tr><tr><td>midButton</td><td>Object</td><td>否</td><td></td><td>中间按钮 仅在 list 项为偶数时有效</td><td>App 2.3.4+、H5 3.0.0+</td></tr><tr><td>iconfontSrc</td><td>String</td><td>否</td><td></td><td>list设置 iconfont 属性时，需要指定字体文件路径</td><td>App 3.4.4+、H5 3.5.3+</td></tr><tr><td>backgroundImage</td><td>String</td><td>否</td><td></td><td>设置背景图片,优先级高于 backgroundColor</td><td>App</td></tr><tr><td>backgroundRepeat</td><td>String</td><td>否</td><td></td><td>设置标题栏的背景图平铺方式，可取值：”repeat” - 背景图片在垂直方向和水平方向平铺；”repeat-x” - 背景图片在水平方向平铺，垂直方向拉伸；”repeat-y” - 背景图片在垂直方向平铺，水平方向拉伸；”no-repeat” - 背景图片在垂直方向和水平方向都拉伸。 默认使用 “no-repeat”</td><td>App</td></tr><tr><td>redDotColor</td><td>String</td><td>否</td><td></td><td>tabbar上红点颜色</td><td>App</td></tr></tbody></table><p>其中 list 接收一个数组，数组中的每个项都是一个对象，其属性值如下：</p><table><thead><tr><th>属性</th><th>类型</th><th>必填</th><th>说明</th><th>平台差异</th></tr></thead><tbody><tr><td>pagePath</td><td>String</td><td>是</td><td>页面路径，必须在 pages 中先定义</td><td></td></tr><tr><td>text</td><td>String</td><td>是</td><td>tab 上按钮文字，在 App 和 H5 平台为非必填。例如中间可放一个没有文字的+号图标</td><td></td></tr><tr><td>iconPath</td><td>String</td><td>否</td><td>图片路径，icon 大小限制为40kb，建议尺寸为 81px * 81px，当 position 为 top 时，此参数无效，不支持网络图片，不支持字体图标</td><td></td></tr><tr><td>selectedIconPath</td><td>String</td><td>否</td><td>选中时的图片路径，icon 大小限制为40kb，建议尺寸为 81px * 81px ，当 position 为 top 时，此参数无效</td><td></td></tr><tr><td>visible</td><td>Boolean</td><td>否</td><td>该项是否显示，默认显示</td><td>App (3.2.10+)、H5 (3.2.10+)</td></tr><tr><td>iconfont</td><td>Object</td><td>否</td><td>字体图标，优先级高于 iconPath</td><td>App（3.4.4+）、H5 (3.5.3+)</td></tr></tbody></table><p><strong>midButton 属性说明</strong></p><table><thead><tr><th>属性</th><th>类型</th><th>必填</th><th>默认值</th><th>描述</th><th></th></tr></thead><tbody><tr><td>width</td><td>String</td><td>否</td><td>80px</td><td>中间按钮的宽度，tabBar 其它项为减去此宽度后平分，默认值为与其它项平分宽度</td><td></td></tr><tr><td>height</td><td>String</td><td>否</td><td>50px</td><td>中间按钮的高度，可以大于 tabBar 高度，达到中间凸起的效果</td><td></td></tr><tr><td>text</td><td>String</td><td>否</td><td></td><td>中间按钮的文字</td><td></td></tr><tr><td>iconPath</td><td>String</td><td>否</td><td></td><td>中间按钮的图片路径</td><td></td></tr><tr><td>iconWidth</td><td>String</td><td>否</td><td>24px</td><td>图片宽度（高度等比例缩放）</td><td></td></tr><tr><td>backgroundImage</td><td>String</td><td>否</td><td></td><td>中间按钮的背景图片路径</td><td></td></tr><tr><td>iconfont</td><td>Object</td><td>否</td><td></td><td>字体图标，优先级高于 iconPath</td><td>App（3.4.4+）</td></tr></tbody></table><p>midButton没有pagePath，需监听点击事件，自行处理点击后的行为逻辑。监听点击事件为调用API：uni.onTabBarMidButtonTap，详见<a href="https://uniapp.dcloud.io/api/ui/tabbar?id=ontabbarmidbuttontap">https://uniapp.dcloud.io/api/ui/tabbar?id=ontabbarmidbuttontap</a></p><p><strong>iconfont参数说明：</strong></p><table><thead><tr><th>属性</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>text</td><td>String</td><td>字库 Unicode 码</td></tr><tr><td>selectedText</td><td>String</td><td>选中后字库 Unicode 码</td></tr><tr><td>fontSize</td><td>String</td><td>字体图标字号(px)</td></tr><tr><td>color</td><td>String</td><td>字体图标颜色</td></tr><tr><td>selectedColor</td><td>String</td><td>字体图标选中颜色</td></tr></tbody></table><h4 id="tabbar常见问题"><a href="#tabbar常见问题" class="headerlink" title="#tabbar常见问题"></a><a href="https://uniapp.dcloud.net.cn/collocation/pages.html#tips-tabbar">#</a><strong>tabbar常见问题</strong></h4><ul><li><p>tabbar 的 js api 见<a href="https://uniapp.dcloud.io/api/ui/tabbar">接口-界面-tabbar</a>，可实现动态显示隐藏（如弹出层无法覆盖tabbar）、内容修改（如国际化）、item加角标等功能。hello uni-app中也有示例。</p></li><li><p>tabbar 的 item 点击事件见<a href="https://uniapp.dcloud.io/tutorial/page.html#lifecycle">页面生命周期的onTabItemTap</a>。</p></li><li><p>代码跳转到 tabbar 页面，api只能使用<a href="https://uniapp.dcloud.io/api/router?id=switchtab">uni.switchTab</a>，不能使用uni.navigateTo、uni.redirectTo；使用navigator组件跳转时必须设置<a href="https://uniapp.dcloud.io/component/navigator">open-type&#x3D;”switchTab”</a></p></li><li><p>tabbar 的默认高度，在不同平台不一样。App端的默认高度在HBuilderX 2.3.4起从56px调整为50px，与H5端统一。开发者也可以自行设定高度，调回56px。<a href="https://uniapp.dcloud.io/tutorial/syntax-css.html#%E5%9B%BA%E5%AE%9A%E5%80%BC">详见</a></p></li><li><p>tabbar 在H5端是div模拟的，属于前端屏幕窗口的一部分，如果要使用bottom居底定位方式，应该使用css变量<code>--window-bottom</code>，比如悬浮在tabbar上方10px的按钮，样式如下<code>bottom: calc(var(--window-bottom) + 10px)</code></p></li><li><p>中间带+号的tabbar模板例子，<a href="https://ext.dcloud.net.cn/plugin?id=98">参考</a>。可跨端，但+号不凸起。如需中间凸起，配置tabbar的midButton。</p></li><li><p>如果是需要先登录、后进入tab页面，不需要把登录页设为首页，首页仍然是tabbar页，可参考<a href="https://ext.dcloud.net.cn/plugin?id=13">云端一体登录模板</a></p></li><li><p>前端弹出遮罩层挡不住tabbar的问题，跨端处理方式时动态隐藏tabbar。App端可以使用plus.nativeObj.view或subNVue做弹出和遮罩，可参考这个<a href="https://ext.dcloud.net.cn/plugin?id=69">底部原生图标分享菜单例子</a></p></li><li><p>微信小程序模拟器1.02.1904090版有bug，在缩放模拟器页面百分比后，tabbar点击多次后就会卡死。真机无碍，使用时注意。<a href="https://developers.weixin.qq.com/community/develop/doc/0002e6e6bf0d602d8c783e10756400">详见</a></p></li><li><p>PC宽屏上，当页面存在topWindow或leftWindow或rightWindow等多窗体结构时，若想改变 tabbar 显示的位置，请使用 <a href="https://uniapp.dcloud.io/component/custom-tab-bar">custom-tab-bar组件</a> 配置，若想隐藏 tabbar，可以使用如下 css（好处是可以和 leftwindow 等窗体联动）：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-class">.uni-app--showleftwindow</span> + <span class="hljs-selector-class">.uni-tabbar-bottom</span> &#123;<br><span class="hljs-attribute">display</span>: none;<br>&#125;<br></code></pre></td></tr></table></figure><p>复制代码</p></li></ul><p><strong>代码示例</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs css">&quot;tabBar&quot;: &#123;<br>&quot;<span class="hljs-attribute">color</span>&quot;: <span class="hljs-string">&quot;#7A7E83&quot;</span>,<br><span class="hljs-string">&quot;selectedColor&quot;</span>: <span class="hljs-string">&quot;#3cc51f&quot;</span>,<br><span class="hljs-string">&quot;borderStyle&quot;</span>: <span class="hljs-string">&quot;black&quot;</span>,<br><span class="hljs-string">&quot;backgroundColor&quot;</span>: <span class="hljs-string">&quot;#ffffff&quot;</span>,<br><span class="hljs-string">&quot;list&quot;</span>: [&#123;<br>&quot;pagePath&quot;: <span class="hljs-string">&quot;pages/component/index&quot;</span>,<br><span class="hljs-string">&quot;iconPath&quot;</span>: <span class="hljs-string">&quot;static/image/icon_component.png&quot;</span>,<br><span class="hljs-string">&quot;selectedIconPath&quot;</span>: <span class="hljs-string">&quot;static/image/icon_component_HL.png&quot;</span>,<br><span class="hljs-string">&quot;text&quot;</span>: <span class="hljs-string">&quot;组件&quot;</span><br>&#125;, &#123;<br>&quot;pagePath&quot;: <span class="hljs-string">&quot;pages/API/index&quot;</span>,<br><span class="hljs-string">&quot;iconPath&quot;</span>: <span class="hljs-string">&quot;static/image/icon_API.png&quot;</span>,<br><span class="hljs-string">&quot;selectedIconPath&quot;</span>: <span class="hljs-string">&quot;static/image/icon_API_HL.png&quot;</span>,<br><span class="hljs-string">&quot;text&quot;</span>: <span class="hljs-string">&quot;接口&quot;</span><br>&#125;]<br>&#125;<br></code></pre></td></tr></table></figure><p>复制代码</p><h4 id="自定义tabbar"><a href="#自定义tabbar" class="headerlink" title="#自定义tabbar"></a><a href="https://uniapp.dcloud.net.cn/collocation/pages.html#custom-tab-bar">#</a>自定义tabbar</h4><p>原生tabBar是相对固定的配置方式，可能无法满足所有场景，这就涉及到自定义tabBar。</p><p>但注意除了H5端，自定义tabBar的性能体验会低于原生tabBar。App和小程序端非必要不要自定义。</p><ul><li>H5端的自定义tabBar组件：H5端不存在原生tabBar性能更高的概念，并且宽屏下常见的tabBar在顶部而不是底部，此时可以使用 <a href="https://uniapp.dcloud.io/component/custom-tab-bar">custom-tab-bar组件</a> 来自定义</li><li>普通自定义tabBar：使用view自行绘制tabBar。如果页面是多页方式，切换tabBar将无法保持底部tabBar一直显示。所以这种情况建议使用单页方式。单页方式，如果是复杂页面，应用性能会下降明显，需减少页面复杂度。如果是App端，nvue单页的性能会显著高于vue页面</li><li>微信小程序自定义tabbar：微信提供一直基于webview自定义tabBar的方案。该功能体验不佳，不太推荐使用。如果要使用，参考<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/ability/custom-tabbar.html">微信文档</a>，项目根创建 custom-tab-bar 目录，注意里边的代码是 wxml,wxss，不是 vue，uni-app编译器会直接拷贝该目录到微信小程序中</li><li>原生的tabbar有且只有一个且在首页。二级页如需的tab，需自行编写view来实现。一般二级页面更适合的导航是 <a href="https://ext.dcloud.net.cn/plugin?id=54">segement组件</a></li></ul><h1 id="manifest-json-应用配置"><a href="#manifest-json-应用配置" class="headerlink" title="manifest.json 应用配置"></a>manifest.json 应用配置</h1><p><code>manifest.json</code> 文件是应用的配置文件，用于指定应用的名称、图标、权限等。HBuilderX 创建的工程此文件在根目录，CLI 创建的工程此文件在 src 目录。</p><h2 id="配置项列表-1"><a href="#配置项列表-1" class="headerlink" title="#配置项列表"></a><a href="https://uniapp.dcloud.net.cn/collocation/manifest.html#%E9%85%8D%E7%BD%AE%E9%A1%B9%E5%88%97%E8%A1%A8">#</a>配置项列表</h2><p>常用</p><p>name   应用名称 </p><p>appid   应用标识 </p><p>description  应用描述 </p><p>了解更多参考官方文档</p><h1 id="App-vue"><a href="#App-vue" class="headerlink" title="App.vue"></a>App.vue</h1><p><code>App.vue/uvue</code>是uni-app的主组件。uni-app js引擎版是app.vue。uni-app x是app.uvue。以下出现的<code>app.vue</code>一般泛指包含了<code>app.uvue</code></p><p>所有页面都是在<code>App.vue</code>下进行切换的，是应用入口文件。但<code>App.vue</code>本身不是页面，这里不能编写视图元素，也就是没有<code>&lt;template&gt;</code>。</p><p>这个文件的作用包括：监听应用生命周期、配置全局样式、配置全局的存储globalData</p><p>应用生命周期仅可在<code>App.vue</code>中监听，在页面监听无效。</p><p>开发常用</p><p>onLaunch    当<code>uni-app</code> 初始化完成时触发（全局只触发一次），参数为应用启动参数，同 <a href="https://uniapp.dcloud.net.cn/api/getLaunchOptionsSync.html#getlaunchoptionssync">uni.getLaunchOptionsSync</a> 的返回值 </p><p>onShow   当 <code>uni-app</code> 启动，或从后台进入前台显示，参数为应用启动参数，同 <a href="https://uniapp.dcloud.net.cn/api/getLaunchOptionsSync.html#getlaunchoptionssync">uni.getLaunchOptionsSync</a> 的返回值 </p><p>onHide    当 <code>uni-app</code> 从前台进入后台 </p><p>onError   当 <code>uni-app</code> 报错时触发 </p><p>onExit   监听应用退出 </p><p>实例</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs arcade">&lt;script&gt;<br><span class="hljs-comment">// 只能在App.vue里监听应用的生命周期</span><br>export default &#123;<br><span class="hljs-attr">onLaunch</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">options</span>) &#123;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;App Launch&#x27;</span>)<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;应用启动路径：&#x27;</span>, options.path)<br>&#125;,<br><span class="hljs-attr">onShow</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">options</span>) &#123;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;App Show&#x27;</span>)<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;应用启动路径：&#x27;</span>, options.path)<br>&#125;,<br><span class="hljs-attr">onHide</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;App Hide&#x27;</span>)<br>&#125;<br>&#125;<br>&lt;/script&gt;<br><br></code></pre></td></tr></table></figure><p>更多参考</p><p><code>uni-app</code> 支持如下应用生命周期函数：</p><table><thead><tr><th>函数名</th><th>说明</th><th>平台兼容</th></tr></thead><tbody><tr><td>onLaunch</td><td>当<code>uni-app</code> 初始化完成时触发（全局只触发一次），参数为应用启动参数，同 <a href="https://uniapp.dcloud.net.cn/api/getLaunchOptionsSync.html#getlaunchoptionssync">uni.getLaunchOptionsSync</a> 的返回值</td><td></td></tr><tr><td>onShow</td><td>当 <code>uni-app</code> 启动，或从后台进入前台显示，参数为应用启动参数，同 <a href="https://uniapp.dcloud.net.cn/api/getLaunchOptionsSync.html#getlaunchoptionssync">uni.getLaunchOptionsSync</a> 的返回值</td><td></td></tr><tr><td>onHide</td><td>当 <code>uni-app</code> 从前台进入后台</td><td></td></tr><tr><td>onError</td><td>当 <code>uni-app</code> 报错时触发</td><td>app-uvue 不支持</td></tr><tr><td>onUniNViewMessage</td><td>对 <code>nvue</code> 页面发送的数据进行监听，可参考 <a href="https://uniapp.dcloud.io/tutorial/nvue-api?id=communication">nvue 向 vue 通讯</a></td><td>app-uvue 不支持</td></tr><tr><td>onUnhandledRejection</td><td>对未处理的 Promise 拒绝事件监听函数（2.8.1+ app-uvue 暂不支持）</td><td>app-uvue 不支持</td></tr><tr><td>onPageNotFound</td><td>页面不存在监听函数</td><td>app-uvue 不支持</td></tr><tr><td>onThemeChange</td><td>监听系统主题变化</td><td>app-uvue 不支持</td></tr><tr><td>onLastPageBackPress</td><td>最后一个页面按下Android back键，常用于自定义退出</td><td>app-uvue-android 3.9+</td></tr><tr><td>onExit</td><td>监听应用退出</td><td>app-uvue-android 3.9+</td></tr></tbody></table><p><strong>注意</strong></p><ul><li><p><strong>应用生命周期仅可在App.vue中监听，在其它页面监听无效</strong>。</p></li><li><p>以组合式 API 使用时，在 Vue2 和 Vue3 中存在一定区别，请分别参考：<a href="https://uniapp.dcloud.net.cn/tutorial/vue-composition-api.html">Vue2 组合式 API 使用文档</a> 和 <a href="https://uniapp.dcloud.net.cn/tutorial/vue3-composition-api.html">Vue3 组合式 API 使用文档</a>。</p></li><li><p>应用启动参数，可以在API <code>uni.getLaunchOptionsSync</code>获取，<a href="https://uniapp.dcloud.net.cn/api/getLaunchOptionsSync.html#getlaunchoptionssync">详见</a></p></li><li><p>onlaunch里进行页面跳转，如遇白屏报错，请参考<a href="https://ask.dcloud.net.cn/article/35942">https://ask.dcloud.net.cn/article/35942</a></p></li><li><p><code>App.vue</code> 不能写模板</p></li><li><p>onPageNotFound 页面实际上已经打开了（比如通过分享卡片、小程序码）且发现页面不存在，才会触发，api 跳转不存在的页面不会触发（如 uni.navigateTo）</p><h2 id="globalData"><a href="#globalData" class="headerlink" title="globalData"></a>globalData</h2><p>小程序有globalData，这是一种简单的全局变量机制。这套机制在uni-app里也可以使用，并且全端通用。</p><p>当然vue框架的全局变量，另有其他方式定义。</p><p><strong>以下是 App.vue 中定义globalData的相关配置：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript">  </span><br><span class="language-javascript">    <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;  </span><br><span class="language-javascript">        <span class="hljs-attr">globalData</span>: &#123;  </span><br><span class="language-javascript">            <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;text&#x27;</span>  </span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;  </span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <br></code></pre></td></tr></table></figure><p>复制代码</p><p>js中操作globalData的方式如下： <code>getApp().globalData.text = &#39;test&#39;</code></p><p>在应用onLaunch时，getApp对象还未获取，暂时可以使用this.globalData获取globalData。</p><p>如果需要把globalData的数据绑定到页面上，可在页面的onShow页面生命周期里进行变量重赋值。</p><p>nvue的weex编译模式中使用globalData的话，由于weex生命周期不支持onShow，但熟悉5+的话，可利用监听webview的addEventListener show事件实现onShow效果，或者直接使用weex生命周期中的beforeCreate。但建议开发者使用uni-app编译模式，而不是weex编译模式。</p><p>globalData是简单的全局变量，如果使用状态管理，请使用<code>vuex</code>（main.js中定义）</p><h2 id="全局样式"><a href="#全局样式" class="headerlink" title="#全局样式"></a><a href="https://uniapp.dcloud.net.cn/collocation/App.html#%E5%85%A8%E5%B1%80%E6%A0%B7%E5%BC%8F">#</a>全局样式</h2><p>在<code>App.vue</code>中，可以定义一些全局通用样式，例如需要加一个通用的背景色，首屏页面渲染的动画等都可以写在App.vue中。</p><p>注意如果工程下同时有vue和nvue文件，全局样式的所有css会应用于所有文件，而nvue支持的css有限，编译器会在控制台报警，提示某些css无法在nvue中支持。此时需要把nvue不支持的css写在单独的条件编译里。如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-comment">/* #ifndef APP-PLUS-NVUE */</span></span><br><span class="language-css">    <span class="hljs-keyword">@import</span> <span class="hljs-string">&#x27;./common/uni.css&#x27;</span>;</span><br><span class="language-css">    <span class="hljs-comment">/* #endif*/</span></span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h1 id="main-js"><a href="#main-js" class="headerlink" title="main.js"></a>main.js</h1><p><code>main.js/uts</code>是 uni-app 的入口文件。uni-app js引擎版是<code>main.js</code>，而uni-app x则是<code>main.uts</code>。以下一般用<code>main.js</code>泛指全部。</p><p><code>main.js</code>主要作用是初始化<code>vue</code>实例、定义全局组件、使用需要的插件如 i18n、vuex。</p><p>首先引入了<code>Vue</code>库和<code>App.vue</code>，创建了一个<code>vue</code>实例，并且挂载<code>vue</code>实例。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">PageHead</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/page-head.vue&#x27;</span> <span class="hljs-comment">//全局引用 page-head 组件</span><br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-property">config</span>.<span class="hljs-property">productionTip</span> = <span class="hljs-literal">false</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;page-head&#x27;</span>, <span class="hljs-title class_">PageHead</span>) <span class="hljs-comment">//全局注册 page-head 组件，每个页面将可以直接使用该组件</span><br><span class="hljs-title class_">App</span>.<span class="hljs-property">mpType</span> = <span class="hljs-string">&#x27;app&#x27;</span><br><br><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>...<span class="hljs-title class_">App</span><br>&#125;)<br>app.$mount() <span class="hljs-comment">//挂载 Vue 实例</span><br></code></pre></td></tr></table></figure><h2 id="代码时序"><a href="#代码时序" class="headerlink" title="代码时序"></a>代码时序</h2><p>开发者写的代码，在应用启动时，按如下时序加载：</p><ol><li>main.js&#x2F;uts 的 <code>export function createApp() &#123;&#125;</code> 外的代码、任何页面&#x2F;组件的script中<code>export default &#123;&#125;</code>外的代码</li><li>main.js&#x2F;uts 的 <code>export function createApp() &#123;&#125;</code> 中的代码</li><li>app.vue&#x2F;uvue中onLaunch的代码</li><li>首页的onLoad</li><li>首页的onReady</li></ol><p>开发者需谨慎在main.js&#x2F;uts、页面&#x2F;组件script中<code>export default &#123;&#125;</code>外、和onLaunch中编写代码：</p><ol><li>这些的代码都会影响启动速度（定义type不会，type是使用时才加载）</li><li>执行太早，很多功能和API无法使用，需trycatch。尤其是与界面相关的都无法使用，此时首页都还没有创建。</li><li>main.js&#x2F;uts、页面script中<code>export default &#123;&#125;</code>外的代码，其创建的变量在应用存活时一直占据着内存，不会跟随页面关闭而回收</li></ol><h1 id="uni-scss"><a href="#uni-scss" class="headerlink" title="uni.scss"></a>uni.scss</h1><p><code>uni.scss</code>文件的用途是为了方便整体控制应用的风格。比如按钮颜色、边框风格，<code>uni.scss</code>文件里预置了一批scss变量预置。 </p><p><strong>注意：</strong></p><ol><li>如要使用这些常用变量，需要在 HBuilderX 里面安装 scss 插件；</li><li>使用时需要在 style 节点上加上 <code>lang=&quot;scss&quot;</code>。</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;scss&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="vue-config-js"><a href="#vue-config-js" class="headerlink" title="vue.config.js"></a>vue.config.js</h2><p><code>vue.config.js</code> 是一个可选的配置文件，如果项目的 (和 <code>package.json</code> 同级的) 根目录中存在这个文件，那么它会被 <code>@vue/cli-service</code> 自动加载。你也可以使用 <code>package.json</code> 中的 <code>vue</code> 字段，但是注意这种写法需要你严格遵照 JSON 的格式来写。</p><p>这个文件应该导出一个包含了选项的对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// vue.config.js</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@type</span> &#123;import(&#x27;<span class="hljs-doctag">@vue</span>/cli-service&#x27;).ProjectOptions&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">module</span>.<span class="hljs-keyword">exports</span> = &#123;<br>  <span class="hljs-comment">// 选项...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>或者，你也可以使用 <code>@vue/cli-service</code> 提供的 <code>defineConfig</code> 帮手函数，以获得更好的类型提示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// vue.config.js</span><br><span class="hljs-keyword">const</span> &#123; defineConfig &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;@vue/cli-service&#x27;</span>)<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-title function_">defineConfig</span>(&#123;<br>  <span class="hljs-comment">// 选项</span><br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="baseUrl"><a href="#baseUrl" class="headerlink" title="baseUrl#"></a>baseUrl<a href="https://cli.vuejs.org/zh/config/#baseurl">#</a></h3><p>从 Vue CLI 3.3 起已弃用，请使用<a href="https://cli.vuejs.org/zh/config/#publicpath"><code>publicPath</code></a>。</p><h3 id="publicPath"><a href="#publicPath" class="headerlink" title="publicPath#"></a>publicPath<a href="https://cli.vuejs.org/zh/config/#publicpath">#</a></h3><ul><li><p>Type: <code>string</code></p></li><li><p>Default: <code>&#39;/&#39;</code></p><p>部署应用包时的基本 URL。用法和 webpack 本身的 <code>output.publicPath</code> 一致，但是 Vue CLI 在一些其他地方也需要用到这个值，所以<strong>请始终使用 publicPath 而不要直接修改 webpack 的 output.publicPath</strong>。</p><p>默认情况下，Vue CLI 会假设你的应用是被部署在一个域名的根路径上，例如 <code>https://www.my-app.com/</code>。如果应用被部署在一个子路径上，你就需要用这个选项指定这个子路径。例如，如果你的应用被部署在 <code>https://www.my-app.com/my-app/</code>，则设置 <code>publicPath</code> 为 <code>/my-app/</code>。</p><p>这个值也可以被设置为空字符串 (<code>&#39;&#39;</code>) 或是相对路径 (<code>&#39;./&#39;</code>)，这样所有的资源都会被链接为相对路径，这样打出来的包可以被部署在任意路径，也可以用在类似 Cordova hybrid 应用的文件系统中。</p><p>相对 publicPath 的限制</p><p>相对路径的 <code>publicPath</code> 有一些使用上的限制。在以下情况下，应当避免使用相对 <code>publicPath</code>:</p><ul><li>当使用基于 HTML5 <code>history.pushState</code> 的路由时；</li><li>当使用 <code>pages</code> 选项构建多页面应用时。</li></ul><p>这个值在开发环境下同样生效。如果你想把开发服务器架设在根路径，你可以使用一个条件式的值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">module</span>.<span class="hljs-keyword">exports</span> = &#123;<br>  publicPath: process.env.NODE_ENV === <span class="hljs-string">&#x27;production&#x27;</span><br>    ? <span class="hljs-string">&#x27;/production-sub-path/&#x27;</span><br>    : <span class="hljs-string">&#x27;/&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="assetsDir"><a href="#assetsDir" class="headerlink" title="assetsDir#"></a>assetsDir<a href="https://cli.vuejs.org/zh/config/#assetsdir">#</a></h3><ul><li><p>Type: <code>string</code></p></li><li><p>Default: <code>&#39;&#39;</code></p><p>放置生成的静态资源 (js、css、img、fonts) 的 (相对于 <code>outputDir</code> 的) 目录。</p><p>提示</p><p>从生成的资源覆写 filename 或 chunkFilename 时，<code>assetsDir</code> 会被忽略。</p></li></ul><h3 id="indexPath"><a href="#indexPath" class="headerlink" title="indexPath#"></a>indexPath<a href="https://cli.vuejs.org/zh/config/#indexpath">#</a></h3><ul><li><p>Type: <code>string</code></p></li><li><p>Default: <code>&#39;index.html&#39;</code></p><p>指定生成的 <code>index.html</code> 的输出路径 (相对于 <code>outputDir</code>)。也可以是一个绝对路径。</p></li></ul><p>了解更多详情参考官方文档</p>]]></content>
    
    
    <categories>
      
      <category>uni-app</category>
      
    </categories>
    
    
    <tags>
      
      <tag>uni-app</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Lodash工具库</title>
    <link href="/2023/01/15/Lodash%E5%B7%A5%E5%85%B7%E5%BA%93/"/>
    <url>/2023/01/15/Lodash%E5%B7%A5%E5%85%B7%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<h2 id="官方地址"><a href="#官方地址" class="headerlink" title="官方地址"></a>官方地址</h2><p><a href="https://www.lodashjs.com/">https://www.lodashjs.com/</a></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Lodash 是一个一致性、模块化、高性能的 JavaScript 实用工具库。</p><blockquote><p>Lodash 遵循 MIT 开源协议发布，并且支持最新的运行环境。 查看各个构件版本的区别并选择一个适合你的版</p></blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>浏览器环境： </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;lodash.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>通过 npm： </p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">$ <span class="hljs-built_in">npm</span> i -g <span class="hljs-built_in">npm</span><br>$ <span class="hljs-built_in">npm</span> i --save lodash<br></code></pre></td></tr></table></figure><p>Node.js： </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// Load the full build.</span><br><span class="hljs-keyword">var</span> _ = <span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;lodash&#x27;</span>);<br><span class="hljs-comment">// Load the core build.</span><br><span class="hljs-keyword">var</span> _ = <span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;lodash/core&#x27;</span>);<br><span class="hljs-comment">// Load the FP build for immutable auto-curried iteratee-first data-last methods.</span><br><span class="hljs-keyword">var</span> fp = <span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;lodash/fp&#x27;</span>);<br> <br><span class="hljs-comment">// Load method categories.</span><br><span class="hljs-keyword">var</span> <span class="hljs-keyword">array</span> = <span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;lodash/array&#x27;</span>);<br><span class="hljs-keyword">var</span> <span class="hljs-keyword">object</span> = <span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;lodash/fp/object&#x27;</span>);<br> <br><span class="hljs-comment">// Cherry-pick methods for smaller browserify/rollup/webpack bundles.</span><br><span class="hljs-keyword">var</span> at = <span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;lodash/at&#x27;</span>);<br><span class="hljs-keyword">var</span> curryN = <span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;lodash/fp/curryN&#x27;</span>);<br></code></pre></td></tr></table></figure><blockquote><p>注意：</p><p>如需在 Node.js &lt; 6 的 REPL 环境中使用 Lodash，请安装 <a href="https://www.npmjs.com/package/n_">n_</a>。</p></blockquote><p>Lodash 通过降低 array、number、objects、string 等等的使用难度从而让 JavaScript 变得更简单。 Lodash 的模块化方法 非常适用于：</p><ul><li>遍历 array、object 和 string</li><li>对值进行操作和检测</li><li>创建符合功能的函数</li></ul><h2 id="好用的函数"><a href="#好用的函数" class="headerlink" title="好用的函数"></a>好用的函数</h2><h3 id="debounce-防抖动"><a href="#debounce-防抖动" class="headerlink" title="_.debounce  防抖动"></a>_.debounce  防抖动</h3><p>是一个通过 Lodash 限制操作频率的函数。     &#x2F;&#x2F; 在这个例子中，我们希望限制访问 yesno.wtf&#x2F;api 的频率     &#x2F;&#x2F; AJAX 请求直到用户输入完毕才会发出。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-comment">// 避免窗口在变动时出现昂贵的计算开销。</span><br>jQuery(<span class="hljs-built_in">window</span>).<span class="hljs-keyword">on</span>(<span class="hljs-string">&#x27;resize&#x27;</span>, _.debounce(calculateLayout, <span class="hljs-number">150</span>));<br> <br><span class="hljs-comment">// 当点击时 `sendMail` 随后就被调用。</span><br>jQuery(element).<span class="hljs-keyword">on</span>(<span class="hljs-string">&#x27;click&#x27;</span>, _.debounce(sendMail, <span class="hljs-number">300</span>, &#123;<br>  <span class="hljs-string">&#x27;leading&#x27;</span>: <span class="hljs-keyword">true</span>,<br>  <span class="hljs-string">&#x27;trailing&#x27;</span>: <span class="hljs-keyword">false</span><br>&#125;));<br> <br><span class="hljs-comment">// 确保 `batchLog` 调用1次之后，1秒内会被触发。</span><br><span class="hljs-keyword">var</span> debounced = _.debounce(batchLog, <span class="hljs-number">250</span>, &#123; <span class="hljs-string">&#x27;maxWait&#x27;</span>: <span class="hljs-number">1000</span> &#125;);<br><span class="hljs-keyword">var</span> source = <span class="hljs-keyword">new</span> EventSource(<span class="hljs-string">&#x27;/stream&#x27;</span>);<br>jQuery(source).<span class="hljs-keyword">on</span>(<span class="hljs-string">&#x27;message&#x27;</span>, debounced);<br> <br><span class="hljs-comment">// 取消一个 trailing 的防抖动调用</span><br>jQuery(<span class="hljs-built_in">window</span>).<span class="hljs-keyword">on</span>(<span class="hljs-string">&#x27;popstate&#x27;</span>, debounced.cancel);<br><br></code></pre></td></tr></table></figure><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;watch-example&quot;</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">    Ask a yes/no question:</span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;question&quot;</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">answer</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 因为 AJAX 库和通用工具的生态已经相当丰富，Vue 核心代码没有重复 --&gt;</span><br><span class="hljs-comment">&lt;!-- 提供这些功能以保持精简。这也可以让你自由选择自己更熟悉的工具。 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/axios@0.12.0/dist/axios.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/lodash@4.13.1/lodash.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> watchExampleVM = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">  <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#watch-example&#x27;</span>,</span><br><span class="language-javascript">  <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">    <span class="hljs-attr">question</span>: <span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="language-javascript">    <span class="hljs-attr">answer</span>: <span class="hljs-string">&#x27;I cannot give you an answer until you ask a question!&#x27;</span></span><br><span class="language-javascript">  &#125;,</span><br><span class="language-javascript">  <span class="hljs-attr">watch</span>: &#123;</span><br><span class="language-javascript">    <span class="hljs-comment">// 如果 `question` 发生改变，这个函数就会运行</span></span><br><span class="language-javascript">    <span class="hljs-attr">question</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">newQuestion, oldQuestion</span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-variable language_">this</span>.<span class="hljs-property">answer</span> = <span class="hljs-string">&#x27;Waiting for you to stop typing...&#x27;</span></span><br><span class="language-javascript">      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">debouncedGetAnswer</span>()</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;,</span><br><span class="language-javascript">  <span class="hljs-attr">created</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-comment">// `_.debounce` 是一个通过 Lodash 限制操作频率的函数。</span></span><br><span class="language-javascript">    <span class="hljs-comment">// 在这个例子中，我们希望限制访问 yesno.wtf/api 的频率</span></span><br><span class="language-javascript">    <span class="hljs-comment">// AJAX 请求直到用户输入完毕才会发出。想要了解更多关于</span></span><br><span class="language-javascript">    <span class="hljs-comment">// `_.debounce` 函数 (及其近亲 `_.throttle`) 的知识，</span></span><br><span class="language-javascript">    <span class="hljs-comment">// 请参考：https://lodash.com/docs#debounce</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">this</span>.<span class="hljs-property">debouncedGetAnswer</span> = _.<span class="hljs-title function_">debounce</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">getAnswer</span>, <span class="hljs-number">500</span>)</span><br><span class="language-javascript">  &#125;,</span><br><span class="language-javascript">  <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">    <span class="hljs-attr">getAnswer</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">question</span>.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;?&#x27;</span>) === -<span class="hljs-number">1</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">answer</span> = <span class="hljs-string">&#x27;Questions usually contain a question mark. ;-)&#x27;</span></span><br><span class="language-javascript">        <span class="hljs-keyword">return</span></span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">      <span class="hljs-variable language_">this</span>.<span class="hljs-property">answer</span> = <span class="hljs-string">&#x27;Thinking...&#x27;</span></span><br><span class="language-javascript">      <span class="hljs-keyword">var</span> vm = <span class="hljs-variable language_">this</span></span><br><span class="language-javascript">      axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;https://yesno.wtf/api&#x27;</span>)</span><br><span class="language-javascript">        .<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) &#123;</span><br><span class="language-javascript">          vm.<span class="hljs-property">answer</span> = _.<span class="hljs-title function_">capitalize</span>(response.<span class="hljs-property">data</span>.<span class="hljs-property">answer</span>)</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">        .<span class="hljs-title function_">catch</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) &#123;</span><br><span class="language-javascript">          vm.<span class="hljs-property">answer</span> = <span class="hljs-string">&#x27;Error! Could not reach the API. &#x27;</span> + error</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript">&#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="cloneDeep-value-深拷贝"><a href="#cloneDeep-value-深拷贝" class="headerlink" title="_.cloneDeep(value) 深拷贝"></a>_.cloneDeep(value) 深拷贝</h3><p>这个方法类似<a href="https://www.lodashjs.com/docs/lodash.cloneDeep#clone"><code>_.clone</code></a>，除了它会递归拷贝 <code>value</code>。（注：也叫深拷贝）。 </p><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><ol><li><code>value</code> <em>(*)</em>: 要深拷贝的值。</li></ol><h4 id="返回"><a href="#返回" class="headerlink" title="返回"></a>返回</h4><p><em>(*)</em>: 返回拷贝后的值。</p><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> objects = [&#123; <span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">1</span> &#125;, &#123; <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">2</span> &#125;];<br> <br><span class="hljs-keyword">var</span> deep = _.cloneDeep(objects);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(deep[<span class="hljs-number">0</span>] === objects[<span class="hljs-number">0</span>]);<br><span class="hljs-comment">// =&gt; false</span><br></code></pre></td></tr></table></figure><h3 id="日期"><a href="#日期" class="headerlink" title="日期"></a>日期</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">//y-m-d</span><br>getDate() &#123;<br>const <span class="hljs-built_in">date</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();<br>let <span class="hljs-built_in">year</span> = <span class="hljs-built_in">date</span>.getFullYear();<br>let <span class="hljs-built_in">month</span> = <span class="hljs-built_in">date</span>.getMonth() + <span class="hljs-number">1</span>;<br>let <span class="hljs-built_in">day</span> = <span class="hljs-built_in">date</span>.getDate();<br><span class="hljs-built_in">month</span> = <span class="hljs-built_in">month</span>.toString().padStart(<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;0&#x27;</span>)<br><span class="hljs-built_in">day</span> = <span class="hljs-built_in">day</span>.toString().padStart(<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;0&#x27;</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-built_in">year</span>&#125;</span>-<span class="hljs-subst">$&#123;<span class="hljs-built_in">month</span>&#125;</span>-<span class="hljs-subst">$&#123;<span class="hljs-built_in">day</span>&#125;</span>`</span>;<br>&#125;<br>  <span class="hljs-comment">//h-m-s</span><br>getTime() &#123;<br>const <span class="hljs-built_in">date</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();<br>let <span class="hljs-built_in">hour</span> = <span class="hljs-built_in">date</span>.getHours().toString().padStart(<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;0&#x27;</span>);<br>let <span class="hljs-built_in">minute</span> = <span class="hljs-built_in">date</span>.getMinutes().toString().padStart(<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;0&#x27;</span>);<br>let <span class="hljs-built_in">second</span> = <span class="hljs-built_in">date</span>.getSeconds().toString().padStart(<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;0&#x27;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-built_in">hour</span>&#125;</span>:<span class="hljs-subst">$&#123;<span class="hljs-built_in">minute</span>&#125;</span>:<span class="hljs-subst">$&#123;<span class="hljs-built_in">second</span>&#125;</span>`</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="判断是否是JSON字符串"><a href="#判断是否是JSON字符串" class="headerlink" title="判断是否是JSON字符串"></a>判断是否是JSON字符串</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">isJSONStr</span>(<span class="hljs-params">str</span>)&#123;<br><span class="hljs-keyword">try</span>&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(str) <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Object</span>)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">catch</span>(error)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(error)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="判断空类型"><a href="#判断空类型" class="headerlink" title="判断空类型"></a>判断空类型</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//判断是否是空对象&#123;&#125;</span><br><span class="hljs-title function_">isEmptyObj</span>(<span class="hljs-params">obj</span>) &#123;<br>    <span class="hljs-keyword">return</span> obj !== <span class="hljs-literal">null</span> &amp;&amp; <span class="hljs-keyword">typeof</span> obj === <span class="hljs-string">&#x27;object&#x27;</span> &amp;&amp; !<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(obj)&amp;&amp; (<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(obj).<span class="hljs-property">length</span> === <span class="hljs-number">0</span>)<br>  &#125;<br><span class="hljs-comment">//是否是空数组[]</span><br><span class="hljs-title function_">isEmptyArr</span>(<span class="hljs-params">Arr</span>)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(<span class="hljs-title class_">Arr</span>)&amp;&amp;<span class="hljs-title class_">Arr</span>.<span class="hljs-property">length</span>===<span class="hljs-number">0</span><br>&#125;<br><span class="hljs-comment">//是否是空，undefined,null,&quot;&quot;,&#123;&#125;,[]</span><br><span class="hljs-title function_">isEmpty</span>(<span class="hljs-params">value</span>)&#123;<br><span class="hljs-keyword">if</span>(!value&amp;&amp;value!==<span class="hljs-number">0</span>)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br>    <span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(value)===<span class="hljs-string">&quot;[object Array]&quot;</span>)&#123;<br><span class="hljs-keyword">return</span> value.<span class="hljs-property">length</span>===<span class="hljs-number">0</span><br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(value)===<span class="hljs-string">&quot;[object Object]&quot;</span>)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(value).<span class="hljs-property">length</span> === <span class="hljs-number">0</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Lodash</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Lodash</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>uni-app随笔_API</title>
    <link href="/2023/01/12/uni-app%E9%9A%8F%E7%AC%94_API/"/>
    <url>/2023/01/12/uni-app%E9%9A%8F%E7%AC%94_API/</url>
    
    <content type="html"><![CDATA[<h1 id="小程序API"><a href="#小程序API" class="headerlink" title="小程序API"></a>小程序API</h1><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="日志打印"><a href="#日志打印" class="headerlink" title="日志打印"></a>日志打印</h3><h4 id="console"><a href="#console" class="headerlink" title="console"></a>console</h4><p>向控制台打印日志信息。</p><h4 id="debug"><a href="#debug" class="headerlink" title="debug"></a>debug</h4><p>向控制台打印 debug 日志</p><p>注：App 端 debug 方法等同于 log 方法。</p><h3 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h3><p>setTimeout(callback, delay, rest)</p><p>设定一个定时器。在定时到期以后执行注册的回调函数 </p><p>clearTimeout(timeoutID)</p><p>取消由 setTimeout 设置的定时器。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">let</span> <span class="hljs-attr">timer</span>: <span class="hljs-title class_">ReturnType</span>&lt;<span class="hljs-keyword">typeof</span> <span class="hljs-built_in">setTimeout</span>&gt; | <span class="hljs-literal">null</span> = <span class="hljs-literal">null</span>;</span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript"><span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript"><span class="hljs-keyword">return</span> &#123;&#125;;</span><br><span class="language-javascript">&#125;,</span><br><span class="language-javascript"><span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript"><span class="hljs-title function_">onSetTimeout</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;setTimeout&quot;</span>);</span><br><span class="language-javascript">&#125;, <span class="hljs-number">1000</span>);</span><br><span class="language-javascript">&#125;,</span><br><span class="language-javascript"><span class="hljs-title function_">clearTimer</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript"><span class="hljs-comment">// clearTime</span></span><br><span class="language-javascript"><span class="hljs-keyword">if</span> (timer) &#123;</span><br><span class="language-javascript"><span class="hljs-built_in">clearTimeout</span>(timer);</span><br><span class="language-javascript">timer = <span class="hljs-literal">null</span>;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">&#125;,</span><br><span class="language-javascript">&#125;,</span><br><span class="language-javascript"><span class="hljs-title function_">beforeUnmount</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript"><span class="hljs-comment">// clearTime</span></span><br><span class="language-javascript"><span class="hljs-variable language_">this</span>.<span class="hljs-title function_">clearTimer</span>();</span><br><span class="language-javascript">&#125;,</span><br><span class="language-javascript">&#125;;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h3 id="uni-base64ToArrayBuffer-base64"><a href="#uni-base64ToArrayBuffer-base64" class="headerlink" title="uni.base64ToArrayBuffer(base64)"></a>uni.base64ToArrayBuffer(base64)</h3><p>将 Base64 字符串转成 ArrayBuffer 对象</p><h3 id="uni-arrayBufferToBase64-arrayBuffer"><a href="#uni-arrayBufferToBase64-arrayBuffer" class="headerlink" title="uni.arrayBufferToBase64(arrayBuffer)"></a>uni.arrayBufferToBase64(arrayBuffer)</h3><p>将 ArrayBuffer 对象转成 Base64 字符串</p><h3 id="获取启动时参数"><a href="#获取启动时参数" class="headerlink" title="获取启动时参数"></a>获取启动时参数</h3><h4 id="uni-getLaunchOptionsSync"><a href="#uni-getLaunchOptionsSync" class="headerlink" title="uni.getLaunchOptionsSync()"></a>uni.getLaunchOptionsSync()</h4><p>获取启动时的参数。返回值与App.onLaunch的回调参数一致</p><h4 id="uni-getEnterOptionsSync"><a href="#uni-getEnterOptionsSync" class="headerlink" title="uni.getEnterOptionsSync()"></a>uni.getEnterOptionsSync()</h4><p>获取启动时的参数。</p><h3 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h3><p>uni.addInterceptor(STRING, OBJECT)</p><p>添加拦截器</p><h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><h3 id="发起请求"><a href="#发起请求" class="headerlink" title="发起请求"></a>发起请求</h3><h4 id="uni-request-OBJECT"><a href="#uni-request-OBJECT" class="headerlink" title="uni.request(OBJECT)"></a>uni.request(OBJECT)</h4><p>发起网络请求。</p><p>在各个小程序平台运行时，网络相关的 API 在使用前需要配置域名白名单。 </p><p>实例</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs arcade">uni.request(&#123;<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;https://www.example.com/request&#x27;</span>, <span class="hljs-comment">//仅为示例，并非真实接口地址。</span><br>    data: &#123;<br>        <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;uni.request&#x27;</span><br>    &#125;,<br>    <span class="hljs-attr">header</span>: &#123;<br>        <span class="hljs-string">&#x27;custom-header&#x27;</span>: <span class="hljs-string">&#x27;hello&#x27;</span> <span class="hljs-comment">//自定义请求头信息</span><br>    &#125;,<br>    <span class="hljs-attr">success</span>: <span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>        <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(res.data);<br>        this.<span class="hljs-built_in">text</span> = <span class="hljs-string">&#x27;request success&#x27;</span>;<br>    &#125;<br>&#125;);<br><br></code></pre></td></tr></table></figure><p><strong>OBJECT 参数说明</strong></p><table><thead><tr><th>参数名</th><th>类型</th><th>必填</th><th>默认值</th><th>说明</th><th>平台差异说明</th></tr></thead><tbody><tr><td>url</td><td>String</td><td>是</td><td></td><td>开发者服务器接口地址</td><td></td></tr><tr><td>data</td><td>Object&#x2F;String&#x2F;ArrayBuffer</td><td>否</td><td></td><td>请求的参数</td><td>App 3.3.7 以下不支持 ArrayBuffer 类型</td></tr><tr><td>header</td><td>Object</td><td>否</td><td></td><td>设置请求的 header，header 中不能设置 Referer</td><td>App、H5端会自动带上cookie，且H5端不可手动修改</td></tr><tr><td>method</td><td>String</td><td>否</td><td>GET</td><td>有效值详见下方说明</td><td></td></tr><tr><td>timeout</td><td>Number</td><td>否</td><td>60000</td><td>超时时间，单位 ms</td><td>H5(HBuilderX 2.9.9+)、APP(HBuilderX 2.9.9+)、微信小程序（2.10.0）、支付宝小程序</td></tr><tr><td>dataType</td><td>String</td><td>否</td><td>json</td><td>如果设为 json，会对返回的数据进行一次 JSON.parse，非 json 不会进行 JSON.parse</td><td></td></tr><tr><td>responseType</td><td>String</td><td>否</td><td>text</td><td>设置响应的数据类型。合法值：text、arraybuffer</td><td>支付宝小程序不支持</td></tr><tr><td>sslVerify</td><td>Boolean</td><td>否</td><td>true</td><td>验证 ssl 证书</td><td>仅App安卓端支持（HBuilderX 2.3.3+），不支持离线打包</td></tr><tr><td>withCredentials</td><td>Boolean</td><td>否</td><td>false</td><td>跨域请求时是否携带凭证（cookies）</td><td>仅H5支持（HBuilderX 2.6.15+）</td></tr><tr><td>firstIpv4</td><td>Boolean</td><td>否</td><td>false</td><td>DNS解析时优先使用ipv4</td><td>仅 App-Android 支持 (HBuilderX 2.8.0+)</td></tr><tr><td>enableHttp2</td><td>Boolean</td><td>否</td><td>false</td><td>开启 http2</td><td>微信小程序</td></tr><tr><td>enableQuic</td><td>Boolean</td><td>否</td><td>false</td><td>开启 quic</td><td>微信小程序</td></tr><tr><td>enableCache</td><td>Boolean</td><td>否</td><td>false</td><td>开启 cache</td><td>微信小程序、抖音小程序 2.31.0+</td></tr><tr><td>enableHttpDNS</td><td>Boolean</td><td>否</td><td>false</td><td>是否开启 HttpDNS 服务。如开启，需要同时填入 httpDNSServiceId 。 HttpDNS 用法详见 <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/ability/HTTPDNS.html">移动解析HttpDNS</a></td><td>微信小程序</td></tr><tr><td>httpDNSServiceId</td><td>String</td><td>否</td><td></td><td>HttpDNS 服务商 Id。 HttpDNS 用法详见 <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/ability/HTTPDNS.html">移动解析HttpDNS</a></td><td>微信小程序</td></tr><tr><td>enableChunked</td><td>Boolean</td><td>否</td><td>false</td><td>开启 transfer-encoding chunked</td><td>微信小程序</td></tr><tr><td>forceCellularNetwork</td><td>Boolean</td><td>否</td><td>false</td><td>wifi下使用移动网络发送请求</td><td>微信小程序</td></tr><tr><td>enableCookie</td><td>Boolean</td><td>否</td><td>false</td><td>开启后可在headers中编辑cookie</td><td>支付宝小程序 10.2.33+</td></tr><tr><td>cloudCache</td><td>Object&#x2F;Boolean</td><td>否</td><td>false</td><td>是否开启云加速（详见<a href="https://smartprogram.baidu.com/docs/develop/extended/component-codeless/cloud-speed/introduction/">云加速服务</a>）</td><td>百度小程序 3.310.11+</td></tr><tr><td>defer</td><td>Boolean</td><td>否</td><td>false</td><td>控制当前请求是否延时至首屏内容渲染后发送</td><td>百度小程序 3.310.11+</td></tr><tr><td>success</td><td>Function</td><td>否</td><td></td><td>收到开发者服务器成功返回的回调函数</td><td></td></tr><tr><td>fail</td><td>Function</td><td>否</td><td></td><td>接口调用失败的回调函数</td><td></td></tr><tr><td>complete</td><td>Function</td><td>否</td><td></td><td>接口调用结束的回调函数（调用成功、失败都会执行）</td><td></td></tr></tbody></table><p><strong>method 有效值</strong></p><p>注意：method有效值必须大写，每个平台支持的method有效值不同，详细见下表。</p><table><thead><tr><th>method</th><th>App</th><th>H5</th><th>微信小程序</th><th>支付宝小程序</th><th>百度小程序</th><th>抖音小程序、飞书小程序</th><th>快手小程序</th><th>京东小程序</th></tr></thead><tbody><tr><td>GET</td><td>√</td><td>√</td><td>√</td><td>√</td><td>√</td><td>√</td><td>√</td><td>√</td></tr><tr><td>POST</td><td>√</td><td>√</td><td>√</td><td>√</td><td>√</td><td>√</td><td>√</td><td>√</td></tr><tr><td>PUT</td><td>√</td><td>√</td><td>√</td><td>x</td><td>√</td><td>√</td><td>x</td><td>x</td></tr><tr><td>DELETE</td><td>√</td><td>√</td><td>√</td><td>x</td><td>√</td><td>x</td><td>x</td><td>x</td></tr><tr><td>CONNECT</td><td>x</td><td>√</td><td>√</td><td>x</td><td>x</td><td>x</td><td>x</td><td>x</td></tr><tr><td>HEAD</td><td>√</td><td>√</td><td>√</td><td>x</td><td>√</td><td>x</td><td>x</td><td>x</td></tr><tr><td>OPTIONS</td><td>√</td><td>√</td><td>√</td><td>x</td><td>√</td><td>x</td><td>x</td><td>x</td></tr><tr><td>TRACE</td><td>x</td><td>√</td><td>√</td><td>x</td><td>x</td><td>x</td><td>x</td><td>x</td></tr></tbody></table><p><strong>success 返回参数说明</strong></p><table><thead><tr><th>参数</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>data</td><td>Object&#x2F;String&#x2F;ArrayBuffer</td><td>开发者服务器返回的数据</td></tr><tr><td>statusCode</td><td>Number</td><td>开发者服务器返回的 HTTP 状态码</td></tr><tr><td>header</td><td>Object</td><td>开发者服务器返回的 HTTP Response Header</td></tr><tr><td>cookies</td><td><code>Array.&lt;string&gt;</code></td><td>开发者服务器返回的 cookies，格式为字符串数组</td></tr></tbody></table><p><strong>data 数据说明</strong></p><p>最终发送给服务器的数据是 String 类型，如果传入的 data 不是 String 类型，会被转换成 String。转换规则如下：</p><ul><li>对于 <code>GET</code> 方法，会将数据转换为 query string。例如 <code>&#123; name: &#39;name&#39;, age: 18 &#125;</code> 转换后的结果是 <code>name=name&amp;age=18</code>。</li><li>对于 <code>POST</code> 方法且 <code>header[&#39;content-type&#39;]</code> 为 <code>application/json</code> 的数据，会进行 JSON 序列化。</li><li>对于 <code>POST</code> 方法且 <code>header[&#39;content-type&#39;]</code> 为 <code>application/x-www-form-urlencoded</code> 的数据，会将数据转换为 query string。</li></ul><h3 id="上传下载"><a href="#上传下载" class="headerlink" title="上传下载"></a>上传下载</h3><h3 id="uni-uploadFile-OBJECT"><a href="#uni-uploadFile-OBJECT" class="headerlink" title="uni.uploadFile(OBJECT)"></a>uni.uploadFile(OBJECT)</h3><p>将本地资源上传到开发者服务器，客户端发起一个 <code>POST</code> 请求，其中 <code>content-type</code> 为 <code>multipart/form-data</code>。 如页面通过 <a href="https://uniapp.dcloud.net.cn/api/media/image.html#chooseimage">uni.chooseImage</a> 等接口获取到一个本地资源的临时文件路径后，可通过此接口将本地资源上传到指定服务器。另外选择和上传非图像、视频文件参考：<a href="https://ask.dcloud.net.cn/article/35547">https://ask.dcloud.net.cn/article/35547</a>。</p><blockquote><p>在各个小程序平台运行时，网络相关的 API 在使用前需要配置域名白名单。</p></blockquote><p><strong>推荐开发者上传到uniCloud，uniCloud提供了免费CDN和更好的易用性，包括安全的cdn直传。</strong></p><ul><li>uniCloud的上传API：<a href="https://doc.dcloud.net.cn/uniCloud/storage/dev.html#uploadfile">https://doc.dcloud.net.cn/uniCloud/storage/dev.html#uploadfile</a></li><li>封装的更完善的<a href="https://ext.dcloud.net.cn/plugin?id=4079">uni-file-picker组件</a>，文件选择、上传到uniCloud，一站式集成。</li><li>推荐<code>uni-cdn</code>，帮你节省至少30%的 CDN 费用！<a href="https://doc.dcloud.net.cn/uniCloud/uni-cdn/intro.html">详情</a>。</li></ul><p>实例</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs arcade">uni.chooseImage(&#123;<br><span class="hljs-attr">success</span>: <span class="hljs-function">(<span class="hljs-params">chooseImageRes</span>) =&gt;</span> &#123;<br>const tempFilePaths = chooseImageRes.tempFilePaths;<br>uni.uploadFile(&#123;<br><span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;https://www.example.com/upload&#x27;</span>, <span class="hljs-comment">//仅为示例，非真实的接口地址</span><br>filePath: tempFilePaths[<span class="hljs-number">0</span>],<br><span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;file&#x27;</span>,<br><span class="hljs-attr">formData</span>: &#123;<br><span class="hljs-string">&#x27;user&#x27;</span>: <span class="hljs-string">&#x27;test&#x27;</span><br>&#125;,<br><span class="hljs-attr">success</span>: <span class="hljs-function">(<span class="hljs-params">uploadFileRes</span>) =&gt;</span> &#123;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(uploadFileRes.data);<br>&#125;<br>&#125;);<br>&#125;<br>&#125;);<br><br></code></pre></td></tr></table></figure><p>通过 <code>uploadTask</code>，可监听上传进度变化事件，以及取消上传任务。 </p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs arcade">uni.chooseImage(&#123;<br><span class="hljs-attr">success</span>: <span class="hljs-function">(<span class="hljs-params">chooseImageRes</span>) =&gt;</span> &#123;<br>const tempFilePaths = chooseImageRes.tempFilePaths;<br>const uploadTask = uni.uploadFile(&#123;<br><span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;https://www.example.com/upload&#x27;</span>, <span class="hljs-comment">//仅为示例，非真实的接口地址</span><br>filePath: tempFilePaths[<span class="hljs-number">0</span>],<br><span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;file&#x27;</span>,<br><span class="hljs-attr">formData</span>: &#123;<br><span class="hljs-string">&#x27;user&#x27;</span>: <span class="hljs-string">&#x27;test&#x27;</span><br>&#125;,<br><span class="hljs-attr">success</span>: <span class="hljs-function">(<span class="hljs-params">uploadFileRes</span>) =&gt;</span> &#123;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(uploadFileRes.data);<br>&#125;<br>&#125;);<br><br>uploadTask.onProgressUpdate(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;上传进度&#x27;</span> + res.progress);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;已经上传的数据长度&#x27;</span> + res.totalBytesSent);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;预期需要上传的数据总长度&#x27;</span> + res.totalBytesExpectedToSend);<br><br><span class="hljs-comment">// 测试条件，取消上传任务。</span><br><span class="hljs-keyword">if</span> (res.progress &gt; <span class="hljs-number">50</span>) &#123;<br>uploadTask.abort();<br>&#125;<br>&#125;);<br>&#125;<br>&#125;);<br><br></code></pre></td></tr></table></figure><p>更多信息参考官方文档</p><h2 id="页面和路由"><a href="#页面和路由" class="headerlink" title="页面和路由"></a>页面和路由</h2><h3 id="uni-navigateTo-OBJECT"><a href="#uni-navigateTo-OBJECT" class="headerlink" title="uni.navigateTo(OBJECT)"></a>uni.navigateTo(OBJECT)</h3><p>保留当前页面，跳转到应用内的某个页面，使用<code>uni.navigateBack</code>可以返回到原页面。</p><h3 id="uni-redirectTo-OBJECT"><a href="#uni-redirectTo-OBJECT" class="headerlink" title="uni.redirectTo(OBJECT)"></a>uni.redirectTo(OBJECT)</h3><p>关闭当前页面，跳转到应用内的某个页面。</p><h3 id="uni-reLaunch-OBJECT"><a href="#uni-reLaunch-OBJECT" class="headerlink" title="uni.reLaunch(OBJECT)"></a>uni.reLaunch(OBJECT)</h3><p>关闭所有页面，打开到应用内的某个页面。</p><h3 id="uni-switchTab-OBJECT"><a href="#uni-switchTab-OBJECT" class="headerlink" title="uni.switchTab(OBJECT)"></a>uni.switchTab(OBJECT)</h3><p>跳转到 tabBar 页面，并关闭其他所有非 tabBar 页面。</p><p><strong>注意：</strong> 如果调用了 <a href="https://uniapp.dcloud.net.cn/api/preload-page">uni.preloadPage(OBJECT)</a> 不会关闭，仅触发生命周期 <code>onHide</code></p><h3 id="uni-navigateBack-OBJECT"><a href="#uni-navigateBack-OBJECT" class="headerlink" title="uni.navigateBack(OBJECT)"></a>uni.navigateBack(OBJECT)</h3><p>关闭当前页面，返回上一页面或多级页面。可通过 <code>getCurrentPages()</code> 获取当前的页面栈，决定需要返回几层。</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-string">//</span>在起始页面跳转到test.vue页面并传递参数<br>uni.navigateTo<span class="hljs-params">(&#123;</span><br><span class="hljs-params">url: &#x27;test?<span class="hljs-attr">id</span>=1&amp;<span class="hljs-attr">name</span>=uniapp&#x27;</span><br><span class="hljs-params">&#125;)</span>;<br><br></code></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">// 在test.vue页面接受参数</span><br>export default &#123;<br><span class="hljs-attr">onLoad</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">option</span>) &#123; <span class="hljs-comment">//option为object类型，会序列化上个页面传递的参数</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(option.id); <span class="hljs-comment">//打印出上个页面传递的参数。</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(option.name); <span class="hljs-comment">//打印出上个页面传递的参数。</span><br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">// 在起始页面跳转到test.vue页面，并监听test.vue发送过来的事件数据</span><br>uni.navigateTo(&#123;<br>  <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/pages/test?id=1&#x27;</span>,<br>  <span class="hljs-attr">events</span>: &#123;<br>    <span class="hljs-comment">// 为指定事件添加一个监听器，获取被打开页面传送到当前页面的数据</span><br>    acceptDataFromOpenedPage: <span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>) &#123;<br>      <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(data)<br>    &#125;,<br>    <span class="hljs-attr">someEvent</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>) &#123;<br>      <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(data)<br>    &#125;<br>    ...<br>  &#125;,<br>  <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">res</span>) &#123;<br>    <span class="hljs-comment">// 通过eventChannel向被打开页面传送数据</span><br>    res.eventChannel.emit(<span class="hljs-string">&#x27;acceptDataFromOpenerPage&#x27;</span>, &#123; <span class="hljs-attr">data</span>: <span class="hljs-string">&#x27;data from starter page&#x27;</span> &#125;)<br>  &#125;<br>&#125;)<br><br><span class="hljs-comment">// 在test.vue页面，向起始页通过事件传递数据</span><br>onLoad: <span class="hljs-keyword">function</span>(<span class="hljs-params">option</span>) &#123;<br>  const eventChannel = this.getOpenerEventChannel();<br>  eventChannel.emit(<span class="hljs-string">&#x27;acceptDataFromOpenedPage&#x27;</span>, &#123;<span class="hljs-attr">data</span>: <span class="hljs-string">&#x27;data from test page&#x27;</span>&#125;);<br>  eventChannel.emit(<span class="hljs-string">&#x27;someEvent&#x27;</span>, &#123;<span class="hljs-attr">data</span>: <span class="hljs-string">&#x27;data from test page for someEvent&#x27;</span>&#125;);<br>  <span class="hljs-comment">// 监听acceptDataFromOpenerPage事件，获取上一页面通过eventChannel传送到当前页面的数据</span><br>  eventChannel.on(<span class="hljs-string">&#x27;acceptDataFromOpenerPage&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>) &#123;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(data)<br>  &#125;)<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="窗口动画"><a href="#窗口动画" class="headerlink" title="窗口动画"></a>窗口动画</h3><blockquote><p>本API仅App支持。小程序自身不支持自定义动画。H5的窗体动画可使用常规单页动画处理方案，见<a href="https://ext.dcloud.net.cn/plugin?id=659&tdsourcetag=s_pctim_aiomsg">H5下单页动画示例</a></p></blockquote><p>窗口的显示&#x2F;关闭动画效果，支持在 API、组件、pages.json 中配置，优先级为：<code>API = 组件 &gt; pages.json</code>。</p><h4 id="API"><a href="#API" class="headerlink" title="#API"></a><a href="https://uniapp.dcloud.net.cn/api/router.html#api">#</a>API</h4><p>有效的路由 API</p><ul><li>navigateTo</li><li>navigateBack</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php">uni.<span class="hljs-title function_ invoke__">navigateTo</span>(&#123;<br><span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;../test/test&#x27;</span>,<br><span class="hljs-attr">animationType</span>: <span class="hljs-string">&#x27;pop-in&#x27;</span>,<br><span class="hljs-attr">animationDuration</span>: <span class="hljs-number">200</span><br>&#125;);<br>uni.<span class="hljs-title function_ invoke__">navigateBack</span>(&#123;<br><span class="hljs-attr">delta</span>: <span class="hljs-number">1</span>,<br><span class="hljs-attr">animationType</span>: <span class="hljs-string">&#x27;pop-out&#x27;</span>,<br><span class="hljs-attr">animationDuration</span>: <span class="hljs-number">200</span><br>&#125;);<br><br></code></pre></td></tr></table></figure><h4 id="pages-json"><a href="#pages-json" class="headerlink" title="pages.json"></a>pages.json</h4><p>pages.json 中配置的是窗口显示的动画</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;style&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;app-plus&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;animationType&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;fade-in&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;animationDuration&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">300</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><p>显示动画与关闭动画，会有默认的对应规则。但是如果通过 API 或组件配置了窗口关闭的动画类型，则不会使用默认的类型。</p><table><thead><tr><th>显示动画</th><th>关闭动画</th><th>显示动画描述（关闭动画与之相反）</th></tr></thead><tbody><tr><td>slide-in-right</td><td>slide-out-right</td><td>新窗体从右侧进入</td></tr><tr><td>slide-in-left</td><td>slide-out-left</td><td>新窗体从左侧进入</td></tr><tr><td>slide-in-top</td><td>slide-out-top</td><td>新窗体从顶部进入</td></tr><tr><td>slide-in-bottom</td><td>slide-out-bottom</td><td>新窗体从底部进入</td></tr><tr><td>pop-in</td><td>pop-out</td><td>新窗体从左侧进入，且老窗体被挤压而出</td></tr><tr><td>fade-in</td><td>fade-out</td><td>新窗体从透明到不透明逐渐显示</td></tr><tr><td>zoom-out</td><td>zoom-in</td><td>新窗体从小到大缩放显示</td></tr><tr><td>zoom-fade-out</td><td>zoom-fade-in</td><td>新窗体从小到大逐渐放大并且从透明到不透明逐渐显示</td></tr><tr><td>none</td><td>none</td><td>无动画</td></tr></tbody></table><p>更多查看官方文档</p><h3 id="页面通讯"><a href="#页面通讯" class="headerlink" title="页面通讯"></a>页面通讯</h3><h3 id="uni-emit-eventName-OBJECT"><a href="#uni-emit-eventName-OBJECT" class="headerlink" title="uni.$emit(eventName,OBJECT)"></a>uni.$emit(eventName,OBJECT)</h3><p>触发全局的自定义事件，附加参数都会传给监听器回调函数。</p><table><thead><tr><th>属性</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>eventName</td><td>String</td><td>事件名</td></tr><tr><td>OBJECT</td><td>Object</td><td>触发事件携带的附加参数</td></tr></tbody></table><p><strong>代码示例</strong></p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">uni.<span class="hljs-symbol">$emit</span>(<span class="hljs-string">&#x27;update&#x27;</span>,&#123;<span class="hljs-attr">msg</span>:<span class="hljs-string">&#x27;页面更新&#x27;</span>&#125;)<br></code></pre></td></tr></table></figure><p>复制代码</p><h3 id="uni-on-eventName-callback"><a href="#uni-on-eventName-callback" class="headerlink" title="#uni.$on(eventName,callback)"></a><a href="https://uniapp.dcloud.net.cn/api/window/communication.html#on">#</a>uni.$on(eventName,callback)</h3><p>监听全局的自定义事件，事件由 <code>uni.$emit</code> 触发，回调函数会接收事件触发函数的传入参数。</p><table><thead><tr><th>属性</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>eventName</td><td>String</td><td>事件名</td></tr><tr><td>callback</td><td>Function</td><td>事件的回调函数</td></tr></tbody></table><p><strong>代码示例</strong></p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade">uni.<span class="hljs-symbol">$o</span>n(<span class="hljs-string">&#x27;update&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)&#123;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;监听到事件来自 update ，携带参数 msg 为：&#x27;</span> + data.msg);<br>&#125;)<br></code></pre></td></tr></table></figure><p>复制代码</p><h3 id="uni-once-eventName-callback"><a href="#uni-once-eventName-callback" class="headerlink" title="#uni.$once(eventName,callback)"></a><a href="https://uniapp.dcloud.net.cn/api/window/communication.html#once">#</a>uni.$once(eventName,callback)</h3><p>监听全局的自定义事件，事件由 <code>uni.$emit</code> 触发，但仅触发一次，在第一次触发之后移除该监听器。</p><table><thead><tr><th>属性</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>eventName</td><td>String</td><td>事件名</td></tr><tr><td>callback</td><td>Function</td><td>事件的回调函数</td></tr></tbody></table><p><strong>代码示例</strong></p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade">uni.<span class="hljs-symbol">$o</span>nce(<span class="hljs-string">&#x27;update&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)&#123;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;监听到事件来自 update ，携带参数 msg 为：&#x27;</span> + data.msg);<br>&#125;)<br></code></pre></td></tr></table></figure><p>复制代码</p><h3 id="uni-off-eventName-callback"><a href="#uni-off-eventName-callback" class="headerlink" title="#uni.$off([eventName, callback])"></a><a href="https://uniapp.dcloud.net.cn/api/window/communication.html#off">#</a>uni.$off([eventName, callback])</h3><p>移除全局自定义事件监听器。</p><table><thead><tr><th>属性</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>eventName</td><td>Array＜String＞</td><td>事件名</td></tr><tr><td>callback</td><td>Function</td><td>事件的回调函数</td></tr></tbody></table><p><strong>Tips</strong></p><ul><li>如果uni.$off没有传入参数，则移除App级别的所有事件监听器；</li><li>如果只提供了事件名（eventName），则移除该事件名对应的所有监听器；</li><li>如果同时提供了事件与回调，则只移除这个事件回调的监听器；</li><li>提供的回调必须跟$on的回调为同一个才能移除这个回调的监听器；</li></ul><p><strong>代码示例</strong></p><p><code>$emit</code>、<code>$on</code>、<code>$off</code>常用于跨页面、跨组件通讯，这里为了方便演示放在同一个页面</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;data&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">text</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">val</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">text</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;comunicationOff&quot;</span>&gt;</span>结束监听<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">return</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">val</span>: <span class="hljs-number">0</span></span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;,</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-title function_">onLoad</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-built_in">setInterval</span>(<span class="hljs-function">()=&gt;</span>&#123;</span></span><br><span class="language-javascript"><span class="language-xml">uni.$emit(<span class="hljs-string">&#x27;add&#x27;</span>, &#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">data</span>: <span class="hljs-number">2</span></span></span><br><span class="language-javascript"><span class="language-xml">&#125;)</span></span><br><span class="language-javascript"><span class="language-xml">&#125;,<span class="hljs-number">1000</span>)</span></span><br><span class="language-javascript"><span class="language-xml">uni.$on(<span class="hljs-string">&#x27;add&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">add</span>)</span></span><br><span class="language-javascript"><span class="language-xml">&#125;,</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">methods</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-title function_">comunicationOff</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">uni.$off(<span class="hljs-string">&#x27;add&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">add</span>)</span></span><br><span class="language-javascript"><span class="language-xml">&#125;,</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-title function_">add</span>(<span class="hljs-params">e</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">this</span>.<span class="hljs-property">val</span> += e.<span class="hljs-property">data</span></span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.content</span> &#123;</span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-attribute">display</span>: flex;</span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-attribute">flex-direction</span>: column;</span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-attribute">align-items</span>: center;</span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-attribute">justify-content</span>: center;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.data</span> &#123;</span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-attribute">text-align</span>: center;</span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-attribute">line-height</span>: <span class="hljs-number">40px</span>;</span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-attribute">margin-top</span>: <span class="hljs-number">40px</span>;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-tag">button</span> &#123;</span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-attribute">margin</span>: <span class="hljs-number">20px</span> <span class="hljs-number">0</span>;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br><span class="language-xml"></span><br></code></pre></td></tr></table></figure><p>复制代码</p><p><strong>注意事项</strong></p><ul><li>uni.$emit、 uni.$on 、 uni.$once 、uni.$off 触发的事件都是 App 全局级别的，跨任意组件，页面，nvue，vue 等</li><li>使用时，注意及时销毁事件监听，比如，页面 onLoad 里边 uni.$on 注册监听，onUnload 里边 uni.$off 移除，或者一次性的事件，直接使用 uni.$once 监听</li><li>注意 uni.$on 定义完成后才能接收到 uni.$emit 传递的数据</li></ul><h3 id="数据缓存"><a href="#数据缓存" class="headerlink" title="数据缓存"></a>数据缓存</h3><h3 id="uni-setStorage-OBJECT"><a href="#uni-setStorage-OBJECT" class="headerlink" title="uni.setStorage(OBJECT)"></a>uni.setStorage(OBJECT)</h3><p>将数据存储在本地缓存中指定的 key 中，会覆盖掉原来该 key 对应的内容，这是一个异步接口。</p><p><strong>OBJECT 参数说明</strong></p><table><thead><tr><th>参数名</th><th>类型</th><th>必填</th><th>说明</th></tr></thead><tbody><tr><td>key</td><td>String</td><td>是</td><td>本地缓存中的指定的 key</td></tr><tr><td>data</td><td>Any</td><td>是</td><td>需要存储的内容，只支持原生类型、及能够通过 JSON.stringify 序列化的对象</td></tr><tr><td>success</td><td>Function</td><td>否</td><td>接口调用成功的回调函数</td></tr><tr><td>fail</td><td>Function</td><td>否</td><td>接口调用失败的回调函数</td></tr><tr><td>complete</td><td>Function</td><td>否</td><td>接口调用结束的回调函数（调用成功、失败都会执行）</td></tr></tbody></table><p><strong>示例</strong></p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs arcade">uni.setStorage(&#123;<br><span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;storage_key&#x27;</span>,<br><span class="hljs-attr">data</span>: <span class="hljs-string">&#x27;hello&#x27;</span>,<br><span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;success&#x27;</span>);<br>&#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="uni-setStorageSync-KEY-DATA"><a href="#uni-setStorageSync-KEY-DATA" class="headerlink" title="uni.setStorageSync(KEY,DATA)"></a>uni.setStorageSync(KEY,DATA)</h3><p>将 data 存储在本地缓存中指定的 key 中，会覆盖掉原来该 key 对应的内容，这是一个同步接口。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">try</span> &#123;<br>uni.setStorageSync(<span class="hljs-string">&#x27;storage_key&#x27;</span>, <span class="hljs-string">&#x27;hello&#x27;</span>);<br>&#125; <span class="hljs-keyword">catch</span> (e) &#123;<br><span class="hljs-comment">// error</span><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="uni-getStorage-OBJECT"><a href="#uni-getStorage-OBJECT" class="headerlink" title="uni.getStorage(OBJECT)"></a>uni.getStorage(OBJECT)</h3><p>从本地缓存中异步获取指定 key 对应的内容。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs arcade">uni.getStorage(&#123;<br><span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;storage_key&#x27;</span>,<br><span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>) &#123;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(res.data);<br>&#125;<br>&#125;);<br><br></code></pre></td></tr></table></figure><h3 id="uni-getStorageSync-KEY"><a href="#uni-getStorageSync-KEY" class="headerlink" title="uni.getStorageSync(KEY)"></a>uni.getStorageSync(KEY)</h3><p>从本地缓存中同步获取指定 key 对应的内容。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-keyword">const</span> value = uni.<span class="hljs-title function_">getStorageSync</span>(<span class="hljs-string">&#x27;storage_key&#x27;</span>);<br><span class="hljs-keyword">if</span> (value) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value);<br>&#125;<br>&#125; <span class="hljs-keyword">catch</span> (e) &#123;<br><span class="hljs-comment">// error</span><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="uni-getStorageInfo-OBJECT"><a href="#uni-getStorageInfo-OBJECT" class="headerlink" title="uni.getStorageInfo(OBJECT)"></a>uni.getStorageInfo(OBJECT)</h3><p>异步获取当前 storage 的相关信息。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs arcade">uni.getStorageInfo(&#123;<br><span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>) &#123;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(res.keys);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(res.currentSize);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(res.limitSize);<br>&#125;<br>&#125;);<br><br></code></pre></td></tr></table></figure><h3 id="uni-getStorageInfoSync"><a href="#uni-getStorageInfoSync" class="headerlink" title="uni.getStorageInfoSync()"></a>uni.getStorageInfoSync()</h3><p>同步获取当前 storage 的相关信息。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs arcade">try &#123;<br>const res = uni.getStorageInfoSync();<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(res.keys);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(res.currentSize);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(res.limitSize);<br>&#125; catch (e) &#123;<br><span class="hljs-comment">// error</span><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="uni-removeStorage-OBJECT"><a href="#uni-removeStorage-OBJECT" class="headerlink" title="uni.removeStorage(OBJECT)"></a>uni.removeStorage(OBJECT)</h3><p>从本地缓存中异步移除指定 key。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs arcade">uni.removeStorage(&#123;<br><span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;storage_key&#x27;</span>,<br><span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>) &#123;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;success&#x27;</span>);<br>&#125;<br>&#125;);<br><br></code></pre></td></tr></table></figure><h3 id="uni-removeStorageSync-KEY"><a href="#uni-removeStorageSync-KEY" class="headerlink" title="uni.removeStorageSync(KEY)"></a>uni.removeStorageSync(KEY)</h3><p>从本地缓存中同步移除指定 key。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">try</span> &#123;<br>uni.removeStorageSync(<span class="hljs-string">&#x27;storage_key&#x27;</span>);<br>&#125; <span class="hljs-keyword">catch</span> (e) &#123;<br><span class="hljs-comment">// error</span><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="uni-clearStorage"><a href="#uni-clearStorage" class="headerlink" title="uni.clearStorage()"></a>uni.clearStorage()</h3><p>清理本地数据缓存。</p><p><strong>示例</strong></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">uni.clearStorage()<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>复制代码</p><h3 id="uni-clearStorageSync"><a href="#uni-clearStorageSync" class="headerlink" title="#uni.clearStorageSync()"></a><a href="https://uniapp.dcloud.net.cn/api/storage/storage.html#clearstoragesync">#</a>uni.clearStorageSync()</h3><p>同步清理本地数据缓存。</p><p><strong>示例</strong></p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">try</span> &#123;<br>uni.clearStorageSync();<br>&#125; <span class="hljs-keyword">catch</span> (e) &#123;<br><span class="hljs-comment">// error</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>uni-app</category>
      
    </categories>
    
    
    <tags>
      
      <tag>uni-app</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git使用ssh密钥</title>
    <link href="/2022/03/11/git%E4%BD%BF%E7%94%A8ssh%E5%AF%86%E9%92%A5/"/>
    <url>/2022/03/11/git%E4%BD%BF%E7%94%A8ssh%E5%AF%86%E9%92%A5/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/superGG1990/p/6844952.html">https://www.cnblogs.com/superGG1990/p/6844952.html</a></p><h2 id="ssh"><a href="#ssh" class="headerlink" title="ssh"></a>ssh</h2><p>ssh，简单来讲，就是一个秘钥，其中，id_rsa是你这台电脑的私人秘钥，不能给别人看的，id_rsa.pub是公共秘钥，可以随便给别人看。把这个公钥放在GitHub上，这样当你链接GitHub自己的账户时，它就会根据公钥匹配你的私钥，当能够相互匹配时，才能够顺利的通过git上传你的文件到GitHub上。</p><p>而后在GitHub的setting中，找到SSH keys的设置选项，点击New SSH key<br>把你的id_rsa.pub里面的信息复制进去。</p><h2 id="git使用ssh密钥"><a href="#git使用ssh密钥" class="headerlink" title="git使用ssh密钥"></a>git使用ssh密钥</h2><p>git支持https和git两种传输协议，github分享链接时会有两种协议可选：</p><p>git协议链接图例 : ↓</p><p>https协议链接图例：↓</p><p>​       </p><p>git使用https协议，每次pull, push都会提示要输入密码，使用git协议，然后使用ssh密钥，这样免去每次都输密码的麻烦</p><p>初次使用git的用户要使用git协议大概需要三个步骤：<br>一、生成密钥对<br>二、设置远程仓库（本文以github为例）上的公钥<br>三、把git的 remote url 修改为git协议（以上两个步骤初次设置过以后，以后使用都不需要再次设置，此步骤视以后项目的remote url而定，如果以后其他项目的协议为https则需要此步骤）<br> 一、生成密钥对<br>大多数 Git 服务器都会选择使用 SSH 公钥来进行授权。系统中的每个用户都必须提供一个公钥用于授权，没有的话就要生成一个。生成公钥的过程在所有操作系统上都差不多。首先你要确认一下本机是否已经有一个公钥。</p><p>SSH 公钥默认储存在账户的主目录下的 ~&#x2F;.ssh 目录。进去看看：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cd</span> ~/.ssh</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">ls</span></span><br></code></pre></td></tr></table></figure><p>authorized_keys2  id_dsa       known_hosts config            id_dsa.pub<br>看一下有没有id_rsa和id_rsa.pub(或者是id_dsa和id_dsa.pub之类成对的文件)，有 .pub 后缀的文件就是公钥，另一个文件则是密钥。</p><p>假如没有这些文件，甚至连 .ssh 目录都没有，可以用 ssh-keygen 来创建。该程序在 Linux&#x2F;Mac 系统上由 SSH 包提供，而在 Windows 上则包含在 MSysGit 包里：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>ssh-keygen -t rsa -C <span class="hljs-string">&quot;your_email@youremail.com&quot;</span><br></code></pre></td></tr></table></figure><p>连按三次回车  才能成功</p><p>Creates a new ssh key using the provided email # Generating public&#x2F;private rsa key pair.</p><p>Enter file in which to save the key (&#x2F;home&#x2F;you&#x2F;.ssh&#x2F;id_rsa):<br>直接按Enter就行。然后，会提示你输入密码，如下(建议输一个，安全一点，当然不输也行，应该不会有人闲的无聊冒充你去修改你的代码)：</p><p>Enter same passphrase again: [Type passphrase again]<br>完了之后，大概是这样：</p><p>Your public key has been saved in &#x2F;home&#x2F;you&#x2F;.ssh&#x2F;id_rsa.pub.<br>The key fingerprint is: # 01:0f:f4:3b:ca:85:d6:17:a1:7d:f0:68:9d:f0:a2:db <a href="mailto:&#121;&#x6f;&#x75;&#x72;&#95;&#101;&#x6d;&#97;&#105;&#x6c;&#64;&#x79;&#x6f;&#x75;&#114;&#101;&#109;&#97;&#x69;&#x6c;&#46;&#x63;&#111;&#x6d;">&#121;&#x6f;&#x75;&#x72;&#95;&#101;&#x6d;&#97;&#105;&#x6c;&#64;&#x79;&#x6f;&#x75;&#114;&#101;&#109;&#97;&#x69;&#x6c;&#46;&#x63;&#111;&#x6d;</a><br>到此为止，你本地的密钥对就生成了。</p><h2 id="二、添加公钥到你的远程仓库（github）"><a href="#二、添加公钥到你的远程仓库（github）" class="headerlink" title="二、添加公钥到你的远程仓库（github）"></a>二、添加公钥到你的远程仓库（github）</h2><h3 id="1、查看你生成的公钥："><a href="#1、查看你生成的公钥：" class="headerlink" title="1、查看你生成的公钥："></a>1、查看你生成的公钥：</h3><p>$ cat ~&#x2F;.ssh&#x2F;id_rsa.pub</p><p>ssh-rsa AAABB3NzaC1yc2EAAAADAQABAAABAQC0X6L1zLL4VHuvGb8aJH9ippTozmReSUzgntvk434aJ&#x2F;v7kOdJ&#x2F;MTyBlWXFCR+HAo3FXRitBqxiX1nKhXpHAZsMciLq8vR3c8E7CjZN733f5AL8uEYJA+YZevY5UCvEg+umT7PHghKYaJwaCxV7sjYP7Z6V79OMCEAGDNXC26IBMdMgOluQjp6o6j2KAdtRBdCDS&#x2F;QIU5THQDxJ9lBXjk1fiq9tITo&#x2F;aXBvjZeD+gH&#x2F;Apkh&#x2F;0GbO8VQLiYYmNfqqAHHeXdltORn8N7C9lOa&#x2F;UW3KM7QdXo6J0GFlBVQeTE&#x2F;IGqhMS5PMln3 admin@admin-PC</p><h3 id="2、登陆你的github帐户。"><a href="#2、登陆你的github帐户。" class="headerlink" title="2、登陆你的github帐户。"></a>2、登陆你的github帐户。</h3><p>点击你的头像，然后 Settings -&gt; 左栏点击 SSH and GPG keys -&gt; 点击 New SSH key</p><h3 id="3、然后你复制上面的公钥内容，"><a href="#3、然后你复制上面的公钥内容，" class="headerlink" title="3、然后你复制上面的公钥内容，"></a>3、然后你复制上面的公钥内容，</h3><p>粘贴进“Key”文本域内。 title域，自己随便起个名字。</p><h3 id="4、点击-Add-key。"><a href="#4、点击-Add-key。" class="headerlink" title="4、点击 Add key。"></a>4、点击 Add key。</h3><p>完成以后，验证下这个key是不是正常工作：</p><p>$ ssh -T <a href="mailto:&#x67;&#105;&#116;&#64;&#103;&#105;&#116;&#104;&#x75;&#x62;&#46;&#99;&#111;&#x6d;">&#x67;&#105;&#116;&#64;&#103;&#105;&#116;&#104;&#x75;&#x62;&#46;&#99;&#111;&#x6d;</a></p><p>Attempts to ssh to github<br>如果，看到：</p><p>Hi xxx! You’ve successfully authenticated, but GitHub does not # provide shell access.<br>恭喜你，你的设置已经成功了。</p><p>三、修改git的remote url</p><p> 使用命令 git remote -v 查看你当前的 remote url</p><p>$ git remote -v<br>origin <a href="https://github.com/someaccount/someproject.git">https://github.com/someaccount/someproject.git</a> (fetch)<br>origin <a href="https://github.com/someaccount/someproject.git">https://github.com/someaccount/someproject.git</a> (push)<br>如果是以上的结果那么说明此项目是使用https协议进行访问的（如果地址是git开头则表示是git协议）</p><p>你可以登陆你的github，就像本文开头的图例，你在上面可以看到你的ssh协议相应的url，类似：</p><p>复制此ssh链接，然后使用命令 git remote set-url 来调整你的url。</p><p>git remote set-url origin <a href="mailto:&#103;&#x69;&#x74;&#x40;&#x67;&#105;&#x74;&#104;&#117;&#98;&#x2e;&#x63;&#111;&#x6d;">&#103;&#x69;&#x74;&#x40;&#x67;&#105;&#x74;&#104;&#117;&#98;&#x2e;&#x63;&#111;&#x6d;</a>:someaccount&#x2F;someproject.git<br>然后你可以再用命令 git remote -v 查看一下，url是否已经变成了ssh地址。</p><p>然后你就可以愉快的使用git fetch, git pull , git push，再也不用输入烦人的密码了</p><p>参考链接：<a href="http://www.tuicool.com/articles/BzUrAvF">http://www.tuicool.com/articles/BzUrAvF</a></p>]]></content>
    
    
    <categories>
      
      <category>git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>小程序请求接口封装</title>
    <link href="/2022/03/02/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%AF%B7%E6%B1%82%E6%8E%A5%E5%8F%A3%E5%B0%81%E8%A3%85/"/>
    <url>/2022/03/02/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%AF%B7%E6%B1%82%E6%8E%A5%E5%8F%A3%E5%B0%81%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<p>小程序接口开发流程</p><p>1先到小程序管理后台，配置服务器域名</p><p>2打开你的项目，点击详情，看域名是否配置好</p><p>3在utils文件夹下，分别建立http.js   api.js</p><p>4index,js中引用api.js中暴露的方法，发出请求</p><p>5打开console控制台，查看详情和返回数据</p><p><strong>http.js 代码(复制过去就可以了)</strong> </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-title function_">http</span>(<span class="hljs-params">url, method, params</span>) &#123;<br>    <span class="hljs-keyword">let</span> token = <span class="hljs-string">&#x27;token&#x27;</span> <span class="hljs-comment">// 获取token，自行获取token和签名，token和签名表示每个接口都要发送的数据</span><br>    <span class="hljs-keyword">let</span> sign = <span class="hljs-string">&#x27;sign&#x27;</span> <span class="hljs-comment">// 获取签名 (后台怎么定义的，就传什么)</span><br>    <span class="hljs-keyword">let</span> data = &#123;<br>      token,<br>      sign<br>    &#125; <span class="hljs-keyword">if</span> (params.<span class="hljs-property">data</span>) &#123; <span class="hljs-comment">// 在这里判断一下data是否存在，params表示前端需要传递的数据，params是一个对象，有三组键值对，data：表示请求要发送的数据，success：成功的回调，fail：失败的回调，这三个字段可缺可无，其余字段会忽略</span><br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> params.<span class="hljs-property">data</span>) &#123; <span class="hljs-comment">// 在这里判断传过来的参数值为null，就删除这个属性</span><br>        <span class="hljs-keyword">if</span> (params.<span class="hljs-property">data</span>[key] == <span class="hljs-literal">null</span> || params.<span class="hljs-property">data</span>[key] == <span class="hljs-string">&#x27;null&#x27;</span>) &#123; <span class="hljs-keyword">delete</span> params.<span class="hljs-property">data</span>[key]<br>        &#125;<br>      &#125;<br>      data = &#123; ...data, ...params.<span class="hljs-property">data</span> &#125;<br>    &#125;<br>    wx.<span class="hljs-title function_">request</span>(&#123;<br>      <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;你配置的域名&#x27;</span> + url, <span class="hljs-comment">// 就是拼接上前缀,此接口域名是开放接口，可访问</span><br>      <span class="hljs-attr">method</span>: method == <span class="hljs-string">&#x27;post&#x27;</span> ? <span class="hljs-string">&#x27;post&#x27;</span> : <span class="hljs-string">&#x27;get&#x27;</span>, <span class="hljs-comment">// 判断请求类型，除了值等于&#x27;post&#x27;外，其余值均视作get 其他的请求类型也可以自己加上的</span><br> data,<br>      <span class="hljs-attr">header</span>: &#123; <span class="hljs-string">&#x27;content-type&#x27;</span>: <span class="hljs-string">&#x27;application/json&#x27;</span> &#125;,<br>      <span class="hljs-title function_">success</span>(<span class="hljs-params">res</span>) &#123;<br>        params.<span class="hljs-property">success</span> &amp;&amp; params.<span class="hljs-title function_">success</span>(res.<span class="hljs-property">data</span>)<br>      &#125;,<br>      <span class="hljs-title function_">fail</span>(<span class="hljs-params">err</span>) &#123;<br>        params.<span class="hljs-property">fail</span> &amp;&amp; params.<span class="hljs-title function_">fail</span>(err)<br>      &#125;<br>    &#125;)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>api.js（再次复制代码 就可以了）</strong> </p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs csharp">/在这里面定义所有接口，一个文件管理所有接口，易于维护<br>import &#123; http &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./http&#x27;</span>; <span class="hljs-comment">// 引入刚刚封装好的http模块，import属于ES6的语法，微信开发者工具必须打开ES6转ES5选项</span><br><br><span class="hljs-function">function <span class="hljs-title">femaleNameApi</span>(<span class="hljs-params"><span class="hljs-keyword">params</span></span>)</span> &#123; <span class="hljs-comment">// 请求随机古诗词接口</span><br>  http(<span class="hljs-string">&#x27;project/projectInfos&#x27;</span>, <span class="hljs-string">&#x27;get&#x27;</span>, <span class="hljs-keyword">params</span>)  <span class="hljs-comment">// 接口请求的路由地址以及请求方法在此处传递</span><br>&#125; <span class="hljs-comment">// 每一个接口定义一个函数，然后暴露出去，供逻辑代码调用</span><br><br><span class="hljs-function">function <span class="hljs-title">novelApi</span>(<span class="hljs-params"><span class="hljs-keyword">params</span></span>)</span> &#123; <span class="hljs-comment">// 小说推荐接口</span><br>  http(<span class="hljs-string">&#x27;/novelApi&#x27;</span>, <span class="hljs-string">&#x27;get&#x27;</span>, <span class="hljs-keyword">params</span>)<br>&#125;<br><br>export <span class="hljs-literal">default</span> &#123; <span class="hljs-comment">// 暴露接口</span><br> femaleNameApi,<br>  novelApi<br>&#125;<br></code></pre></td></tr></table></figure><p>在index.js 调用（你想在哪里用就在哪里用）</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs arcade">/index.js<br>import http from <span class="hljs-string">&#x27;../../utils/api&#x27;</span> <span class="hljs-comment">// 引入api接口管理文件</span><br> Page(&#123;<br>  <span class="hljs-attr">onLoad</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123; this.getData()<br>  &#125;,<br><br>  getData()&#123;<br>    http.femaleNameApi(&#123; <span class="hljs-comment">// 调用接口，传入参数</span><br> data: &#123;<br>        <span class="hljs-attr">token</span>: <span class="hljs-string">&#x27;470712FF0FE2392D6CB6D8A6560805CC&#x27;</span> &#125;,<br>      <span class="hljs-attr">success</span>: <span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>        <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;接口请求成功&#x27;</span>, res) this.setData(&#123;<br>          <span class="hljs-attr">femaleList</span>: res.data<br>        &#125;)<br>      &#125;,<br>      <span class="hljs-attr">fail</span>: <span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>        <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(err)<br>      &#125;<br>    &#125;)<br>  &#125;<br>&#125;)<br><br>使用<br>import http from <span class="hljs-string">&#x27;../../utils/api&#x27;</span> <span class="hljs-comment">// 引入api接口管理文件</span><br> http.getActivePatrol(&#123;<br>      <span class="hljs-attr">success</span>: <span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>        <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;巡检任务接口回调数据&#x27;</span>, res)<br>        <span class="hljs-keyword">if</span> (res.code == <span class="hljs-number">200</span>) &#123;<br>          <br>        &#125;<br>      &#125;,<br>      <span class="hljs-attr">fail</span>: <span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>        <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;接口请求失败&#x27;</span>, err)<br>      &#125;<br>    &#125;)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>小程序</category>
      
    </categories>
    
    
    <tags>
      
      <tag>小程序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>小程序的配置和代码构成</title>
    <link href="/2022/02/12/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E9%85%8D%E7%BD%AE%E5%92%8C%E4%BB%A3%E7%A0%81%E6%9E%84%E6%88%90/"/>
    <url>/2022/02/12/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E9%85%8D%E7%BD%AE%E5%92%8C%E4%BB%A3%E7%A0%81%E6%9E%84%E6%88%90/</url>
    
    <content type="html"><![CDATA[<h1 id="小程序开发指南"><a href="#小程序开发指南" class="headerlink" title="小程序开发指南"></a>小程序开发指南</h1><h2 id="申请账号"><a href="#申请账号" class="headerlink" title="申请账号"></a>申请账号</h2><p>进入<a href="https://mp.weixin.qq.com/wxopen/waregister?action=step1">小程序注册页</a> 根据指引填写信息和提交相应的资料，就可以拥有自己的小程序账号。 </p><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><p>第一步，请前往<a href="https://mp.weixin.qq.com/debug/wxadoc/dev/devtools/download.html">https://mp.weixin.qq.com/debug/wxadoc/dev/devtools/download.html</a> 微信开发者工具下载页面根据自己的操作系统下载对应的安装包进行安装。 </p><p>第二步，打开微信开发者工具，选择新建小程序项目，我们先不需理解AppID的概念，新建项目时选择无AppID，并取消勾选“建立普通快速启动模板”的选项。 </p><p>最后一步，我们来添加必要的代码。 </p><p>在根目录下创建app.json，其内容如下。 </p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs prolog">&#123;<br><br>  <span class="hljs-string">&quot;pages&quot;</span>: [<span class="hljs-string">&quot;pages/index/index&quot;</span>]<br><br>&#125;<br></code></pre></td></tr></table></figure><p>在根目录下新建pages目录，然后在pages目录下新建index目录，接着在index目录下创建两个文件index.wxml和index.js。</p><p>index.wxml的内容如下所示。<code>&lt;text&gt;Hello World&lt;/text&gt;</code></p><p>index.js的内容如下所示。<code>Page(&#123;&#125;)</code></p><p>通过编写以上短短的几行代码，微信开发者工具的模拟器界面上显示出Hello World。</p><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p>小程序包含一个描述整体程序的 <code>app</code> 和多个描述各自页面的 <code>page</code>。</p><p>一个小程序主体部分由三个文件组成，必须放在项目的根目录，如下：</p><p><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/app.html">app.js</a> 小程序逻辑 </p><p><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/config.html">app.json</a> 小程序公共配置 </p><p><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxss.html">app.wxss</a> 小程序公共样式表 </p><p>一个小程序页面由四个文件组成，分别是： </p><p><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/page.html">js</a> 页面逻辑 </p><p><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxml/">wxml</a> 页面结构 </p><p><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/config.html#%E9%A1%B5%E9%9D%A2%E9%85%8D%E7%BD%AE">json</a> 页面配置 </p><p><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxss.html">wxss</a> 页面样式表 </p><h2 id="app-json配置"><a href="#app-json配置" class="headerlink" title="app.json配置"></a>app.json配置</h2><p>我们简单说一下这个配置各个项的含义:</p><ol><li><code>pages</code>字段 —— 用于描述当前小程序所有页面路径，这是为了让微信客户端知道当前你的小程序页面定义在哪个目录。</li><li><code>window</code>字段 —— 定义小程序所有页面的顶部背景颜色，文字颜色定义等。</li><li>tabBar如果小程序是一个多 tab 应用（客户端窗口的底部或顶部有 tab 栏可以切换页面），可以通过 tabBar 配置项指定 tab 栏的表现，以及 tab 切换时显示的对应页面。</li></ol><p><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/app.html#entryPagePath">entryPagePath</a> 小程序默认启动首页 </p><p><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/app.html#pages">pages</a> 页面路径列表 </p><p><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/app.html#window">window</a> 全局的默认窗口表现 </p><p><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/app.html#tabBar">tabBar</a> 底部 <code>tab</code> 栏的表现 </p><p><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/app.html#networkTimeout">networkTimeout</a> 网络超时时间 </p><p><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/app.html#debug">debug</a> 是否开启 debug 模式，默认关闭 </p><p>等等。。。</p><p>其他配置项细节可以参考文档 <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/config.html">小程序的配置 app.json</a> 。</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">&#123;<br>  &quot;pages&quot;:[<br>    &quot;pages/<span class="hljs-keyword">index</span>/<span class="hljs-keyword">index</span><span class="hljs-string">&quot;,</span><br><span class="hljs-string">    &quot;</span>pages/logs/logs<span class="hljs-string">&quot;</span><br><span class="hljs-string">  ],</span><br><span class="hljs-string">  &quot;</span>tabBar<span class="hljs-string">&quot;: &#123;</span><br><span class="hljs-string">    &quot;</span>list<span class="hljs-string">&quot;: [&#123;</span><br><span class="hljs-string">      &quot;</span>pagePath<span class="hljs-string">&quot;: &quot;</span>pages/<span class="hljs-keyword">index</span>/<span class="hljs-keyword">index</span><span class="hljs-string">&quot;,</span><br><span class="hljs-string">      &quot;</span>text<span class="hljs-string">&quot;: &quot;</span>首页<span class="hljs-string">&quot;</span><br><span class="hljs-string">    &#125;, &#123;</span><br><span class="hljs-string">      &quot;</span>pagePath<span class="hljs-string">&quot;: &quot;</span>pages/logs/logs<span class="hljs-string">&quot;,</span><br><span class="hljs-string">      &quot;</span>text<span class="hljs-string">&quot;: &quot;</span>日志<span class="hljs-string">&quot;</span><br><span class="hljs-string">    &#125;]</span><br><span class="hljs-string">  &#125;,</span><br><span class="hljs-string">  &quot;</span>window<span class="hljs-string">&quot;:&#123;</span><br><span class="hljs-string">    &quot;</span>backgroundTextStyle<span class="hljs-string">&quot;:&quot;</span>light<span class="hljs-string">&quot;,</span><br><span class="hljs-string">    &quot;</span>navigationBarBackgroundColor<span class="hljs-string">&quot;: &quot;</span>#fff<span class="hljs-string">&quot;,</span><br><span class="hljs-string">    &quot;</span>navigationBarTitleText<span class="hljs-string">&quot;: &quot;</span>WeChat<span class="hljs-string">&quot;,</span><br><span class="hljs-string">    &quot;</span>navigationBarTextStyle<span class="hljs-string">&quot;:&quot;</span>black<span class="hljs-string">&quot;</span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string">&#125;</span><br></code></pre></td></tr></table></figure><p>还需要注意的是 JSON 文件中无法使用注释，试图添加注释将会引发报错。</p><p>window在取值时我用rgb未生效，变成默认白色<br>后转成16进制色生效<br><a href="https://www.sioe.cn/yingyong/yanse-rgb-16/">https://www.sioe.cn/yingyong/yanse-rgb-16/</a></p><p>全局配置项</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">https://developers.weixin.qq.com/miniprogram/dev/reference/<span class="hljs-keyword">configuration</span>/app.html<br><br>详细参数<br>坑：<br><br><br>tabBar   pagePath路径里一定要有一个<span class="hljs-keyword">index</span>否则不显示<br><br><br><br>&quot;tabBar&quot;: &#123;<br>      &quot;color&quot;: &quot;#a9b7b7&quot;,<br>      &quot;selectedColor&quot;: &quot;#02C8F9&quot;,<br>      &quot;borderStyle&quot;: &quot;black&quot;,<br>      &quot;list&quot;: [<br>         &#123;<br>            &quot;pagePath&quot;: &quot;pages/index/index&quot;,<br>            &quot;iconPath&quot;: &quot;pages/img/shouye.png&quot;,<br>            &quot;selectedIconPath&quot;: &quot;pages/img/shouye3.png&quot;,<br>            &quot;text&quot;: &quot;消息&quot;<br>         &#125;,<br>         &#123;<br>            &quot;pagePath&quot;: &quot;pages/page1/psage&quot;,<br>            &quot;iconPath&quot;: &quot;pages/img/wenda.png&quot;,<br>            &quot;selectedIconPath&quot;: &quot;pages/img/wenda2.png&quot;,<br>            &quot;text&quot;: &quot;通讯录&quot;<br>         &#125;,<br>         &#123;<br>            &quot;pagePath&quot;: &quot;pages/page2/page2&quot;,<br>            &quot;iconPath&quot;: &quot;pages/img/xianzhi.png&quot;,<br>            &quot;selectedIconPath&quot;: &quot;pages/img/xianzhi2.png&quot;,<br>            &quot;text&quot;: &quot;我的&quot;<br>         &#125;<br>      ]<br>   &#125;,<br><br>坑：<br><br><span class="hljs-keyword">window</span>里的标题<br>方法一：<br>如果改动其中一个页面的部分内容如名称，不要把<span class="hljs-keyword">window</span>整个复制给page1.json,只复制一条即可，否则无效<br><br>page1.json<br>&#123;<br>&quot;window&quot;: &#123;<br>      &quot;backgroundTextStyle&quot;: &quot;light&quot;,<br>      &quot;navigationBarBackgroundColor&quot;: &quot;#ccc&quot;,<br>      &quot;navigationBarTitleText&quot;: &quot;my_iM&quot;,<br>      &quot;navigationBarTextStyle&quot;: &quot;black&quot;<br>   &#125;,<br>&#125;<br>page1.json<br>&#123;<br>  &quot;usingComponents&quot;: &#123;&#125;,<br>  &quot;navigationBarTitleText&quot;: &quot;群组1&quot;<br>&#125;<br><br><br>方法二：<br>动态绑定<span class="hljs-keyword">window</span>里的标题<br><br><br>wx.setNavigationBarTitle(&#123;<br>         title: <span class="hljs-string">&#x27;修改后的导航栏标题&#x27;</span>,<br>         success: <span class="hljs-keyword">function</span> (res) &#123;<br>            // success<br>         &#125;<br>      &#125;)<br></code></pre></td></tr></table></figure><p>状态栏沉浸式渲染</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs livescript"> <span class="hljs-string">&quot;window&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;backgroundTextStyle&quot;</span>: <span class="hljs-string">&quot;light&quot;</span>,<br>    <span class="hljs-string">&quot;navigationBarBackgroundColor&quot;</span>: <span class="hljs-string">&quot;<span class="hljs-subst">#fff</span>&quot;</span>,<br>    <span class="hljs-string">&quot;navigationBarTitleText&quot;</span>: <span class="hljs-string">&quot;Weixin&quot;</span>,<br>    <span class="hljs-string">&quot;navigationBarTextStyle&quot;</span>: <span class="hljs-string">&quot;black&quot;</span>,<br>    <span class="hljs-string">&quot;navigationStyle&quot;</span>: <span class="hljs-string">&quot;custom&quot;</span><br>  &#125;,<br>navigationStyle<br></code></pre></td></tr></table></figure><p>获取状态栏高度</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript">js<br><span class="hljs-comment">// 在组件实例进入页面节点树时执行</span><br>      <span class="hljs-keyword">const</span> res = wx.<span class="hljs-title function_">getSystemInfoSync</span>()<br>      <span class="hljs-keyword">var</span> statusbarH = res.<span class="hljs-property">statusBarHeight</span><br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;res&#x27;</span>, res);<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setData</span>(&#123;<br>        <span class="hljs-attr">statusbar</span>: statusbarH<br>      &#125;)<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;statusbar&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">statusbar</span>);<br><br><br>html<br>&lt;view style=<span class="hljs-string">&quot;height:&#123;&#123;statusbar&#125;&#125;px&quot;</span>&gt;&lt;/view&gt;<br></code></pre></td></tr></table></figure><p>自定义组件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">创建组件<br><br>新建组件文件夹components/statusbar<br>右键  新建组件component<br><br>需要引用组件的json文件引用组件<br> <span class="hljs-string">&quot;usingComponents&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;statusbar&quot;</span>: <span class="hljs-string">&quot;../components/statusbar/statusbar&quot;</span><br>  &#125;,<br><br><br>使用组件<br>需要使用组件的xhml文件引用组件 <br> &lt;statusbar/&gt;<br></code></pre></td></tr></table></figure><h2 id="工具配置-project-config-json"><a href="#工具配置-project-config-json" class="headerlink" title="工具配置 project.config.json"></a>工具配置 project.config.json</h2><p>通常大家在使用一个工具的时候，都会针对各自喜好做一些个性化配置，例如界面颜色、编译配置等等，当你换了另外一台电脑重新安装工具的时候，你还要重新配置。</p><p>考虑到这点，小程序开发者工具在每个项目的根目录都会生成一个 <code>project.config.json</code>，你在工具上做的任何配置都会写入到这个文件，当你重新安装工具或者换电脑工作时，你只要载入同一个项目的代码包，开发者工具就自动会帮你恢复到当时你开发项目时的个性化配置，其中会包括编辑器的颜色、代码上传时自动压缩等等一系列选项。</p><p>其他配置项细节可以参考文档 <a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/projectconfig.html">开发者工具的配置</a> 。</p><h2 id="页面配置-page-json"><a href="#页面配置-page-json" class="headerlink" title="页面配置 page.json"></a>页面配置 page.json</h2><p>这里的 <code>page.json</code> 其实用来表示 pages&#x2F;logs 目录下的 <code>logs.json</code> 这类和小程序页面相关的配置。</p><p>如果你整个小程序的风格是蓝色调，那么你可以在 <code>app.json</code> 里边声明顶部颜色是蓝色即可。实际情况可能不是这样，可能你小程序里边的每个页面都有不一样的色调来区分不同功能模块，因此我们提供了 <code>page.json</code>，让开发者可以独立定义每个页面的一些属性，例如刚刚说的顶部颜色、是否允许下拉刷新等等。</p><p>navigationBarBackgroundColor   导航栏背景颜色，如 <code>#000000</code> </p><p>navigationBarTextStyle 导航栏标题、状态栏颜色，仅支持 <code>black</code> &#x2F; <code>white</code> </p><p>navigationBarTitleText 导航栏标题文字内容 </p><p>navigationStyle 导航栏样式，仅支持以下值： <code>default</code> 默认样式 <code>custom</code> 自定义导航栏，只保留右上角胶囊按钮。 </p><p>homeButton 在非首页、非页面栈最底层页面或非tabbar内页面中的导航栏展示home键 </p><p>backgroundColor 窗口的背景色 </p><p>backgroundColorContent 页面容器背景色，<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/runtime/skyline/custom-route.html#%E8%AE%BE%E7%BD%AE%E9%A1%B5%E9%9D%A2%E9%80%8F%E6%98%8E">点击查看设置背景色详情</a> </p><p>backgroundTextStyle 下拉 loading 的样式，仅支持 <code>dark</code> &#x2F; <code>light</code> </p><p>等。。。</p><p>其他配置项细节可以参考文档 <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/config.html#%E9%A1%B5%E9%9D%A2%E9%85%8D%E7%BD%AE">页面配置</a> 。</p><h3 id="配置示例"><a href="#配置示例" class="headerlink" title="配置示例"></a>配置示例</h3><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs livescript">&#123;<br>  <span class="hljs-string">&quot;navigationBarBackgroundColor&quot;</span>: <span class="hljs-string">&quot;<span class="hljs-subst">#ffffff</span>&quot;</span>,<br>  <span class="hljs-string">&quot;navigationBarTextStyle&quot;</span>: <span class="hljs-string">&quot;black&quot;</span>,<br>  <span class="hljs-string">&quot;navigationBarTitleText&quot;</span>: <span class="hljs-string">&quot;微信接口功能演示&quot;</span>,<br>  <span class="hljs-string">&quot;backgroundColor&quot;</span>: <span class="hljs-string">&quot;<span class="hljs-subst">#eeeeee</span>&quot;</span>,<br>  <span class="hljs-string">&quot;backgroundTextStyle&quot;</span>: <span class="hljs-string">&quot;light&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="WXML-文件"><a href="#WXML-文件" class="headerlink" title="WXML 文件"></a>WXML 文件</h2><h3 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h3><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;msgItem&quot;</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">text</span>&gt;</span> </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">index</span>&#125;&#125;</span><span class="language-xml">: </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">msg</span>&#125;&#125;</span><span class="language-xml"> <span class="hljs-tag">&lt;/<span class="hljs-name">text</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">text</span>&gt;</span> Time: </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">time</span>&#125;&#125;</span><span class="language-xml"> <span class="hljs-tag">&lt;/<span class="hljs-name">text</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"> <span class="hljs-comment">&lt;!--</span></span><br><span class="hljs-comment"><span class="language-xml">item: &#123;</span></span><br><span class="hljs-comment"><span class="language-xml">  index: 0,</span></span><br><span class="hljs-comment"><span class="language-xml">  msg: &#x27;this is a template&#x27;,</span></span><br><span class="hljs-comment"><span class="language-xml">  time: &#x27;2016-06-18&#x27;</span></span><br><span class="hljs-comment"><span class="language-xml">&#125;</span></span><br><span class="hljs-comment"><span class="language-xml">--&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="取值"><a href="#取值" class="headerlink" title="取值"></a>取值</h3><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">// pages/wxml/index.js</span><br><span class="language-xml">Page(&#123;</span><br><span class="language-xml">  /**</span><br><span class="language-xml">   * 页面的初始数据</span><br><span class="language-xml">   */</span><br><span class="language-xml">  data: &#123;</span><br><span class="language-xml">    time: (new Date()).toString()</span><br><span class="language-xml">  &#125;,</span><br><span class="language-xml">&#125;)</span><br><span class="language-xml"></span><br><span class="language-xml">标签——内容数值绑定</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">text</span>&gt;</span>当前时间：</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">time</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">text</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">属性——数值绑定</span><br><span class="language-xml"><span class="hljs-comment">&lt;!-- 正确的写法 --&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">text</span> <span class="hljs-attr">data-test</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">test</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span> hello world<span class="hljs-tag">&lt;/<span class="hljs-name">text</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h3><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-comment">&lt;!--wxml--&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span> </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">message</span>&#125;&#125;</span><span class="language-xml"> <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br></code></pre></td></tr></table></figure><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs haskell">// page.js<br><span class="hljs-type">Page</span>(&#123;<br>  <span class="hljs-class"><span class="hljs-keyword">data</span>: &#123;</span><br><span class="hljs-class">    <span class="hljs-title">message</span>: &#x27;<span class="hljs-type">Hello</span> <span class="hljs-type">MINA</span>!&#x27;</span><br><span class="hljs-class">  &#125;</span><br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="逻辑语法"><a href="#逻辑语法" class="headerlink" title="逻辑语法"></a>逻辑语法</h3><h4 id="三元"><a href="#三元" class="headerlink" title="三元"></a>三元</h4><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">text</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">a</span> === <span class="hljs-number">10</span>? <span class="hljs-string">&quot;变量 a 等于10&quot;</span>: <span class="hljs-string">&quot;变量 a 不等于10&quot;</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">text</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="算数"><a href="#算数" class="headerlink" title="算数"></a>算数</h4><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-comment">&lt;!--</span></span><br><span class="hljs-comment"><span class="language-xml">&#123; a: 1,  b: 2, c: 3 &#125;</span></span><br><span class="hljs-comment"><span class="language-xml">--&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span> </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">a</span> + b&#125;&#125;</span><span class="language-xml"> + </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">c</span>&#125;&#125;</span><span class="language-xml"> + d <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-comment">&lt;!-- 输出 3 + 3 + d --&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h4><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&quot;hello &quot;</span> + name&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="条件逻辑"><a href="#条件逻辑" class="headerlink" title="条件逻辑"></a>条件逻辑</h4><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">WXML 中，使用 wx:if=&quot;</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">condition</span>&#125;&#125;</span><span class="language-xml">&quot; 来判断是否需要渲染该代码块：</span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">wx:if</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">condition</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span> True <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br><span class="language-xml">使用 wx:elif 和 wx:else 来添加一个 else 块：</span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">wx:if</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">length</span> &gt; <span class="hljs-number">5</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span> 1 <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">wx:elif</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">length</span> &gt; <span class="hljs-number">2</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span> 2 <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">wx:else</span>&gt;</span> 3 <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br><span class="language-xml">因为 wx:if 是一个控制属性，需要将它添加到一个标签上。如果要一次性判断多个组件标签，可以使用一个 <span class="hljs-tag">&lt;<span class="hljs-name">block</span>/&gt;</span> 标签将多个组件包装起来，并在上边使用 wx:if 控制属性。</span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">block</span> <span class="hljs-attr">wx:if</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">true</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span> view1 <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span> view2 <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">block</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h4><p>在组件上使用 wx:for 控制属性绑定一个数组，即可使用数组中各项的数据重复渲染该组件。默认数组的当前项的下标变量名默认为 index，数组当前项的变量名默认为 item</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-comment">&lt;!-- array 是一个数组 --&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">wx:for</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">array</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span></span><br><span class="language-xml">  </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">index</span>&#125;&#125;</span><span class="language-xml">: </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">item.message</span>&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-comment">&lt;!-- 对应的脚本文件</span></span><br><span class="hljs-comment"><span class="language-xml">Page(&#123;</span></span><br><span class="hljs-comment"><span class="language-xml">  data: &#123;</span></span><br><span class="hljs-comment"><span class="language-xml">    array: [&#123;</span></span><br><span class="hljs-comment"><span class="language-xml">      message: &#x27;foo&#x27;,</span></span><br><span class="hljs-comment"><span class="language-xml">    &#125;, &#123;</span></span><br><span class="hljs-comment"><span class="language-xml">      message: &#x27;bar&#x27;</span></span><br><span class="hljs-comment"><span class="language-xml">    &#125;]</span></span><br><span class="hljs-comment"><span class="language-xml">  &#125;</span></span><br><span class="hljs-comment"><span class="language-xml">&#125;)</span></span><br><span class="hljs-comment"><span class="language-xml">--&gt;</span></span><br></code></pre></td></tr></table></figure><p>使用 wx:for-item 指定数组当前元素的变量名，使用 wx:for-index 指定数组当前下标的变量名：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">wx:for</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">array</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span> <span class="hljs-attr">wx:for-index</span>=<span class="hljs-string">&quot;idx&quot;</span> <span class="hljs-attr">wx:for-item</span>=<span class="hljs-string">&quot;itemName&quot;</span>&gt;</span></span><br><span class="language-xml">  </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">idx</span>&#125;&#125;</span><span class="language-xml">: </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">itemName.message</span>&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br><span class="language-xml">类似 block wx:if ，也可以将 wx:for 用在 <span class="hljs-tag">&lt;<span class="hljs-name">block</span>/&gt;</span> 标签上，以渲染一个包含多节点的结构块。例如：</span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">block</span> <span class="hljs-attr">wx:for</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">[1, 2, 3]</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span> </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">index</span>&#125;&#125;</span><span class="language-xml">: <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span> </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">item</span>&#125;&#125;</span><span class="language-xml"> <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">block</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>wx:key 的值以两种形式提供：</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs qml">&lt;<span class="hljs-keyword">switch</span> <span class="hljs-attribute">wx</span>:<span class="hljs-attribute">for=&quot;&#123;&#123;objectArray&#125;&#125;&quot; wx</span>:<span class="hljs-attribute">key=&quot;unique&quot; &gt; &#123;&#123;item.id&#125;&#125; &lt;/switch&gt;</span><br><span class="hljs-attribute"></span><br><span class="hljs-attribute"></span><br><span class="hljs-attribute">data</span>: &#123;<br>    <span class="hljs-attribute">objectArray</span>: [<br>      &#123;<span class="hljs-attribute">id:</span><span class="hljs-string"> 5, unique</span>: <span class="hljs-string">&#x27;unique_5&#x27;</span>&#125;,<br>      &#123;<span class="hljs-attribute">id:</span><span class="hljs-string"> 4, unique</span>: <span class="hljs-string">&#x27;unique_4&#x27;</span>&#125;,<br>      &#123;<span class="hljs-attribute">id:</span><span class="hljs-string"> 3, unique</span>: <span class="hljs-string">&#x27;unique_3&#x27;</span>&#125;,<br>      &#123;<span class="hljs-attribute">id:</span><span class="hljs-string"> 2, unique</span>: <span class="hljs-string">&#x27;unique_2&#x27;</span>&#125;,<br>      &#123;<span class="hljs-attribute">id:</span><span class="hljs-string"> 1, unique</span>: <span class="hljs-string">&#x27;unique_1&#x27;</span>&#125;,<br>      &#123;<span class="hljs-attribute">id:</span><span class="hljs-string"> 0, unique</span>: <span class="hljs-string">&#x27;unique_0&#x27;</span>&#125;,<br>    ],<br>    <span class="hljs-attribute">numberArray</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br>  &#125;,<br></code></pre></td></tr></table></figure><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>WXML 提供两种文件引用方式import和include。</p><h4 id="import"><a href="#import" class="headerlink" title="import"></a>import</h4><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">WXML 提供两种文件引用方式import和include。</span><br><span class="language-xml">import 可以在该文件中使用目标文件定义的 template，如：</span><br><span class="language-xml"></span><br><span class="language-xml">在 item.wxml 中定义了一个叫 item的 template ：</span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-comment">&lt;!-- item.wxml --&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">text</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">text</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">text</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">在 index.wxml 中引用了 item.wxml，就可以使用 item模板：</span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;item.wxml&quot;</span>/&gt;</span></span><br></code></pre></td></tr></table></figure><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">is</span>=<span class="hljs-string">&quot;item&quot;</span> <span class="hljs-attr">data</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">text:</span> <span class="hljs-string">&#x27;forbar&#x27;</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>/&gt;</span></span><br><span class="language-xml">需要注意的是 import 有作用域的概念，即只会 import 目标文件中定义的 template，而不会 import 目标文件中 import 的 template，简言之就是 import 不具有递归的特性。</span><br><span class="language-xml"></span><br><span class="language-xml">例如：C 引用 B，B 引用A，在C中可以使用B定义的 template，在B中可以使用A定义的 template ，但是C不能使用A定义的template ，如代码2-19、代码2-20、代码2-21所示</span><br><span class="language-xml">代码清单2-19 模板 A</span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-comment">&lt;!-- A.wxml --&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;A&quot;</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">text</span>&gt;</span> A template <span class="hljs-tag">&lt;/<span class="hljs-name">text</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">代码清单2-20 模板 B</span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-comment">&lt;!-- B.wxml --&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;a.wxml&quot;</span>/&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;B&quot;</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">text</span>&gt;</span> B template <span class="hljs-tag">&lt;/<span class="hljs-name">text</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">代码清单2-21 模板 C</span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-comment">&lt;!-- C.wxml --&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;b.wxml&quot;</span>/&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">is</span>=<span class="hljs-string">&quot;A&quot;</span>/&gt;</span>  <span class="hljs-comment">&lt;!-- 这里将会触发一个警告，因为 b 中并没有定义模板 A --&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">is</span>=<span class="hljs-string">&quot;B&quot;</span>/&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="include"><a href="#include" class="headerlink" title="include"></a>include</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml">include 可以将目标文件中除了 <span class="hljs-tag">&lt;<span class="hljs-name">template</span>/&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">wxs</span>/&gt;</span> 外的整个代码引入，相当于是拷贝到 include 位置，如代码2-22、代码2-23、代码2-24所示。<br>代码清单2-22 index.wxml<br><br><span class="hljs-comment">&lt;!-- index.wxml --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;header.wxml&quot;</span>/&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span> body <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;footer.wxml&quot;</span>/&gt;</span><br>代码清单2-23 header.wxml<br><br><span class="hljs-comment">&lt;!-- header.wxml --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span> header <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br>代码清单2-24 footer.wxml<br><br><span class="hljs-comment">&lt;!-- footer.wxml --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span> footer <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="共同属性"><a href="#共同属性" class="headerlink" title="共同属性"></a>共同属性</h3><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">所有wxml 标签都支持的属性称之为共同属性，如表<span class="hljs-number">2</span><span class="hljs-number">-1</span>所示。<br><br>属性名类型描述注解<br>id<span class="hljs-built_in">String</span>组件的唯一标识整个页面唯一<br><span class="hljs-keyword">class</span><span class="hljs-title class_">String</span>组件的样式类在对应的 WXSS 中定义的样式类<br>style<span class="hljs-built_in">String</span>组件的内联样式可以动态设置的内联样式<br>hidden<span class="hljs-built_in">Boolean</span>组件是否显示所有组件默认显示<br>data-*Any自定义属性组件上触发的事件时，会发送给事件处理函数<br>bind*/<span class="hljs-keyword">catch</span>*EventHandler组件的事件<br>https://developers.weixin.qq.com/ebook?action=get_post_info&amp;docid=<span class="hljs-number">000</span>ee2c29d4f805b0086a37a254c0a<br></code></pre></td></tr></table></figure><h2 id="WXSS-样式"><a href="#WXSS-样式" class="headerlink" title="WXSS 样式"></a>WXSS 样式</h2><p>app.wxss为项目公共样式，它会被注入到小程序的每个页面。</p><h3 id="单位rpx"><a href="#单位rpx" class="headerlink" title="单位rpx"></a>单位rpx</h3><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">小程序编译后，rpx会做一次px换算。换算是以<span class="hljs-number">375</span>个物理像素为基准，也就是在一个宽度为<span class="hljs-number">375</span>物理像素的屏幕下，<span class="hljs-number">1</span>rpx <span class="hljs-operator">=</span> <span class="hljs-number">1</span>px。<br><br>举个例子：iPhone6屏幕宽度为<span class="hljs-number">375</span>px，共<span class="hljs-number">750</span>个物理像素，那么<span class="hljs-number">1</span>rpx <span class="hljs-operator">=</span> <span class="hljs-number">375</span> / <span class="hljs-number">750</span> px <span class="hljs-operator">=</span> <span class="hljs-number">0.5</span>px。<br></code></pre></td></tr></table></figure><h3 id="WXSS引用"><a href="#WXSS引用" class="headerlink" title="WXSS引用"></a>WXSS引用</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">在CSS中，开发者可以这样引用另一个样式文件：@<span class="hljs-keyword">import</span> url(<span class="hljs-string">&#x27;./test_0.css&#x27;</span>)<br><br>这种方法在请求上不会把test_0.css合并到<span class="hljs-keyword">index</span>.css中，也就是请求<span class="hljs-keyword">index</span>.css的时候，会多一个test_0.css的请求。<br></code></pre></td></tr></table></figure><h3 id="内联样式"><a href="#内联样式" class="headerlink" title="内联样式"></a>内联样式</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml">WXSS内联样式与Web开发一致:<br><br><span class="hljs-comment">&lt;!--index.wxml--&gt;</span><br><br><span class="hljs-comment">&lt;!--内联样式--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: red; font-size: 48rpx&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="动态跟新内联样式（数据绑定）"><a href="#动态跟新内联样式（数据绑定）" class="headerlink" title="动态跟新内联样式（数据绑定）"></a>动态跟新内联样式（数据绑定）</h3><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: </span></span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">eleColor</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">; font-size: </span></span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">eleFontsize</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">类型选择器样例样例描述<br>类选择器.class.<span class="hljs-built_in">int</span>ro选择所有拥有 <span class="hljs-keyword">class</span>=&quot;<span class="hljs-symbol">intro</span>&quot; 的组件<br><span class="hljs-symbol">id</span>选择器#<span class="hljs-symbol">id</span>#<span class="hljs-symbol">firstname</span>选择拥有 <span class="hljs-symbol">id</span>=&quot;<span class="hljs-symbol">firstname</span>&quot; 的组件<br>元素选择器<span class="hljs-symbol">element</span><span class="hljs-symbol">view</span> <span class="hljs-symbol">checkbox</span>选择所有文档的 <span class="hljs-symbol">view</span> 组件和所有的 <span class="hljs-symbol">checkbox</span> 组件<br>伪元素选择器::<span class="hljs-symbol">after</span><span class="hljs-symbol">view::<span class="hljs-symbol">after</span></span>在 <span class="hljs-symbol">view</span> 组件后边插入内容<br>伪元素选择器::<span class="hljs-symbol">before</span><span class="hljs-symbol">view::<span class="hljs-symbol">before</span></span>在 <span class="hljs-symbol">view</span> 组件前边插入内容<br></code></pre></td></tr></table></figure><p>小程序提供的样式库</p><h2 id="JS-逻辑交互"><a href="#JS-逻辑交互" class="headerlink" title="JS 逻辑交互"></a>JS 逻辑交互</h2><p>一个服务仅仅只有界面展示是不够的，还需要和用户做交互：响应用户的点击、获取用户的位置等等。在小程序里边，我们就通过编写 <code>JS</code> 脚本文件来处理用户的操作。 </p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">msg</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">bindtap</span>=<span class="hljs-string">&quot;clickMe&quot;</span>&gt;</span>点击我<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>点击 <code>button</code> 按钮的时候，我们希望把界面上 <code>msg</code> 显示成 <code>&quot;Hello World&quot;</code>，于是我们在 <code>button</code> 上声明一个属性: <code>bindtap</code> ，在 JS 文件里边声明了 <code>clickMe</code> 方法来响应这次点击操作： </p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">Page(&#123;<br>  clickMe: <span class="hljs-keyword">function</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">this</span>.setData(&#123; msg: <span class="hljs-string">&quot;Hello World&quot;</span> &#125;)<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>小程序</category>
      
    </categories>
    
    
    <tags>
      
      <tag>小程序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>小程序的组件和api和事件</title>
    <link href="/2022/02/11/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E7%BB%84%E4%BB%B6%E5%92%8Capi/"/>
    <url>/2022/02/11/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E7%BB%84%E4%BB%B6%E5%92%8Capi/</url>
    
    <content type="html"><![CDATA[<h1 id="小程序的组件和api"><a href="#小程序的组件和api" class="headerlink" title="小程序的组件和api"></a>小程序的组件和api</h1><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">https:</span><span class="hljs-comment">//developers.weixin.qq.com/ebook?action=get_post_info&amp;docid=000eec0b998e80bb0086f092b5100a</span><br>一个小程序页面可以分解成多个部分组成，组件就是小程序页面的基本组成单元。为了让开发者可以快速进行开发，小程序的宿主环境提供了一系列基础组件。<br>组件是在WXML模板文件声明中使用的，WXML的语法和HTML语法相似，小程序使用标签名来引用一个组件，通常包含开始标签和结束标签，该标签的属性用来描述该组件。<br></code></pre></td></tr></table></figure><h3 id="组件共有属性"><a href="#组件共有属性" class="headerlink" title="组件共有属性"></a>组件共有属性</h3><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">属性名类型描述其他说明<br>id<span class="hljs-built_in">String</span>组件的唯一标示保持整个页面唯一<br><span class="hljs-keyword">class</span><span class="hljs-title class_">String</span>组件的样式类在对应的WXSS中定义的样式类<br>style<span class="hljs-built_in">String</span>组件的内联样式可以通过数据绑定进行动态设置的内联样式<br>hidden<span class="hljs-built_in">Boolean</span>组件是否显示所有组件默认显示<br>data-*Any自定义属性组件上触发的事件时，会发送给事件处理函数<br>bind / <span class="hljs-keyword">catch</span>EventHandler事件详情见<span class="hljs-number">3.5</span>节<br></code></pre></td></tr></table></figure><h3 id="自定义组件"><a href="#自定义组件" class="headerlink" title="自定义组件"></a>自定义组件</h3><p>新建文件夹（所有组件component）<br>里面，新建组件文件夹（swiper）<br>里面，新建组件文件</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs stylus">swiper<span class="hljs-selector-class">.wxml</span><br>&lt;view class=<span class="hljs-string">&quot;inner&quot;</span>&gt;<br>  &#123;&#123;innerText&#125;&#125;<br>&lt;/view&gt;<br>swiper<span class="hljs-selector-class">.wxss</span><br><span class="hljs-selector-class">.inner</span> &#123;<br>  <span class="hljs-attribute">color</span>: red;<br>&#125;<br>swiper<span class="hljs-selector-class">.json</span><br>&#123;<br>  <span class="hljs-string">&quot;component&quot;</span>: true<br>&#125;<br>swiper<span class="hljs-selector-class">.js</span><br><span class="hljs-built_in">Component</span>(&#123;<br>  properties: &#123;<br>    <span class="hljs-comment">// 这里定义了innerText属性，属性值可以在组件使用时指定</span><br>    innerText: &#123;<br>      type: String,<br>      value: <span class="hljs-string">&#x27;default value&#x27;</span>,<br>    &#125;<br>  &#125;,<br>  data: &#123;<br>    <span class="hljs-comment">// 这里是一些组件内部数据</span><br>    someData: &#123;&#125;<br>  &#125;,<br>  methods: &#123;<br>    <span class="hljs-comment">// 这里是一个自定义方法</span><br>    customMethod: <span class="hljs-built_in">function</span>()&#123;&#125;<br>  &#125;<br>&#125;)<br><br></code></pre></td></tr></table></figure><p>组件的引用<br>seiper   任意组件名字<br>page1.json(需要引用组建的页面)</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xquery">&#123;<br>  <span class="hljs-string">&quot;usingComponents&quot;</span>: &#123;<br>     <span class="hljs-string">&quot;seiper&quot;</span>: <span class="hljs-string">&quot;../component/swiper/swiper&quot;</span><br>  &#125;<br>&#125;<br>page1.wxml(需要引用组建的页面)<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-comment">&lt;!-- 以下是对一个自定义组件的引用 --&gt;</span></span><br><span class="language-xml">  </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">seiper</span> <span class="hljs-attr">inner-text</span>=<span class="hljs-string">&quot;Some text&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">seiper</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="swiper组件-案例"><a href="#swiper组件-案例" class="headerlink" title="swiper组件  案例"></a>swiper组件  案例</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><code class="hljs stylus">swiper<span class="hljs-selector-class">.wxml</span><br>&lt;!<span class="hljs-attr">--pages</span>/component/swiper/swiper.wxml--&gt;<br>&lt;view class=<span class="hljs-string">&quot;page-body&quot;</span>&gt;<br>    &lt;view class=<span class="hljs-string">&quot;page-section page-section-spacing swiper&quot;</span>&gt;<br>      &lt;swiper<br>        indicator-dots=<span class="hljs-string">&quot;&#123;&#123;indicatorDots&#125;&#125;&quot;</span> autoplay=<span class="hljs-string">&quot;&#123;&#123;autoplay&#125;&#125;&quot;</span> circular=<span class="hljs-string">&quot;&#123;&#123;circular&#125;&#125;&quot;</span> vertical=<span class="hljs-string">&quot;&#123;&#123;vertical&#125;&#125;&quot;</span><br>        interval=<span class="hljs-string">&quot;&#123;&#123;interval&#125;&#125;&quot;</span> duration=<span class="hljs-string">&quot;&#123;&#123;duration&#125;&#125;&quot;</span> previous-<span class="hljs-attribute">margin</span>=<span class="hljs-string">&quot;&#123;&#123;previousMargin&#125;&#125;px&quot;</span> next-margin=<span class="hljs-string">&quot;&#123;&#123;nextMargin&#125;&#125;px&quot;</span>&gt;<br>        &lt;block wx:<span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;&#123;&#123;background&#125;&#125;&quot;</span> wx:key=<span class="hljs-string">&quot;*this&quot;</span>&gt;<br>          &lt;swiper-item&gt;<br>            &lt;view&gt;<br>               &lt;image <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;/pages/img/1-s-benner.png&quot;</span>&gt;&lt;/image&gt;<br>            &lt;/view&gt;<br>          &lt;/swiper-item&gt;<br>        &lt;/block&gt;<br>      &lt;/swiper&gt;<br>    &lt;/view&gt;<br>  &lt;/view&gt;<br><br><br><br>swiper<span class="hljs-selector-class">.js</span><br>const app = <span class="hljs-built_in">getApp</span>()<br><br><span class="hljs-built_in">Page</span>(&#123;<br>   data: &#123;<br>      motto: <span class="hljs-string">&#x27;Hello World&#x27;</span>,<br>      userInfo: &#123;&#125;,<br>      hasUserInfo: false,<br>      canIUse: wx<span class="hljs-selector-class">.canIUse</span>(<span class="hljs-string">&#x27;button.open-type.getUserInfo&#x27;</span>),<br>      <span class="hljs-attribute">background</span>: [<span class="hljs-string">&#x27;demo-text-1&#x27;</span>, <span class="hljs-string">&#x27;demo-text-2&#x27;</span>, <span class="hljs-string">&#x27;demo-text-3&#x27;</span>],<br>      indicatorDots: true,<br>      vertical: false,<br>      autoplay: true,<br>      circular: true,<br>      interval: <span class="hljs-number">3000</span>,<br>      duration: <span class="hljs-number">500</span>,<br>      previousMargin: <span class="hljs-number">0</span>,<br>      nextMargin: <span class="hljs-number">0</span><br>   &#125;,<br>&#125;)<br><br>swiper<span class="hljs-selector-class">.json</span><br>&#123;<br>   <span class="hljs-string">&quot;component&quot;</span>: true,<br>   <span class="hljs-string">&quot;usingComponents&quot;</span>: &#123;&#125;<br>&#125;<br>swiper<span class="hljs-selector-class">.wxss</span><br><span class="hljs-comment">/* pages/component/swiper/swiper.wxss */</span><br><span class="hljs-comment">/* @import &quot;./weui.wxss&quot;; */</span><br><br>page &#123;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#F8F8F8</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">32</span>rpx;<br>  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">1.6</span>;<br>&#125;<br>.page-body&#123;<br>  <span class="hljs-attribute">background-color</span>: pink;<br>&#125;<br>.page-section&#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>&#125;<br>.page-section_center&#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">flex-direction</span>: column;<br>  <span class="hljs-attribute">align-items</span>: center;<br>&#125;<br><span class="hljs-selector-class">.page-section</span>:last-child&#123;<br>  <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">0</span>;<br>&#125;<br>.page-section-<span class="hljs-attribute">gap</span>&#123;<br>  <span class="hljs-attribute">box-sizing</span>: border-box;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">30</span>rpx;<br>&#125;<br>.page-section-spacing&#123;<br>  <span class="hljs-attribute">box-sizing</span>: border-box;<br>&#125;<br>.page-section-title&#123;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">28</span>rpx;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#999999</span>;<br>  <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">10</span>rpx;<br>  <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">30</span>rpx;<br>  <span class="hljs-attribute">padding-right</span>: <span class="hljs-number">30</span>rpx;<br>&#125;<br><span class="hljs-selector-class">.page-section-gap</span> .page-section-title&#123;<br>  <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">padding-right</span>: <span class="hljs-number">0</span>;<br>&#125;<br>button&#123;<br>  <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">30</span>rpx;<br>&#125;<br><span class="hljs-selector-tag">button</span>:last-child&#123;<br>  <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">0</span>;<br>&#125;<br>.page-section-title&#123;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>&#125;<br>swiper&#123;<br>   <span class="hljs-attribute">height</span>: <span class="hljs-number">370</span>rpx;<br>&#125;<br>swiper-item&#123;<br>  <span class="hljs-attribute">display</span>: block;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>&#125;<br>swiper-item &gt;view&#123;<br>   <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>   <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>&#125;<br>swiper-item &gt;view image&#123;<br>   <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>   <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>&#125;<br>.page-section-title&#123;<br>  <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">60</span>rpx;<br>  <span class="hljs-attribute">position</span>: relative;<br>&#125;<br>.info&#123;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#353535</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">30</span>rpx;<br>&#125;<br>.page-foot&#123;<br>  <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">50</span>rpx;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="三级联动"><a href="#三级联动" class="headerlink" title="三级联动"></a>三级联动</h4><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">https://developers.weixin.qq.com/miniprogram/dev/component/picker.html</span><br><span class="language-xml">wxml</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">picker</span> <span class="hljs-attr">mode</span>=<span class="hljs-string">&quot;region&quot;</span> <span class="hljs-attr">bindchange</span>=<span class="hljs-string">&quot;bindRegionChange&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">region</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span> <span class="hljs-attr">custom-item</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">customItem</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;picker&quot;</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-comment">&lt;!-- 当前选择：</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">region</span>[0]&#125;&#125;</span><span class="language-xml"><span class="hljs-comment">，</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">region</span>[1]&#125;&#125;</span><span class="language-xml"><span class="hljs-comment">，</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">region</span>[2]&#125;&#125;</span><span class="language-xml"><span class="hljs-comment"> --&gt;</span></span><br><span class="language-xml">         </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">region</span>[1]&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">         <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">picker</span>&gt;</span></span><br><span class="language-xml">js</span><br><span class="language-xml">data: &#123;</span><br><span class="language-xml">      region: [&#x27;广东省&#x27;, &#x27;广州市&#x27;, &#x27;海珠区&#x27;],</span><br><span class="language-xml">      customItem: &#x27;全部&#x27;</span><br><span class="language-xml">   &#125;,</span><br><span class="language-xml">   bindRegionChange: function (e) &#123;</span><br><span class="language-xml">      console.log(&#x27;picker发送选择改变，携带值为&#x27;, e.detail.value)</span><br><span class="language-xml">      this.setData(&#123;</span><br><span class="language-xml">         region: e.detail.value</span><br><span class="language-xml">      &#125;)</span><br><span class="language-xml">   &#125;,</span><br><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">就可以了</span><br><span class="language-xml">mode可以选择不同类型</span><br><span class="language-xml">multiSelector  time   date   region（地区选择器）</span><br></code></pre></td></tr></table></figure><h3 id="组件传值"><a href="#组件传值" class="headerlink" title="组件传值"></a>组件传值</h3><h4 id="组件传值-父传子"><a href="#组件传值-父传子" class="headerlink" title="组件传值(父传子)"></a>组件传值(父传子)</h4><p>页面A</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs routeros">wxml<br>  &lt;titleimg <span class="hljs-attribute">paramAtoB</span>=<span class="hljs-string">&quot;/pages/img/1-s-xinpintuijian.png&quot;</span>&gt;&lt;/titleimg&gt;<br>paramAtoB  任意参数名<br>json<br>&#123;<br>  <span class="hljs-string">&quot;usingComponents&quot;</span>: &#123;<br>     <span class="hljs-string">&quot;swiper&quot;</span>: <span class="hljs-string">&quot;/pages/component/swiper/swiper&quot;</span>,<br>     <span class="hljs-string">&quot;navbox&quot;</span>: <span class="hljs-string">&quot;/pages/component/navbox/navbox&quot;</span>,<br>     <span class="hljs-string">&quot;titleimg&quot;</span>: <span class="hljs-string">&quot;/pages/component/titleimg/titleimg&quot;</span><br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>组件页面B</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript">wxml<br>&lt;view <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;titleimg&quot;</span>&gt;<br>   <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">image</span> <span class="hljs-attr">mode</span>=<span class="hljs-string">&#x27;widthFix&#x27;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&#123;&#123;paramAtoB&#125;&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">image</span>&gt;</span></span><br>  &lt;/view&gt;<br>直接使用<br>js<br><span class="hljs-title class_">Component</span>(&#123;<br>   <span class="hljs-attr">behaviors</span>: [],<br><span class="hljs-attr">properties</span>: &#123;<br>  <span class="hljs-attr">paramAtoB</span>: <span class="hljs-title class_">String</span><br>   &#125;,<br>   <span class="hljs-attr">data</span>: &#123;<br><br>   &#125;, <span class="hljs-comment">// 私有数据，可用于模版渲染</span><br>   <span class="hljs-comment">// 生命周期函数，可以为函数，或一个在methods段中定义的方法名</span><br><br>   <span class="hljs-attr">attached</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123; &#125;,<br>   <span class="hljs-attr">moved</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123; &#125;,<br>   <span class="hljs-attr">detached</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123; &#125;,<br>   <span class="hljs-attr">methods</span>: &#123;<br><br>   &#125;<br></code></pre></td></tr></table></figure><h4 id="组件传值-子传父"><a href="#组件传值-子传父" class="headerlink" title="组件传值(子传父)"></a>组件传值(子传父)</h4><p>子组件内部准备参数</p><p>html</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;navbox&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;navbox_ul&quot;</span> &gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">bindtap</span>=<span class="hljs-string">&quot;tap_fn&quot;</span> <span class="hljs-attr">data-id</span>=<span class="hljs-string">&quot;A&quot;</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">image</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/pages/img/1-s-NEW.png&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">image</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">text</span>&gt;</span>新品推荐<span class="hljs-tag">&lt;/<span class="hljs-name">text</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>js</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs arcade">tap_fn:<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;<br>      <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-number">1111111111</span>, e.currentTarget.dataset.id)<br>      <span class="hljs-keyword">var</span> scrollTopId = e.currentTarget.dataset.id;<br><span class="hljs-comment">//scrollTopId我要传的参数</span><br><span class="hljs-comment">//新建自定义事件，把参数放里</span><br>      this.triggerEvent(<span class="hljs-string">&#x27;myevent&#x27;</span>, scrollTopId) <br><br><span class="hljs-comment">//myevent自定义名称事件，父组件中使用</span><br>   &#125;,<br></code></pre></td></tr></table></figure><p>父组件接收参数</p><p>navbox  是我的父组件名<br>myevent 我的事件名<br>scrollTopId  我随意起的函数名称</p><p>html</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">navbox</span> <span class="hljs-attr">bind:myevent</span>=<span class="hljs-string">&quot;scrollTopId&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">navbox</span>&gt;</span><br></code></pre></td></tr></table></figure><p>js</p><p>e里面有我的参数</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade">scrollTopId:<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;<br>      <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(e);<br>   &#125;,<br></code></pre></td></tr></table></figure><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><h3 id="小程序提供的API按照功能主要分为几大类"><a href="#小程序提供的API按照功能主要分为几大类" class="headerlink" title="小程序提供的API按照功能主要分为几大类"></a>小程序提供的API按照功能主要分为几大类</h3><p>网络、媒体、文件、数据缓存、位置、设备、界面、界面节点信息还有一些特殊的开放接口</p><p>为了让开发者可以很方便的调起微信提供的能力，例如获取用户信息、微信支付等等，小程序提供了很多 API 给开发者去使用。 </p><p>要获取用户的地理位置时，只需要： </p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stylus">wx<span class="hljs-selector-class">.getLocation</span>(&#123;<br>  type: <span class="hljs-string">&#x27;wgs84&#x27;</span>,<br>  success: (res) =&gt; &#123;<br>    <span class="hljs-selector-tag">var</span> latitude = res<span class="hljs-selector-class">.latitude</span> <span class="hljs-comment">// 纬度</span><br>    <span class="hljs-selector-tag">var</span> longitude = res<span class="hljs-selector-class">.longitude</span> <span class="hljs-comment">// 经度</span><br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>调用微信扫一扫能力，只需要： </p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arcade">wx.scanCode(&#123;<br>  <span class="hljs-attr">success</span>: <span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(res)<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>更多api功能参考官方文档</p><p><a href="https://developers.weixin.qq.com/miniprogram/dev/api/">https://developers.weixin.qq.com/miniprogram/dev/api/</a></p><h3 id="API一般调用的约定："><a href="#API一般调用的约定：" class="headerlink" title="API一般调用的约定："></a>API一般调用的约定：</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dart">wx.<span class="hljs-keyword">on</span>* 开头的 API 是监听某个事件发生的API接口，接受一个 Callback 函数作为参数。当该事件触发时，会调用 Callback 函数。<br>如未特殊约定，多数 API 接口为异步接口 ，都接受一个<span class="hljs-built_in">Object</span>作为参数。<br>API的<span class="hljs-built_in">Object</span>参数一般由success、fail、complete三个回调来接收接口调用结果，示例代码如代码清单<span class="hljs-number">3</span><span class="hljs-number">-17</span>所示，详细说明如表<span class="hljs-number">3</span><span class="hljs-number">-9</span>所示。<br>wx.<span class="hljs-keyword">get</span>* 开头的API是获取宿主环境数据的接口。<br>wx.<span class="hljs-keyword">set</span>* 开头的API是写入数据到宿主环境的接口。<br></code></pre></td></tr></table></figure><h3 id="wx-request"><a href="#wx-request" class="headerlink" title="wx.request"></a>wx.request</h3><p>通过wx.request发起网络请求</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs subunit">wx.request(&#123;<br>url: &#x27;test.php&#x27;,<br>data: &#123;&#125;,<br>header: &#123; &#x27;content-type&#x27;: &#x27;application/json&#x27; &#125;,<br><span class="hljs-keyword">success: </span>function(res) &#123;<br> // 收到https服务成功后返回<br> console.log(res.data)<br>&#125;,<br>fail: function() &#123;<br> // 发生网络错误等情况触发<br>&#125;,<br>complete: function() &#123;<br> // 成功或者失败后触发<br>&#125;<br>&#125;)<br><br>代表3<span class="hljs-string">-9</span> API接口回调说明<br><br>参数名字类型必填描述<br><span class="hljs-keyword">success</span>Function否接口调用成功的回调函数<br>failFunction否接口调用失败的回调函数<br>completeFunction否接口调用结束的回调函数（调用成功、失败都会执行）<br></code></pre></td></tr></table></figure><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><h3 id="常见的事件类型"><a href="#常见的事件类型" class="headerlink" title="常见的事件类型"></a>常见的事件类型</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs css">touchstart手指触摸动作开始<br>touchmove手指触摸后移动<br>touchcancel手指触摸动作被打断，如来电提醒，弹窗<br>touchend手指触摸动作结束<br>tap手指触摸后马上离开<br>longpress手指触摸后，超过<span class="hljs-number">350ms</span>再离开，如果指定了事件回调函数并触发了这个事件，tap事件将不被触发<br>longtap手指触摸后，超过<span class="hljs-number">350ms</span>再离开（推荐使用longpress事件代替）<br>transitionend会在 WXSS <span class="hljs-attribute">transition</span> 或 wx<span class="hljs-selector-class">.createAnimation</span> 动画结束后触发<br>animationstart会在一个 WXSS <span class="hljs-attribute">animation</span> 动画开始时触发<br>animationiteration会在一个 WXSS <span class="hljs-attribute">animation</span> 一次迭代结束时触发<br>animationend会在一个 WXSS <span class="hljs-attribute">animation</span> 动画完成时触发<br></code></pre></td></tr></table></figure><h3 id="简单事件代码演示"><a href="#简单事件代码演示" class="headerlink" title="简单事件代码演示"></a>简单事件代码演示</h3><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-comment">&lt;!-- page.wxml --&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;tapTest&quot;</span> <span class="hljs-attr">data-hi</span>=<span class="hljs-string">&quot;WeChat&quot;</span> <span class="hljs-attr">bindtap</span>=<span class="hljs-string">&quot;tapName&quot;</span>&gt;</span> Click me! <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">// page.js</span><br><span class="language-xml">   Page(</span><span class="hljs-template-variable">&#123;</span><br><span class="hljs-template-variable">  tapName: function(event) &#123;</span><br><span class="hljs-template-variable">    console.log(event)</span><br><span class="hljs-template-variable">  &#125;</span><span class="language-xml"></span><br><span class="language-xml">&#125;)</span><br></code></pre></td></tr></table></figure><h3 id="事件对象属性"><a href="#事件对象属性" class="headerlink" title="事件对象属性"></a>事件对象属性</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">type</span>String事件类型<br><span class="hljs-type">timeStamp</span><span class="hljs-type">Integer</span>页面打开到触发事件所经过的毫秒数<br>target<span class="hljs-keyword">Object</span>触发事件的组件的一些属性值集合<br>currentTarget<span class="hljs-keyword">Object</span>当前组件的一些属性值集合<br>detail<span class="hljs-keyword">Object</span>额外的信息<br>touches<span class="hljs-keyword">Array</span>触摸事件，当前停留在屏幕中的触摸点信息的数组<br>changedTouches<span class="hljs-keyword">Array</span>触摸事件，当前变化的触摸点信息的数组<br></code></pre></td></tr></table></figure><p>事件对象实例</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-comment">&lt;!-- page.wxml --&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;outer&quot;</span> <span class="hljs-attr">catchtap</span>=<span class="hljs-string">&quot;handleTap&quot;</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;inner&quot;</span>&gt;</span>点击我<span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br><span class="language-xml">// page.js</span><br><span class="language-xml">Page(</span><span class="hljs-template-variable">&#123;</span><br><span class="hljs-template-variable">  handleTap: function(evt) &#123;</span><br><span class="hljs-template-variable">       // 当点击inner节点时</span><br><span class="hljs-template-variable">    // evt.target 是inner view组件</span><br><span class="hljs-template-variable">       // evt.currentTarget 是绑定了handleTap的outer view组件</span><br><span class="hljs-template-variable">       // evt.type == “tap”</span><br><span class="hljs-template-variable">       // evt.timeStamp == 1542</span><br><span class="hljs-template-variable">       // evt.detail == &#123;x: 270, y: 63&#125;</span><span class="language-xml"></span><br><span class="language-xml">       // evt.touches == [</span><span class="hljs-template-variable">&#123;identifier: 0, pageX: 270, pageY: 63, clientX: 270, clientY: 63&#125;</span><span class="language-xml">]</span><br><span class="language-xml">       // evt.changedTouches == [</span><span class="hljs-template-variable">&#123;identifier: 0, pageX: 270, pageY: 63, clientX: 270, clientY: 63&#125;</span><span class="language-xml">]</span><br><span class="language-xml">  &#125;</span><br><span class="language-xml">&#125;)</span><br><span class="language-xml"></span><br></code></pre></td></tr></table></figure><p>target和currentTarget事件对象属性</p><p>属性类型说明<br>idString当前组件的id<br>tagNameString当前组件的类型<br>datasetObject当前组件上由data-开头的自定义属性组成的集合</p><p>属性类型说明<br>identifierNumber触摸点的标识符<br>pageX, pageYNumber距离文档左上角的距离，文档的左上角为原点 ，横向为X轴，纵向为Y轴<br>clientX, clientYNumber距离页面可显示区域（屏幕除去导航条）左上角距离，横向为X轴，纵向为Y轴</p><h3 id="事件绑定与冒泡捕获"><a href="#事件绑定与冒泡捕获" class="headerlink" title="事件绑定与冒泡捕获"></a>事件绑定与冒泡捕获</h3><p>事件绑定的写法和组件属性一致，以key&#x3D;”value”的形式，其中：</p><p>key以bind或者catch开头，然后跟上事件的类型，如bindtap、catchtouchstart。自基础库版本1.5.0起，bind和catch后可以紧跟一个冒号，其含义不变，如bind:tap、catch:touchstart。同时bind和catch前还可以加上capture-来表示捕获阶段。<br>value是一个字符串，需要在对应的页面Page构造器中定义同名的函数，否则触发事件时在控制台会有报错信息。<br>bind和capture-bind的含义分别代表事件的冒泡阶段和捕获阶段</p><p>capture-bind  事件捕获<br>bind   事件冒泡<br>capture-catch  将中断捕获阶段和取消冒泡阶段</p><p>点击 inner view 会先后调用handleTap2、handleTap4、handleTap3、handleTap1。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">&lt;</span><span class="hljs-keyword">view</span><br>  id<span class="hljs-operator">=</span>&quot;outer&quot;<br>  bind:touchstart<span class="hljs-operator">=</span>&quot;handleTap1&quot;<br>  capture<span class="hljs-operator">-</span>bind:touchstart<span class="hljs-operator">=</span>&quot;handleTap2&quot;<br><span class="hljs-operator">&gt;</span><br>  <span class="hljs-keyword">outer</span> <span class="hljs-keyword">view</span><br>  <span class="hljs-operator">&lt;</span><span class="hljs-keyword">view</span><br>    id<span class="hljs-operator">=</span>&quot;inner&quot;<br>    bind:touchstart<span class="hljs-operator">=</span>&quot;handleTap3&quot;<br>    capture<span class="hljs-operator">-</span>bind:touchstart<span class="hljs-operator">=</span>&quot;handleTap4&quot;<br>  <span class="hljs-operator">&gt;</span><br>    <span class="hljs-keyword">inner</span> <span class="hljs-keyword">view</span><br>  <span class="hljs-operator">&lt;</span><span class="hljs-operator">/</span><span class="hljs-keyword">view</span><span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&lt;</span><span class="hljs-operator">/</span><span class="hljs-keyword">view</span><span class="hljs-operator">&gt;</span><br></code></pre></td></tr></table></figure><h4 id="bind和catch"><a href="#bind和catch" class="headerlink" title="bind和catch"></a>bind和catch</h4><p>bind事件绑定不会阻止冒泡事件向上冒泡，catch事件绑定可以阻止冒泡事件向上冒泡。如果将上面代码中的第一个capture-bind改为capture-catch，将只触发handleTap2(capture-catch将中断捕获阶段和取消冒泡阶段)</p><h4 id="滑动事件"><a href="#滑动事件" class="headerlink" title="滑动事件"></a>滑动事件</h4><p>用的就是<br>touchstart手指触摸动作开始<br>touchmove手指触摸后移动<br>touchcancel手指触摸动作被打断，如来电提醒，弹窗</p><p>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs javascript">bindtouchstart=<span class="hljs-string">&quot;scrollTouchstart&quot;</span> bindtouchmove=<span class="hljs-string">&quot;scrollTouchmove&quot;</span> bindtouchend=<span class="hljs-string">&quot;scrollTouchend&quot;</span><br><br><br>js<br><span class="hljs-comment">// pages/about/about.js</span><br><br><span class="hljs-title class_">Page</span>(&#123;<br>   <span class="hljs-attr">data</span>: &#123;<br>      <span class="hljs-attr">scrollindex</span>: <span class="hljs-number">0</span>,  <span class="hljs-comment">//当前页面的索引值</span><br>      <span class="hljs-attr">totalnum</span>: <span class="hljs-number">5</span>,  <span class="hljs-comment">//总共页面数</span><br>      <span class="hljs-attr">starty</span>: <span class="hljs-number">0</span>,  <span class="hljs-comment">//开始的位置x</span><br>      <span class="hljs-attr">endy</span>: <span class="hljs-number">0</span>, <span class="hljs-comment">//结束的位置y</span><br>      <span class="hljs-attr">critical</span>: <span class="hljs-number">100</span>, <span class="hljs-comment">//触发翻页的临界值</span><br>      <span class="hljs-attr">margintop</span>: <span class="hljs-number">0</span>,  <span class="hljs-comment">//滑动下拉距离</span><br>   &#125;,<br>   <span class="hljs-attr">onLoad</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>   &#125;,<br>   <span class="hljs-attr">scrollTouchstart</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;滚动到顶部&#x27;</span>);<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e.<span class="hljs-property">touches</span>[<span class="hljs-number">0</span>].<span class="hljs-property">pageY</span>);<br>      <span class="hljs-keyword">let</span> py = e.<span class="hljs-property">touches</span>[<span class="hljs-number">0</span>].<span class="hljs-property">pageY</span>;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setData</span>(&#123;<br>         <span class="hljs-attr">starty</span>: py<br>      &#125;)<br>   &#125;,<br>   <span class="hljs-attr">scrollTouchmove</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;滚动中&#x27;</span>);<br>      <span class="hljs-comment">// console.log(e.touches[0].pageY);</span><br>      <span class="hljs-keyword">let</span> py = e.<span class="hljs-property">touches</span>[<span class="hljs-number">0</span>].<span class="hljs-property">pageY</span>;<br>      <span class="hljs-keyword">let</span> d = <span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setData</span>(&#123;<br>         <span class="hljs-attr">endy</span>: py,<br>      &#125;)<br>      <span class="hljs-comment">// 滑动屏幕100px内时，前端给动效（设置margin-top）</span><br>      <span class="hljs-keyword">if</span> (py - d.<span class="hljs-property">starty</span> &lt; <span class="hljs-number">100</span> &amp;&amp; py - d.<span class="hljs-property">starty</span> &gt; -<span class="hljs-number">100</span>) &#123;<br>         <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setData</span>(&#123;<br>            <span class="hljs-attr">margintop</span>: py - d.<span class="hljs-property">starty</span><br>         &#125;)<br>      &#125;<br>   &#125;,<br>   <span class="hljs-attr">scrollTouchend</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;滚动到底部&#x27;</span>);<br>      <span class="hljs-keyword">let</span> d = <span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>;<br>      <span class="hljs-keyword">if</span> (d.<span class="hljs-property">endy</span> - d.<span class="hljs-property">starty</span> &gt; <span class="hljs-number">100</span> &amp;&amp; d.<span class="hljs-property">scrollindex</span> &gt; <span class="hljs-number">0</span>) &#123;<br>         <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setData</span>(&#123;<br>            <span class="hljs-attr">scrollindex</span>: d.<span class="hljs-property">scrollindex</span> - <span class="hljs-number">1</span><br>         &#125;)<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (d.<span class="hljs-property">endy</span> - d.<span class="hljs-property">starty</span> &lt; -<span class="hljs-number">100</span> &amp;&amp; d.<span class="hljs-property">scrollindex</span> &lt; <span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-property">totalnum</span> - <span class="hljs-number">1</span>) &#123;<br>         <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setData</span>(&#123;<br>            <span class="hljs-attr">scrollindex</span>: d.<span class="hljs-property">scrollindex</span> + <span class="hljs-number">1</span><br>         &#125;)<br>      &#125;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setData</span>(&#123;<br>         <span class="hljs-attr">starty</span>: <span class="hljs-number">0</span>,<br>         <span class="hljs-attr">endy</span>: <span class="hljs-number">0</span>,<br>         <span class="hljs-attr">margintop</span>: <span class="hljs-number">0</span><br>      &#125;)<br>   &#125;,<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="自定义属性，事件中获取"><a href="#自定义属性，事件中获取" class="headerlink" title="自定义属性，事件中获取"></a>自定义属性，事件中获取</h4><p>设置自定义属性<br>取值自定义属性</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stata">&lt;<span class="hljs-keyword">view</span> data-<span class="hljs-keyword">alpha</span>-beta=<span class="hljs-string">&quot;1&quot;</span> data-alphaBeta=<span class="hljs-string">&quot;2&quot;</span> bindtap=<span class="hljs-string">&quot;bindViewTap&quot;</span>&gt; DataSet <span class="hljs-keyword">Test</span> &lt;/<span class="hljs-keyword">view</span>&gt;<br>Page(&#123;<br>  bindViewTap:function(event)&#123;<br>    event.currentTarget.dataset.alphaBeta === 1 <span class="hljs-comment">// - 会转为驼峰写法</span><br>    event.currentTarget.dataset.alphabeta === 2 <span class="hljs-comment">// 大写会转为小写</span><br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>获取取路由参数</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">//小程序内使用event来传值只能在本页面，到别的页面接收的是空的，所以先传到js在通过url传值</span><br>A页面：WXML<br>&lt;button bindtap=<span class="hljs-string">&quot;GoHome&quot;</span> <span class="hljs-keyword">open</span>-type=<span class="hljs-string">&quot;launchApp&quot;</span>  <span class="hljs-keyword">data</span>-index=<span class="hljs-string">&quot;123&quot;</span>&gt;进入餐厅&lt;/button&gt;<br><br>A页面：js page内即可<br><br>GoHome: function (e) &#123;<br>    wx.navigateTo(&#123;<br>    url: <span class="hljs-string">&quot;../HomePage/HomePage?UName=&quot;</span> + e.target.dataset.index,<br>&#125;)<br>&#125;<br><br>B页面：js <span class="hljs-keyword">data</span>内先声明一个参数，用以接收值<br><br><span class="hljs-keyword">data</span>: &#123;<br>    UName:<span class="hljs-string">&#x27;&#x27;</span><br>&#125;,<br><br>onload内写，自动获取<br><br>onLoad: function (options) &#123;<br>     <span class="hljs-keyword">this</span>.setData(&#123;<br>     UName: options.UName<br>    &#125;)<br>    console.log(<span class="hljs-keyword">this</span>.<span class="hljs-keyword">data</span>.UName)<br>  &#125;,<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>小程序</category>
      
    </categories>
    
    
    <tags>
      
      <tag>小程序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git总结</title>
    <link href="/2022/02/10/git/"/>
    <url>/2022/02/10/git/</url>
    
    <content type="html"><![CDATA[<h2 id="常用命令行工具"><a href="#常用命令行工具" class="headerlink" title="常用命令行工具"></a>常用命令行工具</h2><p>cmd</p><p>powershell</p><p>git bash</p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p>​pwd（print working directory）查看当前所在目录<br>    cd（change directory） 进入下一级目录<br>    cd    ..&#x2F;   返回上一层目录<br>    clear  清屏<br>    ctrl + l  清屏<br>    ls  (list)  查看当前目录<br>    mkdir(make directory)  创建目录<br>    touch 文件名称    创建文件<br>    echo 内容&gt;文件  覆盖写入文件<br>echo 内容&gt;&gt;文件  追加写入文件<br>    cat 文件命名   查看文件内容<br>    less 查看文件内容</p><h2 id="git使用"><a href="#git使用" class="headerlink" title="git使用"></a>git使用</h2><p>新建gitlab仓库建立分支</p><p>桌面上的git-demo目录现在就是我们的项目目录，我们希望使用git工具来管理这个项目 </p><h3 id="1-初始化git仓库-告诉git工具你来帮我管理这个项目"><a href="#1-初始化git仓库-告诉git工具你来帮我管理这个项目" class="headerlink" title="1.初始化git仓库 告诉git工具你来帮我管理这个项目"></a>1.初始化git仓库 告诉git工具你来帮我管理这个项目</h3><p>git init</p><p>在git-demo目录中 初始化了一个空的git仓库</p><p>.git文件夹默认是隐藏的</p><h3 id="2-查看仓库状态"><a href="#2-查看仓库状态" class="headerlink" title="2.查看仓库状态"></a>2.查看仓库状态</h3><p>git status</p><p>No commits yet 当前仓库中还没有任何提交</p><p>nothing to commit working tree clean 目前还没有任何文件可提交 工作目录是干净的</p><p>查看仓库状态的时候 git默认会忽略空目录 如果想让git管理空目录 需要在空目录中建立占位文件 约定的名字为.gitkeep</p><h3 id="3-将文件提交到暂存区"><a href="#3-将文件提交到暂存区" class="headerlink" title="3.将文件提交到暂存区"></a>3.将文件提交到暂存区</h3><p>一个文件如果暂存区中没有 那么说明git还没有管理这个文件</p><p>git add 文件1 文件2 …</p><p>git add . 将所有文件添加到暂存区</p><h3 id="4-将暂存区中的代码提交到代码仓库"><a href="#4-将暂存区中的代码提交到代码仓库" class="headerlink" title="4.将暂存区中的代码提交到代码仓库"></a>4.将暂存区中的代码提交到代码仓库</h3><p>出现不能提交状态，需要按步骤五去配置</p><p>git commit -m 提交注释</p><p>在第一次使用git的时候 需要配置用户信息 否则git不允许提交代码到仓库中当代码提交到仓库后, 暂存区中就没有这些文件了</p><h3 id="5-配置用户信息"><a href="#5-配置用户信息" class="headerlink" title="5.配置用户信息"></a>5.配置用户信息</h3><p>git config –global user.name 用户名</p><p>git config –global user.email 邮箱</p><p>​    –global 全局配置 当前配置完成以后 做其他项目的时候就不需要再次配置了</p><p>git config –list 查看git配置信息</p><p>按q退出</p><p>用户信息实际上是被配置在了.gitconfig文件中, 文件在用户目录下面  C:\Users\yang</p><h3 id="6-查看提交的历史记录"><a href="#6-查看提交的历史记录" class="headerlink" title="6.查看提交的历史记录"></a>6.查看提交的历史记录</h3><p>git log</p><h3 id="7-为项目添加忽略清单文件"><a href="#7-为项目添加忽略清单文件" class="headerlink" title="7.为项目添加忽略清单文件"></a>7.为项目添加忽略清单文件</h3><p>可以在忽略清单文件中指定哪些文件不需要被管理 那么指定的文件就不会出现在未跟踪列表中</p><p>文件名字 .gitignore</p><p>里面写&#x2F;test   就是忽略test目录</p><h3 id="8-用暂存区中的文件覆盖工作目录中的文件"><a href="#8-用暂存区中的文件覆盖工作目录中的文件" class="headerlink" title="8.用暂存区中的文件覆盖工作目录中的文件"></a>8.用暂存区中的文件覆盖工作目录中的文件</h3><p>git checkout 文件列表</p><h3 id="9-将文件从暂存区中删除"><a href="#9-将文件从暂存区中删除" class="headerlink" title="9.将文件从暂存区中删除"></a>9.将文件从暂存区中删除</h3><p>git rm –cached 文件列表</p><h3 id="10-回滚操作"><a href="#10-回滚操作" class="headerlink" title="10.回滚操作"></a>10.回滚操作</h3><p>git reset –hard commitID</p><p>​    将仓库中某一次提交的代码覆盖工作目录和暂存区</p><h3 id="11-分支"><a href="#11-分支" class="headerlink" title="11.分支"></a>11.分支</h3><p>1.什么叫分支?</p><p>​    分支就是对当前代码的一份拷贝</p><p>​    当前代码 &#x3D;&gt; 文件 + 提交历史</p><p>2.创建分支</p><p>​    git branch 分支名称 &#x3D;&gt; 创建分支</p><p>​    git branch &#x3D;&gt; 查看分支</p><p>3.切换分支</p><p>​    git checkout 分支名称 &#x3D;&gt; 切换分支</p><p>​        注意：在当前分支开发完成以后一定要提交代码 否则不允许切换分支</p><p>​    切换到远程分支</p><p>​     git checkout -b dev </p><p>​    切换成功后显示如下结果:</p><p>​    Switched to a new branch ‘dev’</p><p>4.合并分支</p><p>​    git merge 分支名称</p><p>5.删除分支</p><p>​    git branch -d 删除分支</p><p>​    默认情况下 git不允许删除一个未合并的分支</p><p>​    强制删除未合并的分支使用 git branch -D 分支名称</p><p>6.注意</p><p>​    </p><p>​    1.在主分支还没有任何提交的时候 是不能创建其他分支的</p><h3 id="12-将本地仓库提交到远程"><a href="#12-将本地仓库提交到远程" class="headerlink" title="12. 将本地仓库提交到远程"></a>12. 将本地仓库提交到远程</h3><p>git push 远程仓库地址 本地分支名称:远程分支名称</p><p>​                        master:master &#x3D;&gt; master</p><p>1.为远程仓库地址添加别名</p><p>​    git remote add 别名 别名对应的地址</p><p>2.提交</p><p>​    git push origin master</p><p>3.记住提交地址与分支名称</p><p>​    git push -u origin master</p><p>4.再次提交</p><p>​    git push</p><p>5.windows系统默认会记住提交的密码 </p><p>​    控制面板 &#x3D;&gt; 用户账户 &#x3D;&gt; 管理你的凭据 &#x3D;&gt; windows凭据</p><h3 id="13-多人协作开发需要使用ssh协议"><a href="#13-多人协作开发需要使用ssh协议" class="headerlink" title="13.多人协作开发需要使用ssh协议"></a>13.多人协作开发需要使用ssh协议</h3><p>需要生成一对密钥 ssh-keygen</p><p>git branch dev</p><p>git checkout dev</p><p>touch banzhang.html</p><p>git add .</p><p>git commit -m 提交</p><p>git push 仓库地址 dev</p><p>码云提交</p><p>这个git push origin dev</p><h3 id="14-将已有仓库克隆到本地"><a href="#14-将已有仓库克隆到本地" class="headerlink" title="14.将已有仓库克隆到本地"></a>14.将已有仓库克隆到本地</h3><p>已经有了仓库了 我们要做的是 将已有仓库克隆到本地</p><p>git clone 仓库地址</p><p>​    默认克隆的文件夹名称和仓库名称是一样的</p><h3 id="15-从远程仓库中拉取最新的代码"><a href="#15-从远程仓库中拉取最新的代码" class="headerlink" title="15.从远程仓库中拉取最新的代码"></a>15.从远程仓库中拉取最新的代码</h3><p>git pull 仓库地址 master</p><p>这个git pull origin dev</p><p>shift+:</p><p>输入wq保存并退出</p><h3 id="git中的文件状态"><a href="#git中的文件状态" class="headerlink" title="git中的文件状态"></a>git中的文件状态</h3><p> 文件(红色) 未被git管理的文件</p><p> new file: index.html(绿色) git新增的需要管理的文件</p><p> modified: index.html(红色) 文件在工作目录中被修改 但是没有被添加到暂存区中</p><h3 id="操作技巧："><a href="#操作技巧：" class="headerlink" title="操作技巧："></a>操作技巧：</h3><p> 键盘上下键可以切换之前输入的命令</p><h3 id="克隆远程分支"><a href="#克隆远程分支" class="headerlink" title="克隆远程分支"></a>克隆远程分支</h3><p>  克隆远程项目 git clone</p><p>  如：git clone <a href="http://xxx.xxx/sq-group/XXX.git">http://XXX.XXX/sq-group/XXX.git</a></p><p> 克隆完成之后 cd到有git的文件夹</p><h3 id="查看远程分支"><a href="#查看远程分支" class="headerlink" title="查看远程分支"></a>查看远程分支</h3><p> git branch -r</p><h3 id="建立本地对应分支"><a href="#建立本地对应分支" class="headerlink" title="建立本地对应分支"></a>建立本地对应分支</h3><p>git checkout –track origin&#x2F;dev</p><p>dev为远程分支名</p><h3 id="删除远程仓库dev分支"><a href="#删除远程仓库dev分支" class="headerlink" title="删除远程仓库dev分支"></a>删除远程仓库dev分支</h3><p>进入相应的仓库，然后使用 git branch -a 命令查看该仓库所有的分支<br>git push origin –delete dev</p><h3 id="新建gitlab仓库建立分支"><a href="#新建gitlab仓库建立分支" class="headerlink" title="新建gitlab仓库建立分支"></a>新建gitlab仓库建立分支</h3><p>git clone http仓库地址</p><p>​    本地 git add .</p><p>​    git commit -m ‘新建’</p><p>​    git push</p><p>​    git branch 分支名称 &#x3D;&gt; 创建分支</p><p>​    git checkout 分支名称 &#x3D;&gt; 切换分支</p><p>​    直接git push 会报错</p><p>​    没有与远程分支建立连接。</p><p>​    git push origin dev -u</p><p>​    网页刷新下看看 一般就有了</p><p>​    <a href="https://blog.csdn.net/benben0729/article/details/82386657">https://blog.csdn.net/benben0729/article/details/82386657</a></p><h3 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h3><p>本地分支  demo-wx<br>git log<br>查 上次提交的代码<br> 复制 编号 b190246a4f08d50dd2a00c14de891b886eb842c7</p><p>切换到需要合并的分支<br> git checkout demo-nx</p><p>拉去代码<br>$ git pull</p><p>合并分支<br>git cherry-pick b190246a4f08d50dd2a00c14de891b886eb842c7</p><p>运行项目检查代码</p><h3 id="删除git仓库"><a href="#删除git仓库" class="headerlink" title="删除git仓库"></a>删除git仓库</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> <span class="hljs-built_in">rm</span> <span class="hljs-literal">-rf</span> .git<br></code></pre></td></tr></table></figure><h3 id="项目拉取"><a href="#项目拉取" class="headerlink" title="项目拉取"></a>项目拉取</h3><p>​1git clone  xxx<br>    2 进入项目文件 默认master分支<br>    3建立本地对应分支   git checkout –track origin&#x2F;dev<br>    4 npm i  (获取node_modules依赖包)</p><h3 id="遇到的报错及解决方案"><a href="#遇到的报错及解决方案" class="headerlink" title="遇到的报错及解决方案"></a>遇到的报错及解决方案</h3><p>​(dev|MERGING)  代码有冲突</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">编辑器上确认是否有冲突<br><br>确认没冲突的话   在推送一次<br>在git <span class="hljs-keyword">add</span> .<br>git <span class="hljs-keyword">commit</span> -m <span class="hljs-string">&#x27;提交&#x27;</span><br>git push origin dev    <br><br>git pull  拉取一下<br><br></code></pre></td></tr></table></figure><p>​git commit提交时报错husky ＞ pre-commit (node v10.16.3) ….</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>blog.csdn.net<span class="hljs-regexp">/qq_37034928/</span>article<span class="hljs-regexp">/details/</span><span class="hljs-number">108342620</span><br><br><span class="hljs-number">1</span>.问题分析<br>项目中使用了husky, 这个会在你git commit的时候先执行里面的严谨模式, 对代码进行检查, 有error就会终止提交<br><br><br><span class="hljs-number">3</span>.解决办法<br>git commit -m <span class="hljs-string">&quot;备注信息&quot;</span> --no-verify<br></code></pre></td></tr></table></figure><p>​提交失败 –fix</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">git</span> commit -m <span class="hljs-string">&quot;fix: xxxx&quot;</span><br>xxxx  为提交名字<br><br></code></pre></td></tr></table></figure><p>解决npm install 报错 ‘proxy’ config is set properly. See: ‘npm help config’</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">解决npm install 报错 <span class="hljs-string">&#x27;proxy&#x27;</span> config <span class="hljs-keyword">is</span> <span class="hljs-keyword">set</span> properly. See: <span class="hljs-string">&#x27;npm help config&#x27;</span><br><br>输入以下命令<br>npm config <span class="hljs-keyword">set</span> proxy <span class="hljs-literal">null</span><br>npm config <span class="hljs-keyword">set</span> https-proxy <span class="hljs-literal">null</span><br><br>https:<span class="hljs-comment">//blog.51cto.com/u_15065851/4262764</span><br><br>dwy实测有效 不明所以<br></code></pre></td></tr></table></figure><h3 id="git退出不能编辑窗口"><a href="#git退出不能编辑窗口" class="headerlink" title="git退出不能编辑窗口"></a>git退出不能编辑窗口</h3><p>​esc后   :wq 回车  保存并退出</p><h3 id="启用vue项目"><a href="#启用vue项目" class="headerlink" title="启用vue项目"></a>启用vue项目</h3><h4 id="1找到package-json-文件-看启动代码"><a href="#1找到package-json-文件-看启动代码" class="headerlink" title="1找到package.json 文件 看启动代码"></a>1找到package.json 文件 看启动代码</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;serve&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;vue-cli-service serve&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;build&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;vue-cli-service build&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;lint&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;vue-cli-service lint&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br></code></pre></td></tr></table></figure><h4 id="2-npm-run-serve"><a href="#2-npm-run-serve" class="headerlink" title="2 npm run serve"></a>2 npm run serve</h4><h3 id="忽略清单-gitignore"><a href="#忽略清单-gitignore" class="headerlink" title="忽略清单    .gitignore"></a>忽略清单    .gitignore</h3><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">node_modules<br><span class="hljs-string">.DS_Store</span><br>dist<br>dist-ssr<br>*<span class="hljs-string">.local</span><br>*<span class="hljs-string">.zip</span><br>node_modules<br><span class="hljs-string">.DS_Store</span><br>dist<br>dist-ssr<br>*<span class="hljs-string">.local</span><br><br><br><br><br><br><br><span class="hljs-string">/target/</span>  <span class="hljs-string">//</span> 忽略这个target 目录<br>log/*     <span class="hljs-string">//</span> 忽略log下的所有文件<br>css/*<span class="hljs-string">.css</span> <span class="hljs-string">//</span> 忽略css目录下的<span class="hljs-string">.css</span>文件<br><br></code></pre></td></tr></table></figure><h4 id="不管用的话需要清除git缓存"><a href="#不管用的话需要清除git缓存" class="headerlink" title="不管用的话需要清除git缓存"></a>不管用的话需要清除git缓存</h4><p>git rm -r –cached .</p><h3 id="新建gitlab项目-分支-并提交"><a href="#新建gitlab项目-分支-并提交" class="headerlink" title="新建gitlab项目  分支  并提交"></a>新建gitlab项目  分支  并提交</h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">master  分支上<br>git <span class="hljs-keyword">add </span>.<br>git commit -m <span class="hljs-string">&quot;mas&quot;</span><br><br>git <span class="hljs-keyword">branch</span><br><span class="hljs-keyword"></span><br> git <span class="hljs-keyword">branch </span>dev<br><br>git checkout dev<br><br>推到远程并设置分支<br>git push --set-upstream <span class="hljs-keyword">origin </span>dev<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>小程序的宿主环境</title>
    <link href="/2022/01/20/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%AE%BF%E4%B8%BB%E7%8E%AF%E5%A2%83/"/>
    <url>/2022/01/20/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%AE%BF%E4%B8%BB%E7%8E%AF%E5%A2%83/</url>
    
    <content type="html"><![CDATA[<h2 id="程序与页面"><a href="#程序与页面" class="headerlink" title="程序与页面"></a>程序与页面</h2><p>微信客户端在打开小程序之前，会把整个小程序的代码包下载到本地。</p><p>紧接着通过 <code>app.json</code> 的 <code>pages</code> 字段就可以知道你当前小程序的所有页面路径:</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs prolog">&#123;<br>  <span class="hljs-string">&quot;pages&quot;</span>:[<br>    <span class="hljs-string">&quot;pages/index/index&quot;</span>,<br>    <span class="hljs-string">&quot;pages/logs/logs&quot;</span><br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><p>这个配置说明在 QuickStart 项目定义了两个页面，分别位于 <code>pages/index/index</code> 和 <code>pages/logs/logs</code>。而写在 <code>pages</code> 字段的第一个页面就是这个小程序的首页（打开小程序看到的第一个页面）。</p><p>于是微信客户端就把首页的代码装载进来，通过小程序底层的一些机制，就可以渲染出这个首页。</p><p>小程序启动之后，在 <code>app.js</code> 定义的 <code>App</code> 实例的 <code>onLaunch</code> 回调会被执行:</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">App(&#123;<br>  onLaunch: <span class="hljs-keyword">function</span> <span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 小程序启动之后 触发</span><br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>程序</p><h2 id="程序构造器App"><a href="#程序构造器App" class="headerlink" title="程序构造器App()"></a>程序构造器App()</h2><ol><li><blockquote><p>程序构造器App()<br>宿主环境提供了 App() 构造器用来注册一个程序App，需要留意的是App() 构造器必须写在项目根目录的app.js里，App实例是单例对象，在其他JS脚本中可以使用宿主环境提供的 getApp() 来获取程序实例。<br>代码清单3-3 getApp() 获取App实例</p></blockquote></li><li><blockquote><p>&#x2F;&#x2F; other.js<br>var appInstance &#x3D; getApp()<br>App() 的调用方式如代码清单3-4所示，App构造器接受一个Object参数，参数说明如表3-1所示，其中onLaunch &#x2F; onShow &#x2F; onHide 三个回调是App实例的生命周期函数，我们会在后文展开；onError我们暂时不在本章展开，我们会在第8章里详细讨论；App的其他参数我们也放在后文进行展开</p></blockquote></li></ol><p>参数属性类型描述<br>onLaunchFunction当小程序初始化完成时，会触发 onLaunch（全局只触发一次）<br>onShowFunction当小程序启动，或从后台进入前台显示，会触发 onShow<br>onHideFunction当小程序从前台进入后台，会触发 onHide<br>onErrorFunction当小程序发生脚本错误，或者 API 调用失败时，会触发 onError 并带上错误信息<br>其他字段 　任意可以添加任意的函数或数据到 Object 参数中，在App实例回调用 this 可以访问</p><h2 id="生命周期参数"><a href="#生命周期参数" class="headerlink" title="生命周期参数"></a>生命周期参数</h2><p>app.js生命周期</p><p>onLaunch</p><p>当小程序初始化完成时，会触发 onLaunch（全局只触发一次）</p><p>onShow</p><p>当小程序启动，或从后台进入前台显示，会触发 onShow</p><p>onHide</p><p>当小程序从前台进入后台，会触发 onHide</p><p>onError</p><p>当小程序发生脚本错误，或者 API 调用失败时，会触发 onError 并带上错误信息</p><h2 id="page生命周期"><a href="#page生命周期" class="headerlink" title="page生命周期"></a>page生命周期</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs css">Page(&#123;<br>  data: &#123; text: <span class="hljs-string">&quot;This is page data.&quot;</span> &#125;,<br>  onLoad: <span class="hljs-built_in">function</span>(options) &#123; &#125;,<br>  onReady: <span class="hljs-built_in">function</span>() &#123; &#125;,<br>  onShow: <span class="hljs-built_in">function</span>() &#123; &#125;,<br>  onHide: <span class="hljs-built_in">function</span>() &#123; &#125;,<br>  onUnload: <span class="hljs-built_in">function</span>() &#123; &#125;,<br>  onPullDownRefresh: <span class="hljs-built_in">function</span>() &#123; &#125;,<br>  onReachBottom: <span class="hljs-built_in">function</span>() &#123; &#125;,<br>  onShareAppMessage: function () &#123; &#125;,<br>  onPageScroll: <span class="hljs-built_in">function</span>() &#123; &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>参数属性类型描述<br>dataObject页面的初始数据<br>onLoadFunction生命周期函数–监听页面加载，触发时机早于onShow和onReady<br>onReadyFunction生命周期函数–监听页面初次渲染完成<br>onShowFunction生命周期函数–监听页面显示，触发事件早于onReady<br>onHideFunction生命周期函数–监听页面隐藏<br>onUnloadFunction生命周期函数–监听页面卸载<br>onPullDownRefreshFunction页面相关事件处理函数–监听用户下拉动作<br>onReachBottomFunction页面上拉触底事件的处理函数<br>onShareAppMessageFunction用户点击右上角转发<br>onPageScrollFunction页面滚动触发事件的处理函数<br>其他Any可以添加任意的函数或数据，在Page实例的其他函数中用 this 可以访问</p><h2 id="小程序全局数据"><a href="#小程序全局数据" class="headerlink" title="小程序全局数据"></a>小程序全局数据</h2><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs stata">我们在 3.1.2节说到小程序的JS脚本是运行在JsCore的线程里，小程序的每个页面各自有一个WebView线程进行渲染，所以小程序切换页面时，小程序逻辑层的JS脚本运行上下文依旧在同一个JsCore线程中。<br>在上文中说道<span class="hljs-keyword">App</span>实例是单例的，因此不同页面直接可以通过<span class="hljs-keyword">App</span>实例下的属性来共享数据。<span class="hljs-keyword">App</span>构造器可以传递其他参数作为全局属性以达到全局共享数据的目的。<br>代码清单3-6 小程序全局共享数据<br><br><span class="hljs-comment">// app.js</span><br><span class="hljs-keyword">App</span>(&#123;<br>  globalData: &#x27;I am <span class="hljs-keyword">global</span> data&#x27; <span class="hljs-comment">// 全局共享数据</span><br>&#125;)<br><span class="hljs-comment">// 其他页面脚本other.js</span><br><span class="hljs-keyword">var</span> appInstance = getApp()<br>console.<span class="hljs-built_in">log</span>(appInstance.globalData) <span class="hljs-comment">// 输出: I am global data</span><br>与此同时，我们要特别留意一点，所有页面的脚本逻辑都跑在同一个JsCore线程，页面使用setTimeout或者setInterval的定时器，然后跳转到其他页面时，这些定时器并没有被清除，需要开发者自己在页面离开的时候进行清理。<br></code></pre></td></tr></table></figure><h2 id="页面page"><a href="#页面page" class="headerlink" title="页面page"></a>页面page</h2><h3 id="文件构成和路径"><a href="#文件构成和路径" class="headerlink" title="文件构成和路径"></a>文件构成和路径</h3><p>一个页面是分三部分组成：界面、配置和逻辑。界面由WXML文件和WXSS文件来负责描述，配置由JSON文件进行描述，页面逻辑则是由JS脚本文件负责。</p><h3 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h3><p>页面路径需要在小程序代码根目录app.json中的pages字段声明，否则这个页面不会被注册到宿主环境中。例如两个页面的文件的相对路径分别为 pages&#x2F;index&#x2F;page. 和 pages&#x2F;other&#x2F;other. (表示wxml&#x2F;wxss&#x2F;json&#x2F;js四个文件)，在app.json的pages字段的代码路径需要去除.后缀，如代码清单3-7所示，默认pages字段的第一个页面路径为小程序的首页。</p><h3 id="app-json声明页面路径"><a href="#app-json声明页面路径" class="headerlink" title="app.json声明页面路径"></a>app.json声明页面路径</h3><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">app</span>.json声明页面路径<br>&#123;<br>  <span class="hljs-string">&quot;pages&quot;</span>:[<br>    <span class="hljs-string">&quot;pages/index/page&quot;</span>, <span class="hljs-comment">// 第一项默认为首页</span><br>    <span class="hljs-string">&quot;pages/other/other&quot;</span><br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="页面构造器Page"><a href="#页面构造器Page" class="headerlink" title="页面构造器Page()"></a>页面构造器Page()</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs css">https://developers.weixin.qq.com/ebook?action=get_post_info&amp;docid=<span class="hljs-number">0004</span>eec99acc808b00861a5bd5280a<br>宿主环境提供了 <span class="hljs-built_in">Page</span>() 构造器用来注册一个小程序页面，<span class="hljs-built_in">Page</span>()在页面脚本page.js中调用，<span class="hljs-built_in">Page</span>() 的调用方式如代码清单<span class="hljs-number">3</span>-<span class="hljs-number">8</span>所示。Page构造器接受一个Object参数，参数说明如表<span class="hljs-number">3</span>-<span class="hljs-number">4</span>所示，其中data属性是当前页面WXML模板中可以用来做数据绑定的初始数据，我们会在后文展开讨论；onLoad / onReady / onShow / onHide /onUnload <span class="hljs-number">5</span>个回调是Page实例的生命周期函数，我们在后文展开；onPullDownRefresh / onReachBottom / onShareAppMessage / onPageScroll <span class="hljs-number">4</span>个回调是页面的用户行为，我们也会在后文展开。<br>代码清单<span class="hljs-number">3</span>-<span class="hljs-number">8</span> Page构造器<br><br><span class="hljs-built_in">Page</span>(&#123;<br>  data: &#123; text: <span class="hljs-string">&quot;This is page data.&quot;</span> &#125;,<br>  onLoad: <span class="hljs-built_in">function</span>(options) &#123; &#125;,<br>  onReady: <span class="hljs-built_in">function</span>() &#123; &#125;,<br>  onShow: <span class="hljs-built_in">function</span>() &#123; &#125;,<br>  onHide: <span class="hljs-built_in">function</span>() &#123; &#125;,<br>  onUnload: <span class="hljs-built_in">function</span>() &#123; &#125;,<br>  onPullDownRefresh: <span class="hljs-built_in">function</span>() &#123; &#125;,<br>  onReachBottom: <span class="hljs-built_in">function</span>() &#123; &#125;,<br>  onShareAppMessage: function () &#123; &#125;,<br>  onPageScroll: <span class="hljs-built_in">function</span>() &#123; &#125;<br>&#125;)<br><br>技术贴<br>https://www.cnblogs.com/fozero/p/<span class="hljs-number">7868560</span>.html<br></code></pre></td></tr></table></figure><p>对页面进行监听  参数</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs ada">dataObject页面的初始数据<br>onLoad<span class="hljs-keyword">Function</span><span class="hljs-title">生命周期函数--监听页面加载，触发时机早于onShow和onReady</span><br>onReady<span class="hljs-keyword">Function</span><span class="hljs-title">生命周期函数--监听页面初次渲染完成</span><br>onShow<span class="hljs-keyword">Function</span><span class="hljs-title">生命周期函数--监听页面显示，触发事件早于onReady</span><br>onHide<span class="hljs-keyword">Function</span><span class="hljs-title">生命周期函数--监听页面隐藏</span><br>onUnload<span class="hljs-keyword">Function</span><span class="hljs-title">生命周期函数--监听页面卸载</span><br>onPullDownRefresh<span class="hljs-keyword">Function</span><span class="hljs-title">页面相关事件处理函数--监听用户下拉动作</span><br>onReachBottom<span class="hljs-keyword">Function</span><span class="hljs-title">页面上拉触底事件的处理函数</span><br>onShareAppMessage<span class="hljs-keyword">Function</span><span class="hljs-title">用户点击右上角转发</span><br>onPageScroll<span class="hljs-keyword">Function</span><span class="hljs-title">页面滚动触发事件的处理函数</span><br>其他Any可以添加任意的函数或数据，在Page实例的其他函数中用 this 可以访问<br></code></pre></td></tr></table></figure><p>页面的数据</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-comment">&lt;!-- page.wxml --&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">text</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">array</span>[0].msg&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">// page.js</span><br><span class="language-xml">Page(&#123;</span><br><span class="language-xml">  data: &#123;</span><br><span class="language-xml">    text: &#x27;init data&#x27;,</span><br><span class="language-xml">    array: [&#123;msg: &#x27;1&#x27;&#125;, &#123;msg: &#x27;2&#x27;&#125;]</span><br><span class="language-xml">  &#125;</span><br><span class="language-xml">&#125;)</span><br></code></pre></td></tr></table></figure><p>操作数据  setData</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs stylus"> <span class="hljs-built_in">setData</span>(data, callback)<br> <span class="hljs-built_in">setData</span>(数据, 回调函数)<br>&lt;!-- page<span class="hljs-selector-class">.wxml</span> --&gt;<br>&lt;view&gt;&#123;&#123;text&#125;&#125;&lt;/view&gt;<br>&lt;view&gt;&#123;&#123;array<span class="hljs-selector-attr">[0]</span>.msg&#125;&#125;&lt;/view&gt;<br><br><span class="hljs-comment">// page.js</span><br><span class="hljs-built_in">Page</span>(&#123;<br>  data: &#123;<br>    text: <span class="hljs-string">&#x27;init data&#x27;</span>,<br>    array: <span class="hljs-selector-attr">[&#123;msg: <span class="hljs-string">&#x27;1&#x27;</span>&#125;, &#123;msg: <span class="hljs-string">&#x27;2&#x27;</span>&#125;]</span><br>  &#125;<br>&#125;)<br><span class="hljs-comment">// page.js</span><br><span class="hljs-built_in">Page</span>(&#123;<br>  onLoad: <span class="hljs-built_in">function</span>()&#123;<br>    this<span class="hljs-selector-class">.setData</span>(&#123;<br>      text: <span class="hljs-string">&#x27;change data&#x27;</span><br>    &#125;, <span class="hljs-built_in">function</span>()&#123;<br>      <span class="hljs-comment">// 在这次setData对界面渲染完毕后触发</span><br>    &#125;)<br>  &#125;<br>&#125;)<br><br><span class="hljs-comment">// page.js</span><br><span class="hljs-built_in">Page</span>(&#123;<br>  data: &#123;<br>    <span class="hljs-selector-tag">a</span>: <span class="hljs-number">1</span>, <span class="hljs-selector-tag">b</span>: <span class="hljs-number">2</span>, c: <span class="hljs-number">3</span>,<br>    d: <span class="hljs-selector-attr">[1, &#123;text: <span class="hljs-string">&#x27;Hello&#x27;</span>&#125;, 3, 4]</span><br>  &#125;<br>  onLoad: <span class="hljs-built_in">function</span>()&#123;<br>       <span class="hljs-comment">// a需要变化时，只需要setData设置a字段即可</span><br>    this<span class="hljs-selector-class">.setData</span>(&#123;<span class="hljs-selector-tag">a</span> : <span class="hljs-number">2</span>&#125;)<br>  &#125;<br>&#125;)<br><br>此外需要注意以下<span class="hljs-number">3</span>点：<br><br>直接修改 Page实例的this<span class="hljs-selector-class">.data</span> 而不调用 this<span class="hljs-selector-class">.setData</span> 是无法改变页面的状态的，还会造成数据不一致。<br>由于setData是需要两个线程的一些通信消耗，为了提高性能，每次设置的数据不应超过<span class="hljs-number">1024</span>kB。<br>不要把data中的任意一项的value设为undefined，否则可能会有引起一些不可预料的bug。<br><br></code></pre></td></tr></table></figure><h3 id="页面的用户行为"><a href="#页面的用户行为" class="headerlink" title="页面的用户行为"></a>页面的用户行为</h3><h4 id="下拉刷新-onPullDownRefresh"><a href="#下拉刷新-onPullDownRefresh" class="headerlink" title="下拉刷新 onPullDownRefresh"></a>下拉刷新 onPullDownRefresh</h4><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">下拉刷新 onPullDownRefresh<br>监听用户下拉刷新事件，需要在app.json的<span class="hljs-keyword">window</span>选项中或页面配置page.json中设置enablePullDownRefresh为<span class="hljs-keyword">true</span>。当处理完数据刷新后，wx.stopPullDownRefresh可以停止当前页面的下拉刷新。<br></code></pre></td></tr></table></figure><h4 id="上拉触底-onReachBottom"><a href="#上拉触底-onReachBottom" class="headerlink" title="上拉触底 onReachBottom"></a>上拉触底 onReachBottom</h4><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">上拉触底 onReachBottom<br>监听用户上拉触底事件。可以在app.json的<span class="hljs-keyword">window</span>选项中或页面配置page.json中设置触发距离onReachBottomDistance。在触发距离内滑动期间，本事件只会被触发一次。<br></code></pre></td></tr></table></figure><h4 id="页面滚动-onPageScroll"><a href="#页面滚动-onPageScroll" class="headerlink" title="页面滚动 onPageScroll"></a>页面滚动 onPageScroll</h4><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">页面滚动 onPageScroll<br>监听用户滑动页面事件，参数为 <span class="hljs-built_in">Object</span>，包含 scrollTop 字段，表示页面在垂直方向已滚动的距离（单位px）。<br></code></pre></td></tr></table></figure><h4 id="用户转发-onShareAppMessage"><a href="#用户转发-onShareAppMessage" class="headerlink" title="用户转发 onShareAppMessage"></a>用户转发 onShareAppMessage</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript">只有定义了此事件处理函数，右上角菜单才会显示“转发”按钮，在用户点击转发按钮的时候会调用，此事件需要<span class="hljs-keyword">return</span>一个<span class="hljs-title class_">Object</span>，包含title和path两个字段，用于自定义转发内容，如代码清单<span class="hljs-number">3</span>-<span class="hljs-number">13</span>所示。<br><br>代码清单<span class="hljs-number">3</span>-<span class="hljs-number">13</span> 使用onShareAppMessage自定义转发字段<br><br><span class="hljs-comment">// page.js</span><br><span class="hljs-title class_">Page</span>(&#123;<br><span class="hljs-attr">onShareAppMessage</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br> <span class="hljs-keyword">return</span> &#123;<br>   <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;自定义转发标题&#x27;</span>,<br>   <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/page/user?id=123&#x27;</span><br> &#125;<br>&#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="页面跳转和路由"><a href="#页面跳转和路由" class="headerlink" title="页面跳转和路由"></a>页面跳转和路由</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs css">一个小程序拥有多个页面，我们可以通过wx<span class="hljs-selector-class">.navigateTo</span>推入一个新的页面，如图<span class="hljs-number">3</span>-<span class="hljs-number">6</span>所示，在首页使用<span class="hljs-number">2</span>次wx<span class="hljs-selector-class">.navigateTo</span>后，页面层级会有三层，我们把这样的一个页面层级称为页面栈。<br><br>后续为了表述方便，我们采用这样的方式进行描述页面栈：<span class="hljs-selector-attr">[ pageA, pageB, pageC ]</span>，其中pageA在最底下，pageC在最顶上，也就是用户所看到的界面，需要注意在本书编写的时候，小程序宿主环境限制了这个页面栈的最大层级为<span class="hljs-number">10</span>层 ，也就是当页面栈到达<span class="hljs-number">10</span>层之后就没有办法再推入新的页面了。我们下面来通过上边这个页面栈描述以下几个和导航相关的API。<br>使用 wx<span class="hljs-selector-class">.navigateTo</span>(&#123; url: <span class="hljs-string">&#x27;pageD&#x27;</span> &#125;) 可以往当前页面栈多推入一个 pageD，此时页面栈变成 <span class="hljs-selector-attr">[ pageA, pageB, pageC, pageD ]</span>。<br>使用 wx<span class="hljs-selector-class">.navigateBack</span>() 可以退出当前页面栈的最顶上页面，此时页面栈变成 <span class="hljs-selector-attr">[ pageA, pageB, pageC ]</span>。<br>使用wx<span class="hljs-selector-class">.redirectTo</span>(&#123; url: <span class="hljs-string">&#x27;pageE&#x27;</span> &#125;) 是替换当前页变成pageE，此时页面栈变成 <span class="hljs-selector-attr">[ pageA, pageB, pageE ]</span>，当页面栈到达<span class="hljs-number">10</span>层没法再新增的时候，往往就是使用redirectTo这个API进行页面跳转。。<br><br><br>&#123;<br>  &quot;tabBar&quot;: &#123;<br>    &quot;list&quot;: [<br>      &#123; &quot;text&quot;: <span class="hljs-string">&quot;Tab1&quot;</span>, <span class="hljs-string">&quot;pagePath&quot;</span>: <span class="hljs-string">&quot;pageA&quot;</span> &#125;,<br>      &#123; &quot;text&quot;: <span class="hljs-string">&quot;Tab1&quot;</span>, <span class="hljs-string">&quot;pagePath&quot;</span>: <span class="hljs-string">&quot;pageF&quot;</span> &#125;,<br>      &#123; &quot;text&quot;: <span class="hljs-string">&quot;Tab1&quot;</span>, <span class="hljs-string">&quot;pagePath&quot;</span>: <span class="hljs-string">&quot;pageG&quot;</span> &#125;<br>    ]<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>小程序</category>
      
    </categories>
    
    
    <tags>
      
      <tag>小程序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>初次安装git配置用户名和邮箱</title>
    <link href="/2022/01/12/git%E9%85%8D%E7%BD%AE%E7%94%A8%E6%88%B7%E5%90%8D%E5%92%8C%E9%82%AE%E7%AE%B1/"/>
    <url>/2022/01/12/git%E9%85%8D%E7%BD%AE%E7%94%A8%E6%88%B7%E5%90%8D%E5%92%8C%E9%82%AE%E7%AE%B1/</url>
    
    <content type="html"><![CDATA[<h2 id="初次安装git配置用户名和邮箱"><a href="#初次安装git配置用户名和邮箱" class="headerlink" title="初次安装git配置用户名和邮箱"></a>初次安装git配置用户名和邮箱</h2><p>参考地址： <a href="https://www.cnblogs.com/superGG1990/p/6844952.html">https://www.cnblogs.com/superGG1990/p/6844952.html</a></p><p>​    一、GIT 查看&#x2F;修改用户名和邮箱地址 <a href="https://blog.csdn.net/autoliuweijie/article/details/52230165">https://blog.csdn.net/autoliuweijie/article/details/52230165</a></p><p>​    用户名和邮箱地址的作用</p><p>​    用户名和邮箱地址是本地git客户端的一个变量，不随git库而改变。</p><p>​    每次commit都会用用户名和邮箱纪录。</p><p>​    github的contributions统计就是按邮箱来统计的。</p><p>​    查看用户名和邮箱地址：</p><p>​    $ git config user.name</p><p>​    $ git config user.email</p><p>​    修改用户名和邮箱地址：</p><p>​    $ git config –global user.name “username”</p><p>​    $ git config –global user.email “email”</p>]]></content>
    
    
    <categories>
      
      <category>git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>小程序数据的交互操作随笔</title>
    <link href="/2022/01/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%95%B0%E6%8D%AE%E7%9A%84%E4%BA%A4%E4%BA%92%E6%93%8D%E4%BD%9C%E9%9A%8F%E7%AC%94/"/>
    <url>/2022/01/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%95%B0%E6%8D%AE%E7%9A%84%E4%BA%A4%E4%BA%92%E6%93%8D%E4%BD%9C%E9%9A%8F%E7%AC%94/</url>
    
    <content type="html"><![CDATA[<h1 id="小程序数据的交互操作随笔"><a href="#小程序数据的交互操作随笔" class="headerlink" title="小程序数据的交互操作随笔"></a>小程序数据的交互操作随笔</h1><h2 id="属性绑定"><a href="#属性绑定" class="headerlink" title="属性绑定"></a>属性绑定</h2><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;createGroupfn_box </span></span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">but_switch?</span><span class="hljs-string">&#x27;active1&#x27;</span>:<span class="hljs-string">&#x27;active2&#x27;</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text_v&quot;</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">text</span>&gt;</span>群名称<span class="hljs-tag">&lt;/<span class="hljs-name">text</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">group_name_val</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span> <span class="hljs-attr">bindinput</span>=<span class="hljs-string">&quot;bindinputfn&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">input</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>类名属性判断绑定</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">class=&quot;createGroupfn_box </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">but_switch?</span><span class="hljs-string">&#x27;active1&#x27;</span>:<span class="hljs-string">&#x27;active2&#x27;</span>&#125;&#125;</span><br></code></pre></td></tr></table></figure><p>事件绑定</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">bindinput</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;bindinputfn&quot;</span><br></code></pre></td></tr></table></figure><p>内容绑定</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">text</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">text1</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">text</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>属性设置</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;height:</span></span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">statusbar</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">px&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css">data: &#123;<br>   statusbar: <span class="hljs-string">&#x27;&#x27;</span><br> &#125;,<br>this<span class="hljs-selector-class">.setData</span>(&#123;<br>     statusbar: statusbarH<br>   &#125;)<br></code></pre></td></tr></table></figure><h2 id="弹出框"><a href="#弹出框" class="headerlink" title="弹出框"></a>弹出框</h2><ul><li><h3 id="wx-showToast"><a href="#wx-showToast" class="headerlink" title="wx.showToast()"></a>wx.showToast()</h3></li><li><ul><li><p>title：显示的提示信息，在没有图标的情况下，文本内容可显示两行</p></li><li><p>icon:  显示的图标</p></li><li><ul><li>success：成功图标</li><li>loading：加载图标</li><li>none：没有图标</li></ul></li><li><p>image：自定义显示的图标，优先级高于icon</p></li><li><p>duration：延迟的时间，弹出框弹出后的显示时间</p></li><li><p>mask：true&#x2F;false是否显示遮罩层</p></li><li><p>success：接口调用成功的回调函数</p></li><li><p>fail：接口调用失败的回调函数</p></li><li><p>complete：不管成功还是失败都会执行的函数</p></li></ul></li></ul><p>注：一般在点击事件中调用，可结合使用wx.hideTotast来使用，</p><ul><li><h3 id="wx-showLoading"><a href="#wx-showLoading" class="headerlink" title="wx.showLoading()"></a>wx.showLoading()</h3></li><li><ul><li>title：加载的提示信息eg：玩命加载中…</li><li>mask：是否现思遮罩层</li><li>success：接口调用成功的回调函数</li><li>fail：接口调用失败的回调函数</li><li>complete：无论成功还是失败都会执行的函数</li></ul></li></ul><p>注：一般需要结合使用wx.hideLoading()；来使用可分别在onLoad和onReady中使用，数据渲染完成后关闭</p><ul><li><h3 id="wx-showModal"><a href="#wx-showModal" class="headerlink" title="wx.showModal()"></a>wx.showModal()</h3></li><li><ul><li>title：提示信息的标题</li><li>content：提示信息的内容</li><li>showCancel：true&#x2F;false是否显示取消按钮</li><li>cancelText：取消按钮的文本内容，不得超过四个字符</li><li>cancelColor：取消按钮的文本颜色，默认#000000</li><li>confirmText：确认按钮的文本内容，不得超过四个字符</li><li>confirmColor：却惹按钮的文本颜色，默认#000000</li><li>success：接口成功的回调</li><li>fail：接口失败的回调</li></ul></li><li><p>complete：无论成功或失败都会嗲用</p></li></ul><p>注：一般带年纪确认或取消，我们需要在success中进行事件的判断处理</p><p>参考地址</p><p><a href="https://www.cnblogs.com/bgwhite/p/9335648.html">https://www.cnblogs.com/bgwhite/p/9335648.html</a></p><h2 id="image标签问题"><a href="#image标签问题" class="headerlink" title="image标签问题"></a>image标签问题</h2><h3 id="image-后面加"><a href="#image-后面加" class="headerlink" title="image 后面加&#x2F;"></a>image 后面加&#x2F;</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;img <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;/pages/static/img/icon1&quot;</span> <span class="hljs-attribute">alt</span>=<span class="hljs-string">&quot;&quot;</span>/&gt;<br></code></pre></td></tr></table></figure><h3 id="image默认宽高"><a href="#image默认宽高" class="headerlink" title="image默认宽高"></a>image默认宽高</h3><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">微信小程序中<span class="hljs-keyword">image</span>标签发现系统有个默认的宽高，会影响到<span class="hljs-keyword">image</span>样式，解决办法：在<span class="hljs-keyword">image</span>标签中加上属性mode=<span class="hljs-string">&#x27;widthFix&#x27;</span>,就可以了。<br></code></pre></td></tr></table></figure><h2 id="for遍历渲染"><a href="#for遍历渲染" class="headerlink" title="for遍历渲染"></a>for遍历渲染</h2><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;xjrw_list_li&quot;</span> <span class="hljs-attr">wx:for</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">datalist</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span> <span class="hljs-attr">wx:for-item</span>=<span class="hljs-string">&#x27;item&#x27;</span> <span class="hljs-attr">wx:for-index</span>=<span class="hljs-string">&#x27;index&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h2><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">block</span> <span class="hljs-attr">wx:if</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">true</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span> view1 <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span> view2 <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">block</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">https://developers.weixin.qq.com/miniprogram/dev/reference/wxml/conditional.html</span><br></code></pre></td></tr></table></figure><h2 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h2><p>数据获取和vue不一样 需要this,data.xxx</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xl"><span class="hljs-built_in">page</span>(&#123;<br><span class="hljs-keyword">data</span>:&#123;<br><span class="hljs-keyword">name</span>:<span class="hljs-string">&quot;我叫小明&quot;</span><br>&#125;,<br>showData:function()&#123;<br>var <span class="hljs-keyword">text</span> = this.<span class="hljs-keyword">data</span>.<span class="hljs-keyword">name</span><br>&#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="设置数据方法"><a href="#设置数据方法" class="headerlink" title="设置数据方法"></a>设置数据方法</h2><h3 id="设置数据方法-1"><a href="#设置数据方法-1" class="headerlink" title="设置数据方法"></a>设置数据方法</h3><figure class="highlight roboconf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs roboconf">this.setData(&#123;<br>      <span class="hljs-attribute">account</span>: e<span class="hljs-variable">.detail</span><span class="hljs-variable">.value</span><br>    &#125;)<br></code></pre></td></tr></table></figure><h3 id="获取data数据方法、"><a href="#获取data数据方法、" class="headerlink" title="获取data数据方法、"></a>获取data数据方法、</h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">showData:<span class="hljs-keyword">function</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">var</span> text = <span class="hljs-keyword">this</span>.data.name<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="input数据双向绑定"><a href="#input数据双向绑定" class="headerlink" title="input数据双向绑定"></a>input数据双向绑定</h2><p><strong>一</strong>，<strong>手动进行双向绑定</strong> </p><p>1.绑定事件 </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;input <span class="hljs-attribute">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attribute">bindinput</span>=<span class="hljs-string">&quot;handleInput&quot;</span>/&gt;<br></code></pre></td></tr></table></figure><p>2.定义data数据 </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">data: &#123;<br>     msg:<span class="hljs-string">&#x27;&#x27;</span>,<br>         &#125;<br></code></pre></td></tr></table></figure><p>3.实时将e.detail.value输入框的值赋给数据msg </p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">handleInput</span><span class="hljs-params">(e)</span></span> &#123;<br>    <span class="hljs-comment">//e.detail.value为input框的数据</span><br>    <span class="hljs-comment">//输入事件中，实时将e.detail.value输入框的值赋给数据msg。</span><br>    this<span class="hljs-selector-class">.setData</span>(&#123;<br>        msg:e<span class="hljs-selector-class">.detail</span><span class="hljs-selector-class">.value</span><br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>小程序</category>
      
    </categories>
    
    
    <tags>
      
      <tag>小程序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>小程序的配置和代码构成</title>
    <link href="/2022/01/02/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    <url>/2022/01/02/%E5%B0%8F%E7%A8%8B%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="小程序开发指南"><a href="#小程序开发指南" class="headerlink" title="小程序开发指南"></a>小程序开发指南</h1><h2 id="申请账号"><a href="#申请账号" class="headerlink" title="申请账号"></a>申请账号</h2><p>进入<a href="https://mp.weixin.qq.com/wxopen/waregister?action=step1">小程序注册页</a> 根据指引填写信息和提交相应的资料，就可以拥有自己的小程序账号。 </p><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><p>第一步，请前往<a href="https://mp.weixin.qq.com/debug/wxadoc/dev/devtools/download.html">https://mp.weixin.qq.com/debug/wxadoc/dev/devtools/download.html</a> 微信开发者工具下载页面根据自己的操作系统下载对应的安装包进行安装。 </p><p>第二步，打开微信开发者工具，选择新建小程序项目，我们先不需理解AppID的概念，新建项目时选择无AppID，并取消勾选“建立普通快速启动模板”的选项。 </p><p>最后一步，我们来添加必要的代码。 </p><p>在根目录下创建app.json，其内容如下。 </p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs prolog">&#123;<br><br>  <span class="hljs-string">&quot;pages&quot;</span>: [<span class="hljs-string">&quot;pages/index/index&quot;</span>]<br><br>&#125;<br></code></pre></td></tr></table></figure><p>在根目录下新建pages目录，然后在pages目录下新建index目录，接着在index目录下创建两个文件index.wxml和index.js。</p><p>index.wxml的内容如下所示。<code>&lt;text&gt;Hello World&lt;/text&gt;</code></p><p>index.js的内容如下所示。<code>Page(&#123;&#125;)</code></p><p>通过编写以上短短的几行代码，微信开发者工具的模拟器界面上显示出Hello World。</p><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p>小程序包含一个描述整体程序的 <code>app</code> 和多个描述各自页面的 <code>page</code>。</p><p>一个小程序主体部分由三个文件组成，必须放在项目的根目录，如下：</p><p><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/app.html">app.js</a> 小程序逻辑 </p><p><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/config.html">app.json</a> 小程序公共配置 </p><p><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxss.html">app.wxss</a> 小程序公共样式表 </p><p>一个小程序页面由四个文件组成，分别是： </p><p><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/page.html">js</a> 页面逻辑 </p><p><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxml/">wxml</a> 页面结构 </p><p><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/config.html#%E9%A1%B5%E9%9D%A2%E9%85%8D%E7%BD%AE">json</a> 页面配置 </p><p><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxss.html">wxss</a> 页面样式表 </p><h2 id="app-json配置"><a href="#app-json配置" class="headerlink" title="app.json配置"></a>app.json配置</h2><p>我们简单说一下这个配置各个项的含义:</p><ol><li><code>pages</code>字段 —— 用于描述当前小程序所有页面路径，这是为了让微信客户端知道当前你的小程序页面定义在哪个目录。</li><li><code>window</code>字段 —— 定义小程序所有页面的顶部背景颜色，文字颜色定义等。</li><li>tabBar如果小程序是一个多 tab 应用（客户端窗口的底部或顶部有 tab 栏可以切换页面），可以通过 tabBar 配置项指定 tab 栏的表现，以及 tab 切换时显示的对应页面。</li></ol><p><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/app.html#entryPagePath">entryPagePath</a> 小程序默认启动首页 </p><p><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/app.html#pages">pages</a> 页面路径列表 </p><p><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/app.html#window">window</a> 全局的默认窗口表现 </p><p><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/app.html#tabBar">tabBar</a> 底部 <code>tab</code> 栏的表现 </p><p><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/app.html#networkTimeout">networkTimeout</a> 网络超时时间 </p><p><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/app.html#debug">debug</a> 是否开启 debug 模式，默认关闭 </p><p>等等。。。</p><p>其他配置项细节可以参考文档 <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/config.html">小程序的配置 app.json</a> 。</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">&#123;<br>  &quot;pages&quot;:[<br>    &quot;pages/<span class="hljs-keyword">index</span>/<span class="hljs-keyword">index</span><span class="hljs-string">&quot;,</span><br><span class="hljs-string">    &quot;</span>pages/logs/logs<span class="hljs-string">&quot;</span><br><span class="hljs-string">  ],</span><br><span class="hljs-string">  &quot;</span>tabBar<span class="hljs-string">&quot;: &#123;</span><br><span class="hljs-string">    &quot;</span>list<span class="hljs-string">&quot;: [&#123;</span><br><span class="hljs-string">      &quot;</span>pagePath<span class="hljs-string">&quot;: &quot;</span>pages/<span class="hljs-keyword">index</span>/<span class="hljs-keyword">index</span><span class="hljs-string">&quot;,</span><br><span class="hljs-string">      &quot;</span>text<span class="hljs-string">&quot;: &quot;</span>首页<span class="hljs-string">&quot;</span><br><span class="hljs-string">    &#125;, &#123;</span><br><span class="hljs-string">      &quot;</span>pagePath<span class="hljs-string">&quot;: &quot;</span>pages/logs/logs<span class="hljs-string">&quot;,</span><br><span class="hljs-string">      &quot;</span>text<span class="hljs-string">&quot;: &quot;</span>日志<span class="hljs-string">&quot;</span><br><span class="hljs-string">    &#125;]</span><br><span class="hljs-string">  &#125;,</span><br><span class="hljs-string">  &quot;</span>window<span class="hljs-string">&quot;:&#123;</span><br><span class="hljs-string">    &quot;</span>backgroundTextStyle<span class="hljs-string">&quot;:&quot;</span>light<span class="hljs-string">&quot;,</span><br><span class="hljs-string">    &quot;</span>navigationBarBackgroundColor<span class="hljs-string">&quot;: &quot;</span>#fff<span class="hljs-string">&quot;,</span><br><span class="hljs-string">    &quot;</span>navigationBarTitleText<span class="hljs-string">&quot;: &quot;</span>WeChat<span class="hljs-string">&quot;,</span><br><span class="hljs-string">    &quot;</span>navigationBarTextStyle<span class="hljs-string">&quot;:&quot;</span>black<span class="hljs-string">&quot;</span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string">&#125;</span><br></code></pre></td></tr></table></figure><p>还需要注意的是 JSON 文件中无法使用注释，试图添加注释将会引发报错。</p><p>window在取值时我用rgb未生效，变成默认白色<br>后转成16进制色生效<br><a href="https://www.sioe.cn/yingyong/yanse-rgb-16/">https://www.sioe.cn/yingyong/yanse-rgb-16/</a></p><p>全局配置项</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">https://developers.weixin.qq.com/miniprogram/dev/reference/<span class="hljs-keyword">configuration</span>/app.html<br><br>详细参数<br>坑：<br><br><br>tabBar   pagePath路径里一定要有一个<span class="hljs-keyword">index</span>否则不显示<br><br><br><br>&quot;tabBar&quot;: &#123;<br>      &quot;color&quot;: &quot;#a9b7b7&quot;,<br>      &quot;selectedColor&quot;: &quot;#02C8F9&quot;,<br>      &quot;borderStyle&quot;: &quot;black&quot;,<br>      &quot;list&quot;: [<br>         &#123;<br>            &quot;pagePath&quot;: &quot;pages/index/index&quot;,<br>            &quot;iconPath&quot;: &quot;pages/img/shouye.png&quot;,<br>            &quot;selectedIconPath&quot;: &quot;pages/img/shouye3.png&quot;,<br>            &quot;text&quot;: &quot;消息&quot;<br>         &#125;,<br>         &#123;<br>            &quot;pagePath&quot;: &quot;pages/page1/psage&quot;,<br>            &quot;iconPath&quot;: &quot;pages/img/wenda.png&quot;,<br>            &quot;selectedIconPath&quot;: &quot;pages/img/wenda2.png&quot;,<br>            &quot;text&quot;: &quot;通讯录&quot;<br>         &#125;,<br>         &#123;<br>            &quot;pagePath&quot;: &quot;pages/page2/page2&quot;,<br>            &quot;iconPath&quot;: &quot;pages/img/xianzhi.png&quot;,<br>            &quot;selectedIconPath&quot;: &quot;pages/img/xianzhi2.png&quot;,<br>            &quot;text&quot;: &quot;我的&quot;<br>         &#125;<br>      ]<br>   &#125;,<br><br>坑：<br><br><span class="hljs-keyword">window</span>里的标题<br>方法一：<br>如果改动其中一个页面的部分内容如名称，不要把<span class="hljs-keyword">window</span>整个复制给page1.json,只复制一条即可，否则无效<br><br>page1.json<br>&#123;<br>&quot;window&quot;: &#123;<br>      &quot;backgroundTextStyle&quot;: &quot;light&quot;,<br>      &quot;navigationBarBackgroundColor&quot;: &quot;#ccc&quot;,<br>      &quot;navigationBarTitleText&quot;: &quot;my_iM&quot;,<br>      &quot;navigationBarTextStyle&quot;: &quot;black&quot;<br>   &#125;,<br>&#125;<br>page1.json<br>&#123;<br>  &quot;usingComponents&quot;: &#123;&#125;,<br>  &quot;navigationBarTitleText&quot;: &quot;群组1&quot;<br>&#125;<br><br><br>方法二：<br>动态绑定<span class="hljs-keyword">window</span>里的标题<br><br><br>wx.setNavigationBarTitle(&#123;<br>         title: <span class="hljs-string">&#x27;修改后的导航栏标题&#x27;</span>,<br>         success: <span class="hljs-keyword">function</span> (res) &#123;<br>            // success<br>         &#125;<br>      &#125;)<br></code></pre></td></tr></table></figure><p>状态栏沉浸式渲染</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs livescript"> <span class="hljs-string">&quot;window&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;backgroundTextStyle&quot;</span>: <span class="hljs-string">&quot;light&quot;</span>,<br>    <span class="hljs-string">&quot;navigationBarBackgroundColor&quot;</span>: <span class="hljs-string">&quot;<span class="hljs-subst">#fff</span>&quot;</span>,<br>    <span class="hljs-string">&quot;navigationBarTitleText&quot;</span>: <span class="hljs-string">&quot;Weixin&quot;</span>,<br>    <span class="hljs-string">&quot;navigationBarTextStyle&quot;</span>: <span class="hljs-string">&quot;black&quot;</span>,<br>    <span class="hljs-string">&quot;navigationStyle&quot;</span>: <span class="hljs-string">&quot;custom&quot;</span><br>  &#125;,<br>navigationStyle<br></code></pre></td></tr></table></figure><p>获取状态栏高度</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript">js<br><span class="hljs-comment">// 在组件实例进入页面节点树时执行</span><br>      <span class="hljs-keyword">const</span> res = wx.<span class="hljs-title function_">getSystemInfoSync</span>()<br>      <span class="hljs-keyword">var</span> statusbarH = res.<span class="hljs-property">statusBarHeight</span><br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;res&#x27;</span>, res);<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setData</span>(&#123;<br>        <span class="hljs-attr">statusbar</span>: statusbarH<br>      &#125;)<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;statusbar&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">statusbar</span>);<br><br><br>html<br>&lt;view style=<span class="hljs-string">&quot;height:&#123;&#123;statusbar&#125;&#125;px&quot;</span>&gt;&lt;/view&gt;<br></code></pre></td></tr></table></figure><p>自定义组件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">创建组件<br><br>新建组件文件夹components/statusbar<br>右键  新建组件component<br><br>需要引用组件的json文件引用组件<br> <span class="hljs-string">&quot;usingComponents&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;statusbar&quot;</span>: <span class="hljs-string">&quot;../components/statusbar/statusbar&quot;</span><br>  &#125;,<br><br><br>使用组件<br>需要使用组件的xhml文件引用组件 <br> &lt;statusbar/&gt;<br></code></pre></td></tr></table></figure><h2 id="工具配置-project-config-json"><a href="#工具配置-project-config-json" class="headerlink" title="工具配置 project.config.json"></a>工具配置 project.config.json</h2><p>通常大家在使用一个工具的时候，都会针对各自喜好做一些个性化配置，例如界面颜色、编译配置等等，当你换了另外一台电脑重新安装工具的时候，你还要重新配置。</p><p>考虑到这点，小程序开发者工具在每个项目的根目录都会生成一个 <code>project.config.json</code>，你在工具上做的任何配置都会写入到这个文件，当你重新安装工具或者换电脑工作时，你只要载入同一个项目的代码包，开发者工具就自动会帮你恢复到当时你开发项目时的个性化配置，其中会包括编辑器的颜色、代码上传时自动压缩等等一系列选项。</p><p>其他配置项细节可以参考文档 <a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/projectconfig.html">开发者工具的配置</a> 。</p><h2 id="页面配置-page-json"><a href="#页面配置-page-json" class="headerlink" title="页面配置 page.json"></a>页面配置 page.json</h2><p>这里的 <code>page.json</code> 其实用来表示 pages&#x2F;logs 目录下的 <code>logs.json</code> 这类和小程序页面相关的配置。</p><p>如果你整个小程序的风格是蓝色调，那么你可以在 <code>app.json</code> 里边声明顶部颜色是蓝色即可。实际情况可能不是这样，可能你小程序里边的每个页面都有不一样的色调来区分不同功能模块，因此我们提供了 <code>page.json</code>，让开发者可以独立定义每个页面的一些属性，例如刚刚说的顶部颜色、是否允许下拉刷新等等。</p><p>navigationBarBackgroundColor   导航栏背景颜色，如 <code>#000000</code> </p><p>navigationBarTextStyle 导航栏标题、状态栏颜色，仅支持 <code>black</code> &#x2F; <code>white</code> </p><p>navigationBarTitleText 导航栏标题文字内容 </p><p>navigationStyle 导航栏样式，仅支持以下值： <code>default</code> 默认样式 <code>custom</code> 自定义导航栏，只保留右上角胶囊按钮。 </p><p>homeButton 在非首页、非页面栈最底层页面或非tabbar内页面中的导航栏展示home键 </p><p>backgroundColor 窗口的背景色 </p><p>backgroundColorContent 页面容器背景色，<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/runtime/skyline/custom-route.html#%E8%AE%BE%E7%BD%AE%E9%A1%B5%E9%9D%A2%E9%80%8F%E6%98%8E">点击查看设置背景色详情</a> </p><p>backgroundTextStyle 下拉 loading 的样式，仅支持 <code>dark</code> &#x2F; <code>light</code> </p><p>等。。。</p><p>其他配置项细节可以参考文档 <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/config.html#%E9%A1%B5%E9%9D%A2%E9%85%8D%E7%BD%AE">页面配置</a> 。</p><h3 id="配置示例"><a href="#配置示例" class="headerlink" title="配置示例"></a>配置示例</h3><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs livescript">&#123;<br>  <span class="hljs-string">&quot;navigationBarBackgroundColor&quot;</span>: <span class="hljs-string">&quot;<span class="hljs-subst">#ffffff</span>&quot;</span>,<br>  <span class="hljs-string">&quot;navigationBarTextStyle&quot;</span>: <span class="hljs-string">&quot;black&quot;</span>,<br>  <span class="hljs-string">&quot;navigationBarTitleText&quot;</span>: <span class="hljs-string">&quot;微信接口功能演示&quot;</span>,<br>  <span class="hljs-string">&quot;backgroundColor&quot;</span>: <span class="hljs-string">&quot;<span class="hljs-subst">#eeeeee</span>&quot;</span>,<br>  <span class="hljs-string">&quot;backgroundTextStyle&quot;</span>: <span class="hljs-string">&quot;light&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="WXML-文件"><a href="#WXML-文件" class="headerlink" title="WXML 文件"></a>WXML 文件</h2><h3 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h3><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;msgItem&quot;</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">text</span>&gt;</span> </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">index</span>&#125;&#125;</span><span class="language-xml">: </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">msg</span>&#125;&#125;</span><span class="language-xml"> <span class="hljs-tag">&lt;/<span class="hljs-name">text</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">text</span>&gt;</span> Time: </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">time</span>&#125;&#125;</span><span class="language-xml"> <span class="hljs-tag">&lt;/<span class="hljs-name">text</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"> <span class="hljs-comment">&lt;!--</span></span><br><span class="hljs-comment"><span class="language-xml">item: &#123;</span></span><br><span class="hljs-comment"><span class="language-xml">  index: 0,</span></span><br><span class="hljs-comment"><span class="language-xml">  msg: &#x27;this is a template&#x27;,</span></span><br><span class="hljs-comment"><span class="language-xml">  time: &#x27;2016-06-18&#x27;</span></span><br><span class="hljs-comment"><span class="language-xml">&#125;</span></span><br><span class="hljs-comment"><span class="language-xml">--&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="取值"><a href="#取值" class="headerlink" title="取值"></a>取值</h3><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">// pages/wxml/index.js</span><br><span class="language-xml">Page(&#123;</span><br><span class="language-xml">  /**</span><br><span class="language-xml">   * 页面的初始数据</span><br><span class="language-xml">   */</span><br><span class="language-xml">  data: &#123;</span><br><span class="language-xml">    time: (new Date()).toString()</span><br><span class="language-xml">  &#125;,</span><br><span class="language-xml">&#125;)</span><br><span class="language-xml"></span><br><span class="language-xml">标签——内容数值绑定</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">text</span>&gt;</span>当前时间：</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">time</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">text</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">属性——数值绑定</span><br><span class="language-xml"><span class="hljs-comment">&lt;!-- 正确的写法 --&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">text</span> <span class="hljs-attr">data-test</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">test</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span> hello world<span class="hljs-tag">&lt;/<span class="hljs-name">text</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h3><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-comment">&lt;!--wxml--&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span> </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">message</span>&#125;&#125;</span><span class="language-xml"> <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br></code></pre></td></tr></table></figure><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs haskell">// page.js<br><span class="hljs-type">Page</span>(&#123;<br>  <span class="hljs-class"><span class="hljs-keyword">data</span>: &#123;</span><br><span class="hljs-class">    <span class="hljs-title">message</span>: &#x27;<span class="hljs-type">Hello</span> <span class="hljs-type">MINA</span>!&#x27;</span><br><span class="hljs-class">  &#125;</span><br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="逻辑语法"><a href="#逻辑语法" class="headerlink" title="逻辑语法"></a>逻辑语法</h3><h4 id="三元"><a href="#三元" class="headerlink" title="三元"></a>三元</h4><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">text</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">a</span> === <span class="hljs-number">10</span>? <span class="hljs-string">&quot;变量 a 等于10&quot;</span>: <span class="hljs-string">&quot;变量 a 不等于10&quot;</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">text</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="算数"><a href="#算数" class="headerlink" title="算数"></a>算数</h4><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-comment">&lt;!--</span></span><br><span class="hljs-comment"><span class="language-xml">&#123; a: 1,  b: 2, c: 3 &#125;</span></span><br><span class="hljs-comment"><span class="language-xml">--&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span> </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">a</span> + b&#125;&#125;</span><span class="language-xml"> + </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">c</span>&#125;&#125;</span><span class="language-xml"> + d <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-comment">&lt;!-- 输出 3 + 3 + d --&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h4><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&quot;hello &quot;</span> + name&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="条件逻辑"><a href="#条件逻辑" class="headerlink" title="条件逻辑"></a>条件逻辑</h4><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">WXML 中，使用 wx:if=&quot;</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">condition</span>&#125;&#125;</span><span class="language-xml">&quot; 来判断是否需要渲染该代码块：</span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">wx:if</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">condition</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span> True <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br><span class="language-xml">使用 wx:elif 和 wx:else 来添加一个 else 块：</span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">wx:if</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">length</span> &gt; <span class="hljs-number">5</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span> 1 <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">wx:elif</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">length</span> &gt; <span class="hljs-number">2</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span> 2 <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">wx:else</span>&gt;</span> 3 <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br><span class="language-xml">因为 wx:if 是一个控制属性，需要将它添加到一个标签上。如果要一次性判断多个组件标签，可以使用一个 <span class="hljs-tag">&lt;<span class="hljs-name">block</span>/&gt;</span> 标签将多个组件包装起来，并在上边使用 wx:if 控制属性。</span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">block</span> <span class="hljs-attr">wx:if</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">true</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span> view1 <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span> view2 <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">block</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h4><p>在组件上使用 wx:for 控制属性绑定一个数组，即可使用数组中各项的数据重复渲染该组件。默认数组的当前项的下标变量名默认为 index，数组当前项的变量名默认为 item</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-comment">&lt;!-- array 是一个数组 --&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">wx:for</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">array</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span></span><br><span class="language-xml">  </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">index</span>&#125;&#125;</span><span class="language-xml">: </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">item.message</span>&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-comment">&lt;!-- 对应的脚本文件</span></span><br><span class="hljs-comment"><span class="language-xml">Page(&#123;</span></span><br><span class="hljs-comment"><span class="language-xml">  data: &#123;</span></span><br><span class="hljs-comment"><span class="language-xml">    array: [&#123;</span></span><br><span class="hljs-comment"><span class="language-xml">      message: &#x27;foo&#x27;,</span></span><br><span class="hljs-comment"><span class="language-xml">    &#125;, &#123;</span></span><br><span class="hljs-comment"><span class="language-xml">      message: &#x27;bar&#x27;</span></span><br><span class="hljs-comment"><span class="language-xml">    &#125;]</span></span><br><span class="hljs-comment"><span class="language-xml">  &#125;</span></span><br><span class="hljs-comment"><span class="language-xml">&#125;)</span></span><br><span class="hljs-comment"><span class="language-xml">--&gt;</span></span><br></code></pre></td></tr></table></figure><p>使用 wx:for-item 指定数组当前元素的变量名，使用 wx:for-index 指定数组当前下标的变量名：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">wx:for</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">array</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span> <span class="hljs-attr">wx:for-index</span>=<span class="hljs-string">&quot;idx&quot;</span> <span class="hljs-attr">wx:for-item</span>=<span class="hljs-string">&quot;itemName&quot;</span>&gt;</span></span><br><span class="language-xml">  </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">idx</span>&#125;&#125;</span><span class="language-xml">: </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">itemName.message</span>&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br><span class="language-xml">类似 block wx:if ，也可以将 wx:for 用在 <span class="hljs-tag">&lt;<span class="hljs-name">block</span>/&gt;</span> 标签上，以渲染一个包含多节点的结构块。例如：</span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">block</span> <span class="hljs-attr">wx:for</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">[1, 2, 3]</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span> </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">index</span>&#125;&#125;</span><span class="language-xml">: <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span> </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">item</span>&#125;&#125;</span><span class="language-xml"> <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">block</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>wx:key 的值以两种形式提供：</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs qml">&lt;<span class="hljs-keyword">switch</span> <span class="hljs-attribute">wx</span>:<span class="hljs-attribute">for=&quot;&#123;&#123;objectArray&#125;&#125;&quot; wx</span>:<span class="hljs-attribute">key=&quot;unique&quot; &gt; &#123;&#123;item.id&#125;&#125; &lt;/switch&gt;</span><br><span class="hljs-attribute"></span><br><span class="hljs-attribute"></span><br><span class="hljs-attribute">data</span>: &#123;<br>    <span class="hljs-attribute">objectArray</span>: [<br>      &#123;<span class="hljs-attribute">id:</span><span class="hljs-string"> 5, unique</span>: <span class="hljs-string">&#x27;unique_5&#x27;</span>&#125;,<br>      &#123;<span class="hljs-attribute">id:</span><span class="hljs-string"> 4, unique</span>: <span class="hljs-string">&#x27;unique_4&#x27;</span>&#125;,<br>      &#123;<span class="hljs-attribute">id:</span><span class="hljs-string"> 3, unique</span>: <span class="hljs-string">&#x27;unique_3&#x27;</span>&#125;,<br>      &#123;<span class="hljs-attribute">id:</span><span class="hljs-string"> 2, unique</span>: <span class="hljs-string">&#x27;unique_2&#x27;</span>&#125;,<br>      &#123;<span class="hljs-attribute">id:</span><span class="hljs-string"> 1, unique</span>: <span class="hljs-string">&#x27;unique_1&#x27;</span>&#125;,<br>      &#123;<span class="hljs-attribute">id:</span><span class="hljs-string"> 0, unique</span>: <span class="hljs-string">&#x27;unique_0&#x27;</span>&#125;,<br>    ],<br>    <span class="hljs-attribute">numberArray</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br>  &#125;,<br></code></pre></td></tr></table></figure><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>WXML 提供两种文件引用方式import和include。</p><h4 id="import"><a href="#import" class="headerlink" title="import"></a>import</h4><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">WXML 提供两种文件引用方式import和include。</span><br><span class="language-xml">import 可以在该文件中使用目标文件定义的 template，如：</span><br><span class="language-xml"></span><br><span class="language-xml">在 item.wxml 中定义了一个叫 item的 template ：</span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-comment">&lt;!-- item.wxml --&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">text</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">text</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">text</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">在 index.wxml 中引用了 item.wxml，就可以使用 item模板：</span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;item.wxml&quot;</span>/&gt;</span></span><br></code></pre></td></tr></table></figure><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">is</span>=<span class="hljs-string">&quot;item&quot;</span> <span class="hljs-attr">data</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">text:</span> <span class="hljs-string">&#x27;forbar&#x27;</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>/&gt;</span></span><br><span class="language-xml">需要注意的是 import 有作用域的概念，即只会 import 目标文件中定义的 template，而不会 import 目标文件中 import 的 template，简言之就是 import 不具有递归的特性。</span><br><span class="language-xml"></span><br><span class="language-xml">例如：C 引用 B，B 引用A，在C中可以使用B定义的 template，在B中可以使用A定义的 template ，但是C不能使用A定义的template ，如代码2-19、代码2-20、代码2-21所示</span><br><span class="language-xml">代码清单2-19 模板 A</span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-comment">&lt;!-- A.wxml --&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;A&quot;</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">text</span>&gt;</span> A template <span class="hljs-tag">&lt;/<span class="hljs-name">text</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">代码清单2-20 模板 B</span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-comment">&lt;!-- B.wxml --&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;a.wxml&quot;</span>/&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;B&quot;</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">text</span>&gt;</span> B template <span class="hljs-tag">&lt;/<span class="hljs-name">text</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">代码清单2-21 模板 C</span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-comment">&lt;!-- C.wxml --&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;b.wxml&quot;</span>/&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">is</span>=<span class="hljs-string">&quot;A&quot;</span>/&gt;</span>  <span class="hljs-comment">&lt;!-- 这里将会触发一个警告，因为 b 中并没有定义模板 A --&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">is</span>=<span class="hljs-string">&quot;B&quot;</span>/&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="include"><a href="#include" class="headerlink" title="include"></a>include</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml">include 可以将目标文件中除了 <span class="hljs-tag">&lt;<span class="hljs-name">template</span>/&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">wxs</span>/&gt;</span> 外的整个代码引入，相当于是拷贝到 include 位置，如代码2-22、代码2-23、代码2-24所示。<br>代码清单2-22 index.wxml<br><br><span class="hljs-comment">&lt;!-- index.wxml --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;header.wxml&quot;</span>/&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span> body <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;footer.wxml&quot;</span>/&gt;</span><br>代码清单2-23 header.wxml<br><br><span class="hljs-comment">&lt;!-- header.wxml --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span> header <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br>代码清单2-24 footer.wxml<br><br><span class="hljs-comment">&lt;!-- footer.wxml --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span> footer <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="共同属性"><a href="#共同属性" class="headerlink" title="共同属性"></a>共同属性</h3><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">所有wxml 标签都支持的属性称之为共同属性，如表<span class="hljs-number">2</span><span class="hljs-number">-1</span>所示。<br><br>属性名类型描述注解<br>id<span class="hljs-built_in">String</span>组件的唯一标识整个页面唯一<br><span class="hljs-keyword">class</span><span class="hljs-title class_">String</span>组件的样式类在对应的 WXSS 中定义的样式类<br>style<span class="hljs-built_in">String</span>组件的内联样式可以动态设置的内联样式<br>hidden<span class="hljs-built_in">Boolean</span>组件是否显示所有组件默认显示<br>data-*Any自定义属性组件上触发的事件时，会发送给事件处理函数<br>bind*/<span class="hljs-keyword">catch</span>*EventHandler组件的事件<br>https://developers.weixin.qq.com/ebook?action=get_post_info&amp;docid=<span class="hljs-number">000</span>ee2c29d4f805b0086a37a254c0a<br></code></pre></td></tr></table></figure><h2 id="WXSS-样式"><a href="#WXSS-样式" class="headerlink" title="WXSS 样式"></a>WXSS 样式</h2><p>app.wxss为项目公共样式，它会被注入到小程序的每个页面。</p><h3 id="单位rpx"><a href="#单位rpx" class="headerlink" title="单位rpx"></a>单位rpx</h3><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">小程序编译后，rpx会做一次px换算。换算是以<span class="hljs-number">375</span>个物理像素为基准，也就是在一个宽度为<span class="hljs-number">375</span>物理像素的屏幕下，<span class="hljs-number">1</span>rpx <span class="hljs-operator">=</span> <span class="hljs-number">1</span>px。<br><br>举个例子：iPhone6屏幕宽度为<span class="hljs-number">375</span>px，共<span class="hljs-number">750</span>个物理像素，那么<span class="hljs-number">1</span>rpx <span class="hljs-operator">=</span> <span class="hljs-number">375</span> / <span class="hljs-number">750</span> px <span class="hljs-operator">=</span> <span class="hljs-number">0.5</span>px。<br></code></pre></td></tr></table></figure><h3 id="WXSS引用"><a href="#WXSS引用" class="headerlink" title="WXSS引用"></a>WXSS引用</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">在CSS中，开发者可以这样引用另一个样式文件：@<span class="hljs-keyword">import</span> url(<span class="hljs-string">&#x27;./test_0.css&#x27;</span>)<br><br>这种方法在请求上不会把test_0.css合并到<span class="hljs-keyword">index</span>.css中，也就是请求<span class="hljs-keyword">index</span>.css的时候，会多一个test_0.css的请求。<br></code></pre></td></tr></table></figure><h3 id="内联样式"><a href="#内联样式" class="headerlink" title="内联样式"></a>内联样式</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml">WXSS内联样式与Web开发一致:<br><br><span class="hljs-comment">&lt;!--index.wxml--&gt;</span><br><br><span class="hljs-comment">&lt;!--内联样式--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: red; font-size: 48rpx&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="动态跟新内联样式（数据绑定）"><a href="#动态跟新内联样式（数据绑定）" class="headerlink" title="动态跟新内联样式（数据绑定）"></a>动态跟新内联样式（数据绑定）</h3><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: </span></span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">eleColor</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">; font-size: </span></span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">eleFontsize</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">类型选择器样例样例描述<br>类选择器.class.<span class="hljs-built_in">int</span>ro选择所有拥有 <span class="hljs-keyword">class</span>=&quot;<span class="hljs-symbol">intro</span>&quot; 的组件<br><span class="hljs-symbol">id</span>选择器#<span class="hljs-symbol">id</span>#<span class="hljs-symbol">firstname</span>选择拥有 <span class="hljs-symbol">id</span>=&quot;<span class="hljs-symbol">firstname</span>&quot; 的组件<br>元素选择器<span class="hljs-symbol">element</span><span class="hljs-symbol">view</span> <span class="hljs-symbol">checkbox</span>选择所有文档的 <span class="hljs-symbol">view</span> 组件和所有的 <span class="hljs-symbol">checkbox</span> 组件<br>伪元素选择器::<span class="hljs-symbol">after</span><span class="hljs-symbol">view::<span class="hljs-symbol">after</span></span>在 <span class="hljs-symbol">view</span> 组件后边插入内容<br>伪元素选择器::<span class="hljs-symbol">before</span><span class="hljs-symbol">view::<span class="hljs-symbol">before</span></span>在 <span class="hljs-symbol">view</span> 组件前边插入内容<br></code></pre></td></tr></table></figure><p>小程序提供的样式库</p><h2 id="JS-逻辑交互"><a href="#JS-逻辑交互" class="headerlink" title="JS 逻辑交互"></a>JS 逻辑交互</h2><p>一个服务仅仅只有界面展示是不够的，还需要和用户做交互：响应用户的点击、获取用户的位置等等。在小程序里边，我们就通过编写 <code>JS</code> 脚本文件来处理用户的操作。 </p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">msg</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">bindtap</span>=<span class="hljs-string">&quot;clickMe&quot;</span>&gt;</span>点击我<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>点击 <code>button</code> 按钮的时候，我们希望把界面上 <code>msg</code> 显示成 <code>&quot;Hello World&quot;</code>，于是我们在 <code>button</code> 上声明一个属性: <code>bindtap</code> ，在 JS 文件里边声明了 <code>clickMe</code> 方法来响应这次点击操作： </p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">Page(&#123;<br>  clickMe: <span class="hljs-keyword">function</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">this</span>.setData(&#123; msg: <span class="hljs-string">&quot;Hello World&quot;</span> &#125;)<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>小程序</category>
      
    </categories>
    
    
    <tags>
      
      <tag>小程序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>axios插件</title>
    <link href="/2021/09/03/axios%E6%8F%92%E4%BB%B6/"/>
    <url>/2021/09/03/axios%E6%8F%92%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<p>中文文档地址</p><p><a href="https://www.axios-http.cn/docs/intro">https://www.axios-http.cn/docs/intro</a></p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>axios 是一个基于Promise 用于浏览器和 nodejs 的 HTTP 客户端，它本身具有以下特征：</p><hr><ul><li>从浏览器中创建 XMLHttpRequest</li><li>从 node.js 发出 http 请求</li><li>支持 Promise API</li><li>拦截请求和响应</li><li>转换请求和响应数据</li><li>取消请求</li><li>自动转换JSON数据</li><li>客户端支持防止 <a href="http://baike.baidu.com/link?url=iUceAfgyfJOacUtjPgT4ifaSOxDULAc_MzcLEOTySflAn5iLlHfMGsZMtthBm5sK4y6skrSvJ1HOO2qKtV1ej_">CSRF&#x2F;XSRF</a></li></ul><p>安装</p><p>使用 npm:</p><p>$ npm install axios</p><p>$ cnpm install axios &#x2F;&#x2F;taobao源 </p><p>或者使用cdn：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="执行-GET-请求"><a href="#执行-GET-请求" class="headerlink" title="执行 GET 请求"></a>执行 GET 请求</h1><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs arcade">执行 GET 请求<br><br><span class="hljs-comment">// 为给定 ID 的 user 创建请求</span><br>axios.get(<span class="hljs-string">&#x27;/user?ID=12345&#x27;</span>)<br>  .then(<span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) &#123;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(response);<br>  &#125;)<br>  .catch(<span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) &#123;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(error);<br>  &#125;);<br><br><span class="hljs-comment">// 上面的请求也可以这样做</span><br>axios.get(<span class="hljs-string">&#x27;/user&#x27;</span>, &#123;<br>    <span class="hljs-attr">params</span>: &#123;<br>      <span class="hljs-attr">ID</span>: <span class="hljs-number">12345</span><br>    &#125;<br>  &#125;)<br>  .then(<span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) &#123;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(response);<br>  &#125;)<br>  .catch(<span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) &#123;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(error);<br>  &#125;);<br></code></pre></td></tr></table></figure><h1 id="执行-POST-请求"><a href="#执行-POST-请求" class="headerlink" title="执行 POST 请求"></a>执行 POST 请求</h1><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs arcade">axios.post(<span class="hljs-string">&#x27;/user&#x27;</span>, &#123;<br>    <span class="hljs-attr">firstName</span>: <span class="hljs-string">&#x27;Fred&#x27;</span>,<br>    <span class="hljs-attr">lastName</span>: <span class="hljs-string">&#x27;Flintstone&#x27;</span><br>  &#125;)<br>  .then(<span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) &#123;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(response);<br>  &#125;)<br>  .catch(<span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) &#123;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(error);<br>  &#125;);<br></code></pre></td></tr></table></figure><h1 id="执行多个并发请求"><a href="#执行多个并发请求" class="headerlink" title="执行多个并发请求"></a>执行多个并发请求</h1><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-keyword">function</span> <span class="hljs-title">getUserAccount</span>() &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-type">axios.get(&#x27;/user/12345&#x27;)</span>;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title">getUserPermissions</span>() &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-type">axios.get(&#x27;/user/12345/permissions&#x27;)</span>;<br>&#125;<br><br>axios.<span class="hljs-keyword">all</span>([getUserAccount(), getUserPermissions()])<br>  .<span class="hljs-keyword">then</span>(axios.spread(<span class="hljs-keyword">function</span> <span class="hljs-title"></span>(acct, perms) &#123;<br>    // 两个请求现在都执行完成<br>  &#125;));<br></code></pre></td></tr></table></figure><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">axios</span><span class="hljs-selector-class">.all</span>(<br>[<br><span class="hljs-built_in">getuserfn</span>(),<br><span class="hljs-built_in">grtuserfn2</span>()<br>]<br>)<span class="hljs-selector-class">.then</span>(axios.<span class="hljs-built_in">spread</span>(acct,pers)&#123;&#125;)<br></code></pre></td></tr></table></figure><h1 id="创建axios对象"><a href="#创建axios对象" class="headerlink" title="创建axios对象"></a>创建axios对象</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">fetch</span> = axios.<span class="hljs-title function_ invoke__">create</span>(&#123;<br>    // <span class="hljs-attr">baseURL</span>: <span class="hljs-string">&#x27;http://f39bwd.natappfree.cc&#x27;</span>,<br>    <span class="hljs-attr">baseURL</span>: process.env.VUE_APP_API_BASE_URL,<br>    <span class="hljs-attr">timeout</span>: <span class="hljs-number">20000</span>,<br>    <span class="hljs-attr">withCredentials</span>: <span class="hljs-literal">false</span>, //https接口时改为<span class="hljs-literal">true</span><br>&#125;);<br><br></code></pre></td></tr></table></figure><h1 id="Interceptors拦截"><a href="#Interceptors拦截" class="headerlink" title="Interceptors拦截"></a>Interceptors拦截</h1><h2 id="请求拦截器"><a href="#请求拦截器" class="headerlink" title="请求拦截器"></a>请求拦截器</h2><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs lua">fetch.interceptors.request.use((<span class="hljs-built_in">config</span>) =&gt; &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">config</span>.url.indexOf(<span class="hljs-string">&#x27;/login&#x27;</span>) == <span class="hljs-number">-1</span>) &#123;<br>        // <span class="hljs-built_in">config</span>.headers.common.token = <span class="hljs-string">&#x27;Bearer &#x27;</span> + localStorage.getItem(<span class="hljs-string">&quot;token&quot;</span>);<br>        // <span class="hljs-built_in">config</span>.headers.common.token = localStorage.getItem(<span class="hljs-string">&quot;token&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">config</span>;<br>&#125;, err =&gt; Promise.reject(err));<br></code></pre></td></tr></table></figure><p>设置token</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">config<span class="hljs-selector-class">.headers</span><span class="hljs-selector-attr">[<span class="hljs-string">&#x27;Token&#x27;</span>]</span> = <span class="hljs-built_in">getToken</span>()<br></code></pre></td></tr></table></figure><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs stata">service.interceptors.request.<span class="hljs-keyword">use</span>(<br>  config =&gt; &#123;<br>    <span class="hljs-comment">// do something before request is sent</span><br><br>    <span class="hljs-keyword">if</span> (store.getters.<span class="hljs-keyword">token</span>) &#123;<br>      <span class="hljs-comment">// let each request carry token</span><br>      <span class="hljs-comment">// [&#x27;X-Token&#x27;] is a custom headers key</span><br>      <span class="hljs-comment">// please modify it according to the actual situation</span><br>      <span class="hljs-comment">// config.headers[&#x27;X-Token&#x27;] = getToken()</span><br>      config.headers[&#x27;<span class="hljs-keyword">Token</span>&#x27;] = <span class="hljs-keyword">getToken</span>()<br>    &#125;<br>    <span class="hljs-keyword">return</span> config<br>  &#125;,<br>  <span class="hljs-keyword">error</span> =&gt; &#123;<br>    <span class="hljs-comment">// do something with request error</span><br>    console.<span class="hljs-built_in">log</span>(<span class="hljs-keyword">error</span>) <span class="hljs-comment">// for debug</span><br>    <span class="hljs-keyword">return</span> Promise.reject(<span class="hljs-keyword">error</span>)<br>  &#125;<br>)<br></code></pre></td></tr></table></figure><h2 id="响应拦截器"><a href="#响应拦截器" class="headerlink" title="响应拦截器"></a>响应拦截器</h2><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">fetch.interceptors.response.use(<span class="hljs-function"><span class="hljs-params">(response)</span> =&gt;</span> &#123;<br>    const &#123; status, data &#125; = response;<br>    <span class="hljs-keyword">if</span> (status === <span class="hljs-number">200</span>) &#123;<br>        <span class="hljs-keyword">if</span> (data.status != <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-regexp">//</span> count += <span class="hljs-number">1</span><br>            // <span class="hljs-keyword">if</span> (count == <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-regexp">//</span>     MessageBox.confirm(<span class="hljs-string">&#x27;登录失效，请您重新登陆&#x27;</span>, <span class="hljs-string">&#x27;登录失效&#x27;</span>, &#123;<br>            <span class="hljs-regexp">//</span>         confirmButtonText: <span class="hljs-string">&#x27;确定&#x27;</span>,<br>            <span class="hljs-regexp">//</span>         <span class="hljs-regexp">//</span> type: <span class="hljs-string">&#x27;warning&#x27;</span>,<br>            <span class="hljs-regexp">//</span>         showCancelButton: <span class="hljs-literal">false</span>,<br>            <span class="hljs-regexp">//</span>         showClose: <span class="hljs-literal">false</span>,<br>            <span class="hljs-regexp">//</span>         customClass: <span class="hljs-string">&#x27;btn-center&#x27;</span>,<br>            <span class="hljs-regexp">//</span>         closeOnClickModal: <span class="hljs-literal">false</span>, <span class="hljs-regexp">//</span>是否可通过点击遮罩关闭MessageBox<br>            <span class="hljs-regexp">//</span>         closeOnPressEscape: <span class="hljs-literal">false</span>, <span class="hljs-regexp">//</span>是否可通过按下ESC键关闭MessageBox<br>            <span class="hljs-regexp">//</span>         closeOnHashChange: <span class="hljs-literal">false</span> <span class="hljs-regexp">//</span>是否在hashchange时关闭MessageBox<br>            <span class="hljs-regexp">//</span>     &#125;).<span class="hljs-keyword">then</span>(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>            <span class="hljs-regexp">//</span>         window.localStorage.clear()<br>            <span class="hljs-regexp">//</span>         window.location.href = <span class="hljs-string">&#x27;/&#x27;</span><br>            <span class="hljs-regexp">//</span>     &#125;).<span class="hljs-keyword">catch</span>(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br><br>            <span class="hljs-regexp">//</span>     &#125;)<br>            <span class="hljs-regexp">//</span> &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> data;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.reject(data);<br>&#125;, <span class="hljs-function"><span class="hljs-params">(err)</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.reject(err)<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// Add a request interceptor</span><br>axios.<span class="hljs-property">interceptors</span>.<span class="hljs-property">request</span>.<span class="hljs-title function_">use</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">config</span>) &#123;<br>    <span class="hljs-comment">// Do something before request is sent</span><br>    <span class="hljs-keyword">return</span> config;<br>  &#125;, <span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) &#123;<br>    <span class="hljs-comment">// Do something with request error</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(error);<br>  &#125;);<br><br><span class="hljs-comment">// Add a response interceptor</span><br>axios.<span class="hljs-property">interceptors</span>.<span class="hljs-property">response</span>.<span class="hljs-title function_">use</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) &#123;<br>    <span class="hljs-comment">// Any status code that lie within the range of 2xx cause this function to trigger</span><br>    <span class="hljs-comment">// Do something with response data</span><br>    <span class="hljs-keyword">return</span> response;<br>  &#125;, <span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) &#123;<br>    <span class="hljs-comment">// Any status codes that falls outside the range of 2xx cause this function to trigger</span><br>    <span class="hljs-comment">// Do something with response error</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(error);<br><br><br><span class="hljs-keyword">let</span> res = response.<span class="hljs-property">data</span>;<br><span class="hljs-keyword">if</span>(res.<span class="hljs-property">status</span> == <span class="hljs-number">0</span>)&#123;<br>成功时<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(res.<span class="hljs-property">status</span> == <span class="hljs-number">10</span>)&#123;<br>未登录时<br><span class="hljs-variable language_">window</span>.<span class="hljs-property">localtion</span>.<span class="hljs-property">href</span> == <span class="hljs-string">&#x27;登录页&#x27;</span><br>&#125;<br>  &#125;);<br></code></pre></td></tr></table></figure><h1 id="axios配置"><a href="#axios配置" class="headerlink" title="axios配置"></a>axios配置</h1><p>axios.defaults.baseURL &#x3D; ‘&#x2F;api’</p><p>超时axios.defaults.timeout &#x3D; 8000</p><h1 id="拦截Interceptors"><a href="#拦截Interceptors" class="headerlink" title="拦截Interceptors"></a>拦截Interceptors</h1><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs fortran">axios.interceptors.response.<span class="hljs-keyword">use</span>(<span class="hljs-function"><span class="hljs-keyword">function</span></span> (response) &#123;<br>let res = response.<span class="hljs-keyword">data</span>;<br><span class="hljs-keyword">if</span>(res.<span class="hljs-keyword">status</span> == <span class="hljs-number">0</span>)&#123;<br>成功时<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(res.<span class="hljs-keyword">status</span> == <span class="hljs-number">10</span>)&#123;<br>未登录时<br>window.localtion.href == <span class="hljs-string">&#x27;登录页&#x27;</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">https</span>:<span class="hljs-comment">//www.cnblogs.com/zhouyangla/p/6753673.html</span><br><br>下载<br>$ npm install axios<br><br>引入<br><span class="hljs-comment">//main.js</span><br><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">$http</span> = axios<br></code></pre></td></tr></table></figure><p>axiosAPI和普通调用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs php">引入封装好的axios<br>import &#123; axios &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/request&#x27;</span><br><br><br><br>axioxAPI   get<br>export <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">tTaskBaseInfo</span>(<span class="hljs-params">parameter</span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">axios</span>(&#123;<br>        <span class="hljs-attr">url</span>:<span class="hljs-string">&#x27;/backend/zz-event/eventTypeAnalysis&#x27;</span>,<br>        <span class="hljs-attr">method</span>:<span class="hljs-string">&#x27;get&#x27;</span>,<br>        <span class="hljs-attr">params</span>:parameter<br>    &#125;)<br>&#125;<br><br><br>axioxAPI   post<br> export <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">tTaskBaseInfopost</span>(<span class="hljs-params">parameter</span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">axios</span>(&#123;<br>        <span class="hljs-attr">url</span>:<span class="hljs-string">&#x27;/backend/zz-event/eventTypeAnalysis&#x27;</span>,<br>        <span class="hljs-attr">method</span>:<span class="hljs-string">&#x27;post&#x27;</span>,<br>        <span class="hljs-attr">data</span>:parameter<br>    &#125;)<br>&#125;<br><br><br>axios  普通调用<br>export <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">tTaskBaseInfo</span>(<span class="hljs-params">parameter</span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> axios.<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-string">&#x27;/backend/zz-event/eventTypeAnalysis&#x27;</span>, &#123;<br>        <span class="hljs-attr">params</span>: parameter<br>      &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="vue-axios-post请求后台收不到问题（需要把数据转FormData格式"><a href="#vue-axios-post请求后台收不到问题（需要把数据转FormData格式" class="headerlink" title="vue axios post请求后台收不到问题（需要把数据转FormData格式"></a>vue axios post请求后台收不到问题（需要把数据转FormData格式</h1><h2 id="方法1-request拦截"><a href="#方法1-request拦截" class="headerlink" title="方法1   request拦截"></a>方法1   request拦截</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">service.interceptors.request.use(config =&gt; &#123;<br>    <span class="hljs-comment">// const token = Vue.ls.get(ACCESS_TOKEN)</span><br>    <span class="hljs-comment">// if (token) &#123;</span><br>    <span class="hljs-comment">//     config.headers[&#x27;Authorization&#x27;] = &#x27;Bearer &#x27; + token</span><br>    <span class="hljs-comment">// &#125;</span><br>    console.log(<span class="hljs-string">&#x27;config&#x27;</span>, config);<br>    <span class="hljs-keyword">if</span> (config.method == <span class="hljs-string">&#x27;post&#x27;</span>) &#123;<br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">data</span> = JSON.parse(JSON.stringify(config.<span class="hljs-keyword">data</span>));<br>        <span class="hljs-keyword">const</span> formData = new FormData()<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i <span class="hljs-keyword">in</span> <span class="hljs-keyword">data</span>) &#123;<br>            formData.append(i, <span class="hljs-keyword">data</span>[i])<br>        &#125;<br>        config.<span class="hljs-keyword">data</span> = formData<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> config<br>&#125;, err)<br><br></code></pre></td></tr></table></figure><h2 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h2><p>import qs from ‘query-string’; </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript">axios.<span class="hljs-property">interceptors</span>.<span class="hljs-property">request</span>.<span class="hljs-title function_">use</span>(<br>  <span class="hljs-function">(<span class="hljs-params">config: AxiosRequestConfig</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// let each request carry token</span><br>    <span class="hljs-comment">// this example using the JWT token</span><br>    <span class="hljs-comment">// Authorization is a custom headers key</span><br>    <span class="hljs-comment">// please modify it according to the actual situation</span><br>    <span class="hljs-keyword">const</span> token = <span class="hljs-title function_">getToken</span>();<br>    <span class="hljs-keyword">if</span> (token) &#123;<br>      <span class="hljs-keyword">if</span> (!config.<span class="hljs-property">headers</span>) &#123;<br>        config.<span class="hljs-property">headers</span> = &#123;&#125;;<br>      &#125;<br>      config.<span class="hljs-property">headers</span>.<span class="hljs-property">Authorization</span> = <span class="hljs-string">`Bearer <span class="hljs-subst">$&#123;token&#125;</span>`</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (config.<span class="hljs-property">method</span> == <span class="hljs-string">&#x27;post&#x27;</span>) &#123;<br>      config.<span class="hljs-property">data</span> = qs.<span class="hljs-title function_">stringify</span>(config.<span class="hljs-property">data</span>);<br>    &#125;<br><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;config&#x27;</span>, config);<br><br>    <span class="hljs-keyword">return</span> config;<br>  &#125;,<br>  <span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// do something</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(error);<br>  &#125;<br>);<br></code></pre></td></tr></table></figure><h1 id="axios极简封装案例"><a href="#axios极简封装案例" class="headerlink" title="axios极简封装案例"></a>axios极简封装案例</h1><h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-class">.env</span><span class="hljs-selector-class">.development</span>   文件<br>NODE_ENV = <span class="hljs-string">&#x27;development&#x27;</span><br>VUE_APP_MODE = <span class="hljs-string">&#x27;development&#x27;</span><br>VUE_APP_DIR = <span class="hljs-string">&#x27;dist&#x27;</span><br>VUE_APP_API_BASE_URL=<span class="hljs-string">&#x27;http://lfywl.natapp4.cc&#x27;</span><br><br><span class="hljs-selector-class">.env</span><span class="hljs-selector-class">.production</span>   文件<br>NODE_ENV = <span class="hljs-string">&#x27;production&#x27;</span><br>VUE_APP_MODE = <span class="hljs-string">&#x27;production&#x27;</span> <br>VUE_APP_DIR = <span class="hljs-string">&#x27;dist&#x27;</span><br>VUE_APP_API_BASE_URL=<span class="hljs-string">&#x27;http://lfywl.natapp4.cc&#x27;</span><br><br><span class="hljs-selector-class">.env</span><span class="hljs-selector-class">.test</span>  文件<br>NODE_ENV = <span class="hljs-string">&#x27;test&#x27;</span> <span class="hljs-comment">//模式</span><br>VUE_APP_MODE = <span class="hljs-string">&#x27;test&#x27;</span> <span class="hljs-comment">//通过VUE_APP_MODE变量来区分环境</span><br>VUE_APP_DIR = <span class="hljs-string">&#x27;dist&#x27;</span><br>VUE_APP_URL = <span class="hljs-string">&#x27;http://&#x27;</span> <span class="hljs-comment">//测试环境对应的后端接口</span><br>VUE_APP_API_BASE_URL=<span class="hljs-string">&#x27;http://lfywl.natapp4.cc&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="封装案例"><a href="#封装案例" class="headerlink" title="封装案例"></a>封装案例</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span><br><span class="hljs-keyword">import</span> &#123; message, <span class="hljs-title class_">Modal</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;ant-design-vue&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; getToken &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/auth&#x27;</span><br><span class="hljs-keyword">import</span> errorCode <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/errorCode&#x27;</span><br><span class="hljs-keyword">import</span> &#123; tansParams, blobValidate &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/ruoyi&#x27;</span><br><span class="hljs-keyword">import</span> cache <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/cache&#x27;</span><br><span class="hljs-keyword">import</span> &#123; saveAs &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;file-saver&#x27;</span><br><span class="hljs-keyword">import</span> useUserStore <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/store/modules/user&#x27;</span><br><br><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/store&quot;</span>;<br><br><span class="hljs-keyword">let</span> downloadLoadingInstance;<br><span class="hljs-comment">// 是否显示重新登录</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">let</span> isReLogin = &#123; <span class="hljs-attr">show</span>: <span class="hljs-literal">false</span> &#125;;<br><br>axios.<span class="hljs-property">defaults</span>.<span class="hljs-property">headers</span>[<span class="hljs-string">&#x27;Content-Type&#x27;</span>] = <span class="hljs-string">&#x27;application/json;charset=utf-8&#x27;</span><br>    <span class="hljs-comment">// 创建axios实例</span><br><span class="hljs-keyword">const</span> service = axios.<span class="hljs-title function_">create</span>(&#123;<br>    <span class="hljs-comment">// axios中请求配置有baseURL选项，表示请求URL公共部分</span><br>    <span class="hljs-comment">// baseURL: import.meta.env.VITE_APP_BASE_API,</span><br>    <span class="hljs-attr">baseURL</span>: process.<span class="hljs-property">env</span>.<span class="hljs-property">VUE_APP_BASE_API</span>,<br>    <span class="hljs-comment">// 超时</span><br>    <span class="hljs-attr">timeout</span>: <span class="hljs-number">10000</span><br>&#125;)<br><br><span class="hljs-comment">// request拦截器</span><br>service.<span class="hljs-property">interceptors</span>.<span class="hljs-property">request</span>.<span class="hljs-title function_">use</span>(<span class="hljs-function"><span class="hljs-params">config</span> =&gt;</span> &#123;<br>    <span class="hljs-comment">// 是否需要设置 token</span><br>    <span class="hljs-keyword">const</span> isToken = (config.<span class="hljs-property">headers</span> || &#123;&#125;).<span class="hljs-property">isToken</span> === <span class="hljs-literal">false</span><br>        <span class="hljs-comment">// 是否需要防止数据重复提交</span><br>    <span class="hljs-keyword">const</span> isRepeatSubmit = (config.<span class="hljs-property">headers</span> || &#123;&#125;).<span class="hljs-property">repeatSubmit</span> === <span class="hljs-literal">false</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_">getToken</span>() &amp;&amp; !isToken) &#123;<br>        config.<span class="hljs-property">headers</span>[<span class="hljs-string">&#x27;Authorization&#x27;</span>] = <span class="hljs-string">&#x27;Bearer &#x27;</span> + <span class="hljs-title function_">getToken</span>() <span class="hljs-comment">// 让每个请求携带自定义token 请根据实际情况自行修改</span><br>    &#125;<br>    <span class="hljs-comment">// get请求映射params参数</span><br>    <span class="hljs-keyword">if</span> (config.<span class="hljs-property">method</span> === <span class="hljs-string">&#x27;get&#x27;</span> &amp;&amp; config.<span class="hljs-property">params</span>) &#123;<br>        <span class="hljs-keyword">let</span> url = config.<span class="hljs-property">url</span> + <span class="hljs-string">&#x27;?&#x27;</span> + <span class="hljs-title function_">tansParams</span>(config.<span class="hljs-property">params</span>);<br>        url = url.<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>, -<span class="hljs-number">1</span>);<br>        config.<span class="hljs-property">params</span> = &#123;&#125;;<br>        config.<span class="hljs-property">url</span> = url;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (!isRepeatSubmit &amp;&amp; (config.<span class="hljs-property">method</span> === <span class="hljs-string">&#x27;post&#x27;</span> || config.<span class="hljs-property">method</span> === <span class="hljs-string">&#x27;put&#x27;</span>)) &#123;<br>        <span class="hljs-keyword">const</span> requestObj = &#123;<br>            <span class="hljs-attr">url</span>: config.<span class="hljs-property">url</span>,<br>            <span class="hljs-attr">data</span>: <span class="hljs-keyword">typeof</span> config.<span class="hljs-property">data</span> === <span class="hljs-string">&#x27;object&#x27;</span> ? <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(config.<span class="hljs-property">data</span>) : config.<span class="hljs-property">data</span>,<br>            <span class="hljs-attr">time</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">getTime</span>()<br>        &#125;<br>        <span class="hljs-keyword">const</span> sessionObj = cache.<span class="hljs-property">session</span>.<span class="hljs-title function_">getJSON</span>(<span class="hljs-string">&#x27;sessionObj&#x27;</span>)<br>        <span class="hljs-keyword">if</span> (sessionObj === <span class="hljs-literal">undefined</span> || sessionObj === <span class="hljs-literal">null</span> || sessionObj === <span class="hljs-string">&#x27;&#x27;</span>) &#123;<br>            cache.<span class="hljs-property">session</span>.<span class="hljs-title function_">setJSON</span>(<span class="hljs-string">&#x27;sessionObj&#x27;</span>, requestObj)<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">const</span> s_url = sessionObj.<span class="hljs-property">url</span>; <span class="hljs-comment">// 请求地址</span><br>            <span class="hljs-keyword">const</span> s_data = sessionObj.<span class="hljs-property">data</span>; <span class="hljs-comment">// 请求数据</span><br>            <span class="hljs-keyword">const</span> s_time = sessionObj.<span class="hljs-property">time</span>; <span class="hljs-comment">// 请求时间</span><br>            <span class="hljs-keyword">const</span> interval = <span class="hljs-number">1000</span>; <span class="hljs-comment">// 间隔时间(ms)，小于此时间视为重复提交</span><br>            <span class="hljs-keyword">if</span> (s_data === requestObj.<span class="hljs-property">data</span> &amp;&amp; requestObj.<span class="hljs-property">time</span> - s_time &lt; interval &amp;&amp; s_url === requestObj.<span class="hljs-property">url</span>) &#123;<br>                <span class="hljs-keyword">const</span> message = <span class="hljs-string">&#x27;数据正在处理，请勿重复提交&#x27;</span>;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">warn</span>(<span class="hljs-string">`[<span class="hljs-subst">$&#123;s_url&#125;</span>]: `</span> + message)<br>                <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(message))<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                cache.<span class="hljs-property">session</span>.<span class="hljs-title function_">setJSON</span>(<span class="hljs-string">&#x27;sessionObj&#x27;</span>, requestObj)<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> config<br>&#125;, <span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;<br>    <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(error)<br>&#125;)<br><br><span class="hljs-comment">// 响应拦截器</span><br>service.<span class="hljs-property">interceptors</span>.<span class="hljs-property">response</span>.<span class="hljs-title function_">use</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>        <span class="hljs-comment">// 未设置状态码则默认成功状态</span><br>        <span class="hljs-keyword">const</span> code = res.<span class="hljs-property">data</span>.<span class="hljs-property">code</span> || <span class="hljs-number">200</span>;<br>        <span class="hljs-comment">// 获取错误信息</span><br>        <span class="hljs-keyword">const</span> msg = errorCode[code] || res.<span class="hljs-property">data</span>.<span class="hljs-property">msg</span> || errorCode[<span class="hljs-string">&#x27;default&#x27;</span>]<br>            <span class="hljs-comment">// 二进制数据则直接返回</span><br>        <span class="hljs-keyword">if</span> (res.<span class="hljs-property">request</span>.<span class="hljs-property">responseType</span> === <span class="hljs-string">&#x27;blob&#x27;</span> || res.<span class="hljs-property">request</span>.<span class="hljs-property">responseType</span> === <span class="hljs-string">&#x27;arraybuffer&#x27;</span>) &#123;<br>            <span class="hljs-keyword">return</span> res.<span class="hljs-property">data</span><br>        &#125;<br>        <span class="hljs-keyword">if</span> (code === <span class="hljs-number">401</span>) &#123;<br>            <span class="hljs-keyword">if</span> (!isReLogin.<span class="hljs-property">show</span>) &#123;<br>                isReLogin.<span class="hljs-property">show</span> = <span class="hljs-literal">true</span>;<br>                <span class="hljs-title class_">Modal</span>.<span class="hljs-title function_">confirm</span>(&#123;<br>                    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;系统提示&#x27;</span>,<br>                    <span class="hljs-attr">content</span>: <span class="hljs-string">&#x27;登录状态已过期，您可以继续留在该页面，或者重新登录&#x27;</span>,<br>                    <span class="hljs-attr">cancelButtonProps</span>: &#123;<span class="hljs-attr">style</span>: &#123;<span class="hljs-attr">display</span>: <span class="hljs-string">&#x27;none&#x27;</span>&#125;&#125;,<br>                    <span class="hljs-title function_">onOk</span>(<span class="hljs-params"></span>) &#123;<br>                        isReLogin.<span class="hljs-property">show</span> = <span class="hljs-literal">false</span>;<br>                        <span class="hljs-comment">// useUserStore().logOut().then(() =&gt; &#123;</span><br>                        <span class="hljs-comment">//     location.href = &#x27;/&#x27;;</span><br>                        <span class="hljs-comment">// &#125;)</span><br>                        store.<span class="hljs-title function_">dispatch</span>(<span class="hljs-string">&#x27;user/logOut&#x27;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>                            location.<span class="hljs-property">href</span> = <span class="hljs-string">&#x27;/&#x27;</span>;<br>                        &#125;)<br>                    &#125;,<br>                    <span class="hljs-title function_">onCancel</span>(<span class="hljs-params"></span>) &#123;<br>                        isReLogin.<span class="hljs-property">show</span> = <span class="hljs-literal">false</span>;<br>                    &#125;,<br>                &#125;)<br>            &#125;<br>            <span class="hljs-comment">// return Promise.reject(&#x27;无效的会话，或者会话已过期，请重新登录。&#x27;)</span><br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (code === <span class="hljs-number">402</span>) &#123;<br>            message.<span class="hljs-title function_">error</span>(msg)<br>            <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>                store.<span class="hljs-title function_">dispatch</span>(<span class="hljs-string">&#x27;user/logOut&#x27;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>                    location.<span class="hljs-property">href</span> = <span class="hljs-string">&#x27;/&#x27;</span>;<br>                &#125;)<br>            &#125;,<span class="hljs-number">1000</span>)<br><br>            <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(msg))<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (code === <span class="hljs-number">500</span>) &#123;<br>            message.<span class="hljs-title function_">error</span>(msg)<br>            <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(msg))<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (code !== <span class="hljs-number">200</span>) &#123;<br>            message.<span class="hljs-title function_">error</span>(msg)<br>            <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(<span class="hljs-string">&#x27;error&#x27;</span>)<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(res.<span class="hljs-property">data</span>)<br>        &#125;<br>    &#125;,<br>    <span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;err&#x27;</span> + error)<br>        <span class="hljs-keyword">let</span> msg = error.<span class="hljs-property">message</span>;<br>        <span class="hljs-keyword">if</span> (msg == <span class="hljs-string">&quot;Network Error&quot;</span>) &#123;<br>            msg = <span class="hljs-string">&quot;后端接口连接异常&quot;</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (msg.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&quot;timeout&quot;</span>)) &#123;<br>            msg = <span class="hljs-string">&quot;系统接口请求超时&quot;</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (msg.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&quot;Request failed with status code&quot;</span>)) &#123;<br>            msg = <span class="hljs-string">&quot;系统接口&quot;</span> + msg.<span class="hljs-title function_">substr</span>(msg.<span class="hljs-property">length</span> - <span class="hljs-number">3</span>) + <span class="hljs-string">&quot;异常&quot;</span>;<br>        &#125;<br>        message.<span class="hljs-title function_">error</span>(msg)<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(error)<br>    &#125;<br>)<br><br><span class="hljs-comment">// 通用下载方法</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">download</span>(<span class="hljs-params">url, params, filename</span>) &#123;<br>    downloadLoadingInstance = message.<span class="hljs-title function_">loading</span>(<span class="hljs-string">&#x27;正在下载数据，请稍候&#x27;</span>, <span class="hljs-number">0</span>)<br>        <span class="hljs-comment">// downloadLoadingInstance = ElLoading.service(&#123; text: &quot;正在下载数据，请稍候&quot;, background: &quot;rgba(0, 0, 0, 0.7)&quot;, &#125;)</span><br>    <span class="hljs-keyword">return</span> service.<span class="hljs-title function_">post</span>(url, params, &#123;<br>        <span class="hljs-attr">transformRequest</span>: [<span class="hljs-function">(<span class="hljs-params">params</span>) =&gt;</span> &#123; <span class="hljs-keyword">return</span> <span class="hljs-title function_">tansParams</span>(params) &#125;],<br>        <span class="hljs-attr">headers</span>: &#123; <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/x-www-form-urlencoded&#x27;</span> &#125;,<br>        <span class="hljs-attr">responseType</span>: <span class="hljs-string">&#x27;blob&#x27;</span><br>    &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-title function_">async</span>(data) =&gt; &#123;<br>        <span class="hljs-keyword">const</span> isLogin = <span class="hljs-keyword">await</span> <span class="hljs-title function_">blobValidate</span>(data);<br>        <span class="hljs-keyword">if</span> (isLogin) &#123;<br>            <span class="hljs-keyword">const</span> blob = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Blob</span>([data])<br>            <span class="hljs-title function_">saveAs</span>(blob, filename)<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">const</span> resText = <span class="hljs-keyword">await</span> data.<span class="hljs-title function_">text</span>();<br>            <span class="hljs-keyword">const</span> rspObj = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(resText);<br>            <span class="hljs-keyword">const</span> errMsg = errorCode[rspObj.<span class="hljs-property">code</span>] || rspObj.<span class="hljs-property">msg</span> || errorCode[<span class="hljs-string">&#x27;default&#x27;</span>]<br>            message.<span class="hljs-title function_">error</span>(errMsg);<br>        &#125;<br>        downloadLoadingInstance;<br>    &#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">r</span>) =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(r)<br>        message.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;下载文件出现错误，请联系管理员！&#x27;</span>)<br>        downloadLoadingInstance;<br>    &#125;)<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> service<br><br><br>参考地址<br><span class="hljs-attr">https</span>:<span class="hljs-comment">//blog.csdn.net/ProGrammerXu/article/details/119986102</span><br></code></pre></td></tr></table></figure><h3 id="1fetch-js"><a href="#1fetch-js" class="headerlink" title="1fetch.js"></a>1fetch.js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">MessageBox</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;element-ui&#x27;</span><br><br><span class="hljs-keyword">const</span> fetch = axios.<span class="hljs-title function_">create</span>(&#123;<br>    <span class="hljs-comment">// baseURL: &#x27;http://f39bwd.natappfree.cc&#x27;,</span><br>    <span class="hljs-attr">baseURL</span>: process.<span class="hljs-property">env</span>.<span class="hljs-property">VUE_APP_API_BASE_URL</span>,<br>    <span class="hljs-attr">timeout</span>: <span class="hljs-number">20000</span>,<br>    <span class="hljs-attr">withCredentials</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">//https接口时改为true</span><br>&#125;);<br><br><span class="hljs-keyword">var</span> count = <span class="hljs-number">0</span> <span class="hljs-comment">//控制弹窗只出现一次</span><br>    <span class="hljs-comment">// 请求拦截器</span><br>fetch.<span class="hljs-property">interceptors</span>.<span class="hljs-property">request</span>.<span class="hljs-title function_">use</span>(<span class="hljs-function">(<span class="hljs-params">config</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (config.<span class="hljs-property">url</span>.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;/login&#x27;</span>) == -<span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-comment">// config.headers.common.token = &#x27;Bearer &#x27; + localStorage.getItem(&quot;token&quot;);</span><br>        <span class="hljs-comment">// config.headers.common.token = localStorage.getItem(&quot;token&quot;);</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> config;<br>&#125;, <span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(err));<br><br><span class="hljs-comment">// 响应拦截器</span><br>fetch.<span class="hljs-property">interceptors</span>.<span class="hljs-property">response</span>.<span class="hljs-title function_">use</span>(<span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> &#123; status, data &#125; = response;<br>    <span class="hljs-keyword">if</span> (status === <span class="hljs-number">200</span>) &#123;<br>        <span class="hljs-keyword">if</span> (data.<span class="hljs-property">status</span> != <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-comment">// count += 1</span><br>            <span class="hljs-comment">// if (count == 1) &#123;</span><br>            <span class="hljs-comment">//     MessageBox.confirm(&#x27;登录失效，请您重新登陆&#x27;, &#x27;登录失效&#x27;, &#123;</span><br>            <span class="hljs-comment">//         confirmButtonText: &#x27;确定&#x27;,</span><br>            <span class="hljs-comment">//         // type: &#x27;warning&#x27;,</span><br>            <span class="hljs-comment">//         showCancelButton: false,</span><br>            <span class="hljs-comment">//         showClose: false,</span><br>            <span class="hljs-comment">//         customClass: &#x27;btn-center&#x27;,</span><br>            <span class="hljs-comment">//         closeOnClickModal: false, //是否可通过点击遮罩关闭MessageBox</span><br>            <span class="hljs-comment">//         closeOnPressEscape: false, //是否可通过按下ESC键关闭MessageBox</span><br>            <span class="hljs-comment">//         closeOnHashChange: false //是否在hashchange时关闭MessageBox</span><br>            <span class="hljs-comment">//     &#125;).then(() =&gt; &#123;</span><br>            <span class="hljs-comment">//         window.localStorage.clear()</span><br>            <span class="hljs-comment">//         window.location.href = &#x27;/&#x27;</span><br>            <span class="hljs-comment">//     &#125;).catch(() =&gt; &#123;</span><br><br>            <span class="hljs-comment">//     &#125;)</span><br>            <span class="hljs-comment">// &#125;</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> data;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(data);<br>&#125;, <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(err)<br>&#125;);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> fetch;<br></code></pre></td></tr></table></figure><h3 id="2接口文件-home-js"><a href="#2接口文件-home-js" class="headerlink" title="2接口文件  home.js"></a>2接口文件  home.js</h3><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-keyword">import</span> fetch <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/fetch&#x27;</span><br><br><span class="hljs-regexp">//</span> 获取展示厂内所有项目的TRI状态列表 Project Timing (未完成)<br><span class="hljs-keyword">export</span> const projectTiming = <span class="hljs-function"><span class="hljs-params">(params)</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> fetch(&#123;<br>        url: <span class="hljs-string">&#x27;/timing/getTimingList&#x27;</span>,<br>        method: <span class="hljs-string">&#x27;get&#x27;</span>,<br>        params<br>    &#125;)<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="3引用接口"><a href="#3引用接口" class="headerlink" title="3引用接口"></a>3引用接口</h3><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean"><span class="hljs-keyword">import</span> &#123; projectTiming &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/apis/home&#x27;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>axios</category>
      
    </categories>
    
    
    <tags>
      
      <tag>axios</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ajax技术</title>
    <link href="/2021/06/05/Ajax%E6%8A%80%E6%9C%AF/"/>
    <url>/2021/06/05/Ajax%E6%8A%80%E6%9C%AF/</url>
    
    <content type="html"><![CDATA[<h1 id="Ajax技术"><a href="#Ajax技术" class="headerlink" title="Ajax技术"></a>Ajax技术</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>ajax就是在页面没有刷新或者没有跳转的情况下还能更新页面的某一部分数据</p><ul><li>Ajax:  Asynchronous  javascript  and  xml (异步javascript和xml)。</li><li>&#x3D;&#x3D;Ajax并不是一种新技术，而是已有技术的集合。JavaScript是核心载体&#x3D;&#x3D;。</li><li>Ajax优势：在不刷新页面的情况下，更新页面数据，提升用户体验。</li><li>&#x3D;&#x3D;Ajax就像一个小秘书&#x3D;&#x3D;，能够实现异步工作。</li></ul><h2 id="1-发送Ajax请求-原生方法"><a href="#1-发送Ajax请求-原生方法" class="headerlink" title="1-发送Ajax请求-原生方法"></a>1-发送Ajax请求-原生方法</h2><h3 id="实例化ajax对象"><a href="#实例化ajax对象" class="headerlink" title="实例化ajax对象"></a>实例化ajax对象</h3><p> var xhr &#x3D; new ActiveXObject(‘Msxml2.XMLHTTP’);</p><p> var xhr &#x3D; new XMLHttpRequest();</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-title function_"><span class="hljs-keyword">function</span> <span class="hljs-title">getXhr</span> </span>() &#123;<br>    <span class="hljs-keyword">var</span> xmlhttp;<br><br>    <span class="hljs-keyword">if</span> (window.XMLHttpRequest) &#123;<br>        <span class="hljs-comment">//IE7+ 和 非IE 中都有 XMLHttpRequest对象</span><br>        xmlhttp = <span class="hljs-keyword">new</span> <span class="hljs-type">XMLHttpRequest</span>();<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        xmlhttp = <span class="hljs-keyword">new</span> <span class="hljs-type">ActiveXObject</span>(<span class="hljs-string">&#x27;Msxml2.XMLHTTP&#x27;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> xmlhttp;<br>&#125;<br></code></pre></td></tr></table></figure><p> 创建XMLHTTPRequest对象要分为(低版本) IE和&#x3D;&#x3D;非IE两种方式(主流)&#x3D;&#x3D;：</p><p>   IE浏览器（IE7之前） :  </p><pre><code class="hljs">var xhr = new ActiveXObject(&#39;Msxml2.XMLHTTP&#39;);</code></pre><p>   非IE浏览器（chrome、firefox、safair、搜狗等，包括IE7+之后） (主流浏览器):</p><pre><code class="hljs">var xhr = new XMLHttpRequest();</code></pre><h3 id="核心方法"><a href="#核心方法" class="headerlink" title="核心方法"></a>核心方法</h3><p> open(var1, var2, var3): 准备Ajax请求</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"> var1: 请求方式  <span class="hljs-keyword">get</span>/post<br> var2: 请求的后端程序地址<br> var3: 异步(<span class="hljs-keyword">true</span>)/同步(<span class="hljs-keyword">false</span>)，可选参数，默认为<span class="hljs-keyword">true</span><br><br>示例: xhr.<span class="hljs-keyword">open</span>(‘<span class="hljs-keyword">get</span>’, ‘<span class="hljs-keyword">index</span>.php’);   //准备以<span class="hljs-keyword">get</span>方式请求后端的<span class="hljs-keyword">index</span>.php文件<br></code></pre></td></tr></table></figure><p> send(var): 发送ajax请求</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">var: 分为两种情况。 如果是<span class="hljs-built_in">get</span>请求，则填写<span class="hljs-literal">null</span>。 如果是<span class="hljs-built_in">post</span>请求，则填写要发送到后端的数据。<br> 示例: xhr.<span class="hljs-built_in">send</span>(<span class="hljs-literal">null</span>); <br></code></pre></td></tr></table></figure><h3 id="接收后端响应结果"><a href="#接收后端响应结果" class="headerlink" title="接收后端响应结果"></a>接收后端响应结果</h3><h4 id="核心属性-—-readyState"><a href="#核心属性-—-readyState" class="headerlink" title="核心属性 — readyState"></a>核心属性 — readyState</h4><p>Ajax的整个过程有5个状态，对应readyState的5个值：0-4</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">0 </span>－ （未初始化）还没有调用send()方法 <br><br><span class="hljs-symbol">1 </span>－ （载入）已调用send()方法，正在发送请求 <br><br><span class="hljs-symbol">2 </span>－ （载入完成）send()方法执行完成，已经接收到全部响应内容 <br><br><span class="hljs-symbol">3 </span>－ （交互）正在解析响应内容 <br><br><span class="hljs-symbol">4 </span>－ （完成）响应内容解析完成，可以在客户端调用了 <br></code></pre></td></tr></table></figure><h4 id="核心事件"><a href="#核心事件" class="headerlink" title="核心事件"></a>核心事件</h4><p>onreadystatechange<br>onreadystatechange事件:  readyState的值每次发生变化都会触发该事件。</p><h4 id="其他重要属性"><a href="#其他重要属性" class="headerlink" title="其他重要属性"></a>其他重要属性</h4><p>responseText<br>以字符串形式接收后端程序的返回值。</p><p> 以PHP为例: PHP程序最终会被解释程序一段字符串，responseText接收的就是这段字符串</p><h4 id="响应案例-—-index-php"><a href="#响应案例-—-index-php" class="headerlink" title="响应案例 — index.php"></a>响应案例 — index.php</h4><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">index</span>.php：返回字符串“Hello Ajax”给前端 --- 就是  echo <span class="hljs-string">&quot;Hello Ajax&quot;</span><br><br>   <span class="hljs-keyword">index</span>.html： 将Hello Wrold 显示在页面的<span class="hljs-keyword">div</span>中<br></code></pre></td></tr></table></figure><h3 id="三大步骤"><a href="#三大步骤" class="headerlink" title="三大步骤:"></a>三大步骤:</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs markdown">1) 前端静态页面发送ajax请求。<br><br><span class="hljs-code">      ① 创建 XMLHttpRequest 对象</span><br><span class="hljs-code"></span><br><span class="hljs-code">      ② 调用open方法准备ajax请求</span><br><span class="hljs-code"></span><br><span class="hljs-code">      ③ 调用send方法发送ajax请求</span><br><span class="hljs-code"></span><br><span class="hljs-code">      ④ 调用onreadystatechange事件，判断readyState=4时，使用responseText接收后端返回数据</span><br><span class="hljs-code"></span><br> 2) 后端php页面，处理请求并返回结果<br><br> 3) 前端页面接收结果，显示在网页指定位置<br><br></code></pre></td></tr></table></figure><p>发送请求案例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs javascript"> <span class="hljs-number">1</span>) 创建按钮，绑定点击事件<br><br>  <span class="hljs-number">2</span>) 创建<span class="hljs-title class_">XMLHttpRequest</span>对象<br><br>   <span class="hljs-number">3</span>) 调用open方法准备ajax请求<br><br>   <span class="hljs-number">4</span>) 调用send方法发送ajax请求<br><br><span class="hljs-comment">//1. 获取按钮对象，绑定点击事件</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;btn&#x27;</span>).<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">//2. 请求index.php页面</span><br>    <span class="hljs-comment">//  ① 创建XMLHttpRequest对象</span><br>    <span class="hljs-keyword">var</span> xhr = <span class="hljs-title function_">getXhr</span>();<br><br>    <span class="hljs-comment">//建议将onreadystatechange事件写在实例化XMLHttpRequest对象之后</span><br>    <span class="hljs-comment">//此处可以检测到 readyState=1的状态值</span><br>    xhr.<span class="hljs-property">onreadystatechange</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-comment">//0-1  触发第一次 ，此时readyState = 1</span><br>        <span class="hljs-comment">//1-2  触发第二次 ，此时readyState = 2</span><br>        <span class="hljs-comment">//2-3  触发第三次 ，此时readyState = 3</span><br>        <span class="hljs-comment">//3-4  触发第四次 ，此时readyState = 4</span><br>        <span class="hljs-comment">//alert(xhr.readyState);</span><br>        <span class="hljs-keyword">if</span> (xhr.<span class="hljs-property">readyState</span> == <span class="hljs-number">4</span>) &#123;<br>            <span class="hljs-comment">//以字符串形式接收后端返回值</span><br>            <span class="hljs-title function_">alert</span>(xhr.<span class="hljs-property">responseText</span>);<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-comment">//  ② 调用open方法准备请求</span><br>    xhr.<span class="hljs-title function_">open</span>(<span class="hljs-string">&#x27;get&#x27;</span>, <span class="hljs-string">&#x27;./a.txt&#x27;</span>);<br>    <span class="hljs-comment">//  ③ 调用send方法发送请求</span><br>    xhr.<span class="hljs-title function_">send</span>(<span class="hljs-literal">null</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> div = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;div&#x27;</span>);</span><br><span class="language-javascript">    div.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-comment">// 创建ajax请求</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> xmlhttp = <span class="hljs-number">0</span></span><br><span class="language-javascript">        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">window</span>.<span class="hljs-property">XMLHttpRequest</span>)&#123;</span><br><span class="language-javascript">            xmlhttp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();</span><br><span class="language-javascript">        &#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="language-javascript">            xmlhttp = <span class="hljs-title class_">ActiveXObject</span>(<span class="hljs-string">&#x27;Msxml2&#x27;</span>,<span class="hljs-string">&#x27;XMLHTTP&#x27;</span>);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-comment">// 准备ajax请求</span></span><br><span class="language-javascript">        xmlhttp.<span class="hljs-title function_">open</span>(<span class="hljs-string">&#x27;get&#x27;</span>,<span class="hljs-string">&#x27;ls.php&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-comment">// 发送ajax请求</span></span><br><span class="language-javascript">        xmlhttp.<span class="hljs-title function_">send</span>(<span class="hljs-literal">null</span>);</span><br><span class="language-javascript">        <span class="hljs-comment">// 接受ajax请求</span></span><br><span class="language-javascript">        xmlhttp.<span class="hljs-property">onreadystatechange</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">if</span>(xmlhttp.<span class="hljs-property">readyState</span>==<span class="hljs-number">4</span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(xmlhttp.<span class="hljs-property">responseText</span>);</span><br><span class="language-javascript">            &#125; </span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-comment">// onreadystatechange  准备声明改变</span></span><br><span class="language-javascript">    <span class="hljs-comment">// readyState  准备声明</span></span><br><span class="language-javascript">    <span class="hljs-comment">// respongseText   响应文本</span></span><br><span class="language-javascript">    </span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="虚拟主机配置"><a href="#虚拟主机配置" class="headerlink" title="虚拟主机配置"></a>虚拟主机配置</h2><h3 id="什么是虚拟主机"><a href="#什么是虚拟主机" class="headerlink" title="什么是虚拟主机"></a>什么是虚拟主机</h3><p>虚拟主机，也叫“网站空间”，就是把一台运行在互联网上的物理服务器划分成多个“虚拟”服务器，每一个虚拟服务器都能独立运行一个网站</p><h3 id="虚拟主机配置3步骤"><a href="#虚拟主机配置3步骤" class="headerlink" title="虚拟主机配置3步骤"></a>虚拟主机配置3步骤</h3><p>案例: 配置 <a href="http://www.study.com/">www.study.com</a>  虚拟主机</p><ol><li>修改apache配置文件(httpd.conf)，引入apache的虚拟主机配置文件(httpd-vhost.conf)<br> 去掉该句前的 # 号</li><li>修改虚拟主机配置文件<br> d:\phpstudy\Apache\conf\extra\httpd-vhosts.conf</li><li>修改host文件 (使用管理员权限修改)<br> c:&#x2F;windows&#x2F;system32&#x2F;drivers&#x2F;etc&#x2F;hosts<br>&#x3D;&#x3D;重启Apche服务器&#x3D;&#x3D;‘<br>注意：  <a href="http://www.study.com/">www.study.com</a> 指向  d:&#x2F;phpstudy&#x2F;WWW&#x2F;study 目录</li></ol><h2 id="ajax跨域"><a href="#ajax跨域" class="headerlink" title="ajax跨域"></a>ajax跨域</h2><h3 id="什么是ajax跨域"><a href="#什么是ajax跨域" class="headerlink" title="什么是ajax跨域"></a>什么是ajax跨域</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css">简单来说，就是网站<span class="hljs-selector-tag">A</span>去调用网站<span class="hljs-selector-tag">B</span>的数据。<br>常见案例： hao123<span class="hljs-selector-class">.com</span>的天气预报。<br><br>但是Ajax跨域存在一个问题 --- 浏览器的同源策略，该策略会阻止ajax跨域访问<br>同源策略（Same origin policy）是一种约定，它是浏览器的一种安全功能。 <br>同源:  同协议，同域名，同端口；   不同源则为跨域<br><br></code></pre></td></tr></table></figure><h3 id="解决跨域问题有三种方式："><a href="#解决跨域问题有三种方式：" class="headerlink" title="解决跨域问题有三种方式："></a>解决跨域问题有三种方式：</h3><h4 id="服务器代理"><a href="#服务器代理" class="headerlink" title="服务器代理"></a>服务器代理</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs awk"> 核心思想:  php中有一个函数  ==file_get_contents==。 该函数能够获取到其他网站的数据。<br> file_get_contents(<span class="hljs-string">&#x27;http://www.baidu.com/index.html&#x27;</span>);<br><br><br><span class="hljs-number">1</span>)创建  www.study.com<span class="hljs-regexp">/proxy/i</span>ndex.html<br>在该文件中发送ajax请求，请求同服务器(www.study.com)下的 proxy.php文件<br><br><span class="hljs-number">2</span>)创建  www.study.com<span class="hljs-regexp">/proxy/</span>proxy.php <br>在该文件中使用 file_get_contents函数，读取远程服务器<span class="hljs-number">1</span>.php中的内容<br><br><span class="hljs-number">3</span>)创建  www.demo.com/<span class="hljs-number">1</span>.php<br></code></pre></td></tr></table></figure><h4 id="cors-（跨域资源共享）"><a href="#cors-（跨域资源共享）" class="headerlink" title="cors （跨域资源共享）"></a>cors （跨域资源共享）</h4><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">cors: 跨域资源共享。<br>  同源策略是浏览器的策略。但是如果服务器允许其他网站的页面进行跨域访问，那么浏览器就不会对返回的数据进行限制了。<br>  ==核心方法: 在服务器端(PHP文件中)声明不用进行同源限制==<br>如果设置为 * 则是所有外部网站都可以获取数据<br><span class="hljs-keyword">header</span>(<span class="hljs-string">&#x27;Access-Control-Allow-origin: *&#x27;</span>); <br>只允许www.study.com网站访问并获取数据<br><span class="hljs-keyword">header</span>(<span class="hljs-string">&#x27;Access-Control-Allow-origin: http://www.study.com&#x27;</span>); <br><br><br><br><span class="hljs-number">1</span>)创建 www.study.com/cors/<span class="hljs-keyword">index</span>.html文件 发送ajax请求<br><span class="hljs-number">2</span>)创建 www.demo.com/cors.php<br></code></pre></td></tr></table></figure><h4 id="jsonp"><a href="#jsonp" class="headerlink" title="jsonp"></a>jsonp</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash">核心思想:<br>   浏览器虽然有同源策略，但是 src 和 href 两个属性却可以跨域访问。 可以利用这一“漏洞”发送ajax请求。<br><br>案例: <br>www.study.com/jsonp/index.html文件中通过script标签的src属性，跨域访问www.demo.com/jsonp.php文件中的数据<br>1) 创建 www.study.com/json/index.html ,使用 script标签引入了  www.demo.com/jsonp.php文件<br>2) 创建 www.demo.com/jsonp.php文件 输出个 123<br>3) 调整后台返回数据的方式 --- 返回了一个 ==函数字符串 例如: <span class="hljs-string">&#x27;aaa(123)&#x27;</span>== <br>4) 在前端页面提前定义好 函数 aaa()<br>5) 丰富一下后台返回数据的类型<br><br>html文件<br>&lt;script&gt;<br>    <span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">aa</span></span>()&#123;<br>        alert();<br>    &#125;<br>&lt;/script&gt;<br>&lt;script src=<span class="hljs-string">&quot;http://www.demo.com/1.php&quot;</span>&gt;&lt;/script&gt;<br><br>php文件<br></code></pre></td></tr></table></figure><h3 id="ajax方法跨域操作-—-jsonp方式"><a href="#ajax方法跨域操作-—-jsonp方式" class="headerlink" title="$.ajax方法跨域操作 — jsonp方式"></a>$.ajax方法跨域操作 — jsonp方式</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs php">$.post  $.get $.ajax都能发送跨域请求。但是，$.post和$.get是要依靠cors方式的，只有$.ajax能使用jsonp方式<br><br>核心:<br>必须设置请求类型为get ---  type: ‘get’<br>必须设置dataType为jsonp --- dataType: ‘jsonp’<br>必须额外设置一个jsonp参数，该参数值可以是任何英文字符串，常用callback。 jsonp: <span class="hljs-string">&#x27;callback&#x27;</span><br>       ==该参数会产生一个随机字符串==<br>       ==前端使用该字符串创建一个函数==<br>       ==后端接收该字符串作为返回函数的名称==<br><br>示例:<br><span class="hljs-number">1</span>) 使用jsonp发送跨域请求<br>$.<span class="hljs-title function_ invoke__">ajax</span>(&#123;<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;http://www.study.com/test/3.php&#x27;</span>,<br>    <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;get&#x27;</span>,   <br>    <span class="hljs-attr">dataType</span>: <span class="hljs-string">&#x27;jsonp&#x27;</span>,   <br>    <span class="hljs-attr">jsonp</span>: <span class="hljs-string">&#x27;callback&#x27;</span>,  //解决前后端函数名统一的问题   <br>    <span class="hljs-attr">success</span>: function(msg)&#123;<br>        <span class="hljs-title function_ invoke__">alert</span>(msg);<br>        <span class="hljs-title function_ invoke__">alert</span>(msg.name);<br>    &#125;<br>&#125;)<br><br><span class="hljs-number">2</span>) 后端拼接函数字符串<br><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-comment">// 函数名</span><br><span class="hljs-variable">$callback</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;callback&#x27;</span>];<br><span class="hljs-variable">$str</span> = <span class="hljs-string">&quot;$.ajax---&gt;jsonp&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$callback</span> . <span class="hljs-string">&quot;(&#x27;<span class="hljs-subst">$str</span>&#x27;)&quot;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h3 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h3><p>但是Ajax跨域存在一个问题 — 浏览器的同源策略，该策略会阻止ajax跨域访问</p><p>同源策略（Same origin policy）是一种约定，它是浏览器的一种安全功能。 </p><p>同源:  同协议，同域名，同端口；   不同源则为跨域</p><h2 id="FormData表单对象"><a href="#FormData表单对象" class="headerlink" title="FormData表单对象"></a>FormData表单对象</h2><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">FormData对象优势就是能够一次性将表单中的所有数据全部取出，包括文件域的文件对象。<br><span class="hljs-number">1</span>)创建表单 --- form标签很重要， <span class="hljs-keyword">method</span>和<span class="hljs-title function_">action</span>不重要<br><br>   每个表单域需要设置<span class="hljs-title function_">name</span>值<br>2)发送<span class="hljs-title function_">ajax</span>请求<br><br>①将表单数据取出 --- <span class="hljs-title function_">FormData</span><br><br><span class="hljs-title function_">i</span>.获取<span class="hljs-title function_">form</span>表单对象:        <span class="hljs-keyword">var</span> fm = document.getElementById(‘mainForm’)<span class="hljs-punctuation">;</span>  <span class="hljs-comment">//DOM对象</span><br><br>ii.实例化FormData对象:  <span class="hljs-keyword">var</span> fd = <span class="hljs-keyword">new</span> FormData(fm)<span class="hljs-punctuation">;</span><br><br>②发送ajax请求<br><br>   使用FormData对象以后，必须使用post方式来发送ajax请求。<br><br>   将FormData对象，作为参数传入 send方法中  xhr.send(fd)<span class="hljs-punctuation">;</span><br><br>③ 使用FormData对象提交表单时，不需要设置 setRequestHeader方法<br><br><br>注意点: <br><br>   ① form标签要给id值，方便获取form标签的DOM对象<br><br>   ② 每个域都要给 name值<br><br>   ③ 提交按钮必须用 button，因为submit有跳转功能<br><br><span class="hljs-number">2</span>) 使用FormData对象获取所有表单的数据，并发送ajax请求<br><span class="hljs-number">3</span>) 在formdata.php页面，接收数据<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Ajax</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ajax</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>chrome调试插件</title>
    <link href="/2021/05/10/chrome%E8%B0%83%E8%AF%95%E6%8F%92%E4%BB%B6/"/>
    <url>/2021/05/10/chrome%E8%B0%83%E8%AF%95%E6%8F%92%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="Vue-js-devtools"><a href="#Vue-js-devtools" class="headerlink" title="Vue.js devtools"></a>Vue.js devtools</h2><p>去google 更多工具  拓展程序 添加Vue.js devtools</p><h3 id="常用调试方法"><a href="#常用调试方法" class="headerlink" title="常用调试方法"></a>常用调试方法</h3><h4 id="console-log"><a href="#console-log" class="headerlink" title="console.log()"></a>console.log()</h4><h4 id="console-error"><a href="#console-error" class="headerlink" title="console.error()"></a>console.error()</h4><h4 id="alert"><a href="#alert" class="headerlink" title="alert()"></a>alert()</h4><h4 id="debugger"><a href="#debugger" class="headerlink" title="debugger"></a>debugger</h4><p>js中debugger 调试</p><p>debugger：停止JS的执行，相当于设置断点。 在JS代码编写的过程中，我们都会通过浏览器的调试模式（F12）来检查代码是否正确，大多数我们都是通过设置断点来进行调试。 打开浏览器按F12：</p><p><img src="http://img-blog.csdnimg.cn/2019120814473932.png"> </p><p>在12行设置断点（鼠标点击12）： </p><p><img src="https://img-blog.csdnimg.cn/2019120814473932.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dsbF93ZWI=,size_16,color_FFFFFF,t_70"></p><p>按F5刷新界面（当前浏览器会执行你设置断点的位置的时候）： </p><p><img src="https://img-blog.csdnimg.cn/20191208144948771.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dsbF93ZWI=,size_16,color_FFFFFF,t_70"></p><p>然后按F10一步一步执行下去，这是我们传统的JS调试方法，但是如果遇见JS代码过多并且杂乱的时候（比如上千行的时候），我们自己找位置设置断点的时候就会发现每次都要向下滑一会儿；要么就ctrl+F查找（可能出现相同的变量等等情况）；或者记住当前代码编写的行数位置，再在浏览器调试模式中滑到相应的位置设置断点，总感觉很烦。</p><p>这个时候我们就可以使用JS中提供的debugger语句：</p><p><img src="https://img-blog.csdnimg.cn/20191208150141359.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dsbF93ZWI=,size_16,color_FFFFFF,t_70"></p><p>按F5刷新： </p><p><img src="https://img-blog.csdnimg.cn/20191208150555983.gif"></p><p>————————————————</p><p>slow 3G</p><p>f12右上角，可以缓慢加载，查看状况</p><p>cdn  引用vue的时候 f12里app.某一项数据</p>]]></content>
    
    
    <categories>
      
      <category>Google</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Google</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>H5C3小功能案例分享</title>
    <link href="/2021/02/11/H5C3%E5%B0%8F%E5%8A%9F%E8%83%BD%E6%A1%88%E4%BE%8B%E5%88%86%E4%BA%AB/"/>
    <url>/2021/02/11/H5C3%E5%B0%8F%E5%8A%9F%E8%83%BD%E6%A1%88%E4%BE%8B%E5%88%86%E4%BA%AB/</url>
    
    <content type="html"><![CDATA[<h2 id="3D切割轮播图案例"><a href="#3D切割轮播图案例" class="headerlink" title="3D切割轮播图案例"></a>3D切割轮播图案例</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;ie=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">body</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    </span><br><span class="language-css">    <span class="hljs-selector-class">.container</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">560px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">        <span class="hljs-comment">/* background: green; */</span></span><br><span class="language-css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">100px</span> auto;</span><br><span class="language-css">        <span class="hljs-comment">/* 视距，体现近大远小的效果 */</span></span><br><span class="language-css">        <span class="hljs-comment">/* 测试代码，不用时可注释 </span></span><br><span class="hljs-comment"><span class="language-css">        perspective: 800px;*/</span></span><br><span class="language-css">        <span class="hljs-attribute">position</span>: relative;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    </span><br><span class="language-css">    <span class="hljs-selector-class">.container</span> <span class="hljs-selector-tag">ul</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">560px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">        <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">        <span class="hljs-attribute">list-style</span>: none;</span><br><span class="language-css">        <span class="hljs-attribute">transform-style</span>: preserve-<span class="hljs-number">3</span>d;</span><br><span class="language-css">        <span class="hljs-comment">/* 调节眼睛看到物体的位置 */</span></span><br><span class="language-css">        <span class="hljs-comment">/* 如不需要旋转注释即可 </span></span><br><span class="hljs-comment"><span class="language-css">        transform: rotateX(-45deg); */</span></span><br><span class="language-css">    &#125;</span><br><span class="language-css">    </span><br><span class="language-css">    <span class="hljs-selector-class">.container</span> <span class="hljs-selector-tag">li</span> &#123;</span><br><span class="language-css">        <span class="hljs-comment">/* 560/5=112 */</span></span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">112px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">position</span>: relative;</span><br><span class="language-css">        <span class="hljs-comment">/* li是2D元素，要变成3D元素 */</span></span><br><span class="language-css">        <span class="hljs-attribute">transform-style</span>: preserve-<span class="hljs-number">3</span>d;</span><br><span class="language-css">        <span class="hljs-attribute">float</span>: left;</span><br><span class="language-css">        <span class="hljs-attribute">transition</span>: all <span class="hljs-number">1s</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    </span><br><span class="language-css">    <span class="hljs-selector-class">.container</span> <span class="hljs-selector-tag">li</span> <span class="hljs-selector-tag">span</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">112px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">        <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">        <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    </span><br><span class="language-css">    <span class="hljs-selector-class">.container</span> <span class="hljs-selector-class">.front</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">background</span>: skyblue;</span><br><span class="language-css">        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateZ</span>(<span class="hljs-number">150px</span>);</span><br><span class="language-css">        <span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">images/q1.jpg</span>) no-repeat;</span><br><span class="language-css">        <span class="hljs-comment">/* 图片需要位移，否则一屏中只出现第一个li，每个宽度都是112</span></span><br><span class="hljs-comment"><span class="language-css">        一张图片有五个面，每个面112px */</span></span><br><span class="language-css">    &#125;</span><br><span class="language-css">    </span><br><span class="language-css">    <span class="hljs-selector-class">.container</span> <span class="hljs-selector-class">.back</span> &#123;</span><br><span class="language-css">        <span class="hljs-comment">/* background: green; */</span></span><br><span class="language-css">        <span class="hljs-comment">/* 一定要向后移动150度后，要顺时针旋转180度，才能在盒子外 */</span></span><br><span class="language-css">        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateZ</span>(-<span class="hljs-number">150px</span>) <span class="hljs-built_in">rotateX</span>(<span class="hljs-number">180deg</span>);</span><br><span class="language-css">        <span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">images/q3.jpg</span>) no-repeat;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    </span><br><span class="language-css">    <span class="hljs-selector-class">.container</span> <span class="hljs-selector-class">.top</span> &#123;</span><br><span class="language-css">        <span class="hljs-comment">/* background: blue; */</span></span><br><span class="language-css">        <span class="hljs-comment">/* 只有往前走，显示内容的面，才能显示到盒子外面 */</span></span><br><span class="language-css">        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateY</span>(-<span class="hljs-number">150px</span>) <span class="hljs-built_in">rotateX</span>(<span class="hljs-number">90deg</span>);</span><br><span class="language-css">        <span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">images/q2.jpg</span>) no-repeat;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    </span><br><span class="language-css">    <span class="hljs-selector-class">.container</span> <span class="hljs-selector-class">.bottom</span> &#123;</span><br><span class="language-css">        <span class="hljs-comment">/* background: yellow; */</span></span><br><span class="language-css">        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateY</span>(<span class="hljs-number">150px</span>) <span class="hljs-built_in">rotateX</span>(-<span class="hljs-number">90deg</span>);</span><br><span class="language-css">        <span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">images/q4.jpg</span>) no-repeat;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-comment">/* 第一张立方体的4个面都是0所以不用调 */</span></span><br><span class="language-css">    <span class="hljs-comment">/* 每一个立方体的四个面背景图片的位置信息都是一样的，所以就可统一设置 */</span></span><br><span class="language-css">    <span class="hljs-comment">/* 从第二个立方体开始就要开始调位置 */</span></span><br><span class="language-css">    <span class="hljs-comment">/* 要选择第二个li里的span */</span></span><br><span class="language-css">    <span class="hljs-comment">/* 5个立方体的背景位置都是一样的 */</span></span><br><span class="language-css">    </span><br><span class="language-css">    <span class="hljs-selector-class">.container</span> <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">2</span>) <span class="hljs-selector-tag">span</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">background-position</span>: -<span class="hljs-number">112px</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    </span><br><span class="language-css">    <span class="hljs-selector-class">.container</span> <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">3</span>) <span class="hljs-selector-tag">span</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">background-position</span>: -<span class="hljs-number">224px</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    </span><br><span class="language-css">    <span class="hljs-selector-class">.container</span> <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">4</span>) <span class="hljs-selector-tag">span</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">background-position</span>: -<span class="hljs-number">336px</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    </span><br><span class="language-css">    <span class="hljs-selector-class">.container</span> <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">5</span>) <span class="hljs-selector-tag">span</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">background-position</span>: -<span class="hljs-number">448px</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    </span><br><span class="language-css">    <span class="hljs-selector-class">.btn</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">50px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">        <span class="hljs-attribute">top</span>: <span class="hljs-number">50%</span>;</span><br><span class="language-css">        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateY</span>(-<span class="hljs-number">50%</span>);</span><br><span class="language-css">        <span class="hljs-attribute">background</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">25</span>, <span class="hljs-number">25</span>, <span class="hljs-number">25</span>, <span class="hljs-number">0.5</span>);</span><br><span class="language-css">        <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;</span><br><span class="language-css">        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">40px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">line-height</span>: <span class="hljs-number">50px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">        <span class="hljs-comment">/* 去除文本的下划线 */</span></span><br><span class="language-css">        <span class="hljs-attribute">text-decoration</span>: none;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    </span><br><span class="language-css">    <span class="hljs-selector-class">.prev</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    </span><br><span class="language-css">    <span class="hljs-selector-class">.next</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- container用来做布局的 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- ul是5个小立方体组成的大立方体 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- li是大立方体中小立方体 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-comment">&lt;!-- span是行级元素，每个面默认情况下重叠，设置成定位了，就有了个块级元素的特性 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;front&quot;</span>&gt;</span>前<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;back&quot;</span>&gt;</span>后<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;top&quot;</span>&gt;</span>上<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bottom&quot;</span>&gt;</span>下<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;front&quot;</span>&gt;</span>前<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;back&quot;</span>&gt;</span>后<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;top&quot;</span>&gt;</span>上<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bottom&quot;</span>&gt;</span>下<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;front&quot;</span>&gt;</span>前<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;back&quot;</span>&gt;</span>后<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;top&quot;</span>&gt;</span>上<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bottom&quot;</span>&gt;</span>下<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;front&quot;</span>&gt;</span>前<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;back&quot;</span>&gt;</span>后<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;top&quot;</span>&gt;</span>上<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bottom&quot;</span>&gt;</span>下<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;front&quot;</span>&gt;</span>前<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;back&quot;</span>&gt;</span>后<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;top&quot;</span>&gt;</span>上<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bottom&quot;</span>&gt;</span>下<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- javascript:;阻止a标签跳转 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:;&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn prev&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;prev&quot;</span>&gt;</span><span class="hljs-symbol">&amp;lt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:;&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn next&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;next&quot;</span>&gt;</span><span class="hljs-symbol">&amp;gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> next = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;next&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> prev = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;prev&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> smallBox = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;li&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-comment">// 图片索引</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> index = <span class="hljs-number">0</span>;</span><br><span class="language-javascript">        <span class="hljs-comment">// 默认没有处于运动状态</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> flag = <span class="hljs-literal">false</span>;</span><br><span class="language-javascript">        <span class="hljs-comment">// 当点击下一个按钮的时候</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">        next.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// flag，阻止连续点击轮播按钮时，单击一次右键时来回切换的诡异事件，</span></span><br><span class="language-javascript">            <span class="hljs-keyword">if</span> (flag == <span class="hljs-literal">false</span>) &#123;</span><br><span class="language-javascript">                flag = <span class="hljs-literal">true</span>;</span><br><span class="language-javascript">                <span class="hljs-comment">// 在旋转的过程中，每一个li的旋转角度一定要一样</span></span><br><span class="language-javascript">                index++;</span><br><span class="language-javascript">                <span class="hljs-comment">// 在for循环执行第一次时已经获取到， 所以在下一次执行的时候则会节省性能</span></span><br><span class="language-javascript">                <span class="hljs-comment">//    循环所有的立方体，</span></span><br><span class="language-javascript">                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>, len = smallBox.<span class="hljs-property">length</span>; i &lt; len; i++) &#123;</span><br><span class="language-javascript">                    <span class="hljs-comment">// 让立方体旋转，所以rotateX不能写死，否则只旋转一次</span></span><br><span class="language-javascript">                    <span class="hljs-comment">// 所以需要加上index++</span></span><br><span class="language-javascript">                    <span class="hljs-comment">// 此处 -index指的是就是-90度，</span></span><br><span class="language-javascript">                    smallBox[i].<span class="hljs-property">style</span>.<span class="hljs-property">transform</span> = <span class="hljs-string">&#x27;rotateX(&#x27;</span> + index * -<span class="hljs-number">90</span> + <span class="hljs-string">&#x27;deg)&#x27;</span>;</span><br><span class="language-javascript">                    <span class="hljs-comment">// 让每一个立方体依次延迟旋转</span></span><br><span class="language-javascript">                    smallBox[i].<span class="hljs-property">style</span>.<span class="hljs-property">transitionDelay</span> = i * <span class="hljs-number">0.2</span> + <span class="hljs-string">&#x27;s&#x27;</span>;</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">                <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                    flag = <span class="hljs-literal">false</span>;</span><br><span class="language-javascript">                    <span class="hljs-comment">// 最后一次延迟的时间是1.2s，最后一次的运动时间1s</span></span><br><span class="language-javascript">                    <span class="hljs-comment">// 则1.2+1s=2.2(2200)加上这次的运动时间</span></span><br><span class="language-javascript">                &#125;, <span class="hljs-number">2200</span>)</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;;</span><br><span class="language-javascript">        prev.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">if</span> (flag == <span class="hljs-literal">false</span>) &#123;</span><br><span class="language-javascript">                flag = <span class="hljs-literal">true</span>;</span><br><span class="language-javascript">                index--;</span><br><span class="language-javascript">                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>, len = smallBox.<span class="hljs-property">length</span>; i &lt; len; i++) &#123;</span><br><span class="language-javascript">                    smallBox[i].<span class="hljs-property">style</span>.<span class="hljs-property">transform</span> = <span class="hljs-string">&#x27;rotateX(&#x27;</span> + index * -<span class="hljs-number">90</span> + <span class="hljs-string">&#x27;deg)&#x27;</span>;</span><br><span class="language-javascript">                    smallBox[i].<span class="hljs-property">style</span>.<span class="hljs-property">transitionDelay</span> = i * <span class="hljs-number">0.2</span> + <span class="hljs-string">&#x27;s&#x27;</span>;</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">                <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                    flag = <span class="hljs-literal">false</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript">                &#125;, <span class="hljs-number">2200</span>)</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="立方体案例"><a href="#立方体案例" class="headerlink" title="立方体案例"></a>立方体案例</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;ie=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">body</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    </span><br><span class="language-css">    <span class="hljs-selector-class">.hello</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid red;</span><br><span class="language-css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">100px</span> auto;</span><br><span class="language-css">        <span class="hljs-attribute">perspective</span>: <span class="hljs-number">800px</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    </span><br><span class="language-css">    <span class="hljs-selector-class">.container</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">100px</span> auto;</span><br><span class="language-css">        <span class="hljs-attribute">background</span>: red;</span><br><span class="language-css">        <span class="hljs-attribute">position</span>: relative;</span><br><span class="language-css">        <span class="hljs-comment">/* 使其子元素保留3D空间位置 ,让某一个盒子变成3D的，不再是一个平面*/</span></span><br><span class="language-css">        <span class="hljs-attribute">transform-style</span>: preserve-<span class="hljs-number">3</span>d;</span><br><span class="language-css">        <span class="hljs-comment">/* 旋转45度 */</span></span><br><span class="language-css">        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotateY</span>(-<span class="hljs-number">45deg</span>) <span class="hljs-built_in">rotateX</span>(-<span class="hljs-number">20deg</span>);</span><br><span class="language-css">        <span class="hljs-comment">/* 如果不设置perspective，则看不到这个近大远小效果 */</span></span><br><span class="language-css">        <span class="hljs-comment">/* perspective: 800px; */</span></span><br><span class="language-css">    &#125;</span><br><span class="language-css">    </span><br><span class="language-css">    <span class="hljs-selector-class">.box</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">background</span>: green;</span><br><span class="language-css">        <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">        <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">        <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-comment">/* 默认情况下，所有的面在3D空间的中间位置， */</span></span><br><span class="language-css">    </span><br><span class="language-css">    <span class="hljs-selector-class">.front</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">background</span>: red;</span><br><span class="language-css">        <span class="hljs-comment">/* 前面的盒子往前走了100px; */</span></span><br><span class="language-css">        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateZ</span>(<span class="hljs-number">100px</span>);</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    </span><br><span class="language-css">    <span class="hljs-selector-class">.back</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">background</span>: green;</span><br><span class="language-css">        <span class="hljs-comment">/* 后面的盒子往后走了-100px，但是面在立方体里，</span></span><br><span class="hljs-comment"><span class="language-css">        要沿着X轴顺时针旋转180度，在盒子外面 */</span></span><br><span class="language-css">        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateZ</span>(-<span class="hljs-number">100px</span>) <span class="hljs-built_in">rotateX</span>(<span class="hljs-number">180deg</span>);</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    </span><br><span class="language-css">    <span class="hljs-selector-class">.top</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">background</span>: blue;</span><br><span class="language-css">        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateY</span>(-<span class="hljs-number">100px</span>) <span class="hljs-built_in">rotateX</span>(<span class="hljs-number">90deg</span>);</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    </span><br><span class="language-css">    <span class="hljs-selector-class">.bottom</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">background</span>: yellow;</span><br><span class="language-css">        <span class="hljs-comment">/* 逆时针旋转，面冲着外面旋转-90度 */</span></span><br><span class="language-css">        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateY</span>(<span class="hljs-number">100px</span>) <span class="hljs-built_in">rotateX</span>(-<span class="hljs-number">90deg</span>);</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    </span><br><span class="language-css">    <span class="hljs-selector-class">.left</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">background</span>: pink;</span><br><span class="language-css">        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(-<span class="hljs-number">100px</span>) <span class="hljs-built_in">rotateY</span>(-<span class="hljs-number">90deg</span>);</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    </span><br><span class="language-css">    <span class="hljs-selector-class">.right</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">background</span>: purple;</span><br><span class="language-css">        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(<span class="hljs-number">100px</span>) <span class="hljs-built_in">rotateY</span>(<span class="hljs-number">90deg</span>);</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;hello&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 虽然元素处在模拟的3维空间，这是他的一个环境，</span><br><span class="hljs-comment">            container这个盒子本身是一个平面，如果想让盒子为三维 </span><br><span class="hljs-comment">            则需要在container盒子设置transform-style:preserve-3d</span><br><span class="hljs-comment">            （使其子元素保留3D空间位置） --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box front&quot;</span>&gt;</span>front<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box back&quot;</span>&gt;</span>back<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box top&quot;</span>&gt;</span>top<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box bottom&quot;</span>&gt;</span>bottom<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box left&quot;</span>&gt;</span>left<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box right&quot;</span>&gt;</span>right<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="滚屏页面制作原理"><a href="#滚屏页面制作原理" class="headerlink" title="滚屏页面制作原理"></a>滚屏页面制作原理</h2><h3 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h3><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mel"><span class="hljs-number">1.</span> 当滑动鼠标滚轮的时候，需要每一屏最外层的盒子滚动 <br><span class="hljs-number">2.</span> 每一屏的高度需要是浏览器的可视区高度，高度是<span class="hljs-number">100</span>%，而<span class="hljs-number">100</span>%是相对单位，相对于父级的高度<br><br>    .page=&gt;#<span class="hljs-keyword">container</span>=&gt;body=&gt;html&#123;height:<span class="hljs-number">100</span>%&#125;<br><br><span class="hljs-number">3.</span>当滚动鼠标滚轮时，实际上需要使#<span class="hljs-keyword">container</span>这个元素进行唯一translateY<br><br>位置计算：-index*一屏的高度<br><br></code></pre></td></tr></table></figure><h3 id="原生滚轮事件"><a href="#原生滚轮事件" class="headerlink" title="原生滚轮事件"></a>原生滚轮事件</h3><h4 id="兼容"><a href="#兼容" class="headerlink" title="兼容"></a>兼容</h4><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pf">在谷歌浏览器中，滚轮事件是 onmousewheel<br>在火狐浏览器中，滚轮 事件是 <span class="hljs-keyword">on</span>DOMMouseScroll <br></code></pre></td></tr></table></figure><h4 id="jQuery提供的滚轮事件"><a href="#jQuery提供的滚轮事件" class="headerlink" title="jQuery提供的滚轮事件"></a>jQuery提供的滚轮事件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml">需要引用jquery.mousewheel.min.js文件 <br>1.1为页面绑定滚轮事件 当鼠标滚动时，不出现滚动条进行滚动 document不加引号，是因为把他转为了jquery对象<br>$(Document).on(&#x27;mousewheel&#x27;,function(event，delta)&#123; event 事件对象 delta 区分滚动方向的参数<br>  console.log() &#125;)<br>2.区分方向 向上滚动delta=&gt;1 <br>    向下滚动 delta=&gt;-1 <br>    $(document).on(&#x27;mousewheel&#x27;,function(event,delta)&#123; if(delta==1)&#123;<br>    <span class="hljs-comment">&lt;!-- 向上滚动 --&gt;</span><br>    &#125;else if(delta==-1)&#123;<br>    <span class="hljs-comment">&lt;!-- 向下滚动 --&gt;</span><br>    &#125; &#125;) 注意： jQuery中animate中不支持transform,<br>自身没有高度和宽度的时候不能使用margin值，被其他子元素撑开也不可以，需要使用transform<br></code></pre></td></tr></table></figure><p>小案例</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/jquery.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/jquery.mousewheel.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-tag">body</span>, <span class="hljs-selector-tag">html</span> &#123;</span><br><span class="language-css"><span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css"><span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css"><span class="hljs-attribute">overflow</span>: hidden;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-id">#container</span> &#123;</span><br><span class="language-css"><span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css"><span class="hljs-attribute">transition</span>: transform .<span class="hljs-number">7s</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-class">.page</span> &#123;</span><br><span class="language-css"><span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-class">.page-1</span> &#123;</span><br><span class="language-css"><span class="hljs-attribute">background</span>: skyblue;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-class">.page-2</span> &#123;</span><br><span class="language-css"><span class="hljs-attribute">background</span>: pink;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-class">.page-3</span> &#123;</span><br><span class="language-css"><span class="hljs-attribute">background</span>: green;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-id">#point</span> &#123;</span><br><span class="language-css"><span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css"><span class="hljs-attribute">right</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css"><span class="hljs-attribute">top</span>: <span class="hljs-number">50%</span>;</span><br><span class="language-css"><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateY</span>(-<span class="hljs-number">50%</span>);</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-id">#point</span> <span class="hljs-selector-tag">span</span> &#123;</span><br><span class="language-css"><span class="hljs-attribute">width</span>: <span class="hljs-number">15px</span>;</span><br><span class="language-css"><span class="hljs-attribute">height</span>: <span class="hljs-number">15px</span>;</span><br><span class="language-css"><span class="hljs-attribute">display</span>: block;</span><br><span class="language-css"><span class="hljs-attribute">background</span>: <span class="hljs-number">#FFF</span>;</span><br><span class="language-css"><span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span> <span class="hljs-number">0</span>;</span><br><span class="language-css"><span class="hljs-attribute">border-radius</span>: <span class="hljs-number">50%</span>;</span><br><span class="language-css"><span class="hljs-attribute">cursor</span>: pointer;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-id">#point</span> <span class="hljs-selector-class">.active</span> &#123;</span><br><span class="language-css"><span class="hljs-attribute">background</span>: red;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;page page-1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;page page-2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;page page-3&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;point&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">/*</span></span><br><span class="hljs-comment"><span class="language-javascript">1.布局</span></span><br><span class="hljs-comment"><span class="language-javascript"></span></span><br><span class="hljs-comment"><span class="language-javascript">1.当滑动鼠标滚轮的时候 需要每一屏最外层的盒子滚动</span></span><br><span class="hljs-comment"><span class="language-javascript"></span></span><br><span class="hljs-comment"><span class="language-javascript">2.每一屏的高度需要是浏览器可视区的高度 高度是100%</span></span><br><span class="hljs-comment"><span class="language-javascript"></span></span><br><span class="hljs-comment"><span class="language-javascript">而100%是相对单位 相对于父级的高度</span></span><br><span class="hljs-comment"><span class="language-javascript"></span></span><br><span class="hljs-comment"><span class="language-javascript">.page =&gt; #container =&gt; body =&gt; html &#123;height: 100%&#125;</span></span><br><span class="hljs-comment"><span class="language-javascript"></span></span><br><span class="hljs-comment"><span class="language-javascript">3.当滚动鼠标滚轮的时候 实际上需要使#container这个元素进行位移 translateY</span></span><br><span class="hljs-comment"><span class="language-javascript"></span></span><br><span class="hljs-comment"><span class="language-javascript">位置计算 -index * 一屏的告诉</span></span><br><span class="hljs-comment"><span class="language-javascript"></span></span><br><span class="hljs-comment"><span class="language-javascript">2.滚轮事件</span></span><br><span class="hljs-comment"><span class="language-javascript"></span></span><br><span class="hljs-comment"><span class="language-javascript">在谷歌浏览器中 滚轮事件是 onmousewheel</span></span><br><span class="hljs-comment"><span class="language-javascript">在火狐浏览器中 滚轮事件是 onDOMMouseScroll</span></span><br><span class="hljs-comment"><span class="language-javascript"></span></span><br><span class="hljs-comment"><span class="language-javascript">基于滚轮事件有非常大的兼容问题 所以此处我们不使用原生事件</span></span><br><span class="hljs-comment"><span class="language-javascript"></span></span><br><span class="hljs-comment"><span class="language-javascript">我们需要使用jQuery提供的滚轮事件 需要引用 jquery.mousewheel.min.js文件</span></span><br><span class="hljs-comment"><span class="language-javascript"></span></span><br><span class="hljs-comment"><span class="language-javascript">1.为页面绑定滚轮事件</span></span><br><span class="hljs-comment"><span class="language-javascript"></span></span><br><span class="hljs-comment"><span class="language-javascript">$(document).on(&#x27;mousewheel&#x27;, function (event, delta) &#123;</span></span><br><span class="hljs-comment"><span class="language-javascript">// event 事件对象</span></span><br><span class="hljs-comment"><span class="language-javascript">// delta 区分滚动方向的参数</span></span><br><span class="hljs-comment"><span class="language-javascript">&#125;);</span></span><br><span class="hljs-comment"><span class="language-javascript"></span></span><br><span class="hljs-comment"><span class="language-javascript">2.区分方向</span></span><br><span class="hljs-comment"><span class="language-javascript"></span></span><br><span class="hljs-comment"><span class="language-javascript">向上滚动 delta =&gt; 1</span></span><br><span class="hljs-comment"><span class="language-javascript">向下滚动 delta =&gt; -1</span></span><br><span class="hljs-comment"><span class="language-javascript"></span></span><br><span class="hljs-comment"><span class="language-javascript">3.滚轮事件是怎么触发的?</span></span><br><span class="hljs-comment"><span class="language-javascript"></span></span><br><span class="hljs-comment"><span class="language-javascript">当我们使用手指去滚动滚轮的时候 滚动是一下一下滚动的 每滚动一下 触发一次 滚动轮的事件处理函数</span></span><br><span class="hljs-comment"><span class="language-javascript"></span></span><br><span class="hljs-comment"><span class="language-javascript"></span></span><br><span class="hljs-comment"><span class="language-javascript">注意：jQuery中animate方法中不支持2d转换</span></span><br><span class="hljs-comment"><span class="language-javascript"></span></span><br><span class="hljs-comment"><span class="language-javascript"></span></span><br><span class="hljs-comment"><span class="language-javascript">*/</span></span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// 屏幕索引 </span></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> index = <span class="hljs-number">0</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// 滚动元素</span></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> container = $(<span class="hljs-string">&#x27;#container&#x27;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// 导航点容器</span></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> point = $(<span class="hljs-string">&#x27;#point&#x27;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// 一屏的高度</span></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> iHeight = $(<span class="hljs-variable language_">window</span>).<span class="hljs-title function_">height</span>();</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// 屏幕的个数</span></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> size = container.<span class="hljs-title function_">children</span>().<span class="hljs-property">length</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// 导航点的变量</span></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&#x27;&#x27;</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// 循环屏幕个数</span></span><br><span class="language-javascript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; size; i++) &#123;</span><br><span class="language-javascript"><span class="hljs-comment">// 根据屏幕个数创建导航点</span></span><br><span class="language-javascript">str += <span class="hljs-string">&#x27;&lt;span&gt;&lt;/span&gt;&#x27;</span></span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// 将创建好的导航点span放置在页面的容器中</span></span><br><span class="language-javascript">point.<span class="hljs-title function_">html</span>(str);</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// 滚动开关 false 没有处理滚动的状态</span></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> flag = <span class="hljs-literal">false</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript">$(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;mousewheel&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">event, delta</span>) &#123;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// 如果当前没有处于滚动状态</span></span><br><span class="language-javascript"><span class="hljs-keyword">if</span> (flag == <span class="hljs-literal">false</span>) &#123;</span><br><span class="language-javascript"></span><br><span class="language-javascript">flag = <span class="hljs-literal">true</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">if</span> (delta == <span class="hljs-number">1</span>) &#123;</span><br><span class="language-javascript"><span class="hljs-comment">// 向上滚动</span></span><br><span class="language-javascript">index--;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// 限制滚动的范围</span></span><br><span class="language-javascript"><span class="hljs-keyword">if</span> (index &lt; <span class="hljs-number">0</span>) &#123;</span><br><span class="language-javascript">index = <span class="hljs-number">0</span>;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// 让盒子滚动</span></span><br><span class="language-javascript">container.<span class="hljs-title function_">css</span>(<span class="hljs-string">&#x27;transform&#x27;</span>, <span class="hljs-string">&#x27;translateY(&#x27;</span>+-index * iHeight+<span class="hljs-string">&#x27;px)&#x27;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (delta == -<span class="hljs-number">1</span>) &#123;</span><br><span class="language-javascript"><span class="hljs-comment">// 向下滚动</span></span><br><span class="language-javascript">index++;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// 限制滚动的范围</span></span><br><span class="language-javascript"><span class="hljs-keyword">if</span> (index &gt; size - <span class="hljs-number">1</span>) &#123;</span><br><span class="language-javascript">index = size - <span class="hljs-number">1</span>;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// 让盒子滚动</span></span><br><span class="language-javascript">container.<span class="hljs-title function_">css</span>(<span class="hljs-string">&#x27;transform&#x27;</span>, <span class="hljs-string">&#x27;translateY(&#x27;</span>+-index * iHeight+<span class="hljs-string">&#x27;px)&#x27;</span>);</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// 更改导航点的选中状态</span></span><br><span class="language-javascript">spans.<span class="hljs-title function_">eq</span>(index).<span class="hljs-title function_">addClass</span>(<span class="hljs-string">&#x27;active&#x27;</span>).<span class="hljs-title function_">siblings</span>().<span class="hljs-title function_">removeClass</span>(<span class="hljs-string">&#x27;active&#x27;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// 延迟的目的是需要等待 动画执行完成 再将状态变量恢复成false</span></span><br><span class="language-javascript"><span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">flag = <span class="hljs-literal">false</span>;</span><br><span class="language-javascript">&#125;, <span class="hljs-number">1000</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// 获取所有的导航点</span></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> spans = point.<span class="hljs-title function_">children</span>();</span><br><span class="language-javascript"><span class="hljs-comment">// 让第一个导航点处于选中状态</span></span><br><span class="language-javascript">spans.<span class="hljs-title function_">eq</span>(<span class="hljs-number">0</span>).<span class="hljs-title function_">addClass</span>(<span class="hljs-string">&#x27;active&#x27;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// 当点击导航点的时候</span></span><br><span class="language-javascript">spans.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// 导航点的个数和屏幕的个数是一样的 所以他们的索引是对应的</span></span><br><span class="language-javascript">index = $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">index</span>();</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// 让盒子滚动</span></span><br><span class="language-javascript">container.<span class="hljs-title function_">css</span>(<span class="hljs-string">&#x27;transform&#x27;</span>, <span class="hljs-string">&#x27;translateY(&#x27;</span>+-index * iHeight+<span class="hljs-string">&#x27;px)&#x27;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// $(this).addClass(&#x27;active&#x27;).siblings().removeClass(&#x27;active&#x27;);</span></span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// 更改导航点的选中状态</span></span><br><span class="language-javascript">spans.<span class="hljs-title function_">eq</span>(index).<span class="hljs-title function_">addClass</span>(<span class="hljs-string">&#x27;active&#x27;</span>).<span class="hljs-title function_">siblings</span>().<span class="hljs-title function_">removeClass</span>(<span class="hljs-string">&#x27;active&#x27;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span> <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>H5C3</category>
      
    </categories>
    
    
    <tags>
      
      <tag>H5C3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>正则表达式RegExp</title>
    <link href="/2021/02/10/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8FRegExp/"/>
    <url>/2021/02/10/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8FRegExp/</url>
    
    <content type="html"><![CDATA[<h1 id="正则表达式RegExp"><a href="#正则表达式RegExp" class="headerlink" title="正则表达式RegExp"></a>正则表达式RegExp</h1><p>用于对字符串进行处理操作，匹配、替换、提取</p><h2 id="创建方式"><a href="#创建方式" class="headerlink" title="创建方式"></a>创建方式</h2><h3 id="构造函数创建方式"><a href="#构造函数创建方式" class="headerlink" title="构造函数创建方式"></a>构造函数创建方式</h3><p>var reg &#x3D; new RegExp(‘abc’);</p><h3 id="字面量形式"><a href="#字面量形式" class="headerlink" title="字面量形式"></a>字面量形式</h3><p>var reg &#x3D; &#x2F;abc&#x2F;;</p><h3 id="test方法"><a href="#test方法" class="headerlink" title="test方法"></a>test方法</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade">用于对字符串进行匹配操作，参数为字符串，返回值为<span class="hljs-literal">true</span>或<span class="hljs-literal">false</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(reg.test(<span class="hljs-string">&#x27;shdabcgeys&#x27;</span>));<br></code></pre></td></tr></table></figure><h2 id="正则语法"><a href="#正则语法" class="headerlink" title="正则语法"></a>正则语法</h2><h3 id="简单类"><a href="#简单类" class="headerlink" title="简单类"></a>简单类</h3><p>对内部的字符进行查询,找到后返回true</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">// 正则在js中采用内置对象方式进行实现的。</span><br><br><span class="hljs-comment">// 1 构造函数创建方式</span><br><span class="hljs-comment">// var reg = new RegExp(&#x27;abc&#x27;);</span><br><br><span class="hljs-comment">// 2 字面量形式</span><br><span class="hljs-comment">// var reg = /abc/;</span><br><br><span class="hljs-comment">// test方法，用于对字符串进行匹配操作，参数为字符串，返回值为true或false</span><br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/abc/</span>;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(reg.test(<span class="hljs-string">&#x27;ftgyabchuijko&#x27;</span>)); <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(reg.test(<span class="hljs-string">&#x27;abcftgyhuijko&#x27;</span>)); <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(reg.test(<span class="hljs-string">&#x27;ftgyahbcuijko&#x27;</span>)); <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><h3 id="字符类"><a href="#字符类" class="headerlink" title="字符类"></a>字符类</h3><p>&#x2F;[xxx]&#x2F;   []表示要字符串中存在方括号中的’任一个’则为真</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-comment">// 1 在正则中使用[]表示要使用字符类功能</span><br><span class="hljs-comment">// []整体表示一位字符，内部的多个字符表示当前位置的多种情况。</span><br>/*var reg = /[abc]/;<br>console.<span class="hljs-built_in">log</span>(reg.test(&#x27;zzazzz&#x27;)); <span class="hljs-comment">// true</span><br>console.<span class="hljs-built_in">log</span>(reg.test(&#x27;zzbzzz&#x27;)); <span class="hljs-comment">// true</span><br>console.<span class="hljs-built_in">log</span>(reg.test(&#x27;zzczzz&#x27;)); <span class="hljs-comment">// true</span><br>console.<span class="hljs-built_in">log</span>(reg.test(&#x27;zzzzz&#x27;)); <span class="hljs-comment">// false</span><br>console.<span class="hljs-built_in">log</span>(reg.test(&#x27;zzabczzz&#x27;)); <span class="hljs-comment">// true*/</span><br></code></pre></td></tr></table></figure><p>反向类 </p><p> &#x2F;[^xxx]&#x2F;   表示字符串中出现’任一’方括号之外的字符可以匹配成功</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">// 2 反向类的标识方式是在字符类的[后面紧跟一个^</span><br><span class="hljs-comment">//    作用：表示除内部字符外的其他字符可以匹配成功</span><br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/[^abc]/</span>;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(reg.test(<span class="hljs-string">&#x27;aaaaaaa&#x27;</span>)); <span class="hljs-comment">// false</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(reg.test(<span class="hljs-string">&#x27;aaaazaaa&#x27;</span>)); <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(reg.test(<span class="hljs-string">&#x27;123&#x27;</span>)); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h3 id="范围类"><a href="#范围类" class="headerlink" title="范围类"></a>范围类</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">/<span class="hljs-selector-attr">[a-z]</span>/  <span class="hljs-selector-attr">[A-Z]</span><span class="hljs-selector-attr">[0-9]</span>   <span class="hljs-selector-attr">[\u4e00-\u9fa5]</span> 可以反向<br></code></pre></td></tr></table></figure><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-comment">// 范围类用于书写字符范围：</span><br><span class="hljs-comment">// var reg = /[c-h]/;</span><br>/*console.<span class="hljs-built_in">log</span>(reg.test(&#x27;zzzeeezzz&#x27;));<br>console.<span class="hljs-built_in">log</span>(reg.test(&#x27;zzzgggggzzz&#x27;));<br>console.<span class="hljs-built_in">log</span>(reg.test(&#x27;zzzhhhzzz&#x27;));<br>console.<span class="hljs-built_in">log</span>(reg.test(&#x27;zzzabjkzzz&#x27;));*/<br><br><span class="hljs-comment">//    /[a-z]/  表示所有小写字母  /[A-Z]/ 表示所有大写字母  /[0-9]/ 表示所有数字字符</span><br><br><span class="hljs-comment">// 组合类：</span><br><span class="hljs-comment">// 用于同时设置多种检测条件</span><br>var reg = /[<span class="hljs-number">3</span>-<span class="hljs-number">7</span>a-xB-F]/;<br>console.<span class="hljs-built_in">log</span>(reg.test(&#x27;456&#x27;)); <span class="hljs-comment">// true</span><br>console.<span class="hljs-built_in">log</span>(reg.test(&#x27;bcd&#x27;)); <span class="hljs-comment">// true </span><br>console.<span class="hljs-built_in">log</span>(reg.test(&#x27;CDE&#x27;)); <span class="hljs-comment">// true</span><br>console.<span class="hljs-built_in">log</span>(reg.test(&#x27;012yzHIJK&#x27;)); <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><h3 id="组合类"><a href="#组合类" class="headerlink" title="组合类"></a>组合类</h3><p>  同时检测多种条件 [a-z0-9]中间不加符号</p><h3 id="转义符"><a href="#转义符" class="headerlink" title="转义符"></a>转义符</h3><p> \ 可以将普通字符与特殊字符互相转换</p><pre><code class="hljs">// \ 这是一个转义符，作用是对字符进行转义：//1 对普通字符加\可以让这个字符具有特殊功能。//2 对具有特殊功能的字符添加\可以让这个字符变成普通字符。</code></pre><h3 id="预定义类"><a href="#预定义类" class="headerlink" title="预定义类"></a>预定义类</h3><p>​\d 用于匹配数字字符0-9<br>    \D 用于匹配非数字字符  &#x2F;[^0-9]&#x2F;<br>    \w   用于匹配单词字符&#x2F;[a-zA-Z0-9_]&#x2F;<br>    \W 用于匹配非单词字符<br>    \s 用于匹配不可见字符  包括空格和\n<br>    \S   用于匹配可见字符   空格和\n返回假<br>    &#x2F;.&#x2F;  匹配可见字符,认为空格为可见</p><p>案例</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-comment">// \d用于匹配数字字符</span><br>/*var reg = /\d/;<br>console.<span class="hljs-built_in">log</span>(reg.test(&#x27;abcd123&#x27;)); <span class="hljs-comment">// true</span><br>console.<span class="hljs-built_in">log</span>(reg.test(&#x27;abcd&#x27;)); <span class="hljs-comment">// false*/</span><br></code></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ruby">/<span class="hljs-regexp">/  \D 用于匹配非数字字符 /</span>[^<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]/<br><span class="hljs-regexp">/*var reg = /</span>\D/;<br>console.log(reg.test(<span class="hljs-string">&#x27;abcd123&#x27;</span>)); <span class="hljs-regexp">//</span> <span class="hljs-literal">true</span><br>console.log(reg.test(<span class="hljs-string">&#x27;123&#x27;</span>)); <span class="hljs-regexp">//</span> <span class="hljs-literal">false</span>*<span class="hljs-regexp">/</span><br></code></pre></td></tr></table></figure><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-comment">//  \w 用于匹配单词字符  /[a-zA-Z0-9_]/</span><br>/*var reg = /\w/;<br>console.<span class="hljs-built_in">log</span>(reg.test(&#x27;adwda&#x27;)); <span class="hljs-comment">// true</span><br>console.<span class="hljs-built_in">log</span>(reg.test(&#x27;DWDAWD&#x27;)); <span class="hljs-comment">// true</span><br>console.<span class="hljs-built_in">log</span>(reg.test(&#x27;<span class="hljs-number">123321</span>3&#x27;)); <span class="hljs-comment">// true</span><br>console.<span class="hljs-built_in">log</span>(reg.test(&#x27;____&#x27;)); <span class="hljs-comment">// true</span><br>console.<span class="hljs-built_in">log</span>(reg.test(&#x27;!$%#^&amp;*()-=&#x27;)); <span class="hljs-comment">// false*/</span><br></code></pre></td></tr></table></figure><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-comment">// \s 用于匹配不可见字符</span><br><span class="hljs-comment">//   用于匹配空格和换行</span><br>/*var reg = /\s/;<br>console.<span class="hljs-built_in">log</span>(reg.test(&#x27; &#x27;)); <span class="hljs-comment">// true</span><br>console.<span class="hljs-built_in">log</span>(reg.test(&#x27;\n&#x27;)); <span class="hljs-comment">// true</span><br>console.<span class="hljs-built_in">log</span>(reg.test(&#x27;fghjkl<span class="hljs-number">5678</span>GHJK_&gt;&lt;?^%$#@&#x27;)); <span class="hljs-comment">// false*/</span><br><br></code></pre></td></tr></table></figure><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-comment">// \S 用于匹配可见字符 (把他忘了，谢谢)</span><br>/*<br>var reg = /\S/;<br>console.<span class="hljs-built_in">log</span>(reg.test(&#x27; &#x27;)); <span class="hljs-comment">// false</span><br>console.<span class="hljs-built_in">log</span>(reg.test(&#x27;\n&#x27;)); <span class="hljs-comment">// false</span><br>console.<span class="hljs-built_in">log</span>(reg.test(&#x27;fghjkl<span class="hljs-number">5678</span>GHJK_&gt;&lt;?^%$#@&#x27;)); <span class="hljs-comment">// true</span><br>*/<br></code></pre></td></tr></table></figure><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-comment">// . 用于匹配可见字符 (常用方式)</span><br><span class="hljs-comment">// .匹配时认为空格是可见字符，可以用于对用户输入的内容进行匹配</span><br></code></pre></td></tr></table></figure><h3 id="边界"><a href="#边界" class="headerlink" title="边界"></a>边界</h3><p>&#x2F;^abc&#x2F;指定开头字符串</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-comment">// 1 匹配开始位置：</span><br><span class="hljs-comment">//在正则最开始位置书写^，用于匹配以指定内容开头的字符串</span><br>/*var reg = /^abc/;<br>console.<span class="hljs-built_in">log</span>(reg.test(&#x27;abcfghjkl&#x27;)); <span class="hljs-comment">// true</span><br>console.<span class="hljs-built_in">log</span>(reg.test(&#x27;ghjkabcfghjkl&#x27;)); <span class="hljs-comment">// false*/</span><br></code></pre></td></tr></table></figure><p>&#x2F;abc$&#x2F;指定内容结束的字符串</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-comment">// 2 匹配结束位置：</span><br><span class="hljs-comment">//    在正则最后位置书写$，用于匹配以指定内容结束的字符串</span><br>/*var reg = /abc$/;<br>console.<span class="hljs-built_in">log</span>(reg.test(&#x27;dfghjkabc&#x27;)); <span class="hljs-comment">// true</span><br>console.<span class="hljs-built_in">log</span>(reg.test(&#x27;dfghjkabcdwad&#x27;)); <span class="hljs-comment">// false*/</span><br></code></pre></td></tr></table></figure><p>&#x2F;^abc$&#x2F;严格匹配</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">// 3 将^和$同时使用，表示严格匹配，必须与内容的内容完全一致</span><br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/^abc$/</span>;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(reg.test(<span class="hljs-string">&#x27;abc&#x27;</span>)); <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(reg.test(<span class="hljs-string">&#x27;abcabc&#x27;</span>)); <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><h3 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h3><h4 id="重复指定次数n"><a href="#重复指定次数n" class="headerlink" title="重复指定次数n"></a>重复指定次数n</h4><p>&#x2F;^a{n}$&#x2F;</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-comment">// 1 重复指定次数</span><br><span class="hljs-comment">//   &#123;n&#125;</span><br>/*var reg = /^a&#123;<span class="hljs-number">3</span>&#125;$/;<br>console.<span class="hljs-built_in">log</span>(reg.test(&#x27;aa&#x27;)); <span class="hljs-comment">// false</span><br>console.<span class="hljs-built_in">log</span>(reg.test(&#x27;aaa&#x27;)); <span class="hljs-comment">// true</span><br>console.<span class="hljs-built_in">log</span>(reg.test(&#x27;aaaa&#x27;)); <span class="hljs-comment">// false*/</span><br></code></pre></td></tr></table></figure><h4 id="重复至少n次"><a href="#重复至少n次" class="headerlink" title="重复至少n次"></a>重复至少n次</h4><p>&#x2F;^a{n,}$&#x2F;</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">// 2 重复至少几次</span><br><span class="hljs-comment">//   &#123;n,&#125;</span><br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/^a&#123;3,&#125;$/</span>;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(reg.test(<span class="hljs-string">&#x27;aa&#x27;</span>));<span class="hljs-comment">//false</span><br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(reg.test(<span class="hljs-string">&#x27;aaa&#x27;</span>));<span class="hljs-comment">//true</span><br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(reg.test(<span class="hljs-string">&#x27;aaaa&#x27;</span>));<span class="hljs-comment">//true</span><br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(reg.test(<span class="hljs-string">&#x27;aaaaaaa&#x27;</span>)); <span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><h4 id="指定重复范围"><a href="#指定重复范围" class="headerlink" title="指定重复范围"></a>指定重复范围</h4><p>&#x2F;^a{n,m}$&#x2F;</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-comment">// 3 指定重复的范围</span><br><span class="hljs-comment">//   &#123;n,m&#125;</span><br>/*var reg = /^a&#123;<span class="hljs-number">3</span>,<span class="hljs-number">5</span>&#125;$/;<br>console.<span class="hljs-built_in">log</span>(reg.test(&#x27;aa&#x27;)); <br>console.<span class="hljs-built_in">log</span>(reg.test(&#x27;aaa&#x27;)); <br>console.<span class="hljs-built_in">log</span>(reg.test(&#x27;aaaa&#x27;)); <br>console.<span class="hljs-built_in">log</span>(reg.test(&#x27;aaaaaaa&#x27;)); */<br></code></pre></td></tr></table></figure><h4 id="代表出现0-n次"><a href="#代表出现0-n次" class="headerlink" title="*代表出现0-n次"></a>*代表出现0-n次</h4><p>&#x2F;^s*$&#x2F;   </p><h4 id="代表出现1-n次"><a href="#代表出现1-n次" class="headerlink" title="+代表出现1-n次"></a>+代表出现1-n次</h4><p>&#x2F;^a+$&#x2F;</p><h4 id="出现0或1次"><a href="#出现0或1次" class="headerlink" title="?  出现0或1次"></a>?  出现0或1次</h4><p>&#x2F;^a?$&#x2F;</p><h3 id="或者-代表或者"><a href="#或者-代表或者" class="headerlink" title="或者       | 代表或者"></a>或者       | 代表或者</h3><p>&#x2F;ab|bcd|cd&#x2F;  含有ab或bcd或cd均可</p><h3 id="正则相关方法"><a href="#正则相关方法" class="headerlink" title="正则相关方法"></a>正则相关方法</h3><p>g   全局匹配  可以匹配到所有满足条件的内容</p><p>i   忽略大小写</p><p>字符串.replace()  替换</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">str.<span class="hljs-built_in">replace</span>(<span class="hljs-regexp">/v/ig</span>, <span class="hljs-string">&#x27;z&#x27;</span>)<br></code></pre></td></tr></table></figure><p>字符串.match(正则表达式)   提取</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">提取字符串<span class="hljs-built_in">str</span>中的邮箱内容，注意，需要在正则的最后添加匹配模式g，不要设置严格匹配。输出一个数组<br><span class="hljs-built_in">str</span>.<span class="hljs-keyword">match</span>(/\w+@\w+\.\w+/g)<br></code></pre></td></tr></table></figure><p>正则.exec(字符串)   单次提取</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs arcade">使用时必须使用同一个正则对一个字符串进行操作<br>每次调用会得到新一轮匹配的结果（每次调用的结果是不相同的，而且是累计的）<br>如果完整的一轮匹配完毕，再次调用，会得到<span class="hljs-literal">null</span><br>加括号后可以再次匹配<br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/(\w+)@(\w+\.\w+)/g</span>;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(reg.exec(str));<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(reg.exec(str));<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>javascript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javascript</tag>
      
      <tag>RegExp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>html自定义属性</title>
    <link href="/2020/10/15/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%B1%9E%E6%80%A7/"/>
    <url>/2020/10/15/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%B1%9E%E6%80%A7/</url>
    
    <content type="html"><![CDATA[<p> HTML5 的规范中开始为了区分自定义属性与标准属性, 所有自定义属性应该使用 data- 或 x- 开头</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">data-itcast</span>=<span class="hljs-string">&quot;参数&quot;</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>javascript API笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>dom操作</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue随笔_过度动画</title>
    <link href="/2020/09/18/vue%E9%9A%8F%E7%AC%94_%E8%BF%87%E5%BA%A6%E5%8A%A8%E7%94%BB/"/>
    <url>/2020/09/18/vue%E9%9A%8F%E7%AC%94_%E8%BF%87%E5%BA%A6%E5%8A%A8%E7%94%BB/</url>
    
    <content type="html"><![CDATA[<p>在 CSS 过渡和动画中自动应用 class<br>可以配合使用第三方 CSS 动画库，如 Animate.css<br>在过渡钩子函数中使用 JavaScript 直接操作 DOM<br>可以配合使用第三方 JavaScript 动画库，如 Velocity.js</p><h2 id="进入-离开-列表过渡"><a href="#进入-离开-列表过渡" class="headerlink" title="进入&#x2F;离开 &amp; 列表过渡"></a>进入&#x2F;离开 &amp; 列表过渡</h2><p>​条件渲染 (使用 v-if)<br>    条件展示 (使用 v-show)<br>    单元素&#x2F;组件的过渡</p><h3 id="过渡的类名"><a href="#过渡的类名" class="headerlink" title="过渡的类名"></a>过渡的类名</h3><p>v-enter：定义进入过渡的开始状态。在元素被插入之前生效，在元素被插入之后的下一帧移除。</p><p>v-enter-active：定义进入过渡生效时的状态。在整个进入过渡的阶段中应用，在元素被插入之前生效，在过渡&#x2F;动画完成之后移除。这个类可以被用来定义进入过渡的过程时间，延迟和曲线函数。</p><p>v-enter-to：2.1.8 版及以上定义进入过渡的结束状态。在元素被插入之后下一帧生效 (与此同时 v-enter 被移除)，在过渡&#x2F;动画完成之后移除。</p><p>v-leave：定义离开过渡的开始状态。在离开过渡被触发时立刻生效，下一帧被移除。</p><p>v-leave-active：定义离开过渡生效时的状态。在整个离开过渡的阶段中应用，在离开过渡被触发时立刻生效，在过渡&#x2F;动画完成之后移除。这个类可以被用来定义离开过渡的过程时间，延迟和曲线函数。</p><p>v-leave-to：2.1.8 版及以上定义离开过渡的结束状态。在离开过渡被触发之后下一帧生效 (与此同时 v-leave 被删除)，在过渡&#x2F;动画完成之后移除。</p><h3 id="CSS-过渡"><a href="#CSS-过渡" class="headerlink" title="CSS 过渡"></a>CSS 过渡</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.slide-fade-enter-active</span> &#123;<br>  <span class="hljs-attribute">transition</span>: all .<span class="hljs-number">3s</span> ease;<br>&#125;<br><span class="hljs-selector-class">.slide-fade-leave-active</span> &#123;<br>  <span class="hljs-attribute">transition</span>: all .<span class="hljs-number">8s</span> <span class="hljs-built_in">cubic-bezier</span>(<span class="hljs-number">1.0</span>, <span class="hljs-number">0.5</span>, <span class="hljs-number">0.8</span>, <span class="hljs-number">1.0</span>);<br>&#125;<br><span class="hljs-selector-class">.slide-fade-enter</span>, <span class="hljs-selector-class">.slide-fade-leave-to</span><br><span class="hljs-comment">/* .slide-fade-leave-active for below version 2.1.8 */</span> &#123;<br>  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(<span class="hljs-number">10px</span>);<br>  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="CSS-动画"><a href="#CSS-动画" class="headerlink" title="CSS 动画"></a>CSS 动画</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.bounce-enter-active</span> &#123;<br>  <span class="hljs-attribute">animation</span>: bounce-in .<span class="hljs-number">5s</span>;<br>&#125;<br><span class="hljs-selector-class">.bounce-leave-active</span> &#123;<br>  <span class="hljs-attribute">animation</span>: bounce-in .<span class="hljs-number">5s</span> reverse;<br>&#125;<br><span class="hljs-keyword">@keyframes</span> bounce-in &#123;<br>  <span class="hljs-number">0%</span> &#123;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scale</span>(<span class="hljs-number">0</span>);<br>  &#125;<br>  <span class="hljs-number">50%</span> &#123;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scale</span>(<span class="hljs-number">1.5</span>);<br>  &#125;<br>  <span class="hljs-number">100%</span> &#123;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scale</span>(<span class="hljs-number">1</span>);<br>  &#125;<br>&#125;<br><br> <span class="hljs-attribute">animation</span>: bounce-in .<span class="hljs-number">5s</span> forwards;<br>forwards;  动画结束停留下最后一帧<br>reverse;  反向播放<br></code></pre></td></tr></table></figure><p>自定义过渡的类名<br>JavaScript 钩子</p><h3 id="过渡模式"><a href="#过渡模式" class="headerlink" title="过渡模式"></a>过渡模式</h3><p>in-out：新元素先进行过渡，完成之后当前元素过渡离开。</p><p>out-in：当前元素先进行过渡，完成之后新元素过渡进入。</p><p>用 out-in 重写之前的开关按钮过渡：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml">列表的进入/离开过渡<span class="hljs-tag">&lt;<span class="hljs-name">transition-group</span>&gt;</span><br>列表的排序过渡<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>vue笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Sass语法</title>
    <link href="/2020/09/08/Sass%E8%AF%AD%E6%B3%95/"/>
    <url>/2020/09/08/Sass%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Sass 是一款强化 CSS 的辅助工具，它在 CSS 语法的基础上增加了变量 (variables)、嵌套 (nested rules)、混合 (mixins)、导入 (inline imports) 等高级功能，这些拓展令 CSS 更加强大与优雅。使用 Sass 以及 Sass 的样式库（如 <a href="http://compass-style.org/">Compass</a>）有助于更好地组织管理样式文件，以及更高效地开发项目。 </p><h2 id="1-特色功能-Features"><a href="#1-特色功能-Features" class="headerlink" title="1. 特色功能 (Features)"></a>1. 特色功能 (Features)</h2><ul><li>完全兼容 CSS3</li><li>在 CSS 基础上增加变量、嵌套 (nesting)、混合 (mixins) 等功能</li><li>通过<a href="http://sass-lang.com/docs/yardoc/Sass/Script/Functions.html">函数</a>进行颜色值与属性值的运算</li><li>提供<a href="https://www.sass.hk/docs/#t8">控制指令 (control directives)</a>等高级功能</li><li>自定义输出格式</li></ul><h2 id="嵌套规则-Nested-Rules"><a href="#嵌套规则-Nested-Rules" class="headerlink" title="嵌套规则 (Nested Rules)"></a>嵌套规则 (Nested Rules)</h2><p>Sass 允许将一套 CSS 样式嵌套进另一套样式中，内层的样式将它外层的选择器作为父选择器，例如： </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#main</span> <span class="hljs-selector-tag">p</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#00ff00</span>;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">97%</span>;<br><br>  <span class="hljs-selector-class">.redbox</span> &#123;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#ff0000</span>;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#000000</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>编译为</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#main</span> <span class="hljs-selector-tag">p</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#00ff00</span>;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">97%</span>; &#125;<br>  <span class="hljs-selector-id">#main</span> <span class="hljs-selector-tag">p</span> <span class="hljs-selector-class">.redbox</span> &#123;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#ff0000</span>;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#000000</span>; &#125;<br></code></pre></td></tr></table></figure><p>嵌套功能避免了重复输入父选择器，而且令复杂的 CSS 结构更易于管理：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#main</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">97%</span>;<br><br>  <span class="hljs-selector-tag">p</span>, <span class="hljs-selector-tag">div</span> &#123;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">2em</span>;<br>    <span class="hljs-selector-tag">a</span> &#123; <span class="hljs-attribute">font-weight</span>: bold; &#125;<br>  &#125;<br><br>  pre &#123; <span class="hljs-attribute">font-size</span>: <span class="hljs-number">3em</span>; &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>编译为</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-id">#main</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">97%</span>; &#125;<br>  <span class="hljs-selector-id">#main</span> <span class="hljs-selector-tag">p</span>, <span class="hljs-selector-id">#main</span> <span class="hljs-selector-tag">div</span> &#123;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">2em</span>; &#125;<br>    <span class="hljs-selector-id">#main</span> <span class="hljs-selector-tag">p</span> <span class="hljs-selector-tag">a</span>, <span class="hljs-selector-id">#main</span> <span class="hljs-selector-tag">div</span> <span class="hljs-selector-tag">a</span> &#123;<br>      <span class="hljs-attribute">font-weight</span>: bold; &#125;<br>  <span class="hljs-selector-id">#main</span> <span class="hljs-selector-tag">pre</span> &#123;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">3em</span>; &#125;<br></code></pre></td></tr></table></figure><h2 id="父选择器"><a href="#父选择器" class="headerlink" title="父选择器"></a>父选择器</h2><p>在嵌套 CSS 规则时，有时也需要直接使用嵌套外层的父选择器，例如，当给某个元素设定 <code>hover</code> 样式时，或者当 <code>body</code> 元素有某个 classname 时，可以用 <code>&amp;</code> 代表嵌套规则外层的父选择器。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">a</span> &#123;<br>  <span class="hljs-attribute">font-weight</span>: bold;<br>  <span class="hljs-attribute">text-decoration</span>: none;<br>  &amp;<span class="hljs-selector-pseudo">:hover</span> &#123; <span class="hljs-attribute">text-decoration</span>: underline; &#125;<br>  <span class="hljs-selector-tag">body</span><span class="hljs-selector-class">.firefox</span> &amp; &#123; <span class="hljs-attribute">font-weight</span>: normal; &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>编译为</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">a</span> &#123;<br>  <span class="hljs-attribute">font-weight</span>: bold;<br>  <span class="hljs-attribute">text-decoration</span>: none; &#125;<br>  <span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>    <span class="hljs-attribute">text-decoration</span>: underline; &#125;<br>  <span class="hljs-selector-tag">body</span><span class="hljs-selector-class">.firefox</span> <span class="hljs-selector-tag">a</span> &#123;<br>    <span class="hljs-attribute">font-weight</span>: normal; &#125;<br></code></pre></td></tr></table></figure><p>编译后的 CSS 文件中 <code>&amp;</code> 将被替换成嵌套外层的父选择器，如果含有多层嵌套，最外层的父选择器会一层一层向下传递： </p><h2 id="属性嵌套"><a href="#属性嵌套" class="headerlink" title="属性嵌套"></a>属性嵌套</h2><p>有些 CSS 属性遵循相同的命名空间 (namespace)，比如 <code>font-family, font-size, font-weight</code> 都以 <code>font</code> 作为属性的命名空间。为了便于管理这样的属性，同时也为了避免了重复输入，Sass 允许将属性嵌套在命名空间中，例如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.funky</span> &#123;<br>  <span class="hljs-attribute">font</span>: &#123;<br>    family: fantasy;<br>    size: <span class="hljs-number">30em</span>;<br>    weight: bold;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>编译为</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.funky</span> &#123;<br>  <span class="hljs-attribute">font-family</span>: fantasy;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">30em</span>;<br>  <span class="hljs-attribute">font-weight</span>: bold; &#125;<br></code></pre></td></tr></table></figure><p>命名空间也可以包含自己的属性值，例如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.funky</span> &#123;<br>  <span class="hljs-attribute">font</span>: <span class="hljs-number">20px</span>/<span class="hljs-number">24px</span> &#123;<br>    family: fantasy;<br>    weight: bold;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>编译为</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.funky</span> &#123;<br>  <span class="hljs-attribute">font</span>: <span class="hljs-number">20px</span>/<span class="hljs-number">24px</span>;<br>    <span class="hljs-attribute">font-family</span>: fantasy;<br>    <span class="hljs-attribute">font-weight</span>: bold; &#125;<br></code></pre></td></tr></table></figure><h2 id="注释-与"><a href="#注释-与" class="headerlink" title="注释 /* */ 与 //"></a>注释 <code>/* */</code> 与 <code>//</code></h2><p>Sass 支持标准的 CSS 多行注释 <code>/* */</code>，以及单行注释 <code>//</code>，前者会 被完整输出到编译后的 CSS 文件中，而后者则不会，例如：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-comment">/* This comment is</span><br><span class="hljs-comment"> * several lines long.</span><br><span class="hljs-comment"> * since it uses the CSS comment syntax,</span><br><span class="hljs-comment"> * it will appear in the CSS output. */</span><br><span class="hljs-selector-tag">body</span> &#123; <span class="hljs-attribute">color</span>: black; &#125;<br><br><span class="hljs-comment">// These comments are only one line long each.</span><br><span class="hljs-comment">// They won&#x27;t appear in the CSS output,</span><br><span class="hljs-comment">// since they use the single-line comment syntax.</span><br><span class="hljs-selector-tag">a</span> &#123; <span class="hljs-attribute">color</span>: green; &#125;<br></code></pre></td></tr></table></figure><p>编译为</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* This comment is</span><br><span class="hljs-comment"> * several lines long.</span><br><span class="hljs-comment"> * since it uses the CSS comment syntax,</span><br><span class="hljs-comment"> * it will appear in the CSS output. */</span><br><span class="hljs-selector-tag">body</span> &#123;<br>  <span class="hljs-attribute">color</span>: black; &#125;<br><br><span class="hljs-selector-tag">a</span> &#123;<br>  <span class="hljs-attribute">color</span>: green; &#125;<br></code></pre></td></tr></table></figure><h2 id="变量"><a href="#变量" class="headerlink" title="变量 $"></a>变量 <code>$</code></h2><p>SassScript 最普遍的用法就是变量，变量以美元符号开头，赋值方法与 CSS 属性的写法一样：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-meta"><span class="hljs-keyword">$width</span>: 5em;</span><br></code></pre></td></tr></table></figure><p>直接使用即调用变量：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#main &#123;</span><br>  width: $width;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="数字运算-Number-Operations"><a href="#数字运算-Number-Operations" class="headerlink" title="数字运算 (Number Operations)"></a>数字运算 (Number Operations)</h2><p>SassScript 支持数字的加减乘除、取整等运算 (<code>+, -, *, /, %</code>)，如果必要会在不同单位间转换值。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">1in</span> + <span class="hljs-number">8pt</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>编译为</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">1.111in</span>; &#125;<br></code></pre></td></tr></table></figure><p>关系运算 <code>&lt;, &gt;, &lt;=, &gt;=</code> 也可用于数字运算，相等运算 <code>==, !=</code> 可用于所有数据类型。 </p><h2 id="插值语句-Interpolation"><a href="#插值语句-Interpolation" class="headerlink" title="插值语句 #{} (Interpolation: #{})"></a>插值语句 <code>#&#123;&#125;</code> (Interpolation: <code>#&#123;&#125;</code>)</h2><p>通过 <code>#&#123;&#125;</code> 插值语句可以在选择器或属性名中使用变量：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-meta"><span class="hljs-keyword">$name</span>: foo;</span><br><span class="hljs-meta"><span class="hljs-keyword">$attr</span>: border;</span><br>p.#&#123;<span class="hljs-symbol">$</span>name&#125; &#123;<br>  #&#123;<span class="hljs-symbol">$</span>attr&#125;-color: blue;<br>&#125;<br></code></pre></td></tr></table></figure><p>编译为</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.foo</span> &#123;<br>  <span class="hljs-attribute">border-color</span>: blue; &#125;<br></code></pre></td></tr></table></figure><p><code>#&#123;&#125;</code> 插值语句也可以在属性值中插入 SassScript，大多数情况下，这样可能还不如使用变量方便，但是使用 <code>#&#123;&#125;</code> 可以避免 Sass 运行运算表达式，直接编译 CSS。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arduino">p &#123;<br>  $font-size: <span class="hljs-number">12</span>px;<br>  $line-height: <span class="hljs-number">30</span>px;<br>  font: #&#123;$font-size&#125;/#&#123;$line-height&#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p>编译为</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span> &#123;<br>  <span class="hljs-attribute">font</span>: <span class="hljs-number">12px</span>/<span class="hljs-number">30px</span>; &#125;<br></code></pre></td></tr></table></figure><h2 id="media"><a href="#media" class="headerlink" title="@media"></a>@media</h2><p>Sass 中 <code>@media</code> 指令与 CSS 中用法一样，只是增加了一点额外的功能：允许其在 CSS 规则中嵌套。如果 <code>@media</code> 嵌套在 CSS 规则内，编译时，<code>@media</code> 将被编译到文件的最外层，包含嵌套的父选择器。这个功能让 <code>@media</code> 用起来更方便，不需要重复使用选择器，也不会打乱 CSS 的书写流程。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.sidebar</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;<br>  <span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">orientation</span>: landscape) &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">500px</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>编译为</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-class">.sidebar</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>; &#125;<br>  <span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">orientation</span>: landscape) &#123;<br>    <span class="hljs-selector-class">.sidebar</span> &#123;<br>      <span class="hljs-attribute">width</span>: <span class="hljs-number">500px</span>; &#125; &#125;<br></code></pre></td></tr></table></figure><p><code>@media</code> 的 queries 允许互相嵌套使用，编译时，Sass 自动添加 <code>and</code></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-keyword">@media</span> screen &#123;<br>  <span class="hljs-selector-class">.sidebar</span> &#123;<br>    <span class="hljs-keyword">@media</span> (<span class="hljs-attribute">orientation</span>: landscape) &#123;<br>      <span class="hljs-attribute">width</span>: <span class="hljs-number">500px</span>;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>编译为</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">orientation</span>: landscape) &#123;<br>  <span class="hljs-selector-class">.sidebar</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">500px</span>; &#125; &#125;<br></code></pre></td></tr></table></figure><p><code>@media</code> 甚至可以使用 SassScript（比如变量，函数，以及运算符）代替条件的名称或者值：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-meta"><span class="hljs-keyword">$media</span>: screen;</span><br><span class="hljs-meta"><span class="hljs-keyword">$feature</span>: -webkit-min-device-pixel-ratio;</span><br><span class="hljs-meta"><span class="hljs-keyword">$value</span>: 1.5;</span><br><br>@media #&#123;<span class="hljs-symbol">$</span>media&#125; <span class="hljs-keyword">and</span> (<span class="hljs-symbol">$</span>feature: <span class="hljs-symbol">$</span>value) &#123;<br>  .sidebar &#123;<br>    width: <span class="hljs-number">500</span>px;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>编译为</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">-webkit-min-device-pixel-ratio</span>: <span class="hljs-number">1.5</span>) &#123;<br>  <span class="hljs-selector-class">.sidebar</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">500px</span>; &#125; &#125;<br></code></pre></td></tr></table></figure><h2 id="if"><a href="#if" class="headerlink" title="@if"></a>@if</h2><p>当 <code>@if</code> 的表达式返回值不是 <code>false</code> 或者 <code>null</code> 时，条件成立，输出 <code>&#123;&#125;</code> 内的代码：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">p</span> &#123;<br>  <span class="hljs-variable">@if</span> <span class="hljs-number">1</span> + <span class="hljs-number">1</span> == <span class="hljs-number">2</span> &#123; <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid; &#125;<br>  <span class="hljs-variable">@if</span> <span class="hljs-number">5</span> &lt; <span class="hljs-number">3</span> &#123; <span class="hljs-attribute">border</span>: <span class="hljs-number">2px</span> dotted; &#125;<br>  <span class="hljs-variable">@if</span> null  &#123; <span class="hljs-attribute">border</span>: <span class="hljs-number">3px</span> double; &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>编译为</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span> &#123;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid; &#125;<br></code></pre></td></tr></table></figure><h2 id="for"><a href="#for" class="headerlink" title="@for"></a>@for</h2><p><code>@for</code> 指令可以在限制的范围内重复输出格式，每次按要求（变量的值）对输出结果做出变动。这个指令包含两种格式：<code>@for $var from &lt;start&gt; through &lt;end&gt;</code>，或者 <code>@for $var from &lt;start&gt; to &lt;end&gt;</code>，区别在于 <code>through</code> 与 <code>to</code> 的含义：<em>当使用 through 时，条件范围包含 <start> 与 <end> 的值，而使用 to 时条件范围只包含 <start> 的值不包含 <end> 的值</em>。另外，<code>$var</code> 可以是任何变量，比如 <code>$i</code>；<code>&lt;start&gt;</code> 和 <code>&lt;end&gt;</code> 必须是整数值。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-keyword">@for</span> <span class="hljs-variable">$i</span> from <span class="hljs-number">1</span> through <span class="hljs-number">3</span> &#123;<br>  .item-#&#123;<span class="hljs-variable">$i</span>&#125; &#123; <span class="hljs-attribute">width</span>: <span class="hljs-number">2em</span> * <span class="hljs-variable">$i</span>; &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>编译为</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.item-1</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">2em</span>; &#125;<br><span class="hljs-selector-class">.item-2</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">4em</span>; &#125;<br><span class="hljs-selector-class">.item-3</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">6em</span>; &#125;<br></code></pre></td></tr></table></figure><h2 id="each"><a href="#each" class="headerlink" title="@each"></a>@each</h2><p><code>@each</code> 指令的格式是 <code>$var in &lt;list&gt;</code>, <code>$var</code> 可以是任何变量名，比如 <code>$length</code> 或者 <code>$name</code>，而 <code>&lt;list&gt;</code> 是一连串的值，也就是值列表。</p><p><code>@each</code> 将变量 <code>$var</code> 作用于值列表中的每一个项目，然后输出结果，例如：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">@each</span> <span class="hljs-variable">$animal</span> <span class="hljs-keyword">in</span> puma, sea-slug, egret, salamander &#123;<br>  .<span class="hljs-comment">#&#123;$animal&#125;-icon &#123;</span><br>    background-<span class="hljs-symbol">image:</span> url(<span class="hljs-string">&#x27;/images/<span class="hljs-subst">#&#123;<span class="hljs-variable">$animal</span>&#125;</span>.png&#x27;</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>编译为</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.puma-icon</span> &#123;<br>  <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;/images/puma.png&#x27;</span>); &#125;<br><span class="hljs-selector-class">.sea-slug-icon</span> &#123;<br>  <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;/images/sea-slug.png&#x27;</span>); &#125;<br><span class="hljs-selector-class">.egret-icon</span> &#123;<br>  <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;/images/egret.png&#x27;</span>); &#125;<br><span class="hljs-selector-class">.salamander-icon</span> &#123;<br>  <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;/images/salamander.png&#x27;</span>); &#125;<br></code></pre></td></tr></table></figure><p>了解更多参考官方文档<a href="https://www.sass.hk/docs/">https://www.sass.hk/docs/</a></p>]]></content>
    
    
    <categories>
      
      <category>Sass语法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Sass语法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>操作属性与样式</title>
    <link href="/2020/08/19/%E6%93%8D%E4%BD%9C%E5%B1%9E%E6%80%A7%E4%B8%8E%E6%A0%B7%E5%BC%8F/"/>
    <url>/2020/08/19/%E6%93%8D%E4%BD%9C%E5%B1%9E%E6%80%A7%E4%B8%8E%E6%A0%B7%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="操作属性与样式"><a href="#操作属性与样式" class="headerlink" title="操作属性与样式"></a>操作属性与样式</h2><p>操作属性<br>        1&gt; 读取属性的值<br>        2&gt; 设置属性的值<br>        在 DOM 观点中, 页面中的每一个标签都是 对象, 所以<br>            我们要读取元素的属性时, 直接就是 读取 对象的  属性<br>            我们要设置元素的属性时, 直接就是 给对象的属性 赋值</p><pre><code class="hljs">-&gt; 操作类样式使用的是 className, 而不是 class. 因为 class 是一个关键字.</code></pre><h3 id="操纵属性"><a href="#操纵属性" class="headerlink" title="操纵属性"></a>操纵属性</h3><blockquote><p> &#x2F;&#x2F; 设置宽高的方法有三种<br>        &#x2F;&#x2F; 1&gt; img 标签自有的属性 width 与 height<br>        &#x2F;&#x2F; 2&gt; 设置 img 的行内样式, 即 img 标签的 style 属性中的 width 与 height<br>        &#x2F;&#x2F; 3&gt; 使用 类样式, 外部样式, 嵌入样式</p><p>1     img.width &#x3D; ‘500’  使用 html 的属性的时候设置宽高默认就是像素<br>2     img.style.width &#x3D; ‘500px’;<br>3     img.className &#x3D; ‘c’;<br>          .c {<br>            width: 200px;<br>        }</p></blockquote><p> DOM对象.style.样式属性名 &#x3D; 样式属性值</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dart">设置图片地址 :<br><span class="hljs-keyword">var</span> imgobj = <span class="hljs-built_in">document</span>.getElementsByTagName( <span class="hljs-string">&#x27;img&#x27;</span> )[ <span class="hljs-number">0</span> ];<br>imgobj.src = <span class="hljs-string">&#x27;./imgs/1.png&#x27;</span>;<br></code></pre></td></tr></table></figure><h3 id="操纵类名"><a href="#操纵类名" class="headerlink" title="操纵类名"></a>操纵类名</h3><blockquote><p>操作类样式使用的是 className, 而不是 class. 因为 class 是一个关键字.</p></blockquote><h3 id="几个特殊的属性"><a href="#几个特殊的属性" class="headerlink" title="几个特殊的属性"></a>几个特殊的属性</h3><ul><li><p>.innerText</p></li><li><blockquote><p>  表示标签内部的文本<br>  其与 innerHTML 的区别是<br> 1&gt; 读取的时候忽略标签<br> 2&gt; 设置的时候 标签形式的字符串不会被转换成 DOM, 而是转义( 例如: &gt; &gt; )</p></blockquote></li><li><p>.innerHTML</p></li><li><blockquote><p> inner 表示的是内部的, 与之对应的有一个 outer 叫外部的<br>  innerHTML 内部的 html</p><pre><code class="hljs">这个属性的作用是读取或设置标签中的 内容( 子标签等 )</code></pre></blockquote></li></ul><h3 id="处理行内样式"><a href="#处理行内样式" class="headerlink" title="处理行内样式"></a>处理行内样式</h3><blockquote><p>样式的分类:<br>            1&gt; 行内样式: 直接写在标签中的样式<br>                <span style="color: red; font-size: 30px;"></span><br>            2&gt; 嵌入样式: 写在页面的 style 标签中的样式, 一般使用的是选择器来定位元素<br>            3&gt; 外部样式: 独立的利用一个 css 文件写到外面, 然后利用 link 标签引入 css</p><pre><code class="hljs">        专一原则, 就近原则    标签的行内样式写到一个 style 属性中( 注意这个属性是一个很长的字符串 )    对应的 DOM 对象, 也有一个 style 属性.     但是 DOM 对象的 style 属性不是一个字符串. DOM 的 style 属性也是一个对象,    这个对象就是 样式属性名 与 样式属性值 构成的键值对.    DOM对象.style.样式属性名 = 样式属性值</code></pre></blockquote><h3 id="非行内样式-样式操作"><a href="#非行内样式-样式操作" class="headerlink" title="非行内样式-样式操作"></a>非行内样式-样式操作</h3><blockquote><p>style 只能处理行内样式, 无法处理嵌入样式<br>        如果第一次获取元素的样式值的时候, 样式不是行内样式, 是写在外部的, 就无法使用 style 获取<br>        应该使用 “计算样式”<br>            window.getComputedStyle( 元素 )<br>        该方法会返回这个元素的 所有 计算样式的 对象<br>        其使用方法与 style 属性的使用方法是一模一样的( 只读 ).</p><pre><code class="hljs">    var left = box.style.left || window.getComputedStyle( box ).left;    function func( arg ) &#123;        // 对参数进行操作        // 加入我们需要的参数是一个数组        arg = arg || [];          // 如果传入数组了, 那么这句话无效, 如果没有传入参数则使用 [] 给 arg 赋值        // ...    &#125;利用标准 DOM 的方式创建 页面中的 元素思路: 将写 html 标签的顺序改成代码的顺序即可</code></pre></blockquote>]]></content>
    
    
    <categories>
      
      <category>javascript API笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>dom操作</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Less语法</title>
    <link href="/2020/08/11/Less%E8%AF%AD%E6%B3%95/"/>
    <url>/2020/08/11/Less%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><blockquote><p>Less （Leaner Style Sheets 的缩写） 是一门向后兼容的 CSS 扩展语言。这里呈现的是 Less 的官方文档（中文版），包含了 Less 语言以及利用 JavaScript 开发的用于将 Less 样式转换成 CSS 样式的 Less.js 工具。</p></blockquote><p>因为 Less 和 CSS 非常像，因此很容易学习。而且 Less 仅对 CSS 语言增加了少许方便的扩展，这就是 Less 如此易学的原因之一。</p><h1 id="变量（Variables）"><a href="#变量（Variables）" class="headerlink" title="变量（Variables）"></a>变量（Variables）</h1><p>无需多说，看代码一目了然： </p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@width:</span> <span class="hljs-number">10px</span>;<br><span class="hljs-variable">@height:</span> <span class="hljs-variable">@width</span> + <span class="hljs-number">10px</span>;<br><br><span class="hljs-selector-id">#header</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-variable">@width</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-variable">@height</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>编译为：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#header</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">10px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">20px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="混合（Mixins）"><a href="#混合（Mixins）" class="headerlink" title="混合（Mixins）"></a>混合（Mixins）</h1><p>混合（Mixin）是一种将一组属性从一个规则集包含（或混入）到另一个规则集的方法。假设我们定义了一个类（class）如下：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">.<span class="hljs-keyword">bordered </span>&#123;<br>  <span class="hljs-keyword">border-top: </span>dotted <span class="hljs-number">1</span>px <span class="hljs-keyword">black;</span><br><span class="hljs-keyword"></span>  <span class="hljs-keyword">border-bottom: </span>solid <span class="hljs-number">2</span>px <span class="hljs-keyword">black;</span><br><span class="hljs-keyword"></span>&#125;<br></code></pre></td></tr></table></figure><p>如果我们希望在其它规则集中使用这些属性呢？没问题，我们只需像下面这样输入所需属性的类（class）名称即可，如下所示：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#menu</span> <span class="hljs-selector-tag">a</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#111</span>;<br>  <span class="hljs-selector-class">.bordered</span>();<br>&#125;<br><br><span class="hljs-selector-class">.post</span> <span class="hljs-selector-tag">a</span> &#123;<br>  <span class="hljs-attribute">color</span>: red;<br>  <span class="hljs-selector-class">.bordered</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p><code>.bordered</code> 类所包含的属性就将同时出现在 <code>#menu a</code> 和 <code>.post a</code> 中了。（注意，你也可以使用 <code>#ids</code> 作为 mixin 使用。</p><h1 id="嵌套（Nesting）"><a href="#嵌套（Nesting）" class="headerlink" title="嵌套（Nesting）"></a>嵌套（Nesting）</h1><p>Less 提供了使用嵌套（nesting）代替层叠或与层叠结合使用的能力。假设我们有以下 CSS 代码：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-id">#header</span> &#123;<br>  <span class="hljs-attribute">color</span>: black;<br>&#125;<br><span class="hljs-selector-id">#header</span> <span class="hljs-selector-class">.navigation</span> &#123;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">12px</span>;<br>&#125;<br><span class="hljs-selector-id">#header</span> <span class="hljs-selector-class">.logo</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>用 Less 语言我们可以这样书写代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#header</span> &#123;<br>  <span class="hljs-attribute">color</span>: black;<br>  <span class="hljs-selector-class">.navigation</span> &#123;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">12px</span>;<br>  &#125;<br>  <span class="hljs-selector-class">.logo</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>用 Less 书写的代码更加简洁，并且模仿了 HTML 的组织结构。</p><p>你还可以使用此方法将伪选择器（pseudo-selectors）与混合（mixins）一同使用。下面是一个经典的 clearfix 技巧，重写为一个混合（mixin） (<code>&amp;</code> 表示当前选择器的父级）：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.clearfix</span> &#123;<br>  <span class="hljs-attribute">display</span>: block;<br>  zoom: <span class="hljs-number">1</span>;<br><br>  &amp;<span class="hljs-selector-pseudo">:after</span> &#123;<br>    <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot; &quot;</span>;<br>    <span class="hljs-attribute">display</span>: block;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">clear</span>: both;<br>    <span class="hljs-attribute">visibility</span>: hidden;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="规则嵌套和冒泡"><a href="#规则嵌套和冒泡" class="headerlink" title="@规则嵌套和冒泡"></a>@规则嵌套和冒泡</h2><p>@ 规则（例如 <code>@media</code> 或 <code>@supports</code>）可以与选择器以相同的方式进行嵌套。@ 规则会被放在前面，同一规则集中的其它元素的相对顺序保持不变。这叫做冒泡（bubbling）。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.component</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;<br>  <span class="hljs-keyword">@media</span> (<span class="hljs-attribute">min-width</span>: <span class="hljs-number">768px</span>) &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">600px</span>;<br>    <span class="hljs-keyword">@media</span>  (<span class="hljs-attribute">min-resolution</span>: <span class="hljs-number">192dpi</span>) &#123;<br>      <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">/img/retina2x.png</span>);<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">@media</span> (<span class="hljs-attribute">min-width</span>: <span class="hljs-number">1280px</span>) &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">800px</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>编译为：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.component</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;<br>&#125;<br><span class="hljs-keyword">@media</span> (<span class="hljs-attribute">min-width</span>: <span class="hljs-number">768px</span>) &#123;<br>  <span class="hljs-selector-class">.component</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">600px</span>;<br>  &#125;<br>&#125;<br><span class="hljs-keyword">@media</span> (<span class="hljs-attribute">min-width</span>: <span class="hljs-number">768px</span>) <span class="hljs-keyword">and</span> (<span class="hljs-attribute">min-resolution</span>: <span class="hljs-number">192dpi</span>) &#123;<br>  <span class="hljs-selector-class">.component</span> &#123;<br>    <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">/img/retina2x.png</span>);<br>  &#125;<br>&#125;<br><span class="hljs-keyword">@media</span> (<span class="hljs-attribute">min-width</span>: <span class="hljs-number">1280px</span>) &#123;<br>  <span class="hljs-selector-class">.component</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">800px</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="运算（Operations）"><a href="#运算（Operations）" class="headerlink" title="运算（Operations）"></a>运算（Operations）</h1><p>算术运算符 <code>+</code>、<code>-</code>、<code>*</code>、<code>/</code> 可以对任何数字、颜色或变量进行运算。如果可能的话，算术运算符在加、减或比较之前会进行单位换算。计算的结果以最左侧操作数的单位类型为准。如果单位换算无效或失去意义，则忽略单位。无效的单位换算例如：px 到 cm 或 rad 到 % 的转换。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-comment">// 所有操作数被转换成相同的单位</span><br><span class="hljs-variable">@conversion-1:</span> <span class="hljs-number">5cm</span> + <span class="hljs-number">10mm</span>; <span class="hljs-comment">// 结果是 6cm</span><br><span class="hljs-variable">@conversion-2:</span> <span class="hljs-number">2</span> - <span class="hljs-number">3cm</span> - <span class="hljs-number">5mm</span>; <span class="hljs-comment">// 结果是 -1.5cm</span><br><br><span class="hljs-comment">// conversion is impossible</span><br><span class="hljs-variable">@incompatible-units:</span> <span class="hljs-number">2</span> + <span class="hljs-number">5px</span> - <span class="hljs-number">3cm</span>; <span class="hljs-comment">// 结果是 4px</span><br><br><span class="hljs-comment">// example with variables</span><br><span class="hljs-variable">@base:</span> <span class="hljs-number">5%</span>;<br><span class="hljs-variable">@filler:</span> <span class="hljs-variable">@base</span> * <span class="hljs-number">2</span>; <span class="hljs-comment">// 结果是 10%</span><br><span class="hljs-variable">@other:</span> <span class="hljs-variable">@base</span> + <span class="hljs-variable">@filler</span>; <span class="hljs-comment">// 结果是 15%</span><br></code></pre></td></tr></table></figure><p>乘法和除法不作转换。因为这两种运算在大多数情况下都没有意义，一个长度乘以一个长度就得到一个区域，而 CSS 是不支持指定区域的。Less 将按数字的原样进行操作，并将为计算结果指定明确的单位类型。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@base:</span> <span class="hljs-number">2cm</span> * <span class="hljs-number">3mm</span>; <span class="hljs-comment">// 结果是 6cm</span><br></code></pre></td></tr></table></figure><p>你还可以对颜色进行算术运算：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@color:</span> (<span class="hljs-number">#224488</span> / <span class="hljs-number">2</span>); <span class="hljs-comment">// 结果是 #112244</span><br><span class="hljs-attribute">background-color</span>: <span class="hljs-number">#112244</span> + <span class="hljs-number">#111</span>; <span class="hljs-comment">// 结果是 #223355</span><br></code></pre></td></tr></table></figure><p>不过，你会发现 Less 提供的 <a href="https://less.bootcss.com/functions/#color-operations">色彩函数</a> 更有用。</p><p>From 4.0, No division is performed outside of parens using <code>/</code> operator.</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@color:</span> <span class="hljs-number">#222</span> / <span class="hljs-number">2</span>; <span class="hljs-comment">// results in `#222 / 2`, not #111</span><br><span class="hljs-attribute">background-color</span>: (<span class="hljs-number">#FFFFFF</span> / <span class="hljs-number">16</span>); <span class="hljs-comment">//results is #101010</span><br></code></pre></td></tr></table></figure><p>You can change <a href="https://less.bootcss.com/usage/#less-options-math">Math</a> setting, if you want to make it always work, but not recommended.</p><h2 id="calc-特例"><a href="#calc-特例" class="headerlink" title="calc() 特例"></a>calc() 特例</h2><p><em>Released v3.0.0</em></p><p>为了与 CSS 保持兼容，<code>calc()</code> 并不对数学表达式进行计算，但是在嵌套函数中会计算变量和数学公式的值。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@var:</span> <span class="hljs-number">50vh</span>/<span class="hljs-number">2</span>;<br><span class="hljs-attribute">width</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">50%</span> + (<span class="hljs-variable">@var</span> - <span class="hljs-number">20px</span>));  <span class="hljs-comment">// 结果是 calc(50% + (25vh - 20px))</span><br></code></pre></td></tr></table></figure><h1 id="转义（Escaping）"><a href="#转义（Escaping）" class="headerlink" title="转义（Escaping）"></a>转义（Escaping）</h1><p>转义（Escaping）允许你使用任意字符串作为属性或变量值。任何 <code>~&quot;anything&quot;</code> 或 <code>~&#39;anything&#39;</code> 形式的内容都将按原样输出，除非 <a href="https://less.bootcss.com/features/#variables-feature-variable-interpolation">interpolation</a>。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@min768:</span> <span class="hljs-string">~&quot;(min-width: 768px)&quot;</span>;<br><span class="hljs-selector-class">.element</span> &#123;<br>  <span class="hljs-keyword">@media</span> <span class="hljs-variable">@min768</span> &#123;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1.2rem</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>编译为：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-keyword">@media</span> (<span class="hljs-attribute">min-width</span>: <span class="hljs-number">768px</span>) &#123;<br>  <span class="hljs-selector-class">.element</span> &#123;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1.2rem</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意，从 Less 3.5 开始，可以简写为：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@min768:</span> (<span class="hljs-attribute">min-width</span>: <span class="hljs-number">768px</span>);<br><span class="hljs-selector-class">.element</span> &#123;<br>  <span class="hljs-keyword">@media</span> <span class="hljs-variable">@min768</span> &#123;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1.2rem</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在 Less 3.5+ 版本中，许多以前需要“引号转义”的情况就不再需要了。</p><h1 id="函数（Functions）"><a href="#函数（Functions）" class="headerlink" title="函数（Functions）"></a>函数（Functions）</h1><p>Less 内置了多种函数用于转换颜色、处理字符串、算术运算等。这些函数在<a href="https://less.bootcss.com/functions/">Less 函数手册</a>中有详细介绍。</p><p>函数的用法非常简单。下面这个例子将介绍如何利用 percentage 函数将 0.5 转换为 50%，将颜色饱和度增加 5%，以及颜色亮度降低 25% 并且色相值增加 8 等用法：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@base:</span> <span class="hljs-number">#f04615</span>;<br><span class="hljs-variable">@width:</span> <span class="hljs-number">0.5</span>;<br><br><span class="hljs-selector-class">.class</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-built_in">percentage</span>(<span class="hljs-variable">@width</span>); <span class="hljs-comment">// returns `50%`</span><br>  <span class="hljs-attribute">color</span>: <span class="hljs-built_in">saturate</span>(<span class="hljs-variable">@base</span>, <span class="hljs-number">5%</span>);<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">spin</span>(<span class="hljs-built_in">lighten</span>(<span class="hljs-variable">@base</span>, <span class="hljs-number">25%</span>), <span class="hljs-number">8</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="命名空间和访问符"><a href="#命名空间和访问符" class="headerlink" title="命名空间和访问符"></a>命名空间和访问符</h1><p>(不要和 <a href="http://www.w3.org/TR/css3-namespace/">CSS <code>@namespace</code></a> 或 <a href="http://www.w3.org/TR/css3-selectors/#typenmsp">namespace selectors</a> 混淆了)。</p><p>有时，出于组织结构或仅仅是为了提供一些封装的目的，你希望对混合（mixins）进行分组。你可以用 Less 更直观地实现这一需求。假设你希望将一些混合（mixins）和变量置于 <code>#bundle</code> 之下，为了以后方便重用或分发：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#bundle</span>() &#123;<br>  <span class="hljs-selector-class">.button</span> &#123;<br>    <span class="hljs-attribute">display</span>: block;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid black;<br>    <span class="hljs-attribute">background-color</span>: grey;<br>    &amp;<span class="hljs-selector-pseudo">:hover</span> &#123;<br>      <span class="hljs-attribute">background-color</span>: white;<br>    &#125;<br>  &#125;<br>  <span class="hljs-selector-class">.tab</span> &#123; ... &#125;<br>  <span class="hljs-selector-class">.citation</span> &#123; ... &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>现在，如果我们希望把 <code>.button</code> 类混合到 <code>#header a</code> 中，我们可以这样做：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-id">#header</span> <span class="hljs-selector-tag">a</span> &#123;<br>  <span class="hljs-attribute">color</span>: orange;<br>  <span class="hljs-selector-id">#bundle</span><span class="hljs-selector-class">.button</span>();  <span class="hljs-comment">// 还可以书写为 #bundle &gt; .button 形式</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="映射（Maps）"><a href="#映射（Maps）" class="headerlink" title="映射（Maps）"></a>映射（Maps）</h1><p>从 Less 3.5 版本开始，你还可以将混合（mixins）和规则集（rulesets）作为一组值的映射（map）使用。</p><figure class="highlight leaf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs leaf"><span class="hljs-punctuation">#</span><span class="hljs-keyword">colors</span><span class="hljs-params">()</span> &#123;<br>  primary: blue;<br>  secondary: green;<br>&#125;<br><br>.button &#123;<br>  color: <span class="hljs-punctuation">#</span><span class="hljs-keyword">colors</span>[primary];<br>  border: 1px solid <span class="hljs-punctuation">#</span><span class="hljs-keyword">colors</span>[secondary];<br>&#125;<br></code></pre></td></tr></table></figure><p>输出符合预期：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.button</span> &#123;<br>  <span class="hljs-attribute">color</span>: blue;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid green;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="注释（Comments）"><a href="#注释（Comments）" class="headerlink" title="注释（Comments）"></a>注释（Comments）</h1><p>块注释和行注释都可以使用：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-comment">/* 一个块注释</span><br><span class="hljs-comment"> * style comment! */</span><br><span class="hljs-variable">@var:</span> red;<br><br><span class="hljs-comment">// 这一行被注释掉了！</span><br><span class="hljs-variable">@var:</span> white;<br></code></pre></td></tr></table></figure><h1 id="导入（Importing）"><a href="#导入（Importing）" class="headerlink" title="导入（Importing）"></a>导入（Importing）</h1><p>“导入”的工作方式和你预期的一样。你可以导入一个 <code>.less</code> 文件，此文件中的所有变量就可以全部使用了。如果导入的文件是 <code>.less</code> 扩展名，则可以将扩展名省略掉：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-keyword">@import</span> <span class="hljs-string">&quot;library&quot;</span>; <span class="hljs-comment">// library.less</span><br><span class="hljs-keyword">@import</span> <span class="hljs-string">&quot;typo.css&quot;</span>;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Less语法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Less语法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>操作dom获取宽高和坐标</title>
    <link href="/2020/08/10/%E6%93%8D%E4%BD%9Cdom%E8%8E%B7%E5%8F%96%E5%AE%BD%E9%AB%98%E5%92%8C%E5%9D%90%E6%A0%87/"/>
    <url>/2020/08/10/%E6%93%8D%E4%BD%9Cdom%E8%8E%B7%E5%8F%96%E5%AE%BD%E9%AB%98%E5%92%8C%E5%9D%90%E6%A0%87/</url>
    
    <content type="html"><![CDATA[<h1 id="操作dom坐标"><a href="#操作dom坐标" class="headerlink" title="操作dom坐标"></a>操作dom坐标</h1><h2 id="与坐标有关的属性"><a href="#与坐标有关的属性" class="headerlink" title="与坐标有关的属性"></a>与坐标有关的属性</h2><p>screenX, screenY,   screen </p><p>屏幕, 鼠标相对于我们的计算机屏幕左上角的坐标<br>clientX, clientY,   client</p><p> 客户端, 鼠标相对于浏览器中的页面的可视区域的左上角的坐标<br> pageX, pageY,       page </p><p>页面的意思, 鼠标相对于页面( 页芯 )的左上角的坐标<br> offsetX, offsetY    offset </p><p>偏移量, 可以认为是相对的距离.<br>offsetX 与 offsetY </p><p>表示鼠标在盒子内部, 相对于盒子而言它的坐标是多少<br>layerX, layerY     </p><p> 其功能能可以简单的理解为就是 offsetX Y, 但是这个属性是火狐中的属性<br>练习: 跟着鼠标移动的图片<br> 需求是鼠标移动到哪里, 图片就跟到哪里<br> 练习: 拖拽<br>页面中有一个盒子, 鼠标点击盒子里面的某一个区域( 任意 )<br>在鼠标按着不动, 移动鼠标, 盒子会跟着鼠标一起移动, 鼠标放开后<br>盒子停留.</p><h2 id="获取元素宽高及其他属性"><a href="#获取元素宽高及其他属性" class="headerlink" title="获取元素宽高及其他属性"></a>获取元素宽高及其他属性</h2><p>​    元素.offsetWidth<br>    元素.offsetHeight<br>    元素.offsetLeft<br>    元素.offsetTop</p><p>html  元素  clientWidth  浏览器可视区域的宽度</p><p>var sw &#x3D; document.documentElement.clientWidth;</p><p>元素.offsetX </p><p> 点击的盒子内部某个点距离盒子的距离</p><h1 id="vue获取宽高和坐标"><a href="#vue获取宽高和坐标" class="headerlink" title="vue获取宽高和坐标"></a>vue获取宽高和坐标</h1><p>ref  获取dom</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;iframe<br>      <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;mainIframe&quot;</span><br>      name=<span class="hljs-string">&quot;mainIframe&quot;</span><br>      src=<span class="hljs-string">&quot;/cigmap-v2/#/riskctrl/onemap&quot;</span><br>      frameborder=<span class="hljs-string">&quot;0&quot;</span><br>      scrolling=<span class="hljs-string">&quot;auto&quot;</span><br>      ref=<span class="hljs-string">&quot;myiframe&quot;</span><br>    &gt;&lt;/iframe&gt;<br><br><br><br>// console.log(this.<span class="hljs-variable">$refs</span>.myiframe);<br><br><br>一定要加s      <span class="hljs-variable">$refs</span><br></code></pre></td></tr></table></figure><p>​获取元素坐标</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">this.<span class="hljs-variable">$refs</span><span class="hljs-selector-class">.xxx</span><span class="hljs-selector-class">.getBoundingClientRect</span>()<br></code></pre></td></tr></table></figure><p>​获取元素高度 </p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> navH = this.<span class="hljs-symbol">$refs</span>.navH;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-number">1111111111111</span>,navH.offsetHeight);<br></code></pre></td></tr></table></figure><p>​获取屏幕高度</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;this.$refs.appH.clientHeight&#x27;</span>,this.<span class="hljs-symbol">$refs</span>.appH.clientHeight);<br>this.<span class="hljs-symbol">$refs</span>.appH.clientHeight<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>javascript API笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>dom操作</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>操作dom属性与样式</title>
    <link href="/2020/07/20/%E6%93%8D%E4%BD%9Cdom%E5%B1%9E%E6%80%A7%E4%B8%8E%E6%A0%B7%E5%BC%8F/"/>
    <url>/2020/07/20/%E6%93%8D%E4%BD%9Cdom%E5%B1%9E%E6%80%A7%E4%B8%8E%E6%A0%B7%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="什么是dom对象"><a href="#什么是dom对象" class="headerlink" title="什么是dom对象"></a>什么是dom对象</h2><p>浏览器 对象 模型( Broswer Object Model )</p><p>就是将浏览器也抽象成对象, 将浏览器中的所有的功能也抽象成对象的属性或方法.</p><p>有一个顶级对象 window, 它表示的就是浏览器</p><h3 id="load-事件"><a href="#load-事件" class="headerlink" title="load 事件"></a>load 事件</h3><p>​load 表示的是加载,表示数据加载完成就会被触发<br>    window.onload &#x3D; function () {<br>                &#x2F;&#x2F; 页面中所有的 内容 全部加载完毕<br>                &#x2F;&#x2F; 那么就会触发, 而且只会触发一次<br>            };</p><h2 id="Location-对象"><a href="#Location-对象" class="headerlink" title="Location 对象"></a>Location 对象</h2><p>页面自动跳转      window.location.href &#x3D; ‘页面地址’;  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">location.<span class="hljs-property">href</span>=<span class="hljs-string">&quot;http://www.baidu.com&quot;</span>;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>赋值跳转        location.assign( ‘<a href="https://www.baidu.com/">https://www.baidu.com</a>‘ ); &#x2F;&#x2F; assign 就是赋值的意思   可通过事件跳转</p><p> 替换跳转   location.replace( ‘<a href="http://www.qq.com/">http://www.qq.com</a>‘ )</p><p>直接将当前页替换成对应的 页面, 在浏览器记录中不记录当前页面</p><p>刷新页面   location.reload()</p><p>location.search  用来获取url?后面的字段</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs qml"><span class="hljs-keyword">var</span> <span class="hljs-built_in">url</span> = location.search;<br><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">url</span>);<br><br></code></pre></td></tr></table></figure><p>​search后面没有()</p><h3 id="解析网站地址"><a href="#解析网站地址" class="headerlink" title="解析网站地址"></a>解析网站地址</h3><p>​快速获取网站字符串的各项信息</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs arcade">document.querySelector( <span class="hljs-string">&#x27;button&#x27;</span> ).onclick = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>           <span class="hljs-comment">// 创建 a 标签</span><br>           <span class="hljs-keyword">var</span> a = document.createElement( <span class="hljs-string">&#x27;a&#x27;</span> );<br>           a.href = <span class="hljs-string">&#x27;http://www.itcast.cn:8080/123/abc/index.html?name=itcast#mark&#x27;</span>;<br><br>           <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>( <span class="hljs-string">&#x27;主机(域名): &#x27;</span> + a.host ); <br>           <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>( <span class="hljs-string">&#x27;协议: &#x27;</span> + a.protocol );<br>           <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>( <span class="hljs-string">&#x27;端口: &#x27;</span> + a.port );<br>           <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>( <span class="hljs-string">&#x27;参数: &#x27;</span> + a.search );<br>           <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>( <span class="hljs-string">&#x27;路径: &#x27;</span> + a.pathname );<br>           <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>( <span class="hljs-string">&#x27;锚点: &#x27;</span> + a.<span class="hljs-built_in">hash</span> );<br><br><br>       &#125;;<br></code></pre></td></tr></table></figure><h2 id="计时器-重要"><a href="#计时器-重要" class="headerlink" title="计时器[ 重要 ]"></a>计时器[ 重要 ]</h2><p>​延时器   setTimeout</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-built_in">setTimeout</span>( <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br><br>                    <span class="hljs-comment">// 需要推迟执行的代码</span><br><br>                &#125;, 毫秒数 )<br><br></code></pre></td></tr></table></figure><p>​定时器   setInterval</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-built_in">setInterval</span>( <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br><br>                   <span class="hljs-comment">// 需要重复执行的代码</span><br><br>               &#125;, 毫秒数 )<br><br></code></pre></td></tr></table></figure><p>​清除延时器clearTimeout( 延时器Id )<br>    清除计时器clearInterval( 计时器ID )</p><pre><code class="hljs">移动的盒子有一个 bug, 在连续点击按钮的时候, 移动的速度会越来越快.原因: 是每次点击都会开启计时器解决方法就是每次点击 都将上一次的计时器清除</code></pre><p>小案例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;ie=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.box</span>&#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">1500px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">        <span class="hljs-comment">/* border: 1px solid #ccc; */</span></span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#ccc</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;start&quot;</span>&gt;</span>开始<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;end&quot;</span>&gt;</span>结束<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&#x27;哈哈&#x27;</span>,<span class="hljs-string">&#x27;史振国&#x27;</span>, <span class="hljs-string">&#x27;张超&#x27;</span>, <span class="hljs-string">&#x27;王修刚&#x27;</span>, <span class="hljs-string">&#x27;陈海峰&#x27;</span>, <span class="hljs-string">&#x27;高千山&#x27;</span>, <span class="hljs-string">&#x27;葛睿哲&#x27;</span>, <span class="hljs-string">&#x27;闫舵&#x27;</span>, <span class="hljs-string">&#x27;常琳琳&#x27;</span>, <span class="hljs-string">&#x27;姚瑞&#x27;</span>, <span class="hljs-string">&#x27;赵忠强&#x27;</span>, <span class="hljs-string">&#x27;赵娜&#x27;</span>, <span class="hljs-string">&#x27;许家家&#x27;</span>, <span class="hljs-string">&#x27;林超&#x27;</span>, <span class="hljs-string">&#x27;王勇智&#x27;</span>, <span class="hljs-string">&#x27;谢颖瑞&#x27;</span>, <span class="hljs-string">&#x27;林婷&#x27;</span>, <span class="hljs-string">&#x27;丁子龙&#x27;</span>, <span class="hljs-string">&#x27;徐冬雪&#x27;</span>, <span class="hljs-string">&#x27;高琪&#x27;</span>, <span class="hljs-string">&#x27;陈彪&#x27;</span>, <span class="hljs-string">&#x27;冯燕东&#x27;</span>, <span class="hljs-string">&#x27;卢晶&#x27;</span>, <span class="hljs-string">&#x27;任皓&#x27;</span>, <span class="hljs-string">&#x27;孟展伊&#x27;</span>, <span class="hljs-string">&#x27;窦宇杰&#x27;</span>, <span class="hljs-string">&#x27;毛亚明&#x27;</span>, <span class="hljs-string">&#x27;张弘韦&#x27;</span>, <span class="hljs-string">&#x27;刘银川&#x27;</span>, <span class="hljs-string">&#x27;高传奇&#x27;</span>, <span class="hljs-string">&#x27;孙棒棒&#x27;</span>, <span class="hljs-string">&#x27;焦敏&#x27;</span>, <span class="hljs-string">&#x27;王坤鹏&#x27;</span>, <span class="hljs-string">&#x27;滑龙&#x27;</span>, <span class="hljs-string">&#x27;李继玄&#x27;</span>, <span class="hljs-string">&#x27;粟兴秀&#x27;</span>, <span class="hljs-string">&#x27;袁状&#x27;</span>, <span class="hljs-string">&#x27;侯志强&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-string">&#x27;柳加豪&#x27;</span>, <span class="hljs-string">&#x27;李昭萍&#x27;</span>, <span class="hljs-string">&#x27;郝萌萌&#x27;</span>, <span class="hljs-string">&#x27;张伟涛&#x27;</span>, <span class="hljs-string">&#x27;闫静超&#x27;</span>, <span class="hljs-string">&#x27;张婷婷&#x27;</span>, <span class="hljs-string">&#x27;彭可&#x27;</span>, <span class="hljs-string">&#x27;车路明&#x27;</span>, <span class="hljs-string">&#x27;裴思佳&#x27;</span>, <span class="hljs-string">&#x27;蒋智斌&#x27;</span>, <span class="hljs-string">&#x27;陈少卫&#x27;</span>, <span class="hljs-string">&#x27;梁恩硕&#x27;</span>, <span class="hljs-string">&#x27;朱思华&#x27;</span>, <span class="hljs-string">&#x27;杨晶晶&#x27;</span>, <span class="hljs-string">&#x27;杨波&#x27;</span>, <span class="hljs-string">&#x27;郭海胜&#x27;</span>, <span class="hljs-string">&#x27;梁兆兴&#x27;</span>, <span class="hljs-string">&#x27;田强&#x27;</span>, <span class="hljs-string">&#x27;张强&#x27;</span>, <span class="hljs-string">&#x27;吕涛&#x27;</span>, <span class="hljs-string">&#x27;高观宝&#x27;</span>, <span class="hljs-string">&#x27;高观宝&#x27;</span>, <span class="hljs-string">&#x27;杨阵奎&#x27;</span>, <span class="hljs-string">&#x27;王新鹏&#x27;</span>, <span class="hljs-string">&#x27;张宏宇&#x27;</span>, <span class="hljs-string">&#x27;刘铭&#x27;</span>, <span class="hljs-string">&#x27;杨瑞超&#x27;</span>, <span class="hljs-string">&#x27;魏月莹&#x27;</span>, <span class="hljs-string">&#x27;王晶&#x27;</span>, <span class="hljs-string">&#x27;黄善龙&#x27;</span>, <span class="hljs-string">&#x27;晏鹏&#x27;</span>, <span class="hljs-string">&#x27;李昕&#x27;</span>, <span class="hljs-string">&#x27;梁学智&#x27;</span>, <span class="hljs-string">&#x27;于永津&#x27;</span>, <span class="hljs-string">&#x27;张亚坤&#x27;</span>, <span class="hljs-string">&#x27;孟超&#x27;</span>, <span class="hljs-string">&#x27;孙玉&#x27;</span>, <span class="hljs-string">&#x27;王旭&#x27;</span>];</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> start = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByClassName</span>(<span class="hljs-string">&#x27;start&#x27;</span>)[<span class="hljs-number">0</span>];</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> end = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByClassName</span>(<span class="hljs-string">&#x27;end&#x27;</span>)[<span class="hljs-number">0</span>];</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> box = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByClassName</span>(<span class="hljs-string">&#x27;box&#x27;</span>)[<span class="hljs-number">0</span>];</span><br><span class="language-javascript">    </span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> timer;<span class="hljs-comment">//....................................................//写外面</span></span><br><span class="language-javascript">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>;i&lt;arr.<span class="hljs-property">length</span>;i++)&#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> div = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;div&#x27;</span>);</span><br><span class="language-javascript">        div.<span class="hljs-property">innerHTML</span> = arr[i];</span><br><span class="language-javascript">        div.<span class="hljs-property">style</span>.<span class="hljs-property">float</span> = <span class="hljs-string">&#x27;left&#x27;</span>;</span><br><span class="language-javascript">        div.<span class="hljs-property">style</span>.<span class="hljs-property">margin</span> = <span class="hljs-string">&#x27;10px&#x27;</span>;</span><br><span class="language-javascript">        div.<span class="hljs-property">style</span>.<span class="hljs-property">padding</span> = <span class="hljs-string">&#x27;2px&#x27;</span>;</span><br><span class="language-javascript">        div.<span class="hljs-property">style</span>.<span class="hljs-property">backgroundColor</span> = <span class="hljs-string">&#x27;yellow&#x27;</span>;</span><br><span class="language-javascript">        box.<span class="hljs-title function_">appendChild</span>(div);</span><br><span class="language-javascript">    &#125;;</span><br><span class="language-javascript">    </span><br><span class="language-javascript">    start.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-built_in">clearInterval</span>(timer);</span><br><span class="language-javascript">        timer = <span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> index = <span class="hljs-built_in">parseInt</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>()*arr.<span class="hljs-property">length</span>);</span><br><span class="language-javascript">            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>;i&lt;arr.<span class="hljs-property">length</span>;i++)&#123;</span><br><span class="language-javascript">                box.<span class="hljs-property">children</span>[i].<span class="hljs-property">style</span>.<span class="hljs-property">backgroundColor</span> = <span class="hljs-string">&#x27;yellow&#x27;</span>;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">            box.<span class="hljs-property">children</span>[index].<span class="hljs-property">style</span>.<span class="hljs-property">backgroundColor</span> = <span class="hljs-string">&#x27;red&#x27;</span>;</span><br><span class="language-javascript">            <span class="hljs-comment">// this.previousElementSibling.children[index].style.backgroundColor = &#x27;red&#x27;;</span></span><br><span class="language-javascript">             <span class="hljs-comment">// console.log(index);</span></span><br><span class="language-javascript">        &#125;,<span class="hljs-number">200</span>)</span><br><span class="language-javascript">        </span><br><span class="language-javascript">       </span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    end.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">params</span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-built_in">clearInterval</span>(timer);</span><br><span class="language-javascript">    &#125;;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="操作dom属性与样式"><a href="#操作dom属性与样式" class="headerlink" title="操作dom属性与样式"></a>操作dom属性与样式</h2><p>操作属性<br>        1&gt; 读取属性的值<br>        2&gt; 设置属性的值<br>        在 DOM 观点中, 页面中的每一个标签都是 对象, 所以<br>            我们要读取元素的属性时, 直接就是 读取 对象的  属性<br>            我们要设置元素的属性时, 直接就是 给对象的属性 赋值</p><pre><code class="hljs">-&gt; 操作类样式使用的是 className, 而不是 class. 因为 class 是一个关键字.</code></pre><h3 id="操纵属性"><a href="#操纵属性" class="headerlink" title="操纵属性"></a>操纵属性</h3><blockquote><p> &#x2F;&#x2F; 设置宽高的方法有三种<br>        &#x2F;&#x2F; 1&gt; img 标签自有的属性 width 与 height<br>        &#x2F;&#x2F; 2&gt; 设置 img 的行内样式, 即 img 标签的 style 属性中的 width 与 height<br>        &#x2F;&#x2F; 3&gt; 使用 类样式, 外部样式, 嵌入样式</p><p>1     img.width &#x3D; ‘500’  使用 html 的属性的时候设置宽高默认就是像素<br>2     img.style.width &#x3D; ‘500px’;<br>3     img.className &#x3D; ‘c’;<br>          .c {<br>            width: 200px;<br>        }</p></blockquote><p> DOM对象.style.样式属性名 &#x3D; 样式属性值</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dart">设置图片地址 :<br><span class="hljs-keyword">var</span> imgobj = <span class="hljs-built_in">document</span>.getElementsByTagName( <span class="hljs-string">&#x27;img&#x27;</span> )[ <span class="hljs-number">0</span> ];<br>imgobj.src = <span class="hljs-string">&#x27;./imgs/1.png&#x27;</span>;<br></code></pre></td></tr></table></figure><h3 id="操纵类名"><a href="#操纵类名" class="headerlink" title="操纵类名"></a>操纵类名</h3><blockquote><p>操作类样式使用的是 className, 而不是 class. 因为 class 是一个关键字.</p></blockquote><h3 id="几个特殊的属性"><a href="#几个特殊的属性" class="headerlink" title="几个特殊的属性"></a>几个特殊的属性</h3><ul><li><p>.innerText</p></li><li><blockquote><p>  表示标签内部的文本<br>  其与 innerHTML 的区别是<br> 1&gt; 读取的时候忽略标签<br> 2&gt; 设置的时候 标签形式的字符串不会被转换成 DOM, 而是转义( 例如: &gt; &gt; )</p></blockquote></li><li><p>.innerHTML</p></li><li><blockquote><p> inner 表示的是内部的, 与之对应的有一个 outer 叫外部的<br>  innerHTML 内部的 html</p><pre><code class="hljs">这个属性的作用是读取或设置标签中的 内容( 子标签等 )</code></pre></blockquote></li></ul><h3 id="处理行内样式"><a href="#处理行内样式" class="headerlink" title="处理行内样式"></a>处理行内样式</h3><blockquote><p>样式的分类:<br>            1&gt; 行内样式: 直接写在标签中的样式<br>                <span style="color: red; font-size: 30px;"></span><br>            2&gt; 嵌入样式: 写在页面的 style 标签中的样式, 一般使用的是选择器来定位元素<br>            3&gt; 外部样式: 独立的利用一个 css 文件写到外面, 然后利用 link 标签引入 css</p><pre><code class="hljs">        专一原则, 就近原则    标签的行内样式写到一个 style 属性中( 注意这个属性是一个很长的字符串 )    对应的 DOM 对象, 也有一个 style 属性.     但是 DOM 对象的 style 属性不是一个字符串. DOM 的 style 属性也是一个对象,    这个对象就是 样式属性名 与 样式属性值 构成的键值对.    DOM对象.style.样式属性名 = 样式属性值</code></pre></blockquote><h3 id="非行内样式-样式操作"><a href="#非行内样式-样式操作" class="headerlink" title="非行内样式-样式操作"></a>非行内样式-样式操作</h3><blockquote><p>style 只能处理行内样式, 无法处理嵌入样式<br>        如果第一次获取元素的样式值的时候, 样式不是行内样式, 是写在外部的, 就无法使用 style 获取<br>        应该使用 “计算样式”<br>            window.getComputedStyle( 元素 )<br>        该方法会返回这个元素的 所有 计算样式的 对象<br>        其使用方法与 style 属性的使用方法是一模一样的( 只读 ).</p><pre><code class="hljs">    var left = box.style.left || window.getComputedStyle( box ).left;    function func( arg ) &#123;        // 对参数进行操作        // 加入我们需要的参数是一个数组        arg = arg || [];          // 如果传入数组了, 那么这句话无效, 如果没有传入参数则使用 [] 给 arg 赋值        // ...    &#125;利用标准 DOM 的方式创建 页面中的 元素思路: 将写 html 标签的顺序改成代码的顺序即可</code></pre></blockquote>]]></content>
    
    
    <categories>
      
      <category>javascript API笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>dom操作</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue随笔_vuex</title>
    <link href="/2020/07/08/vue%E9%9A%8F%E7%AC%94_vuex/"/>
    <url>/2020/07/08/vue%E9%9A%8F%E7%AC%94_vuex/</url>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Vuex 是一个专为 Vue.js 应用程序开发的<strong>状态管理模式 + 库</strong>。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。 </p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>npm</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> install vuex@next --save<br></code></pre></td></tr></table></figure><p>yarn</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">yarn <span class="hljs-keyword">add</span> vuex<span class="hljs-variable">@next</span> <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure><p>在<a href="https://so.csdn.net/so/search?q=%E8%84%9A%E6%89%8B%E6%9E%B6&spm=1001.2101.3001.7020">脚手架</a> 创建项目时勾选vuex的选项系统会自动创建 </p><h2 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h2><h3 id="State"><a href="#State" class="headerlink" title="State"></a>State</h3><blockquote><p>提供唯一的公共数据源，所有共享的数据统一放到store的state进行储存，相似与data </p></blockquote><p> 在vuex中state中定义数据，可以在任何组件中进行调用 </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php">import Vue <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br>import Vuex <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br> <br>Vue.<span class="hljs-keyword">use</span>(Vuex)<br> <br>export <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title function_ invoke__">Store</span>(&#123;<br>  //数据，相当于data<br>  <span class="hljs-attr">state</span>: &#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;张三&quot;</span>,<br>    <span class="hljs-attr">age</span>:<span class="hljs-number">12</span>,<br>    <span class="hljs-attr">count</span>:<span class="hljs-number">0</span><br>  &#125;,<br>&#125;)<br></code></pre></td></tr></table></figure><p> <strong>调用：</strong> </p><p>方法一： 在标签中直接使用 </p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pf"><span class="hljs-variable">&lt;p&gt;</span>&#123;&#123;<span class="hljs-variable">$store</span>.<span class="hljs-keyword">state</span>.name&#125;&#125;&lt;/p&gt;<br></code></pre></td></tr></table></figure><p> 方法二： </p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pf">this.<span class="hljs-variable">$store</span>.<span class="hljs-keyword">state</span>.全局数据名称 <br></code></pre></td></tr></table></figure><p>方法三： </p><p>从vuex中按需导入mapstate函数 </p><figure class="highlight capnproto"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs capnproto"><span class="hljs-keyword">import</span> &#123; mapState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vuex&quot;</span>;<br></code></pre></td></tr></table></figure><h4 id="注意：当前组件需要的全局数据，映射为当前组件computed属性"><a href="#注意：当前组件需要的全局数据，映射为当前组件computed属性" class="headerlink" title="注意：当前组件需要的全局数据，映射为当前组件computed属性"></a>注意：当前组件需要的全局数据，映射为当前组件computed属性</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">computed:&#123;<br>..<span class="hljs-selector-class">.mapState</span>(<span class="hljs-selector-attr">[<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>,<span class="hljs-string">&quot;sex&quot;</span>]</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>直接使用</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">$store.state.name</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>辅助函数</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">name</span> + age + sex&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="Mutation"><a href="#Mutation" class="headerlink" title="Mutation"></a>Mutation</h3><blockquote><p>更改 Vuex 的 store 中的状态的唯一方法是提交 mutation。Vuex 中的 mutation 非常类似于事件：每个 mutation 都有一个字符串的事件类型 (type)和一个回调函数 (handler)。这个回调函数就是我们实际进行状态更改的地方，并且它会接受 state 作为第一个参数：</p></blockquote><p><strong>在vuex中定义：</strong> </p><p>其中参数state参数是必须的，也可以自己传递一个参数，如下代码，进行计数器的加减操作，加法操作时可以根据所传递参数大小进行相加，减法操作没有传参每次减一 </p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs vim">state:&#123;<br>    name:<span class="hljs-string">&quot;张三&quot;</span>，<br>    age:<span class="hljs-string">&quot;12&quot;</span>，<br>    <span class="hljs-built_in">count</span>:<span class="hljs-comment">&quot;0</span><br>&#125;,<br>mutations:&#123;<br>    addcount(state,num)&#123;<br>        state.<span class="hljs-built_in">count</span> += num<br>    &#125;<br>    reduce()&#123;<br>    state.<span class="hljs-built_in">count</span>--<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>在组件中使用：</strong> </p><p> 定义两个按钮进行加减操作 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span>增加<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;btn1&quot;</span>&gt;</span>减少<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><p> 方法一： </p><p>注意：使用commit触发Mutation操作 </p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs stylus">methods:&#123;<br><span class="hljs-comment">//加法</span><br><span class="hljs-function"><span class="hljs-title">btn</span><span class="hljs-params">()</span></span>&#123;<br>this.<span class="hljs-variable">$store</span><span class="hljs-selector-class">.commit</span>(<span class="hljs-string">&quot;addcount&quot;</span>,<span class="hljs-number">10</span>)     <span class="hljs-comment">//每次加十</span><br>&#125;<br><span class="hljs-comment">//减法</span><br><span class="hljs-function"><span class="hljs-title">btn1</span><span class="hljs-params">()</span></span>&#123;<br>this.<span class="hljs-variable">$store</span><span class="hljs-selector-class">.commit</span>(<span class="hljs-string">&quot;reduce&quot;</span>) <br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>方法二： </p><p>使用辅助函数进行操作，具体方法同上 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">methods</span>:&#123;<br>    ...<span class="hljs-title function_">mapMutations</span>([<span class="hljs-string">&quot;addcount&quot;</span>,<span class="hljs-string">&quot;reduce&quot;</span>]),<br>    <span class="hljs-title function_">btn</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">addcount</span>(<span class="hljs-number">10</span>)<br>    &#125;,<br>    <span class="hljs-title function_">btn1</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">reduce</span>()<br>    &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Action-——进行异步操作"><a href="#Action-——进行异步操作" class="headerlink" title="Action ——进行异步操作"></a>Action ——进行异步操作</h3><blockquote><p>Action和Mutation相似，一般不用Mutation 异步操作，若要进行异步操作，使用Action</p><p>原因：为了方便devtools打个快照存下来，方便管理维护。所以说这个<strong>只是规范</strong>，而<strong>不是逻辑的不允许</strong>，只是为了让这个<strong>工具</strong>能够追踪数据变化而已</p></blockquote><p><strong>在vuex中定义：</strong> </p><p><strong>将上面的减法操作改为异步操作</strong> </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//操作异步操作mutation</span><br><span class="hljs-attr">action</span>:&#123;<br>    <span class="hljs-title function_">asyncAdd</span>(<span class="hljs-params">context</span>)&#123;<br>        <span class="hljs-comment">//异步</span><br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>            context.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&quot;reduce&quot;</span>)<br>        &#125;,<span class="hljs-number">1000</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p> <strong>在组件中使用：</strong> </p><p>方法一：</p><p>直接使用  dispatch触发Action函数</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-built_in">this</span>.<span class="hljs-variable">$store</span>.dispatch(<span class="hljs-string">&quot;asynAdd&quot;</span>)<br></code></pre></td></tr></table></figure><p>方法二：</p><p>使用辅助函数</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">..<span class="hljs-selector-class">.mapActions</span>(<span class="hljs-selector-attr">[<span class="hljs-string">&quot;asyncAdd&quot;</span>]</span>),<br><span class="hljs-function"><span class="hljs-title">btn2</span><span class="hljs-params">()</span></span>&#123;<br>    this<span class="hljs-selector-class">.asyncAdd</span>()<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Getter"><a href="#Getter" class="headerlink" title="Getter"></a>Getter</h3><blockquote><p>类似于vue中的computed，进行缓存，对于Store中的数据进行加工处理形成新的数据 </p></blockquote><p>具体操作类似于前几种，这里不做具体说明 </p><h3 id="Modules"><a href="#Modules" class="headerlink" title="Modules"></a>Modules</h3><blockquote><p>当遇见大型项目时，数据量大，store就会显得很臃肿</p><p>为了解决以上问题，Vuex 允许我们将 store 分割成<strong>模块（module）</strong>。每个模块拥有自己的 state、mutation、action、getter、甚至是嵌套子模块——从上至下进行同样方式的分割：</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs pf">modules:&#123;<br>    cityModules:&#123;<br>        namespaced:true,<br>        <span class="hljs-keyword">state</span>:&#123;<br>            cityname:<span class="hljs-string">&quot;中国&quot;</span>，<br>        &#125;，<br>        mutations:&#123;<br>            cityfuncion(<span class="hljs-keyword">state</span>)&#123;<br>                <span class="hljs-keyword">state</span>.cityname = <span class="hljs-string">&quot;中华人民共和国&quot;</span><br>            &#125;<br>        &#125;<br>    &#125;，<br>    userinfo:&#123;<br>       <span class="hljs-keyword">state</span>:&#123;<br>            useryname:<span class="hljs-string">&quot;小明&quot;</span>，<br>        &#125;， <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><p> 默认情况下，模块内部的 action 和 mutation 仍然是注册在<strong>全局命名空间</strong>的——这样使得多个模块能够对同一个 action 或 mutation 作出响应。 </p><p>如果希望你的模块具有更高的封装度和复用性，你可以通过添加 <code>namespaced: true</code> 的方式使其成为带命名空间的模块。当模块被注册后，它的所有 getter、action 及 mutation 都会自动根据模块注册的路径调整命名。 </p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pf">btn3()&#123;<br>    console.<span class="hljs-keyword">log</span>(this.<span class="hljs-variable">$store</span>.<span class="hljs-keyword">state</span>.cityModules.cityname);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="如何在组件中监听vuex数据变化"><a href="#如何在组件中监听vuex数据变化" class="headerlink" title="如何在组件中监听vuex数据变化"></a>如何在组件中监听vuex数据变化</h2><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs pf">vuex<br><span class="hljs-keyword">state</span>: &#123;<br>    listData:&#x27;&#x27;<br>  &#125;,<br>  mutations: &#123;<br>    listData:function(<span class="hljs-keyword">state</span>, value)&#123;<br>      <span class="hljs-keyword">state</span>.listData = value<br>    &#125;,<br>  &#125;,<br><br><br>需要监听的vue位置<br>computed: &#123;<br>    listData() &#123;<br>      return this.<span class="hljs-variable">$store</span>.<span class="hljs-keyword">state</span>.listData;<br>    &#125;<br>  &#125;,<br>  //监听执行<br>  watch: &#123;<br>    listData(val) &#123;<br>     写上你需要的东西<br>    &#125;<br>  &#125;,<br><br>其他vue改变  监听的值时<br>this.<span class="hljs-variable">$store</span>.commit(<span class="hljs-string">&quot;listData&quot;</span>, &#123;<br>        listData: <span class="hljs-number">3</span>,<br>      &#125;);<br><br><br>this.<span class="hljs-variable">$store</span>.<span class="hljs-keyword">state</span>.listData  为获取方法<br><br>this.<span class="hljs-variable">$store</span>  vuex注册为全局时 可以这样调用<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>vue笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue学习笔记</title>
    <link href="/2020/07/05/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2020/07/05/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="1-vue是什么"><a href="#1-vue是什么" class="headerlink" title="1.vue是什么"></a>1.vue是什么</h2><p>Vue (读音 &#x2F;vjuː&#x2F;，类似于 view) 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。</p><p>1是一套用于构建用户界面的渐进式框架<br>2与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用<br>3Vue 的核心库只关注视图层，易于上手，还便于与第三方库或既有项目整合。<br>4Vue 也完全能够为复杂的单页应用提供驱动。</p><h2 id="2-数据交互"><a href="#2-数据交互" class="headerlink" title="2.数据交互"></a>2.数据交互</h2><h3 id="基础数据与属性交互"><a href="#基础数据与属性交互" class="headerlink" title="基础数据与属性交互"></a>基础数据与属性交互</h3><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs fortran">v-<span class="hljs-keyword">bind</span>:属性<br></code></pre></td></tr></table></figure><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><br>&lt;<span class="hljs-keyword">div</span> id=<span class="hljs-string">&quot;app&quot;</span> v-bind:title=<span class="hljs-string">&#x27;msg1&#x27;</span>&gt;<br>        &#123;&#123;message&#125;&#125;<br>    &lt;/<span class="hljs-keyword">div</span>&gt;<br><br><br><span class="hljs-built_in">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;<br>        el:<span class="hljs-string">&#x27;#app&#x27;</span>,<br>        data:&#123;<br>            message:<span class="hljs-string">&#x27;hellow Vue1&#x27;</span>,<br>            msg1:<span class="hljs-string">&#x27;这是一个标题&#x27;</span><br>        &#125;<br>    &#125;)<br><br><br>常规数据绑定加&#123;&#123;&#125;&#125;<br>元素属性绑定不加&#123;&#123;&#125;&#125;<br></code></pre></td></tr></table></figure><h3 id="条件与循环"><a href="#条件与循环" class="headerlink" title="条件与循环"></a>条件与循环</h3><p>​</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">v-if</span><br><span class="hljs-attribute">v-for</span><br></code></pre></td></tr></table></figure><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs axapta">&lt;<span class="hljs-keyword">div</span> id=<span class="hljs-string">&quot;app-3&quot;</span>&gt;<br>  &lt;p v-<span class="hljs-keyword">if</span>=<span class="hljs-string">&quot;seen&quot;</span>&gt;现在你看到我了&lt;/p&gt;<br>&lt;/<span class="hljs-keyword">div</span>&gt;<br><span class="hljs-built_in">var</span> app3 = <span class="hljs-keyword">new</span> Vue(&#123;<br>  el: <span class="hljs-string">&#x27;#app-3&#x27;</span>,<br>  data: &#123;<br>    seen: <span class="hljs-literal">true</span><br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="数据更改"><a href="#数据更改" class="headerlink" title="数据更改"></a>数据更改</h3><p>​更改data数据</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs applescript">&lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;app3&quot;</span>&gt;<br>       &lt;p v-<span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;everylast in boxs&quot;</span>&gt;<br>           &#123;&#123;everylast.<span class="hljs-built_in">text</span>&#125;&#125;<br>       &lt;/p&gt;<br>    &lt;/<span class="hljs-keyword">div</span>&gt;<br><br><br>var app3 = new Vue(&#123;<br>        el:&#x27;<span class="hljs-comment">#app3&#x27;,</span><br>        data:&#123;<br>            boxs:[<br>                &#123;<span class="hljs-built_in">text</span>:<span class="hljs-number">1</span>&#125;,<br>                &#123;<span class="hljs-built_in">text</span>:<span class="hljs-number">2</span>&#125;,<br>                &#123;<span class="hljs-built_in">text</span>:<span class="hljs-number">3</span>&#125;<br>            ]<br>        &#125;<br>    &#125;)<br><br><br>数据更改<br>app3.boxs.push(&#123;<span class="hljs-built_in">text</span>:<span class="hljs-number">4</span>&#125;)<br></code></pre></td></tr></table></figure><p>可以看vue实例-》数据与方法<br><a href="https://cn.vuejs.org/v2/guide/instance.html">https://cn.vuejs.org/v2/guide/instance.html</a></p><h3 id="添加事件监听"><a href="#添加事件监听" class="headerlink" title="添加事件监听"></a>添加事件监听</h3><p>​v-on</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;div id=<span class="hljs-string">&quot;app4&quot;</span>&gt;<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123;app4message&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;reversefn&quot;</span>&gt;</span>点击翻转<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>    &lt;/div&gt;<br><br><span class="hljs-keyword">var</span> app4 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>        <span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#app4&#x27;</span>,<br>        <span class="hljs-attr">data</span>:&#123;<br>            <span class="hljs-attr">app4message</span>:<span class="hljs-string">&#x27;这是一句话&#x27;</span><br>        &#125;,<br>        <span class="hljs-attr">methods</span>:&#123;<br>            <span class="hljs-attr">reversefn</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">app4message</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">app4message</span>.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;&#x27;</span>).<span class="hljs-title function_">reverse</span>().<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>)<br>            &#125;<br>        &#125;<br>    &#125;)<br></code></pre></td></tr></table></figure><h3 id="数据的双向绑定"><a href="#数据的双向绑定" class="headerlink" title="数据的双向绑定"></a>数据的双向绑定</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">v-model</span><br></code></pre></td></tr></table></figure><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-comment">&lt;!-- v-model的双向数据绑定 --&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app5&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">message</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;message&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">var app5 = new Vue(&#123;</span><br><span class="language-xml">        el:&#x27;#app5&#x27;,</span><br><span class="language-xml">        data:&#123;</span><br><span class="language-xml">            message:&#x27;实时数据的双向绑定&#x27;</span><br><span class="language-xml">        &#125;</span><br><span class="language-xml">    &#125;)</span><br></code></pre></td></tr></table></figure><h3 id="v-text-和-v-html"><a href="#v-text-和-v-html" class="headerlink" title="v-text  和 v-html"></a>v-text  和 v-html</h3><h3 id="可以代替差值表达式"><a href="#可以代替差值表达式" class="headerlink" title="可以代替差值表达式"></a>可以代替差值表达式</h3><h3 id="事件与方法"><a href="#事件与方法" class="headerlink" title="事件与方法"></a>事件与方法</h3><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&#x27;msgfn&#x27;</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">msg</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>​</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">简写v-on:click = @click<br></code></pre></td></tr></table></figure><h3 id="属性数据的双向绑定"><a href="#属性数据的双向绑定" class="headerlink" title="属性数据的双向绑定"></a>属性数据的双向绑定</h3><p>​</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs fortran">v-<span class="hljs-keyword">bind</span>  可缩写为   :<span class="hljs-keyword">bind</span><br></code></pre></td></tr></table></figure><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">html</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&#x27;msgfn&#x27;</span> <span class="hljs-attr">v-bind:title</span>=<span class="hljs-string">&#x27;title&#x27;</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">msg</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">js</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">data</span>:&#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">msg</span>:<span class="hljs-string">&#x27;hello word&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">title</span>:<span class="hljs-string">&#x27;这是个信息&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;)</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="3-模板语法"><a href="#3-模板语法" class="headerlink" title="3.模板语法"></a>3.模板语法</h2><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean">&lt;!-- ### 插值表达式&#123;&#123;&#125;&#125;<br></code></pre></td></tr></table></figure><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Message: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">msg</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">​``` --&gt;</span><br><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml"></span><br></code></pre></td></tr></table></figure><h3 id="v-once-指令"><a href="#v-once-指令" class="headerlink" title="v-once 指令"></a>v-once 指令</h3><p>通过使用 v-once 指令，你也能执行一次性地插值，当数据改变时，插值处的内容不会更新。但请留心这会影响到该节点上的其它数据绑定：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-once</span>&gt;</span>这个将不会改变: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">msg</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"> --&gt;<br><br>&lt;!-- <span class="hljs-comment">### 原始 HTML</span><br><br>双大括号会将数据解释为普通文本，而非 HTML 代码。为了输出真正的 HTML，你需要使用 [`v-html` 指令](https://v2.cn.vuejs.org/v2/api/<span class="hljs-comment">#v-html)： </span><br><br></code></pre></td></tr></table></figure><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Using mustaches: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">rawHtml</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Using v-html directive: <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-html</span>=<span class="hljs-string">&quot;rawHtml&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span> </span><br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs -->">&lt;!-- ### Attribute<br><br>一般用v-bind绑定使用 JavaScript 表达式<br><br>Mustache 语法不能作用在 HTML attribute 上，遇到这种情况应该使用 [`v-bind` 指令](https://v2.cn.vuejs.org/v2/api/#v-bind)：<br><br></code></pre></td></tr></table></figure><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">&lt;<span class="hljs-keyword">div</span> v-bind:<span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;dynamicId&quot;</span>&gt;&lt;/<span class="hljs-keyword">div</span>&gt;<br></code></pre></td></tr></table></figure><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">使用 <span class="hljs-keyword">JavaScript </span>表达式<br><br></code></pre></td></tr></table></figure><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">number</span> + <span class="hljs-number">1</span> &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">ok</span> ? <span class="hljs-string">&#x27;YES&#x27;</span> : <span class="hljs-string">&#x27;NO&#x27;</span> &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">message.split</span>(<span class="hljs-name">&#x27;&#x27;</span>).reverse().join(<span class="hljs-name">&#x27;&#x27;</span>) &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-bind:id</span>=<span class="hljs-string">&quot;&#x27;list-&#x27; + id&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs -->"><br><br>是带有 v- 前缀的特殊 attribute。<br><br></code></pre></td></tr></table></figure><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dart">v-bind:参数<br>v-<span class="hljs-keyword">if</span><br>v-<span class="hljs-keyword">for</span><br>v-<span class="hljs-keyword">on</span>:click<br>v-<span class="hljs-keyword">show</span><br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs"><br>​动态参数<br><br></code></pre></td></tr></table></figure><!--注意，参数表达式的写法存在一些约束，如之后的“对动态参数表达式的约束”章节所述。--><p>&lt;a v-bind:[attributeName]&#x3D;”url”&gt; … </a></p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><br>这里的 <span class="hljs-string">`attributeName`</span> 会被作为一个 JavaScript 表达式进行动态求值，求得的值将会作为最终的参数来使用。例如，如果你的 Vue 实例有一个 <span class="hljs-string">`data`</span> property <span class="hljs-string">`attributeName`</span>，其值为 <span class="hljs-string">`&quot;href&quot;`</span>，那么这个绑定将等价于 <span class="hljs-string">`v-bind:href`</span>。 <br><br></code></pre></td></tr></table></figure><p>&lt;a v-on:[eventName]&#x3D;”doSomething”&gt; … </a></p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><br>在这个示例中，当 <span class="hljs-string">`eventName`</span> 的值为 <span class="hljs-string">`&quot;focus&quot;`</span> 时，<span class="hljs-string">`v-on:[eventName]`</span> 将等价于 <span class="hljs-string">`v-on:focus`</span>。 <br><br><br><br><br><br><br></code></pre></td></tr></table></figure><h3 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h3><h4 id="缩写"><a href="#缩写" class="headerlink" title="缩写"></a>缩写</h4><p><code>v-</code> 前缀作为一种视觉提示，用来识别模板中 Vue 特定的 attribute。当你在使用 Vue.js 为现有标签添加动态行为 (dynamic behavior) 时，<code>v-</code> 前缀很有帮助，然而，对于一些频繁用到的指令来说，就会感到使用繁琐。同时，在构建由 Vue 管理所有模板的<a href="https://en.wikipedia.org/wiki/Single-page_application">单页面应用程序 (SPA - single page application)</a> 时，<code>v-</code> 前缀也变得没那么重要了。因此，Vue 为 <code>v-bind</code> 和 <code>v-on</code> 这两个最常用的指令，提供了特定简写： </p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mel">v-bind:href  可缩写   :href<br>v-on:click=<span class="hljs-string">&#x27;aa&#x27;</span>   可缩写   @click=<span class="hljs-string">&#x27;aa&#x27;</span><br>动态参数    缩写   @[<span class="hljs-keyword">event</span>]=<span class="hljs-string">&quot;doSomething&quot;</span><br></code></pre></td></tr></table></figure><h2 id="4计算属性和侦听器"><a href="#4计算属性和侦听器" class="headerlink" title="4计算属性和侦听器"></a>4计算属性和侦听器</h2><h3 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h3><p>模板内的表达式非常便利，但是设计它们的初衷是用于简单运算的。在模板中放入太多的逻辑会让模板过重且难以维护。例如： </p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;example&quot;</span>&gt;</span></span><br><span class="language-xml">  </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">message.split</span>(<span class="hljs-name">&#x27;&#x27;</span>).reverse().join(<span class="hljs-name">&#x27;&#x27;</span>) &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>在这个地方，模板不再是简单的声明式逻辑。你必须看一段时间才能意识到，这里是想要显示变量 <code>message</code> 的翻转字符串。当你想要在模板中的多处包含此翻转字符串时，就会更加难以处理。</p><p>所以，对于任何复杂逻辑，你都应当使用<strong>计算属性</strong>。</p><h4 id="基础例子"><a href="#基础例子" class="headerlink" title="基础例子"></a>基础例子</h4><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;example&quot;</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Original message: &quot;</span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">message</span> &#125;&#125;</span><span class="language-xml">&quot;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Computed reversed message: &quot;</span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">reversedMessage</span> &#125;&#125;</span><span class="language-xml">&quot;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></code></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;<br>  <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#example&#x27;</span>,<br>  <span class="hljs-attr">data</span>: &#123;<br>    <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;Hello&#x27;</span><br>  &#125;,<br>  <span class="hljs-attr">computed</span>: &#123;<br>    <span class="hljs-comment">// 计算属性的 getter</span><br>    reversedMessage: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-comment">// `this` 指向 vm 实例</span><br>      <span class="hljs-keyword">return</span> this.message.<span class="hljs-built_in">split</span>(<span class="hljs-string">&#x27;&#x27;</span>).<span class="hljs-built_in">reverse</span>().join(<span class="hljs-string">&#x27;&#x27;</span>)<br>    &#125;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>结果：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cmake">Original <span class="hljs-keyword">message</span>: <span class="hljs-string">&quot;Hello&quot;</span><br><br>Computed reversed <span class="hljs-keyword">message</span>: <span class="hljs-string">&quot;olleH&quot;</span><br></code></pre></td></tr></table></figure><p>这里我们声明了一个计算属性 <code>reversedMessage</code>。我们提供的函数将用作 property <code>vm.reversedMessage</code> 的 getter 函数：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim">console.<span class="hljs-built_in">log</span>(<span class="hljs-keyword">vm</span>.reversedMessage) // =&gt; <span class="hljs-string">&#x27;olleH&#x27;</span><br><span class="hljs-keyword">vm</span>.message = <span class="hljs-string">&#x27;Goodbye&#x27;</span><br>console.<span class="hljs-built_in">log</span>(<span class="hljs-keyword">vm</span>.reversedMessage) // =&gt; <span class="hljs-string">&#x27;eybdooG&#x27;</span><br></code></pre></td></tr></table></figure><p>你可以打开浏览器的控制台，自行修改例子中的 vm。<code>vm.reversedMessage</code> 的值始终取决于 <code>vm.message</code> 的值。</p><p>你可以像绑定普通 property 一样在模板中绑定计算属性。Vue 知道 <code>vm.reversedMessage</code> 依赖于 <code>vm.message</code>，因此当 <code>vm.message</code> 发生改变时，所有依赖 <code>vm.reversedMessage</code> 的绑定也会更新。而且最妙的是我们已经以声明的方式创建了这种依赖关系：计算属性的 getter 函数是没有副作用 (side effect) 的，这使它更易于测试和理解。</p><h4 id="计算属性缓存-vs-方法"><a href="#计算属性缓存-vs-方法" class="headerlink" title="计算属性缓存 vs 方法"></a>计算属性缓存 vs 方法</h4><p>你可能已经注意到我们可以通过在表达式中调用方法来达到同样的效果： </p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Reversed message: &quot;</span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">reversedMessage</span>() &#125;&#125;</span><span class="language-xml">&quot;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br></code></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">// 在组件中</span><br>methods: &#123;<br>  <span class="hljs-attr">reversedMessage</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> this.message.<span class="hljs-built_in">split</span>(<span class="hljs-string">&#x27;&#x27;</span>).<span class="hljs-built_in">reverse</span>().join(<span class="hljs-string">&#x27;&#x27;</span>)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们可以将同一函数定义为一个方法而不是一个计算属性。两种方式的最终结果确实是完全相同的。然而，不同的是<strong>计算属性是基于它们的响应式依赖进行缓存的</strong>。只在相关响应式依赖发生改变时它们才会重新求值。这就意味着只要 <code>message</code> 还没有发生改变，多次访问 <code>reversedMessage</code> 计算属性会立即返回之前的计算结果，而不必再次执行函数。</p><p>这也同样意味着下面的计算属性将不再更新，因为 <code>Date.now()</code> 不是响应式依赖：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ada">computed: &#123;<br>  now: <span class="hljs-keyword">function</span> <span class="hljs-title"></span>() &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-type">Date.now()</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>相比之下，每当触发重新渲染时，调用方法将<strong>总会</strong>再次执行函数。</p><p>我们为什么需要缓存？假设我们有一个性能开销比较大的计算属性 <strong>A</strong>，它需要遍历一个巨大的数组并做大量的计算。然后我们可能有其他的计算属性依赖于 <strong>A</strong>。如果没有缓存，我们将不可避免的多次执行 <strong>A</strong> 的 getter！如果你不希望有缓存，请用方法来替代。</p><h4 id="计算属性vs侦听属性"><a href="#计算属性vs侦听属性" class="headerlink" title="计算属性vs侦听属性"></a>计算属性vs侦听属性</h4><p>Vue 提供了一种更通用的方式来观察和响应 Vue 实例上的数据变动：<strong>侦听属性</strong>。当你有一些数据需要随着其它数据变动而变动时，你很容易滥用 <code>watch</code>——特别是如果你之前使用过 AngularJS。然而，通常更好的做法是使用计算属性而不是命令式的 <code>watch</code> 回调。细想一下这个例子： </p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">fullName</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></code></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">var</span> vm = new Vue(&#123;<br>  el: <span class="hljs-string">&#x27;#demo&#x27;</span>,<br>  <span class="hljs-keyword">data</span>: &#123;<br>    firstName: <span class="hljs-string">&#x27;Foo&#x27;</span>,<br>    lastName: <span class="hljs-string">&#x27;Bar&#x27;</span>,<br>    fullName: <span class="hljs-string">&#x27;Foo Bar&#x27;</span><br>  &#125;,<br>  watch: &#123;<br>    firstName: function (<span class="hljs-keyword">val</span>) &#123;<br>      <span class="hljs-keyword">this</span>.fullName = <span class="hljs-keyword">val</span> + <span class="hljs-string">&#x27; &#x27;</span> + <span class="hljs-keyword">this</span>.lastName<br>    &#125;,<br>    lastName: function (<span class="hljs-keyword">val</span>) &#123;<br>      <span class="hljs-keyword">this</span>.fullName = <span class="hljs-keyword">this</span>.firstName + <span class="hljs-string">&#x27; &#x27;</span> + <span class="hljs-keyword">val</span><br>    &#125;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>上面代码是命令式且重复的。将它与计算属性的版本进行比较： </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">var</span> vm = new Vue(&#123;<br>  el: <span class="hljs-string">&#x27;#demo&#x27;</span>,<br>  <span class="hljs-keyword">data</span>: &#123;<br>    firstName: <span class="hljs-string">&#x27;Foo&#x27;</span>,<br>    lastName: <span class="hljs-string">&#x27;Bar&#x27;</span><br>  &#125;,<br>  computed: &#123;<br>    fullName: function () &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.firstName + <span class="hljs-string">&#x27; &#x27;</span> + <span class="hljs-keyword">this</span>.lastName<br>    &#125;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>好得多了，不是吗？ </p><h4 id="计算属性的-setter"><a href="#计算属性的-setter" class="headerlink" title="计算属性的 setter"></a>计算属性的 setter</h4><p>计算属性默认只有 getter，不过在需要时你也可以提供一个 setter： </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">// ...</span><br>computed: &#123;<br>  fullName: &#123;<br>    <span class="hljs-comment">// getter</span><br>    <span class="hljs-keyword">get</span>: function () &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.firstName + <span class="hljs-string">&#x27; &#x27;</span> + <span class="hljs-keyword">this</span>.lastName<br>    &#125;,<br>    <span class="hljs-comment">// setter</span><br>    <span class="hljs-keyword">set</span>: function (newValue) &#123;<br>      <span class="hljs-keyword">var</span> names = newValue.split(<span class="hljs-string">&#x27; &#x27;</span>)<br>      <span class="hljs-keyword">this</span>.firstName = names[<span class="hljs-number">0</span>]<br>      <span class="hljs-keyword">this</span>.lastName = names[names.length - <span class="hljs-number">1</span>]<br>    &#125;<br>  &#125;<br>&#125;<br><span class="hljs-comment">// ...</span><br></code></pre></td></tr></table></figure><p>现在再运行 <code>vm.fullName = &#39;John Doe&#39;</code> 时，setter 会被调用，<code>vm.firstName</code> 和 <code>vm.lastName</code> 也会相应地被更新。 </p><h3 id="侦听器"><a href="#侦听器" class="headerlink" title="侦听器"></a>侦听器</h3><p>虽然计算属性在大多数情况下更合适，但有时也需要一个自定义的侦听器。这就是为什么 Vue 通过 <code>watch</code> 选项提供了一个更通用的方法，来响应数据的变化。当需要在数据变化时执行异步或开销较大的操作时，这个方式是最有用的。 </p><p>例如： </p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;watch-example&quot;</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">    Ask a yes/no question:</span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;question&quot;</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">answer</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 因为 AJAX 库和通用工具的生态已经相当丰富，Vue 核心代码没有重复 --&gt;</span><br><span class="hljs-comment">&lt;!-- 提供这些功能以保持精简。这也可以让你自由选择自己更熟悉的工具。 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/axios@0.12.0/dist/axios.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/lodash@4.13.1/lodash.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> watchExampleVM = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">  <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#watch-example&#x27;</span>,</span><br><span class="language-javascript">  <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">    <span class="hljs-attr">question</span>: <span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="language-javascript">    <span class="hljs-attr">answer</span>: <span class="hljs-string">&#x27;I cannot give you an answer until you ask a question!&#x27;</span></span><br><span class="language-javascript">  &#125;,</span><br><span class="language-javascript">  <span class="hljs-attr">watch</span>: &#123;</span><br><span class="language-javascript">    <span class="hljs-comment">// 如果 `question` 发生改变，这个函数就会运行</span></span><br><span class="language-javascript">    <span class="hljs-attr">question</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">newQuestion, oldQuestion</span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-variable language_">this</span>.<span class="hljs-property">answer</span> = <span class="hljs-string">&#x27;Waiting for you to stop typing...&#x27;</span></span><br><span class="language-javascript">      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">debouncedGetAnswer</span>()</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;,</span><br><span class="language-javascript">  <span class="hljs-attr">created</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-comment">// `_.debounce` 是一个通过 Lodash 限制操作频率的函数。</span></span><br><span class="language-javascript">    <span class="hljs-comment">// 在这个例子中，我们希望限制访问 yesno.wtf/api 的频率</span></span><br><span class="language-javascript">    <span class="hljs-comment">// AJAX 请求直到用户输入完毕才会发出。想要了解更多关于</span></span><br><span class="language-javascript">    <span class="hljs-comment">// `_.debounce` 函数 (及其近亲 `_.throttle`) 的知识，</span></span><br><span class="language-javascript">    <span class="hljs-comment">// 请参考：https://lodash.com/docs#debounce</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">this</span>.<span class="hljs-property">debouncedGetAnswer</span> = _.<span class="hljs-title function_">debounce</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">getAnswer</span>, <span class="hljs-number">500</span>)</span><br><span class="language-javascript">  &#125;,</span><br><span class="language-javascript">  <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">    <span class="hljs-attr">getAnswer</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">question</span>.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;?&#x27;</span>) === -<span class="hljs-number">1</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">answer</span> = <span class="hljs-string">&#x27;Questions usually contain a question mark. ;-)&#x27;</span></span><br><span class="language-javascript">        <span class="hljs-keyword">return</span></span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">      <span class="hljs-variable language_">this</span>.<span class="hljs-property">answer</span> = <span class="hljs-string">&#x27;Thinking...&#x27;</span></span><br><span class="language-javascript">      <span class="hljs-keyword">var</span> vm = <span class="hljs-variable language_">this</span></span><br><span class="language-javascript">      axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;https://yesno.wtf/api&#x27;</span>)</span><br><span class="language-javascript">        .<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) &#123;</span><br><span class="language-javascript">          vm.<span class="hljs-property">answer</span> = _.<span class="hljs-title function_">capitalize</span>(response.<span class="hljs-property">data</span>.<span class="hljs-property">answer</span>)</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">        .<span class="hljs-title function_">catch</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) &#123;</span><br><span class="language-javascript">          vm.<span class="hljs-property">answer</span> = <span class="hljs-string">&#x27;Error! Could not reach the API. &#x27;</span> + error</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript">&#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="5可复用性-组合"><a href="#5可复用性-组合" class="headerlink" title="5可复用性 &amp; 组合"></a>5可复用性 &amp; 组合</h2><h3 id="混入"><a href="#混入" class="headerlink" title="混入"></a>混入</h3><h4 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h4><p>混入 (mixin) 提供了一种非常灵活的方式，来分发 Vue 组件中的可复用功能。一个混入对象可以包含任意组件选项。当组件使用混入对象时，所有混入对象的选项将被“混合”进入该组件本身的选项。</p><p>例子：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">// 定义一个混入对象</span><br><span class="hljs-keyword">var</span> myMixin = &#123;<br>  <span class="hljs-attr">created</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    this.hello()<br>  &#125;,<br>  <span class="hljs-attr">methods</span>: &#123;<br>    <span class="hljs-attr">hello</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;hello from mixin!&#x27;</span>)<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 定义一个使用混入对象的组件</span><br><span class="hljs-keyword">var</span> Component = Vue.extend(&#123;<br>  <span class="hljs-attr">mixins</span>: [myMixin]<br>&#125;)<br><br><span class="hljs-keyword">var</span> component = <span class="hljs-keyword">new</span> Component() <span class="hljs-comment">// =&gt; &quot;hello from mixin!&quot;</span><br></code></pre></td></tr></table></figure><h4 id="选项合并"><a href="#选项合并" class="headerlink" title="选项合并"></a>选项合并</h4><p>当组件和混入对象含有同名选项时，这些选项将以恰当的方式进行“合并”。</p><p>比如，数据对象在内部会进行递归合并，并在发生冲突时以组件数据优先。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> mixin = &#123;<br>  <span class="hljs-attr">data</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;hello&#x27;</span>,<br>      <span class="hljs-attr">foo</span>: <span class="hljs-string">&#x27;abc&#x27;</span><br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">new</span> Vue(&#123;<br>  <span class="hljs-attr">mixins</span>: [mixin],<br>  <span class="hljs-attr">data</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;goodbye&#x27;</span>,<br>      <span class="hljs-attr">bar</span>: <span class="hljs-string">&#x27;def&#x27;</span><br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">created</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(this.<span class="hljs-symbol">$data</span>)<br>    <span class="hljs-comment">// =&gt; &#123; message: &quot;goodbye&quot;, foo: &quot;abc&quot;, bar: &quot;def&quot; &#125;</span><br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>同名钩子函数将合并为一个数组，因此都将被调用。另外，混入对象的钩子将在组件自身钩子<strong>之前</strong>调用。 </p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> mixin = &#123;<br>  <span class="hljs-attr">created</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;混入对象的钩子被调用&#x27;</span>)<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">new</span> Vue(&#123;<br>  <span class="hljs-attr">mixins</span>: [mixin],<br>  <span class="hljs-attr">created</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;组件钩子被调用&#x27;</span>)<br>  &#125;<br>&#125;)<br><br><span class="hljs-comment">// =&gt; &quot;混入对象的钩子被调用&quot;</span><br><span class="hljs-comment">// =&gt; &quot;组件钩子被调用&quot;</span><br></code></pre></td></tr></table></figure><p>值为对象的选项，例如 <code>methods</code>、<code>components</code> 和 <code>directives</code>，将被合并为同一个对象。两个对象键名冲突时，取组件对象的键值对。 </p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> mixin = &#123;<br>  <span class="hljs-attr">methods</span>: &#123;<br>    <span class="hljs-attr">foo</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;foo&#x27;</span>)<br>    &#125;,<br>    <span class="hljs-attr">conflicting</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;from mixin&#x27;</span>)<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;<br>  <span class="hljs-attr">mixins</span>: [mixin],<br>  <span class="hljs-attr">methods</span>: &#123;<br>    <span class="hljs-attr">bar</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;bar&#x27;</span>)<br>    &#125;,<br>    <span class="hljs-attr">conflicting</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;from self&#x27;</span>)<br>    &#125;<br>  &#125;<br>&#125;)<br><br>vm.foo() <span class="hljs-comment">// =&gt; &quot;foo&quot;</span><br>vm.bar() <span class="hljs-comment">// =&gt; &quot;bar&quot;</span><br>vm.conflicting() <span class="hljs-comment">// =&gt; &quot;from self&quot;</span><br></code></pre></td></tr></table></figure><p>注意：<code>Vue.extend()</code> 也使用同样的策略进行合并。 </p><h4 id="全局混入"><a href="#全局混入" class="headerlink" title="全局混入"></a>全局混入</h4><p>混入也可以进行全局注册。使用时格外小心！一旦使用全局混入，它将影响<strong>每一个</strong>之后创建的 Vue 实例。使用恰当时，这可以用来为自定义选项注入处理逻辑。 </p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">// 为自定义的选项 &#x27;myOption&#x27; 注入一个处理器。</span><br>Vue.mixin(&#123;<br>  <span class="hljs-attr">created</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> myOption = this.<span class="hljs-symbol">$optio</span>ns.myOption<br>    <span class="hljs-keyword">if</span> (myOption) &#123;<br>      <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(myOption)<br>    &#125;<br>  &#125;<br>&#125;)<br><br><span class="hljs-keyword">new</span> Vue(&#123;<br>  <span class="hljs-attr">myOption</span>: <span class="hljs-string">&#x27;hello!&#x27;</span><br>&#125;)<br><span class="hljs-comment">// =&gt; &quot;hello!&quot;</span><br></code></pre></td></tr></table></figure><blockquote><p>请谨慎使用全局混入，因为它会影响每个单独创建的 Vue 实例 (包括第三方组件)。大多数情况下，只应当应用于自定义选项，就像上面示例一样。推荐将其作为<a href="https://v2.cn.vuejs.org/v2/guide/plugins.html">插件</a>发布，以避免重复应用混入。 </p></blockquote><h4 id="自定义选项合并策略"><a href="#自定义选项合并策略" class="headerlink" title="自定义选项合并策略"></a>自定义选项合并策略</h4><p>自定义选项将使用默认策略，即简单地覆盖已有值。如果想让自定义选项以自定义逻辑合并，可以向 <code>Vue.config.optionMergeStrategies</code> 添加一个函数： </p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">Vue<span class="hljs-selector-class">.config</span><span class="hljs-selector-class">.optionMergeStrategies</span><span class="hljs-selector-class">.myOption</span> = function (toVal, fromVal) &#123;<br>  <span class="hljs-comment">// 返回合并后的值</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h3><p>除了核心功能默认内置的指令 (<code>v-model</code> 和 <code>v-show</code>)，Vue 也允许注册自定义指令。注意，在 Vue2.0 中，代码复用和抽象的主要形式是组件。然而，有的情况下，你仍然需要对普通 DOM 元素进行底层操作，这时候就会用到自定义指令。 </p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-comment">// 注册一个全局自定义指令 `v-focus`</span><br>Vue.directive(<span class="hljs-string">&#x27;focus&#x27;</span>, &#123;<br>  <span class="hljs-comment">// 当被绑定的元素插入到 DOM 中时……</span><br>  inserted: <span class="hljs-keyword">function</span> <span class="hljs-params">(el)</span> &#123;<br>    <span class="hljs-comment">// 聚焦元素</span><br>    el.focus()<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>如果想注册局部指令，组件中也接受一个 <code>directives</code> 的选项： </p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">directives:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-symbol">  focus:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-comment">// 指令的定义</span><br><span class="hljs-symbol">    inserted:</span> function (el) <span class="hljs-punctuation">&#123;</span><br>      el.focus()<br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>然后你可以在模板中任何元素上使用新的 <code>v-focus</code> property，如下： </p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;input v-focus&gt;</span><br></code></pre></td></tr></table></figure><h2 id="6插件"><a href="#6插件" class="headerlink" title="6插件"></a>6插件</h2><p>插件通常用来为 Vue 添加全局功能。插件的功能范围没有严格的限制——一般有下面几种：</p><ol><li>添加全局方法或者 property。如：<a href="https://github.com/karol-f/vue-custom-element">vue-custom-element</a></li><li>添加全局资源：指令&#x2F;过滤器&#x2F;过渡等。如 <a href="https://github.com/vuejs/vue-touch">vue-touch</a></li><li>通过全局混入来添加一些组件选项。如 <a href="https://github.com/vuejs/vue-router">vue-router</a></li><li>添加 Vue 实例方法，通过把它们添加到 <code>Vue.prototype</code> 上实现。</li><li>一个库，提供自己的 API，同时提供上面提到的一个或多个功能。如 <a href="https://github.com/vuejs/vue-router">vue-router</a></li></ol><h3 id="使用插件"><a href="#使用插件" class="headerlink" title="使用插件"></a>使用插件</h3><p>通过全局方法 <code>Vue.use()</code> 使用插件。它需要在你调用 <code>new Vue()</code> 启动应用之前完成： </p><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cos"><span class="hljs-comment">// 调用 `MyPlugin.install(Vue)`</span><br>Vue.<span class="hljs-keyword">use</span>(MyPlugin)<br><br><span class="hljs-keyword">new</span> Vue(&#123;<br>  <span class="hljs-comment">// ...组件选项</span><br>&#125;)<br></code></pre></td></tr></table></figure><p>也可以传入一个可选的选项对象： </p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">Vue.<span class="hljs-keyword">use</span>(MyPlugin, &#123; someOption: <span class="hljs-literal">true</span> &#125;)<br></code></pre></td></tr></table></figure><p><code>Vue.use</code> 会自动阻止多次注册相同插件，届时即使多次调用也只会注册一次该插件。</p><p>Vue.js 官方提供的一些插件 (例如 <code>vue-router</code>) 在检测到 <code>Vue</code> 是可访问的全局变量时会自动调用 <code>Vue.use()</code>。然而在像 CommonJS 这样的模块环境中，你应该始终显式地调用 <code>Vue.use()</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// 用 Browserify 或 webpack 提供的 CommonJS 模块环境时</span><br><span class="hljs-keyword">var</span> Vue = <span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;vue&#x27;</span>)<br><span class="hljs-keyword">var</span> VueRouter = <span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;vue-router&#x27;</span>)<br><br><span class="hljs-comment">// 不要忘了调用此方法</span><br>Vue.<span class="hljs-keyword">use</span>(VueRouter)<br></code></pre></td></tr></table></figure><h2 id="遇到个小bug"><a href="#遇到个小bug" class="headerlink" title="遇到个小bug"></a>遇到个小bug</h2><h3 id="vue闪屏问题"><a href="#vue闪屏问题" class="headerlink" title="vue闪屏问题"></a>vue闪屏问题</h3><p>解决方法 <a href="https://blog.csdn.net/anjiye7641/article/details/101255113">https://blog.csdn.net/anjiye7641/article/details/101255113</a></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs css"><br><br>css 内添加此属性<br><span class="hljs-selector-attr">[v-cloak]</span> &#123;<br><span class="hljs-attribute">display</span>: none;<br>&#125; <br><br><span class="hljs-selector-tag">html</span>中引入即可<br>&lt;<span class="hljs-selector-tag">div</span> v-cloak&gt;<br>&#123;&#123; message &#125;&#125;<br>&lt;/<span class="hljs-selector-tag">div</span>&gt;<br><br>成功<br></code></pre></td></tr></table></figure><h2 id="绝对路径"><a href="#绝对路径" class="headerlink" title="绝对路径"></a>绝对路径</h2><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gherkin"><span class="hljs-meta">@/</span>      到src目录<br></code></pre></td></tr></table></figure><p>本地存储</p><p>localStorage</p><p>存储信息</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">&#x27;name&#x27;</span>,<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>)<br></code></pre></td></tr></table></figure><p>获取信息</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&#x27;name&#x27;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>vue笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>fullpage全屏插件</title>
    <link href="/2020/06/10/fullpage%E5%85%A8%E5%B1%8F%E6%8F%92%E4%BB%B6/"/>
    <url>/2020/06/10/fullpage%E5%85%A8%E5%B1%8F%E6%8F%92%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>fullPage.js 是一个基于 jQuery 的插件，它能够帮你很方便、很轻松的制作出全屏网站。<br><a href="http://www.dowebok.com/demo/2014/77/">http://www.dowebok.com/demo/2014/77/</a>    演示地址</p><p>主要功能有：</p><p>支持鼠标滚动</p><p>支持前进后退和键盘控制</p><p>多个回调函数</p><p>支持手机、平板触摸事件</p><p>支持 CSS3 动画</p><p>支持窗口缩放</p><p>窗口缩放时自动调整</p><p>可设置滚动宽度、背景颜色、滚动速度、循环选项、回调、文本对齐方式等等</p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><h3 id="1-引用文件"><a href="#1-引用文件" class="headerlink" title="1,引用文件"></a>1,引用文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 插件依赖jQuery --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/jquery/jquery.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 插件JS --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/fullpage/jquery.fullpage.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 插件CSS --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;js/fullpage/jquery.fullpage.min.css&quot;</span>&gt;</span><br><br>以及自己的页面css,js<br></code></pre></td></tr></table></figure><h3 id="2-HTML-结构"><a href="#2-HTML-结构" class="headerlink" title="2,HTML 结构"></a>2,HTML 结构</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">&lt;div id=<span class="hljs-string">&quot;fullpage&quot;</span>&gt;<br>    &lt;div <span class="hljs-keyword">class</span>=&quot;<span class="hljs-symbol">section</span>&quot;&gt;第一屏&lt;/<span class="hljs-symbol">div</span>&gt;<br>    &lt;<span class="hljs-symbol">div</span> <span class="hljs-symbol">class</span>=&quot;<span class="hljs-symbol">section</span>&quot;&gt;第二屏&lt;/<span class="hljs-symbol">div</span>&gt;<br>    &lt;<span class="hljs-symbol">div</span> <span class="hljs-symbol">class</span>=&quot;<span class="hljs-symbol">section</span>&quot;&gt;<br>        &lt;<span class="hljs-symbol">div</span> <span class="hljs-symbol">class</span>=&quot;<span class="hljs-symbol">slide</span>&quot;&gt;第三屏的第一屏&lt;/<span class="hljs-symbol">div</span>&gt;<br>        &lt;<span class="hljs-symbol">div</span> <span class="hljs-symbol">class</span>=&quot;<span class="hljs-symbol">slide</span>&quot;&gt;第三屏的第二屏&lt;/<span class="hljs-symbol">div</span>&gt;<br>        &lt;<span class="hljs-symbol">div</span> <span class="hljs-symbol">class</span>=&quot;<span class="hljs-symbol">slide</span>&quot;&gt;第三屏的第三屏&lt;/<span class="hljs-symbol">div</span>&gt;<br>        &lt;<span class="hljs-symbol">div</span> <span class="hljs-symbol">class</span>=&quot;<span class="hljs-symbol">slide</span>&quot;&gt;第三屏的第四屏&lt;/<span class="hljs-symbol">div</span>&gt;<br>    &lt;/<span class="hljs-symbol">div</span>&gt;<br>    &lt;<span class="hljs-symbol">div</span> <span class="hljs-symbol">class</span>=&quot;<span class="hljs-symbol">section</span>&quot;&gt;第四屏&lt;/<span class="hljs-symbol">div</span>&gt;<br>&lt;/<span class="hljs-symbol">div</span>&gt;<br></code></pre></td></tr></table></figure><p>3.调用插件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">JavaScript</span>入口函数<br>$(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    $(<span class="hljs-string">&#x27;#fullpage&#x27;</span>).<span class="hljs-title function_">fullpage</span>();<br>&#125;);<br><br><br>或者事件<br>$(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">ready</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>$(<span class="hljs-string">&#x27;#fullpage&#x27;</span>).<span class="hljs-title function_">fullpage</span>();<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="内部初始化方法"><a href="#内部初始化方法" class="headerlink" title="内部初始化方法"></a>内部初始化方法</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br><span class="line">968</span><br><span class="line">969</span><br><span class="line">970</span><br><span class="line">971</span><br><span class="line">972</span><br><span class="line">973</span><br><span class="line">974</span><br><span class="line">975</span><br><span class="line">976</span><br><span class="line">977</span><br><span class="line">978</span><br><span class="line">979</span><br><span class="line">980</span><br><span class="line">981</span><br><span class="line">982</span><br><span class="line">983</span><br><span class="line">984</span><br><span class="line">985</span><br><span class="line">986</span><br><span class="line">987</span><br><span class="line">988</span><br><span class="line">989</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">fullPage.js</span><br><br><br><br><br><br><span class="hljs-string">&lt;p</span> <span class="hljs-string">align=&quot;center&quot;&gt;</span><br><br>  <span class="hljs-string">English</span> <span class="hljs-string">|</span><br><br>  <span class="hljs-string">Español</span> <span class="hljs-string">|</span><br><br>  <span class="hljs-string">Pусский</span> <span class="hljs-string">|</span><br><br>  <span class="hljs-string">&lt;span&gt;中文&lt;/span&gt;</span> <span class="hljs-string">|</span><br><br>  <span class="hljs-string">한국어</span><br><br><span class="hljs-string">&lt;/p&gt;</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-meta"></span><br><span class="hljs-meta"></span><br><span class="hljs-meta"></span><br><span class="hljs-meta"></span><br><span class="hljs-meta"></span><br><span class="hljs-meta"></span><br><span class="hljs-meta"></span><br><span class="hljs-meta"></span><br> <span class="hljs-string">|</span> <span class="hljs-string">7Kb</span> <span class="hljs-string">gziped</span> <span class="hljs-string">|</span> <span class="hljs-string">Created</span> <span class="hljs-string">by</span> <span class="hljs-string">@imac2</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-string">现场演示</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">Wordpress</span> <span class="hljs-string">的主题</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">fullpage.js扩展</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">常见问题</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-string">通过调用本库可轻易创建全屏滚动网站（也称为单页网站）。</span><br><br><span class="hljs-string">本库可创建全屏滚动网站，同时也可在网站中添加横向滚动条。</span><br><br><span class="hljs-string">请我喝杯咖啡</span><br><br><br><br><span class="hljs-string">根据要求，可提供模块定制和紧急更改服务，价格合理。。</span><br><br> <span class="hljs-string">联系我.</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-string">介绍</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">兼容性</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">用法</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">创建链接到段落或幻灯片</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">创建更小或更大的段落</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">fullpage.js添加的状态类</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">快速加载</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">自动播放内嵌媒体</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">使用扩展</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">选项</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">方法</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">回调</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">报告问题</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">完善fullpage.js</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">变更日志</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">创建任务</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">资源</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">谁在使用fullpage.js</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">赞赏</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">许可证</span><br><br><span class="hljs-string">介绍</span><br><br><span class="hljs-string">不仅限于提需求，也欢迎提出编码风格改进的建议。</span><br><br><span class="hljs-string">集思广益，让这个库更加强大，让写代码更轻松！</span><br><br><span class="hljs-string">兼容性</span><br><br><span class="hljs-string">fullPage.js在所有的现代浏览器，以及一些旧版浏览器，如Internet</span> <span class="hljs-string">Explorer</span> <span class="hljs-number">8</span><span class="hljs-string">，9，Opera</span> <span class="hljs-number">12</span><span class="hljs-string">等都能兼容。</span><br><br><span class="hljs-string">可兼容支持CSS3的浏览器与非支持CSS3的浏览器，适用于旧版浏览器。</span> <span class="hljs-string">同时，手机、平板电脑和触摸屏电脑还提供触屏支持。</span><br><br><br><br><span class="hljs-string">特别感谢Browserstack</span> <span class="hljs-string">支持fullpage.js。</span><br><br><span class="hljs-string">用法</span><br><br><span class="hljs-string">正如示例文件所示，需要引用：</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-string">jQuery库.</span> <span class="hljs-string">(最低1.6.0)</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">JavaScript</span> <span class="hljs-string">文件jquery.fullPage.js</span> <span class="hljs-string">(或其缩小版本</span> <span class="hljs-string">jquery.fullPage.min.js)</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">css</span> <span class="hljs-string">文件jquery.fullPage.css</span><br><br> <span class="hljs-string">或者，当调用css3:false,</span> <span class="hljs-string">时，如果想调用jQuery库中(linear</span> <span class="hljs-string">and</span> <span class="hljs-string">swing</span> <span class="hljs-string">)或fullPage.js</span> <span class="hljs-string">(easeInOutCubic)中默认包含的其他缓和效果控件，可添加jQuery</span> <span class="hljs-string">UI库</span> <span class="hljs-string">。</span><br><br><span class="hljs-string">使用bower或npm进行安装</span><br><br><span class="hljs-string">或者，如果您愿意，可以使用bower或npm安装fullPage.js：</span><br><br><span class="hljs-string">终端：</span><br><br>    <span class="hljs-string">//</span> <span class="hljs-string">使用bower</span><br>    <span class="hljs-string">bower</span> <span class="hljs-string">install</span> <span class="hljs-string">fullpage.js</span><br>    <br>    <span class="hljs-string">//</span> <span class="hljs-string">使用npm</span><br>    <span class="hljs-string">npm</span> <span class="hljs-string">install</span> <span class="hljs-string">fullpage.js</span><br><br><span class="hljs-string">包含文件：</span><br><br>    <span class="hljs-string">&lt;link</span> <span class="hljs-string">rel=&quot;stylesheet&quot;</span> <span class="hljs-string">type=&quot;text/css&quot;</span> <span class="hljs-string">href=&quot;jquery.fullPage.css&quot;</span> <span class="hljs-string">/&gt;</span><br>    <br>    <span class="hljs-string">&lt;script</span> <span class="hljs-string">src=&quot;http://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br>    <br>    <span class="hljs-string">&lt;!--</span> <span class="hljs-string">以下行是可选的。</span> <span class="hljs-string">只有在使用选项css3:false，并且您希望使用其他缓动效果，而非“linear”、“swing”或“easeInOutCubic”时才有必要。</span> <span class="hljs-string">--&gt;</span><br>    <span class="hljs-string">&lt;script</span> <span class="hljs-string">src=&quot;vendors/jquery.easings.min.js&quot;&gt;&lt;/script&gt;</span><br>    <br>    <br>    <span class="hljs-string">&lt;!--</span> <span class="hljs-string">以下行仅在使用选项scrollOverflow:true的情况下是必需的</span> <span class="hljs-string">--&gt;</span><br>    <span class="hljs-string">&lt;script</span> <span class="hljs-string">type=&quot;text/javascript&quot;</span> <span class="hljs-string">src=&quot;vendors/scrolloverflow.min.js&quot;&gt;&lt;/script&gt;</span><br>    <br>    <span class="hljs-string">&lt;script</span> <span class="hljs-string">type=&quot;text/javascript&quot;</span> <span class="hljs-string">src=&quot;jquery.fullPage.js&quot;&gt;&lt;/script&gt;</span><br><br><span class="hljs-string">可选用CDN：</span><br><br><span class="hljs-string">如果您倾向使用CDN载入所需文件，fullPage.js在CDNJS：</span><br><br><span class="hljs-string">https://cdnjs.com/libraries/fullPage.js</span><br><br><span class="hljs-string">要求HTML结构</span><br><br><span class="hljs-string">HTML文件中的首行HTML代码必须使用HTML</span> <span class="hljs-string">DOCTYPE</span> <span class="hljs-string">声明，否则可能会遇到代码段高度问题。HTML</span> <span class="hljs-number">5</span> <span class="hljs-string">doctype中的示例：</span> <span class="hljs-string">&lt;!DOCTYPE</span> <span class="hljs-string">html&gt;.</span><br><br><span class="hljs-string">每个代码段定义为包含section类的元素。</span><br><br><span class="hljs-string">第一个代码段作为主页，是默认激活代码。</span><br><br><span class="hljs-string">代码段应进行封装（即&lt;div</span> <span class="hljs-string">id=&quot;fullpage&quot;&gt;</span> <span class="hljs-string">）。</span> <span class="hljs-string">封装不能是body元素。</span><br><br>    <span class="hljs-string">&lt;div</span> <span class="hljs-string">id=&quot;fullpage&quot;&gt;</span><br>    <span class="hljs-string">&lt;div</span> <span class="hljs-string">class=&quot;section&quot;&gt;Some</span> <span class="hljs-string">section&lt;/div&gt;</span><br>    <span class="hljs-string">&lt;div</span> <span class="hljs-string">class=&quot;section&quot;&gt;Some</span> <span class="hljs-string">section&lt;/div&gt;</span><br>    <span class="hljs-string">&lt;div</span> <span class="hljs-string">class=&quot;section&quot;&gt;Some</span> <span class="hljs-string">section&lt;/div&gt;</span><br>    <span class="hljs-string">&lt;div</span> <span class="hljs-string">class=&quot;section&quot;&gt;Some</span> <span class="hljs-string">section&lt;/div&gt;</span><br>    <span class="hljs-string">&lt;/div&gt;</span><br><br><span class="hljs-string">如果你想定义一个与众不同的起始页面，而不是原始第一段或第一个滑动页，只需将active类添加到你想首先载入的段或滑动页。</span><br><br>    <span class="hljs-string">&lt;div</span> <span class="hljs-string">class=&quot;section</span> <span class="hljs-string">active&quot;&gt;Some</span> <span class="hljs-string">section&lt;/div&gt;</span><br><br><span class="hljs-string">为在代码段中创建横向滑块，每个滑动页将默认定义为包含slide类的元素：</span><br><br>    <span class="hljs-string">&lt;div</span> <span class="hljs-string">class=&quot;section&quot;&gt;</span><br>    <span class="hljs-string">&lt;div</span> <span class="hljs-string">class=&quot;slide&quot;&gt;</span> <span class="hljs-string">幻灯片</span> <span class="hljs-number">1</span> <span class="hljs-string">&lt;/div&gt;</span><br>    <span class="hljs-string">&lt;div</span> <span class="hljs-string">class=&quot;slide&quot;&gt;</span> <span class="hljs-string">幻灯片</span> <span class="hljs-number">2</span> <span class="hljs-string">&lt;/div&gt;</span><br>    <span class="hljs-string">&lt;div</span> <span class="hljs-string">class=&quot;slide&quot;&gt;</span> <span class="hljs-string">幻灯片</span> <span class="hljs-number">3</span> <span class="hljs-string">&lt;/div&gt;</span><br>    <span class="hljs-string">&lt;div</span> <span class="hljs-string">class=&quot;slide&quot;&gt;</span> <span class="hljs-string">幻灯片</span> <span class="hljs-number">4</span> <span class="hljs-string">&lt;/div&gt;</span><br>    <span class="hljs-string">&lt;/div&gt;</span><br>    <span class="hljs-string">````</span><br>    <span class="hljs-string">可以在[`demoPage.html`文件](https://github.com/alvarotrigo/fullPage.js/tree/master/examples/demoPage.html)看到完整的HTML结构的例子</span><br>    <br>    <span class="hljs-comment">### 初始化</span><br>    <span class="hljs-string">你所需要做的就是在`$(document).ready`函数中调用fullPage.js：</span><br>    <br>    <span class="hljs-string">```javascript</span><br>    <span class="hljs-string">$(document).ready(function()</span> &#123;<br>    <span class="hljs-string">$(&#x27;#fullpage&#x27;).fullpage();</span><br>    &#125;<span class="hljs-string">);</span><br><br><span class="hljs-string">所有选项设置的更复杂的初始化如下所示：</span><br><br>    <span class="hljs-string">$(document).ready(function()</span> &#123;<br>    <span class="hljs-string">$(&#x27;#fullpage&#x27;).fullpage(</span>&#123;<br>    <span class="hljs-string">//导航</span><br>    <span class="hljs-attr">menu:</span> <span class="hljs-string">&#x27;#menu&#x27;</span>,<br>    <span class="hljs-attr">lockAnchors:</span> <span class="hljs-literal">false</span>,<br>    <span class="hljs-string">anchors:</span>[<span class="hljs-string">&#x27;firstPage&#x27;</span>, <span class="hljs-string">&#x27;secondPage&#x27;</span>],<br>    <span class="hljs-attr">navigation:</span> <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">navigationPosition:</span> <span class="hljs-string">&#x27;right&#x27;</span>,<br>    <span class="hljs-attr">navigationTooltips:</span> [<span class="hljs-string">&#x27;firstSlide&#x27;</span>, <span class="hljs-string">&#x27;secondSlide&#x27;</span>],<br>    <span class="hljs-attr">showActiveTooltip:</span> <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">slidesNavigation:</span> <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">slidesNavPosition:</span> <span class="hljs-string">&#x27;bottom&#x27;</span>,<br>    <br>    <span class="hljs-string">//滚动</span><br>    <span class="hljs-attr">css3:</span> <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">scrollingSpeed:</span> <span class="hljs-number">700</span>,<br>    <span class="hljs-attr">autoScrolling:</span> <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">fitToSection:</span> <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">fitToSectionDelay:</span> <span class="hljs-number">1000</span>,<br>    <span class="hljs-attr">scrollBar:</span> <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">easing:</span> <span class="hljs-string">&#x27;easeInOutCubic&#x27;</span>,<br>    <span class="hljs-attr">easingcss3:</span> <span class="hljs-string">&#x27;ease&#x27;</span>,<br>    <span class="hljs-attr">loopBottom:</span> <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">loopTop:</span> <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">loopHorizontal:</span> <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">continuousVertical:</span> <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">continuousHorizontal:</span> <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">scrollHorizontally:</span> <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">interlockedSlides:</span> <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">dragAndMove:</span> <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">offsetSections:</span> <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">resetSliders:</span> <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">fadingEffect:</span> <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">normalScrollElements:</span> <span class="hljs-string">&#x27;#element1, .element2&#x27;</span>,<br>    <span class="hljs-attr">scrollOverflow:</span> <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">scrollOverflowReset:</span> <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">scrollOverflowOptions:</span> <span class="hljs-literal">null</span>,<br>    <span class="hljs-attr">touchSensitivity:</span> <span class="hljs-number">15</span>,<br>    <span class="hljs-attr">normalScrollElementTouchThreshold:</span> <span class="hljs-number">5</span>,<br>    <span class="hljs-attr">bigSectionsDestination:</span> <span class="hljs-literal">null</span>,<br>    <br>    <span class="hljs-string">//可访问</span><br>    <span class="hljs-attr">keyboardScrolling:</span> <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">animateAnchor:</span> <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">recordHistory:</span> <span class="hljs-literal">true</span>,<br>    <br>    <span class="hljs-string">//设计</span><br>    <span class="hljs-attr">controlArrows:</span> <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">verticalCentered:</span> <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">sectionsColor :</span> [<span class="hljs-string">&#x27;#ccc&#x27;</span>, <span class="hljs-string">&#x27;#fff&#x27;</span>],<br>    <span class="hljs-attr">paddingTop:</span> <span class="hljs-string">&#x27;3em&#x27;</span>,<br>    <span class="hljs-attr">paddingBottom:</span> <span class="hljs-string">&#x27;10px&#x27;</span>,<br>    <span class="hljs-attr">fixedElements:</span> <span class="hljs-string">&#x27;#header, .footer&#x27;</span>,<br>    <span class="hljs-attr">responsiveWidth:</span> <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">responsiveHeight:</span> <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">responsiveSlides:</span> <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">parallax:</span> <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">parallaxOptions:</span> &#123;<span class="hljs-attr">type:</span> <span class="hljs-string">&#x27;reveal&#x27;</span>, <span class="hljs-attr">percentage:</span> <span class="hljs-number">62</span>, <span class="hljs-attr">property:</span> <span class="hljs-string">&#x27;translate&#x27;</span>&#125;,<br>    <br>    <span class="hljs-string">//自定义选择器</span><br>    <span class="hljs-attr">sectionSelector:</span> <span class="hljs-string">&#x27;.section&#x27;</span>,<br>    <span class="hljs-attr">slideSelector:</span> <span class="hljs-string">&#x27;.slide&#x27;</span>,<br>    <br>    <span class="hljs-attr">lazyLoading:</span> <span class="hljs-literal">true</span>,<br>    <br>    <span class="hljs-string">//事件</span><br>    <span class="hljs-attr">onLeave:</span> <span class="hljs-string">function(index</span>, <span class="hljs-string">nextIndex</span>, <span class="hljs-string">direction)</span>&#123;&#125;,<br>    <span class="hljs-attr">afterLoad:</span> <span class="hljs-string">function(anchorLink</span>, <span class="hljs-string">index)</span>&#123;&#125;,<br>    <span class="hljs-attr">afterRender:</span> <span class="hljs-string">function()</span>&#123;&#125;,<br>    <span class="hljs-attr">afterResize:</span> <span class="hljs-string">function()</span>&#123;&#125;,<br>    <span class="hljs-attr">afterResponsive:</span> <span class="hljs-string">function(isResponsive)</span>&#123;&#125;,<br>    <span class="hljs-attr">afterSlideLoad:</span> <span class="hljs-string">function(anchorLink</span>, <span class="hljs-string">index</span>, <span class="hljs-string">slideAnchor</span>, <span class="hljs-string">slideIndex)</span>&#123;&#125;,<br>    <span class="hljs-attr">onSlideLeave:</span> <span class="hljs-string">function(anchorLink</span>, <span class="hljs-string">index</span>, <span class="hljs-string">slideIndex</span>, <span class="hljs-string">direction</span>, <span class="hljs-string">nextSlideIndex)</span>&#123;&#125;<br>    &#125;<span class="hljs-string">);</span><br>    &#125;<span class="hljs-string">);</span><br><br><span class="hljs-string">创建链接到段落或幻灯片</span><br><br><span class="hljs-string">如果你在段落中使用fullPage.js和锚链接（在每个部分使用anchors选项或属性data-anchor），那么你将能够在一个段落里使用锚链接直接导航到某个幻灯片。</span><br><br><span class="hljs-string">这是一个锚链接的例子：</span><br><br><span class="hljs-string">http://alvarotrigo.com/fullPage/#secondPage/2</span> <span class="hljs-string">（在你手动访问该段落/幻灯片就会看到的URL）</span><br><br><span class="hljs-string">请注意，URL的最后部分以＃secondPage</span> <span class="hljs-string">/</span> <span class="hljs-number">2</span><span class="hljs-string">结尾。</span><br><br><span class="hljs-string">以下初始化：</span><br><br>    <span class="hljs-string">$(document).ready(function()</span> &#123;<br>    <span class="hljs-string">$(&#x27;#fullpage&#x27;).fullpage(</span>&#123;<br>    <span class="hljs-string">anchors:</span>[<span class="hljs-string">&#x27;firstPage&#x27;</span>, <span class="hljs-string">&#x27;secondPage&#x27;</span>, <span class="hljs-string">&#x27;thirdPage&#x27;</span>]<br>    &#125;<span class="hljs-string">);</span><br>    &#125;<span class="hljs-string">);</span><br><br><span class="hljs-string">URL#secondPage/2</span> <span class="hljs-string">结尾处的锚分别定义了目标段落和幻灯片。</span> <span class="hljs-string">在前面的URL中，目标段落将是使用锚点</span> <span class="hljs-string">secondPage</span> <span class="hljs-string">定义的段落，幻灯片将会是第2张幻灯片，因为我们使用索引</span> <span class="hljs-number">2</span> <span class="hljs-string">。</span> <span class="hljs-string">（一个段落的第一个幻灯片有索引0，在技术上这是一个段落）。</span><br><br><span class="hljs-string">如果我们在HTML标记中使用属性data-anchor，就可以使用自定义锚点来代替它的索引：</span><br><br>    <span class="hljs-string">&lt;div</span> <span class="hljs-string">class=&quot;section&quot;&gt;</span><br>    <span class="hljs-string">&lt;div</span> <span class="hljs-string">class=&quot;slide&quot;</span> <span class="hljs-string">data-anchor=&quot;slide1&quot;&gt;</span> <span class="hljs-string">幻灯片</span> <span class="hljs-number">1</span> <span class="hljs-string">&lt;/div&gt;</span><br>    <span class="hljs-string">&lt;div</span> <span class="hljs-string">class=&quot;slide&quot;</span> <span class="hljs-string">data-anchor=&quot;slide2&quot;&gt;</span> <span class="hljs-string">幻灯片</span> <span class="hljs-number">2</span> <span class="hljs-string">&lt;/div&gt;</span><br>    <span class="hljs-string">&lt;div</span> <span class="hljs-string">class=&quot;slide&quot;</span> <span class="hljs-string">data-anchor=&quot;slide3&quot;&gt;</span> <span class="hljs-string">幻灯片</span> <span class="hljs-number">3</span> <span class="hljs-string">&lt;/div&gt;</span><br>    <span class="hljs-string">&lt;div</span> <span class="hljs-string">class=&quot;slide&quot;</span> <span class="hljs-string">data-anchor=&quot;slide4&quot;&gt;</span> <span class="hljs-string">幻灯片</span> <span class="hljs-number">4</span> <span class="hljs-string">&lt;/div&gt;</span><br>    <span class="hljs-string">&lt;/div&gt;</span><br><br><span class="hljs-string">在最后一种情况中，我们使用的URL将是#secondPage/slide3，这相当于之前的</span> <span class="hljs-comment">#secondPage/2。</span><br><br><span class="hljs-string">请注意，如果没有提供anchors数组，则也可以使用data-anchor属性以同样的方式定义节锚点。</span><br><br><span class="hljs-string">注意！data-anchor标记的值不能与站点上的任何ID元素（或IE的NAME元素）相同。</span><br><br><span class="hljs-string">创建更小或更大的段落</span><br><br><span class="hljs-string">演示</span> <span class="hljs-string">fullPage.js提供了一种方法来删除段落和幻灯片的全高限制。</span> <span class="hljs-string">可以创建高度小于或大于视口的段落。</span> <span class="hljs-string">这是页脚的理想方式。</span><br><br><span class="hljs-string">需明白所有段落使用此功能并没有意义，这一点很重要。</span> <span class="hljs-string">如果网站的初始加载中有多个段落，则fullPage.js将不会滚动以查看下一个段落，因为它已经在视口中。</span><br><br><span class="hljs-string">创建更小的段落，只需在要应用的段落中使用fp-auto-height</span> <span class="hljs-string">类即可，则可以调用您的段落/幻灯片中定义的高度。</span><br><br>    <span class="hljs-string">&lt;div</span> <span class="hljs-string">class=&quot;section&quot;&gt;整个视口&lt;/div&gt;</span><br>    <span class="hljs-string">&lt;div</span> <span class="hljs-string">class=&quot;section</span> <span class="hljs-string">fp-auto-height&quot;&gt;自动高度&lt;/div&gt;</span><br><br><span class="hljs-string">响应自动高度段落</span><br><br><span class="hljs-string">演示</span> <span class="hljs-string">响应自动高度可以通过使用fp-auto-height-responsive类来调用。</span> <span class="hljs-string">这种方式段落将全屏，直到响应模式终止。</span> <span class="hljs-string">根据定义调整大小，可能是大于或小于视口。</span><br><br><span class="hljs-string">由fullpage.js添加的状态类</span><br><br><span class="hljs-string">Fullpage.js在不同的元素中添加多个类来保存网站状态的记录：</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-string">active</span> <span class="hljs-string">添加当前可见部分并滑动。</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">active</span> <span class="hljs-string">被添加到当前菜单元素（如果使用menu选项）。</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">fp-viewing-SECTION-SLIDE形式的类被添加到网站的</span> <span class="hljs-string">body</span> <span class="hljs-string">元素中。(例如：</span> <span class="hljs-string">fp-viewing-secondPage-0)</span> <span class="hljs-string">SECTION和SLIDE部分将成为当前部分和幻灯片的锚（或索引，如果没有提供锚）。</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">当进入响应模式时，fp-responsive添加到body元素`</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">当启用fullpage.js时，fp-enabled添加到html元素。</span> <span class="hljs-string">（并在销毁时被移除）。</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">当fullPage.js被销毁时，fp-destroyed被添加到fullpage.js容器中。</span><br><br><span class="hljs-string">延迟加载</span><br><br><span class="hljs-string">演示</span> <span class="hljs-string">fullPage.js提供了一种延迟加载图像、视频和音频元素的方式，这样它们不会减慢网站的加载速度，也不会浪费数据传输。</span><br><br><span class="hljs-string">当使用延迟加载时，所有这些元素只有在进入视口时才会加载。</span><br><br><span class="hljs-string">要启用延迟加载，您只需将src属性更改为data-src，如下所示：</span><br><br>    <span class="hljs-string">&lt;img</span> <span class="hljs-string">data-src=&quot;image.png&quot;&gt;</span><br>    <span class="hljs-string">&lt;video&gt;</span><br>    <span class="hljs-string">&lt;source</span> <span class="hljs-string">data-src=&quot;video.webm&quot;</span> <span class="hljs-string">type=&quot;video/webm&quot;</span> <span class="hljs-string">/&gt;</span><br>    <span class="hljs-string">&lt;source</span> <span class="hljs-string">data-src=&quot;video.mp4&quot;</span> <span class="hljs-string">type=&quot;video/mp4&quot;</span> <span class="hljs-string">/&gt;</span><br>    <span class="hljs-string">&lt;/video&gt;</span><br><br><span class="hljs-string">如果您已经使用另一个使用data-src的延迟加载解决方案，则可以通过设置</span> <span class="hljs-attr">lazyLoading:</span> <span class="hljs-literal">false</span><span class="hljs-string">选项来禁用fullPage.js延迟加载。</span><br><br><span class="hljs-string">自动播放/暂停嵌入式媒体</span><br><br><span class="hljs-string">注意：根据操作系统和浏览器的不同，自动播放功能可能无法在某些移动设备上使用（即iOS的Safari</span> <span class="hljs-string">版本</span> <span class="hljs-string">&lt;</span> <span class="hljs-number">10.0</span><span class="hljs-string">）。</span><br><br><span class="hljs-string">播放部分/幻灯片载入：</span><br><br><span class="hljs-string">对于视频或音频使用属性</span> <span class="hljs-string">autoplay，或者对于youtube</span> <span class="hljs-string">iframe使用参数autoplay=1将使得在加载页面时播放媒体元素。</span><br><br><span class="hljs-string">在段落/幻灯片载入使用而不是属性data-autoplay播放。</span> <span class="hljs-string">例如：</span><br><br>    <span class="hljs-string">&lt;audio</span> <span class="hljs-string">data-autoplay&gt;</span><br>    <span class="hljs-string">&lt;source</span> <span class="hljs-string">src=&quot;http://metakoncept.hr/horse.ogg&quot;</span> <span class="hljs-string">type=&quot;audio/ogg&quot;&gt;</span><br>    <span class="hljs-string">&lt;/audio&gt;</span><br><br><span class="hljs-string">暂停</span><br><br><span class="hljs-string">嵌入式HTML5&lt;video&gt;/&lt;audio&gt;和Youtube</span> <span class="hljs-string">iframe在离开某个段落或幻灯片时自动暂停。</span> <span class="hljs-string">可以通过使用属性data-keepplaying来禁用。</span> <span class="hljs-string">例如：</span><br><br>    <span class="hljs-string">&lt;audio</span> <span class="hljs-string">data-keepplaying&gt;</span><br>    <span class="hljs-string">&lt;source</span> <span class="hljs-string">src=&quot;http://metakoncept.hr/horse.ogg&quot;</span> <span class="hljs-string">type=&quot;audio/ogg&quot;&gt;</span><br>    <span class="hljs-string">&lt;/audio&gt;</span><br><br><span class="hljs-string">使用扩展</span><br><br><span class="hljs-string">fullpage.js</span> <span class="hljs-string">提供了一组扩展您可以使用它来增强其默认功能。</span> <span class="hljs-string">所有这些都被列为</span> <span class="hljs-string">fullpage.js</span> <span class="hljs-string">选项.</span><br><br><span class="hljs-string">扩展需要使用在dist</span> <span class="hljs-string">文件夹中的缩小文件</span> <span class="hljs-string">jquery.fullpage.extensions.min.js，而不是通常的fullPage.js文件</span> <span class="hljs-string">(jquery.fullpage.js</span> <span class="hljs-string">或</span> <span class="hljs-string">jquery.fullpage.min.js)。</span><br><br><span class="hljs-string">一旦你需要扩展文件，你需要在fullPage之前添加它。</span> <span class="hljs-string">例如，如果我想要使用Continuos</span> <span class="hljs-string">Horizontal扩展，我将包含扩展文件，然后包含fullPage文件的扩展版本。</span><br><br>    <span class="hljs-string">&lt;script</span> <span class="hljs-string">type=&quot;text/javascript&quot;</span> <span class="hljs-string">src=&quot;fullpage.continuousHorizontal.min.js&quot;&gt;&lt;/script&gt;</span><br>    <span class="hljs-string">&lt;script</span> <span class="hljs-string">type=&quot;text/javascript&quot;</span> <span class="hljs-string">src=&quot;fullpage/jquery.fullpage.extensions.min.js&quot;&gt;&lt;/script&gt;</span><br><br><span class="hljs-string">每个扩展都需要激活密钥和许可证密钥。在这里看到更多细节.</span><br><br><span class="hljs-string">然后你就可以按照选项的说明使用和配置它们。</span><br><br><span class="hljs-string">选项</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-string">controlArrows：（默认为</span> <span class="hljs-literal">true</span><span class="hljs-string">）确定是否将幻灯片的控制箭头向右或向左移动。</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">verticalCentered：（默认为true）在段落内部垂直居中。</span> <span class="hljs-string">当设置为true时，您的代码将被库包装。可考虑使用委托或在afterRender回调中加载其他脚本。</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">scrollingSpeed：（默认700）滚动转换的速度（以毫秒为单位）。</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">sectionsColor：（默认none）为每个部分定义CSSbackground-color属性。</span><br>  <span class="hljs-string">例：</span><br><br>    <span class="hljs-string">$(&#x27;#fullpage&#x27;).fullpage(&#123;</span><br>    <span class="hljs-attr">sectionsColor:</span> [<span class="hljs-string">&#x27;#f2f2f2&#x27;</span>, <span class="hljs-string">&#x27;#4BBFC3&#x27;</span>, <span class="hljs-string">&#x27;#7BAABE&#x27;</span>, <span class="hljs-string">&#x27;whitesmoke&#x27;</span>, <span class="hljs-string">&#x27;#000&#x27;</span>]<span class="hljs-string">,</span><br>    <span class="hljs-string">&#125;);</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-string">anchors：（默认[]）定义要在每个部分的URL上显示的锚链接（#example）。</span> <span class="hljs-string">锚点的值应该是独一无二的。</span> <span class="hljs-string">数组中的锚的位置将限定锚被应用于哪些部分。</span> <span class="hljs-string">（第二部分的第二个位置等等）。</span> <span class="hljs-string">通过浏览器也可以使用锚点向前和向后导航。</span> <span class="hljs-string">该选项还允许用户为特定的部分或幻灯片添加书签。</span> <span class="hljs-string">注意！锚点不能与站点上的任何ID元素（或IE的NAME元素）具有相同的值。</span><br>  <span class="hljs-string">现在可以通过使用属性data-anchor直接在HTML结构中定义锚点，如此处所述。</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">lockAnchors：（默认为false）确定URL中的锚是否在库中完全有效。</span> <span class="hljs-string">您仍然可以在函数和回调内部使用锚，但是它们在滚动网站时不起任何作用。</span> <span class="hljs-string">如果你想在URL中使用锚点来将fullPage.js和其他插件结合起来，那就很有用。</span><br><br><span class="hljs-string">重要理解</span> <span class="hljs-string">anchors选项数组中的值通过在标记中的位置直接关联到具有.section</span> <span class="hljs-string">类的元素是有帮助的。</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-string">easing:(默认easeInOutCubic）定义用于垂直和水平滚动的过渡效果。</span><br>  <span class="hljs-string">它需要文件vendors</span> <span class="hljs-string">/</span> <span class="hljs-string">jquery.easings.min.js或jQuery</span> <span class="hljs-string">UI来使用它的转换。</span> <span class="hljs-string">其他库可以用来代替。</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">easingcss3:</span> <span class="hljs-string">（默认ease）定义在使用css3：true的情况下使用的过渡效果。</span> <span class="hljs-string">你可以使用预定义的（比如linear，ease-out</span> <span class="hljs-string">...）或者使用立方bezier功能创建你自己的。</span> <span class="hljs-string">你可能想使用Matthew</span> <span class="hljs-string">Lein</span> <span class="hljs-string">CSS缓动动画工具。</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">loopTop:（默认为false）定义在第一节中向上滚动是否滚动到最后一个。</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">loopBottom:</span> <span class="hljs-string">（默认为false）定义滚动到最后一节是否应该滚动到第一个。</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">loopHorizontal:（默认为true）定义水平滑块是否在到达上一张或上一张幻灯片后循环。</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">css3:</span> <span class="hljs-string">（默认true）。</span> <span class="hljs-string">定义是否使用JavaScript或CSS3变换在部分和幻灯片中滚动。</span> <span class="hljs-string">有助于通过支持CSS3的浏览器加速平板电脑和移动设备的移动。</span> <span class="hljs-string">如果此选项设置为`true，并且浏览器不支持CSS3，则将使用jQuery后备。</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">autoScrolling:</span> <span class="hljs-string">（默认为true）定义是使用“自动”滚动还是“正常”滚动。</span> <span class="hljs-string">它同时也影响了平板电脑和移动电话中浏览器/设备窗口部分适配的方式。</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">fitToSection:</span> <span class="hljs-string">（默认为true）确定是否节放入视口中。</span> <span class="hljs-string">当设置为`true时，当前活动节将始终填充整个视口。</span> <span class="hljs-string">否则，用户可以自由地停留在一个节的中间（何时）</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">fitToSectionDelay:</span> <span class="hljs-string">（默认1000）。</span> <span class="hljs-string">如果fitToSection设置为true，则延迟</span><br>  <span class="hljs-string">以毫秒为单位进行拟合。</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">scrollBar:</span> <span class="hljs-string">（默认false）确定是否使用站点的滚动条。</span> <span class="hljs-string">在使用滚动条的情况下，autoScrolling功能仍将按预期工作。</span> <span class="hljs-string">用户也可以使用滚动条自由滚动网站，当滚动完成时，fullPage.js将适配屏幕上的部分。</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">paddingTop:</span> <span class="hljs-string">（默认0）用数值和度量（paddingTop：&#x27;10px&#x27;，paddingTop：&#x27;10em&#x27;...）定义每个部分的顶部填充。</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">paddingBottom:</span> <span class="hljs-string">（默认为0）用数值和度量（paddingBottom：&#x27;10px&#x27;，paddingBottom：&#x27;10em&#x27;...）定义每个部分的底部填充。</span> <span class="hljs-string">使用固定页脚的情况下会有用。</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">fixedElements:</span> <span class="hljs-string">（默认null）定义当使用css3选项保持固定时，哪些元素将从插件的滚动结构中移除。</span> <span class="hljs-string">它需要一个字符串与这些元素的jQuery选择器。</span> <span class="hljs-string">（例如：fixedElements：&#x27;＃element1，.element2&#x27;）</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">normalScrollElements:</span> <span class="hljs-string">（默认null）如果你想在滚动某些元素时避免自动滚动，这是你需要使用的选项。</span> <span class="hljs-string">（地图，滚动div等有用）它需要一个字符串与这些元素的jQuery选择器。</span> <span class="hljs-string">（例如：normalScrollElements：&#x27;＃element1，.element2&#x27;）。</span> <span class="hljs-string">此选项不应该应用于任何节/幻灯片元素本身。</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">normalScrollElementTouchThreshold :</span> <span class="hljs-string">（默认5）定义html节点树的跳数阈值Fullpage将测试normalScrollElements是否匹配，以允许在触摸设备上的div的滚动功能。</span> <span class="hljs-string">（例如：normalScrollElementTouchThreshold：3`）</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">bigSectionsDestination:</span> <span class="hljs-string">（默认null）定义如何滚动到比视口大的部分。</span> <span class="hljs-string">默认情况下，如果您来自目的地上方的部分，fullPage.js将滚动到顶部，如果您来自目的地之下的部分，则会滚动到底部。</span> <span class="hljs-string">可能的值是top，bottom，null。</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">keyboardScrolling:</span> <span class="hljs-string">（默认为true）定义是否可以使用键盘浏览内容。</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">touchSensitivity:</span> <span class="hljs-string">（默认5）定义浏览器窗口宽度/高度的百分比，以及滑动到下一个节/幻灯片必须测量的距离</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">continuousVertical:（默认为false）定义是否在最后一个区段向下滚动，或是否应该向下滚动到第一个区段，或如果在第一个区段向上滚动时是否应该滚动到最后一个区段。</span> <span class="hljs-string">不兼容loopTop，loopBottom或站点中存在的任何滚动条（scrollBar：true或autoScrolling：false）。</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">continuousHorizontal:</span> <span class="hljs-string">（默认false）fullpage.js的扩展。</span> <span class="hljs-string">定义在最后一张幻灯片中向右滑动是否应该向右滑动到第一张幻灯片，或者如果在第一张幻灯片中向左滚动是否应向左滑动到最后一张。</span> <span class="hljs-string">不兼容loopHorizontal。</span> <span class="hljs-string">需要fullpage.js&gt;</span> <span class="hljs-string">=</span> <span class="hljs-number">2.8</span><span class="hljs-number">.3</span><span class="hljs-string">。</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">scrollHorizontally:（默认false）fullpage.js的扩展。</span> <span class="hljs-string">定义是否使用鼠标滚轮或触控板在滑块内水平滑动。</span> <span class="hljs-string">讲故事的理想选择。</span> <span class="hljs-string">需要fullpage.js&gt;</span> <span class="hljs-string">=</span> <span class="hljs-number">2.8</span><span class="hljs-number">.3</span><span class="hljs-string">。</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">interlockedSlides:</span> <span class="hljs-string">（默认false）fullpage.js的扩展。</span> <span class="hljs-string">确定移动一个水平滑块是否会强制滑块在其他段落中的滑动方向相同。</span> <span class="hljs-string">可能的值是true，false或带有互锁部分的数组。</span> <span class="hljs-string">例如[1,3,5]`从1开始。需要fullpage.js&gt;</span> <span class="hljs-string">=</span> <span class="hljs-number">2.8</span><span class="hljs-number">.3</span><span class="hljs-string">。</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">dragAndMove:</span> <span class="hljs-string">（默认false）fullpage.js的扩展。</span> <span class="hljs-string">启用或禁用鼠标或手指拖动和滑动部分和幻灯片。</span> <span class="hljs-string">需要fullpage.js&gt;</span> <span class="hljs-string">=</span> <span class="hljs-number">2.8</span><span class="hljs-number">.9</span><span class="hljs-string">。</span> <span class="hljs-string">可能的值是：</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">true:</span> <span class="hljs-string">启用该功能。</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">false:</span> <span class="hljs-string">禁用该功能。</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">vertical:</span> <span class="hljs-string">只能在垂直情况下启用该功能。</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">horizontal:</span> <span class="hljs-string">只能在水平情况下启用该功能。</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">fingersonly:</span> <span class="hljs-string">仅启用触摸设备的功能。</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">mouseonly:</span> <span class="hljs-string">仅启用桌面设备的功能（鼠标和触控板）。</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">offsetSections:</span> <span class="hljs-string">（默认false）fullpage.js的扩展。</span> <span class="hljs-string">提供基于百分比使用非全屏幕部分的方法。</span> <span class="hljs-string">通过显示下一部分或上一部分的内容，向访问者显示网站中的更多内容的理想选择。</span> <span class="hljs-string">需要fullPage.js&gt;</span> <span class="hljs-string">=</span> <span class="hljs-number">2.8</span><span class="hljs-number">.8</span><br>  <span class="hljs-string">要定义每个部分的百分比，必须使用属性data-percentage。</span> <span class="hljs-string">可以通过在属性data-centered中使用布尔值来确定视口中该部分的居中（如果未指定，则默认为true）。</span> <span class="hljs-string">例如：</span><br><br>        <span class="hljs-string">&lt;div</span> <span class="hljs-string">class=&quot;section&quot;</span> <span class="hljs-string">data-percentage=&quot;80&quot;</span> <span class="hljs-string">data-centered=&quot;true&quot;&gt;</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-attr">resetSliders:</span> <span class="hljs-string">（默认false）。</span> <span class="hljs-string">fullpage.js的扩展。</span> <span class="hljs-string">定义是否在离开节后重置每个滑块。</span> <span class="hljs-string">需要fullpage.js&gt;</span> <span class="hljs-string">=</span> <span class="hljs-number">2.8</span><span class="hljs-number">.3</span><span class="hljs-string">。</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">fadingEffect:</span> <span class="hljs-string">（默认false）。</span> <span class="hljs-string">fullpage.js的扩展。</span> <span class="hljs-string">定义是否使用淡入淡出效果，而不是默认的滚动效果。</span> <span class="hljs-string">可能的值是true，false，sections，slideides。</span> <span class="hljs-string">因此，可以垂直或水平地应用，或者同时应用于两者。</span> <span class="hljs-string">需要fullpage.js&gt;</span> <span class="hljs-string">=</span> <span class="hljs-number">2.8</span><span class="hljs-number">.6</span><span class="hljs-string">。</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">animateAnchor:</span> <span class="hljs-string">（默认true）定义给定锚点（＃）的站点的负载是否会随着动画滚动到其目的地或直接加载给定部分。</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">recordHistory:</span> <span class="hljs-string">（默认为true）定义是否将网站的状态推送到浏览器的历史记录。</span> <span class="hljs-string">设置为true时，网站的每个部分/幻灯片将作为新页面，浏览器的后退和前进按钮将滚动部分/幻灯片以达到网站的上一个或下一个状态。</span> <span class="hljs-string">当设置为false时，URL将保持更改，但不会影响浏览器的历史记录。</span> <span class="hljs-string">使用autoScrolling：false时，该选项会自动关闭。</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">menu:</span> <span class="hljs-string">（默认false）选择器可以用来指定菜单链接到部分。</span> <span class="hljs-string">这样，节的滚动将使用`active类激活菜单中的相应元素。</span><br>  <span class="hljs-string">这将不会生成菜单，而只是将`active类添加到给定菜单中的元素，并带有相应的锚链接。</span><br>  <span class="hljs-string">为了将菜单的元素与各个部分相链接，将需要一个HTML</span> <span class="hljs-number">5</span><span class="hljs-string">数据标签（data-menuanchor）来使用这些部分中使用的锚链接。</span> <span class="hljs-string">例：</span><br><br>    <span class="hljs-string">&lt;ul</span> <span class="hljs-string">id=&quot;myMenu&quot;&gt;</span><br>    <span class="hljs-string">&lt;li</span> <span class="hljs-string">data-menuanchor=&quot;firstPage&quot;</span> <span class="hljs-string">class=&quot;active&quot;&gt;&lt;a</span> <span class="hljs-string">href=&quot;#firstPage&quot;&gt;第一节&lt;/a&gt;&lt;/li&gt;</span><br>    <span class="hljs-string">&lt;li</span> <span class="hljs-string">data-menuanchor=&quot;secondPage&quot;&gt;&lt;a</span> <span class="hljs-string">href=&quot;#secondPage&quot;&gt;第二节&lt;/a&gt;&lt;/li&gt;</span><br>    <span class="hljs-string">&lt;li</span> <span class="hljs-string">data-menuanchor=&quot;thirdPage&quot;&gt;&lt;a</span> <span class="hljs-string">href=&quot;#thirdPage&quot;&gt;第三节&lt;/a&gt;&lt;/li&gt;</span><br>    <span class="hljs-string">&lt;li</span> <span class="hljs-string">data-menuanchor=&quot;fourthPage&quot;&gt;&lt;a</span> <span class="hljs-string">href=&quot;#fourthPage&quot;&gt;第四节&lt;/a&gt;&lt;/li&gt;</span><br>    <span class="hljs-string">&lt;/ul&gt;</span><br><br>    <span class="hljs-string">$(&#x27;#fullpage&#x27;).fullpage(&#123;</span><br>    <span class="hljs-attr">anchors:</span> [<span class="hljs-string">&#x27;firstPage&#x27;</span>, <span class="hljs-string">&#x27;secondPage&#x27;</span>, <span class="hljs-string">&#x27;thirdPage&#x27;</span>, <span class="hljs-string">&#x27;fourthPage&#x27;</span>, <span class="hljs-string">&#x27;lastPage&#x27;</span>]<span class="hljs-string">,</span><br>    <span class="hljs-attr">menu:</span> <span class="hljs-string">&#x27;#myMenu&#x27;</span><br>    <span class="hljs-string">&#125;);</span><br><br><span class="hljs-string">注意：</span> <span class="hljs-string">菜单元素应放置在整页包装外，以避免使用css3：true时出现问题。</span> <span class="hljs-string">否则它会被插件本身附加到body。</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-attr">navigation:</span> <span class="hljs-string">（默认false）如果设置为true，则会显示一个由小圆圈组成的导航栏。</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">navigationPosition:</span> <span class="hljs-string">（默认none）可以设置为left或right，并定义导航栏显示的位置（如果使用的话）。</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">navigationTooltips:</span> <span class="hljs-string">（默认为[]）定义要使用导航圈的工具提示。</span> <span class="hljs-string">例如：navigationTooltips：[&#x27;firstSlide&#x27;，&#x27;secondSlide&#x27;]。</span> <span class="hljs-string">如果您愿意，也可以在每个部分中使用属性data-tooltip来定义它们。</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">showActiveTooltip:</span> <span class="hljs-string">（默认为false）显示垂直导航中主动查看节的持久工具提示。</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">slidesNavigation:</span> <span class="hljs-string">（默认为false）如果设置为true，则会显示一个导航栏，该导航栏由站点上每个横向滑块的小圆圈组成。</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">slidesNavPosition:</span> <span class="hljs-string">（默认bottom）定义滑块的横向导航栏的位置。</span> <span class="hljs-string">值为top和bottom。</span> <span class="hljs-string">您可能需要修改CSS样式以确定从顶部或底部以及任何其他样式（如颜色）的距离。</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">scrollOverflow:</span> <span class="hljs-string">（默认为false）（与IE</span> <span class="hljs-number">8</span><span class="hljs-string">不兼容）定义在内容大于它的高度的情况下是否为节/幻灯片创建滚动。</span> <span class="hljs-string">当设置为true时，您的内容将被插件包装。</span> <span class="hljs-string">考虑使用委托或在afterRender回调中加载其他脚本。</span><br>  <span class="hljs-string">如果设置为true，则需要库scrolloverflow.min.js。</span> <span class="hljs-string">这个文件必须在fullPage.js插件之前而非jQuery加载。</span><br>  <span class="hljs-string">例如：</span><br><br>    <span class="hljs-string">&lt;script</span> <span class="hljs-string">type=&quot;text/javascript&quot;</span> <span class="hljs-string">src=&quot;vendors/scrolloverflow.min.js&quot;&gt;&lt;/script&gt;</span><br>    <span class="hljs-string">&lt;script</span> <span class="hljs-string">type=&quot;text/javascript&quot;</span> <span class="hljs-string">src=&quot;jquery.fullPage.js&quot;&gt;&lt;/script&gt;</span><br><br><span class="hljs-string">为了防止fullpage.js在某些节或幻灯片中创建滚动条，请使用fp-noscroll类。</span> <span class="hljs-string">例如：</span> <span class="hljs-string">&lt;div</span> <span class="hljs-string">class=&quot;section</span> <span class="hljs-string">fp-noscroll&quot;&gt;</span><br><br><span class="hljs-string">在section元素中使用fp-auto-height-responsive时，您也可以防止scrolloverflow应用于响应模式。</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-string">scrollOverflowReset:（默认false）fullpage.js的扩展。</span> <span class="hljs-string">如果设置为true，当离开另一个垂直节时，使用滚动条向上滚动节/幻灯片的内容。</span> <span class="hljs-string">这样，即使从下面的节滚动，节/幻灯片也会始终显示其内容的开始。</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">scrollOverflowOptions:</span> <span class="hljs-string">当使用scrollOverflow：true时，fullpage.js将使用iScroll.js库文件的分叉和修改版本。</span> <span class="hljs-string">您可以通过为要使用的iScroll.js选项提供fullpage.js来自定义滚动行为。</span> <span class="hljs-string">查看它的文档了解更多信息。</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">sectionSelector:</span> <span class="hljs-string">（默认.section）定义用于插件部分的jQuery选择器。</span> <span class="hljs-string">有时可能需要更改，以避免与使用与fullpage.js相同的选择器的其他插件的问题。</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">slideSelector:</span> <span class="hljs-string">（默认.slide）定义用于插件幻灯片的jQuery选择器。</span> <span class="hljs-string">有时可能需要更改，以避免与使用与fullpage.js相同的选择器的其他插件的问题。</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">responsiveWidth:</span> <span class="hljs-string">（默认0）一个正常的滚动（autoScrolling：false）将在定义的宽度下以像素为单位使用。</span> <span class="hljs-string">如果用户希望将自己的响应式CSS用于身体标记，则会将fp-responsive类添加到身体标记中。</span> <span class="hljs-string">例如，如果设置为900，则每当浏览器的宽度小于900时，插件将像正常站点一样滚动。</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">responsiveHeight:</span> <span class="hljs-string">（默认0）一个正常的滚动（autoScrolling：false）将在定义的高度下以像素为单位使用。</span> <span class="hljs-string">如果用户希望将自己的响应式CSS用于身体标记，则会将fp-responsive类添加到身体标记中。</span> <span class="hljs-string">例如，如果设置为900，则每当浏览器的高度小于900时，插件将像正常站点一样滚动。</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">responsiveSlides:</span> <span class="hljs-string">（默认false）fullpage.js的扩展。</span> <span class="hljs-string">设置为true时，在响应模式被触发时，幻灯片将变成垂直节。</span> <span class="hljs-string">（通过使用上面详述的responsiveWidth或responsiveHeight选项）。</span> <span class="hljs-string">需要fullpage.js&gt;</span> <span class="hljs-string">=</span> <span class="hljs-number">2.8</span><span class="hljs-number">.5</span><span class="hljs-string">。</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">parallax:</span> <span class="hljs-string">（默认false）fullpage.js的扩展。</span> <span class="hljs-string">定义是否在节/幻灯片上使用视差背景效果。</span> <span class="hljs-string">详细了解如何应用视差选项.</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">parallaxOptions:</span> <span class="hljs-string">（默认：&#123;type：&#x27;reveal&#x27;，percent：62，property：&#x27;translate&#x27;&#125;）。</span> <span class="hljs-string">允许在使用选项parallax:true时配置视差背景效果的参数。</span> <span class="hljs-string">详细了解如何应用视差选项.</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">lazyLoading:</span> <span class="hljs-string">（默认true）延迟加载默认是激活的，这意味着它会延迟加载包含属性data-src的任何媒体元素，详见Lazy</span> <span class="hljs-string">Loading</span> <span class="hljs-string">docs。</span> <span class="hljs-string">如果你想使用任何其他的后加载库，你可以禁用这个fullpage.js功能。</span><br><br><span class="hljs-string">方法</span><br><br><span class="hljs-string">你可以在这里看到它们</span><br><br><span class="hljs-string">moveSectionUp()</span><br><br><span class="hljs-string">示例</span> <span class="hljs-string">向上滚动一节：</span><br><br>    <span class="hljs-string">$.fn.fullpage.moveSectionUp();</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-string">moveSectionDown()</span><br><br><span class="hljs-string">示例</span> <span class="hljs-string">向下滚动一节：</span><br><br>    <span class="hljs-string">$.fn.fullpage.moveSectionDown();</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-string">moveTo(第节,</span> <span class="hljs-string">幻灯片)</span><br><br><span class="hljs-string">示例</span> <span class="hljs-string">将页面滚动到给定节并滑动。</span> <span class="hljs-string">第一张幻灯片，默认情况下，将有索引0。</span><br><br>    <span class="hljs-string">/*滚动到锚链接`firstSlide`和第二张幻灯片的部分</span> <span class="hljs-string">*/</span><br>    <span class="hljs-string">$.fn.fullpage.moveTo(&#x27;firstSlide&#x27;,</span> <span class="hljs-number">2</span><span class="hljs-string">);</span><br><br>    <span class="hljs-string">//滚动到网站的第三节</span><br>    <span class="hljs-string">$.fn.fullpage.moveTo(3,</span> <span class="hljs-number">0</span><span class="hljs-string">);</span><br>    <br>    <span class="hljs-string">//这是一样的</span><br>    <span class="hljs-string">$.fn.fullpage.moveTo(3);</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-string">silentMoveTo(第节,</span> <span class="hljs-string">幻灯片)</span><br><br><span class="hljs-string">示例</span> <span class="hljs-string">与moveTo完全相同，但是在这种情况下，它将执行没有动画的滚动。</span> <span class="hljs-string">直接跳到目的地。</span><br><br>    <span class="hljs-string">/*滚动到锚链接`firstSlide`和第二张幻灯片的部分</span> <span class="hljs-string">*/</span><br>    <span class="hljs-string">$.fn.fullpage.silentMoveTo(&#x27;firstSlide&#x27;,</span> <span class="hljs-number">2</span><span class="hljs-string">);</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-string">moveSlideRight()</span><br><br><span class="hljs-string">示例</span> <span class="hljs-string">将当前节的水平滑块滚动到下一张幻灯片：</span><br><br>    <span class="hljs-string">$.fn.fullpage.moveSlideRight();</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-string">moveSlideLeft()</span><br><br><span class="hljs-string">示例</span> <span class="hljs-string">将当前节的水平滑块滚动到上一张幻灯片:</span><br><br>    <span class="hljs-string">$.fn.fullpage.moveSlideLeft();</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-string">setAutoScrolling(boolean)</span><br><br><span class="hljs-string">示例</span> <span class="hljs-string">实时设置滚动配置。</span><br><br><span class="hljs-string">定义页面滚动行为的方式。</span> <span class="hljs-string">如果设置为true，则将使用&quot;自动&quot;滚动，否则将使用站点的&quot;手动&quot;或&quot;正常&quot;滚动。</span><br><br>    <span class="hljs-string">$.fn.fullpage.setAutoScrolling(false);</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-string">setFitToSection(boolean)</span><br><br><span class="hljs-string">示例</span> <span class="hljs-string">设置选项fitToSection的值，确定是否适合屏幕中的部分。</span><br><br>    <span class="hljs-string">$.fn.fullpage.setFitToSection(false);</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-string">fitToSection()</span><br><br><span class="hljs-string">示例</span> <span class="hljs-string">滚动到最近的适合视口的活动节。</span><br><br>    <span class="hljs-string">$.fn.fullpage.fitToSection();</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-string">setLockAnchors(boolean)</span><br><br><span class="hljs-string">示例</span> <span class="hljs-string">设置选项lockAnchors的值，确定锚是否在URL中有效。</span><br><br>    <span class="hljs-string">$.fn.fullpage.setLockAnchors(false);</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-string">setAllowScrolling(boolean,</span> [<span class="hljs-string">directions</span>]<span class="hljs-string">)</span><br><br><span class="hljs-string">示例</span> <span class="hljs-string">添加或删除通过使用鼠标滚轮/触控板或触摸手势（默认处于活动状态）滚动节/幻灯片的可能性。</span> <span class="hljs-string">注意这不会禁用键盘滚动。</span> <span class="hljs-string">您将需要使用setKeyboardScrolling。</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-string">directions：（可选参数）允许的值：all，up，down，left，right或者它们的组合，用down，right等逗号分隔。</span> <span class="hljs-string">它定义了滚动将被启用或禁用的方向。</span><br><br>    <span class="hljs-string">//禁用滚动</span><br>    <span class="hljs-string">$.fn.fullpage.setAllowScrolling(false);</span><br>    <br>    <span class="hljs-string">//禁用向下滚动</span><br>    <span class="hljs-string">$.fn.fullpage.setAllowScrolling(false,</span> <span class="hljs-string">&#x27;down&#x27;</span><span class="hljs-string">);</span><br>    <br>    <span class="hljs-string">//禁用向下和向右滚动</span><br>    <span class="hljs-string">$.fn.fullpage.setAllowScrolling(false,</span> <span class="hljs-string">&#x27;down, right&#x27;</span><span class="hljs-string">);</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-string">setKeyboardScrolling(boolean,</span> [<span class="hljs-string">directions</span>]<span class="hljs-string">)</span><br><br><span class="hljs-string">示例</span> <span class="hljs-string">添加或删除通过使用键盘（默认情况下处于活动状态）滚动节的可能性。</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-attr">directions:</span> <span class="hljs-string">（可选参数）允许的值：all，up，down，left，right或者它们的组合，用down，right等逗号分隔。</span> <span class="hljs-string">它定义了滚动将被启用或禁用的方向。</span><br><br>    <span class="hljs-string">//禁用所有键盘滚动</span><br>    <span class="hljs-string">$.fn.fullpage.setKeyboardScrolling(false);</span><br>    <br>    <span class="hljs-string">//禁用键盘向下滚动</span><br>    <span class="hljs-string">$.fn.fullpage.setKeyboardScrolling(false,</span> <span class="hljs-string">&#x27;down&#x27;</span><span class="hljs-string">);</span><br>    <br>    <span class="hljs-string">//禁用键盘向下和向右滚动</span><br>    <span class="hljs-string">$.fn.fullpage.setKeyboardScrolling(false,</span> <span class="hljs-string">&#x27;down, right&#x27;</span><span class="hljs-string">);</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-string">setRecordHistory(boolean)</span><br><br><span class="hljs-string">示例</span> <span class="hljs-string">定义是否在URL中记录每个散列更改的历史记录。</span><br><br>    <span class="hljs-string">$.fn.fullpage.setRecordHistory(false);</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-string">setScrollingSpeed(milliseconds)</span><br><br><span class="hljs-string">示例</span> <span class="hljs-string">定义以毫秒为单位的滚动速度。</span><br><br>    <span class="hljs-string">$.fn.fullpage.setScrollingSpeed(700);</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-string">destroy(type)</span><br><br><span class="hljs-string">示例</span> <span class="hljs-string">销毁插件事件以及可选的HTML标记和样式。使用AJAX加载内容时的理想选择。</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">（可选参数）可以为空或all。</span> <span class="hljs-string">如果all被传递，fullpage.js使用的HTML标记和样式将被删除。</span> <span class="hljs-string">这样，原始的HTML标记，即任何插件修改之前使用的标记都将被保留。</span><br><br>    <span class="hljs-string">//销毁由fullPage.js创建的所有Javascript事件（URL中的卷动，hashchange）</span><br>    <span class="hljs-string">$.fn.fullpage.destroy();</span><br>    <br>    <span class="hljs-string">//销毁所有的JavaScript事件，以及在原始HTML标记中由fullPage.js所做的任何修改。</span><br>    <span class="hljs-string">$.fn.fullpage.destroy(&#x27;all&#x27;);</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-string">reBuild()</span><br><br><span class="hljs-string">更新DOM结构以适应新的窗口大小或其内容。</span><br><br>  <span class="hljs-string">非常适合与AJAX调用或站点的DOM结构中的外部更改结合使用，特别是在使用scrollOverflow：true时。</span><br><br>    <span class="hljs-string">$.fn.fullpage.reBuild();</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-string">setResponsive(boolean)</span><br><br><span class="hljs-string">示例</span> <span class="hljs-string">设置页面的响应模式。</span> <span class="hljs-string">当设置为true时，自动滚动将被关闭，结果与responsiveWidth或responsiveHeight`选项被触发时的结果完全相同。</span><br><br>    <span class="hljs-string">$.fn.fullpage.setResponsive(true);</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-string">responsiveSlides.toSections()</span><br><br><span class="hljs-string">fullpage.js的扩展。</span> <span class="hljs-string">需要fullpage.js&gt;</span> <span class="hljs-string">=</span> <span class="hljs-number">2.8</span><span class="hljs-number">.5</span><span class="hljs-string">。将水平幻灯片变成垂直节。</span><br><br>    <span class="hljs-string">$.fn.fullpage.responsiveSlides.toSections();</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-string">responsiveSlides.toSlides()</span><br><br><span class="hljs-string">fullpage.js的扩展。</span> <span class="hljs-string">需要fullpage.js&gt;</span> <span class="hljs-string">=</span> <span class="hljs-number">2.8</span><span class="hljs-number">.5</span><span class="hljs-string">。将原始幻灯片（现转换为垂直节）重新转换为水平幻灯片。</span><br><br>    <span class="hljs-string">$.fn.fullpage.responsiveSlides.toSlides();</span><br><br><span class="hljs-string">Callbacks</span><br><br><span class="hljs-string">示例</span> <span class="hljs-string">你可以在这里看到他们。</span><br><br><span class="hljs-string">afterLoad</span> <span class="hljs-string">(anchorLink,</span> <span class="hljs-string">index)</span><br><br><span class="hljs-string">滚动结束之后，一旦加载了节，就会触发回调。参数：</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-string">anchorLink：该部分对应的anchorLink。</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">`index：该部分的索引。</span> <span class="hljs-string">从1开始。</span><br><br><span class="hljs-string">如果在插件中没有定义anchorLink，那么index参数将是唯一使用的参数。</span><br><br><span class="hljs-string">例如：</span><br><br>    <span class="hljs-string">$(&#x27;#fullpage&#x27;).fullpage(&#123;</span><br>    <span class="hljs-attr">anchors:</span> [<span class="hljs-string">&#x27;firstPage&#x27;</span>, <span class="hljs-string">&#x27;secondPage&#x27;</span>, <span class="hljs-string">&#x27;thirdPage&#x27;</span>, <span class="hljs-string">&#x27;fourthPage&#x27;</span>, <span class="hljs-string">&#x27;lastPage&#x27;</span>]<span class="hljs-string">,</span><br>    <br>    <span class="hljs-attr">afterLoad:</span> <span class="hljs-string">function(anchorLink,</span> <span class="hljs-string">index)&#123;</span><br>    <span class="hljs-string">var</span> <span class="hljs-string">loadedSection</span> <span class="hljs-string">=</span> <span class="hljs-string">$(this);</span><br>    <br>    <span class="hljs-string">//使用</span> <span class="hljs-string">index</span><br>    <span class="hljs-string">if(index</span> <span class="hljs-string">==</span> <span class="hljs-number">3</span><span class="hljs-string">)&#123;</span><br>    <span class="hljs-string">alert(&quot;第3节停止加载&quot;);</span><br>    <span class="hljs-string">&#125;</span><br>    <br>    <span class="hljs-string">//使用</span> <span class="hljs-string">anchorLink</span><br>    <span class="hljs-string">if(anchorLink</span> <span class="hljs-string">==</span> <span class="hljs-string">&#x27;secondSlide&#x27;</span><span class="hljs-string">)&#123;</span><br>    <span class="hljs-string">alert(&quot;第2节停止加载&quot;);</span><br>    <span class="hljs-string">&#125;</span><br>    <span class="hljs-string">&#125;</span><br>    <span class="hljs-string">&#125;);</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-string">onLeave</span> <span class="hljs-string">(index,</span> <span class="hljs-string">nextIndex,</span> <span class="hljs-string">direction)</span><br><br><span class="hljs-string">一旦用户离开某个节，过渡到新节，就会触发此回调。</span><br><br><span class="hljs-string">返回“false”将在移动发生之前取消移动。</span><br><br><span class="hljs-string">参数：</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-string">index离开节的索引。</span> <span class="hljs-string">从1开始。</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">nextIndex：目标节的索引。</span> <span class="hljs-string">从1开始。</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">direction：取决于滚动方向，取值为up或down。</span><br><br><span class="hljs-string">例如：</span><br><br>    <span class="hljs-string">$(&#x27;#fullpage&#x27;).fullpage(&#123;</span><br>    <span class="hljs-attr">onLeave:</span> <span class="hljs-string">function(index,</span> <span class="hljs-string">nextIndex,</span> <span class="hljs-string">direction)&#123;</span><br>    <span class="hljs-string">var</span> <span class="hljs-string">leavingSection</span> <span class="hljs-string">=</span> <span class="hljs-string">$(this);</span><br>    <br>    <span class="hljs-string">//离开第二节后</span><br>    <span class="hljs-string">if(index</span> <span class="hljs-string">==</span> <span class="hljs-number">2</span> <span class="hljs-string">&amp;&amp;</span> <span class="hljs-string">direction</span> <span class="hljs-string">==&#x27;down&#x27;)&#123;</span><br>    <span class="hljs-string">alert(&quot;前往第3节！&quot;);</span><br>    <span class="hljs-string">&#125;</span><br>    <br>    <span class="hljs-string">else</span> <span class="hljs-string">if(index</span> <span class="hljs-string">==</span> <span class="hljs-number">2</span> <span class="hljs-string">&amp;&amp;</span> <span class="hljs-string">direction</span> <span class="hljs-string">==</span> <span class="hljs-string">&#x27;up&#x27;</span><span class="hljs-string">)&#123;</span><br>    <span class="hljs-string">alert(&quot;前往第1节！&quot;);</span><br>    <span class="hljs-string">&#125;</span><br>    <span class="hljs-string">&#125;</span><br>    <span class="hljs-string">&#125;);</span><br><br><span class="hljs-string">触发之前取消滚动</span><br><br><span class="hljs-string">您可以通过在onLeave回调函数上返回`false来取消滚动：</span><br><br>    <span class="hljs-string">$(&#x27;#fullpage&#x27;).fullpage(&#123;</span><br>    <span class="hljs-attr">onLeave:</span> <span class="hljs-string">function(index,</span> <span class="hljs-string">nextIndex,</span> <span class="hljs-string">direction)&#123;</span><br>    <span class="hljs-string">//如果目标是第三节，它将不会滚动</span><br>    <span class="hljs-string">if(nextIndex</span> <span class="hljs-string">==</span> <span class="hljs-number">3</span><span class="hljs-string">)&#123;</span><br>    <span class="hljs-string">return</span> <span class="hljs-literal">false</span><span class="hljs-string">;</span><br>    <span class="hljs-string">&#125;</span><br>    <span class="hljs-string">&#125;</span><br>    <span class="hljs-string">&#125;);</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-string">afterRender()</span><br><br><span class="hljs-string">这个回调在页面结构生成后立即被触发。</span> <span class="hljs-string">这是您要用来初始化其他插件的回调函数，或者触发任何需要文档准备就绪的代码（因为这个插件修改了DOM来创建结果的结构）。</span> <span class="hljs-string">请参阅常见问题了解更多信息。</span><br><br><span class="hljs-string">例如：</span><br><br>    <span class="hljs-string">$(&#x27;#fullpage&#x27;).fullpage(&#123;</span><br>    <span class="hljs-attr">afterRender:</span> <span class="hljs-string">function()&#123;</span><br>    <span class="hljs-string">var</span> <span class="hljs-string">pluginContainer</span> <span class="hljs-string">=</span> <span class="hljs-string">$(this);</span><br>    <span class="hljs-string">alert(&quot;DOM结构已完成&quot;);</span><br>    <span class="hljs-string">&#125;</span><br>    <span class="hljs-string">&#125;);</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-string">afterResize()</span><br><br><span class="hljs-string">调整浏览器窗口大小后，会触发此回调。</span> <span class="hljs-string">就在节被调整之后。</span><br><br><span class="hljs-string">例如：</span><br><br>    <span class="hljs-string">$(&#x27;#fullpage&#x27;).fullpage(&#123;</span><br>    <span class="hljs-attr">afterResize:</span> <span class="hljs-string">function()&#123;</span><br>    <span class="hljs-string">var</span> <span class="hljs-string">pluginContainer</span> <span class="hljs-string">=</span> <span class="hljs-string">$(this);</span><br>    <span class="hljs-string">alert(&quot;节已重新调整大小&quot;);</span><br>    <span class="hljs-string">&#125;</span><br>    <span class="hljs-string">&#125;);</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-string">afterResponsive(isResponsive)</span><br><br><span class="hljs-string">在fullpage.js从正常模式变为响应模式或从响应模式变为正常模式之后，此回调将被触发。</span><br><br><span class="hljs-string">参数：</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-string">isResponsive：布尔值，用于确定是否进入响应模式（true）或返回正常模式（false）。</span><br><br><span class="hljs-string">例如：</span><br><br>    <span class="hljs-string">$(&#x27;#fullpage&#x27;).fullpage(&#123;</span><br>    <span class="hljs-attr">afterResponsive:</span> <span class="hljs-string">function(isResponsive)&#123;</span><br>    <span class="hljs-string">alert(&quot;是否响应&quot;</span> <span class="hljs-string">+</span> <span class="hljs-string">isResponsive);</span><br>    <span class="hljs-string">&#125;</span><br>    <span class="hljs-string">&#125;);</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-string">afterSlideLoad</span> <span class="hljs-string">(anchorLink,</span> <span class="hljs-string">index,</span> <span class="hljs-string">slideAnchor,</span> <span class="hljs-string">slideIndex)</span><br><br><span class="hljs-string">滚动结束后，加载一个节的幻灯片后触发回调。参数：</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-string">anchorLink：该节对应的anchorLink。</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">index：该节的索引。</span> <span class="hljs-string">从1开始。</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">slideAnchor：与幻灯片对应的锚点（如果有的话）</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">slideIndex：幻灯片的索引。</span> <span class="hljs-string">从1开始（默认幻灯片不计算为幻灯片，但作为一个节）</span><br><br><span class="hljs-string">如果没有为幻灯片或幻灯片定义anchorLinks，那么slideIndex参数将是唯一使用的参数。例如：</span><br><br>    <span class="hljs-string">$(&#x27;#fullpage&#x27;).fullpage(&#123;</span><br>    <span class="hljs-attr">anchors:</span> [<span class="hljs-string">&#x27;firstPage&#x27;</span>, <span class="hljs-string">&#x27;secondPage&#x27;</span>, <span class="hljs-string">&#x27;thirdPage&#x27;</span>, <span class="hljs-string">&#x27;fourthPage&#x27;</span>, <span class="hljs-string">&#x27;lastPage&#x27;</span>]<span class="hljs-string">,</span><br>    <br>    <span class="hljs-attr">afterSlideLoad:</span> <span class="hljs-string">function(</span> <span class="hljs-string">anchorLink,</span> <span class="hljs-string">index,</span> <span class="hljs-string">slideAnchor,</span> <span class="hljs-string">slideIndex)&#123;</span><br>    <span class="hljs-string">var</span> <span class="hljs-string">loadedSlide</span> <span class="hljs-string">=</span> <span class="hljs-string">$(this);</span><br>    <br>    <span class="hljs-string">//第二节的第一张幻灯片</span><br>    <span class="hljs-string">if(anchorLink</span> <span class="hljs-string">==</span> <span class="hljs-string">&#x27;secondPage&#x27;</span> <span class="hljs-string">&amp;&amp;</span> <span class="hljs-string">slideIndex</span> <span class="hljs-string">==</span> <span class="hljs-number">1</span><span class="hljs-string">)&#123;</span><br>    <span class="hljs-string">alert(&quot;第一张幻灯片加载完毕&quot;);</span><br>    <span class="hljs-string">&#125;</span><br>    <br>    <span class="hljs-string">//第二节的第二张幻灯片（假设#secondSlide是</span><br>            <span class="hljs-string">//为第二张幻灯片锚点</span><br>    <span class="hljs-string">if(index</span> <span class="hljs-string">==</span> <span class="hljs-number">2</span> <span class="hljs-string">&amp;&amp;</span> <span class="hljs-string">slideIndex</span> <span class="hljs-string">==</span> <span class="hljs-string">&#x27;secondSlide&#x27;</span><span class="hljs-string">)&#123;</span><br>    <span class="hljs-string">alert(&quot;第二张幻灯片加载完毕&quot;);</span><br>    <span class="hljs-string">&#125;</span><br>    <span class="hljs-string">&#125;</span><br>    <span class="hljs-string">&#125;);</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-string">onSlideLeave</span> <span class="hljs-string">(anchorLink,</span> <span class="hljs-string">index,</span> <span class="hljs-string">slideIndex,</span> <span class="hljs-string">direction,</span> <span class="hljs-string">nextSlideIndex)</span><br><br><span class="hljs-string">一旦用户离开幻灯片转到另一个幻灯片，就会触发此回调。返回false将在移动发生之前取消移动。</span><br><br><span class="hljs-string">参数：</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-string">anchorLink：该节对应的anchorLink。</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">index：该节的索引。</span> <span class="hljs-string">从1开始。</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">slideIndex：幻灯片的索引。</span> <span class="hljs-string">从0开始。</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">direction：取决于滚动方向，取值为right或left。</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">nextSlideIndex：目标幻灯片的索引。</span> <span class="hljs-string">从0开始。</span><br><br><span class="hljs-string">例如：</span><br><br>    <span class="hljs-string">$(&#x27;#fullpage&#x27;).fullpage(&#123;</span><br>    <span class="hljs-attr">onSlideLeave:</span> <span class="hljs-string">function(</span> <span class="hljs-string">anchorLink,</span> <span class="hljs-string">index,</span> <span class="hljs-string">slideIndex,</span> <span class="hljs-string">direction,</span> <span class="hljs-string">nextSlideIndex)&#123;</span><br>    <span class="hljs-string">var</span> <span class="hljs-string">leavingSlide</span> <span class="hljs-string">=</span> <span class="hljs-string">$(this);</span><br>    <br>    <span class="hljs-string">//留下第二节的第一张幻灯片</span><br>    <span class="hljs-string">if(index</span> <span class="hljs-string">==</span> <span class="hljs-number">2</span> <span class="hljs-string">&amp;&amp;</span> <span class="hljs-string">slideIndex</span> <span class="hljs-string">==</span> <span class="hljs-number">0</span> <span class="hljs-string">&amp;&amp;</span> <span class="hljs-string">direction</span> <span class="hljs-string">==</span> <span class="hljs-string">&#x27;right&#x27;</span><span class="hljs-string">)&#123;</span><br>    <span class="hljs-string">alert(&quot;离开第一张幻灯片！&quot;);</span><br>    <span class="hljs-string">&#125;</span><br>    <br>    <span class="hljs-string">//将第二节的第三张幻灯片留在左边</span><br>    <span class="hljs-string">if(index</span> <span class="hljs-string">==</span> <span class="hljs-number">2</span> <span class="hljs-string">&amp;&amp;</span> <span class="hljs-string">slideIndex</span> <span class="hljs-string">==</span> <span class="hljs-number">2</span> <span class="hljs-string">&amp;&amp;</span> <span class="hljs-string">direction</span> <span class="hljs-string">==</span> <span class="hljs-string">&#x27;left&#x27;</span><span class="hljs-string">)&#123;</span><br>    <span class="hljs-string">alert(&quot;前往第二张幻灯片！&quot;);</span><br>    <span class="hljs-string">&#125;</span><br>    <span class="hljs-string">&#125;</span><br>    <span class="hljs-string">&#125;);</span><br><br><span class="hljs-string">在发生移动之前取消移动</span><br><br><span class="hljs-string">您可以通过在onSlideLeave回调中返回false来取消移动。</span> <span class="hljs-string">与使用onLeave取消动作一样。</span><br><br><span class="hljs-string">报告问题</span><br><br><span class="hljs-number">1</span><span class="hljs-string">.请在提问之前使用github问题搜索查找您的问题。</span><br><br><span class="hljs-number">2</span><span class="hljs-string">.确保使用最新的fullpage.js版本。</span> <span class="hljs-string">不支持旧版本。</span><br><br><span class="hljs-number">3</span><span class="hljs-string">.使用Github问题论坛来创建问题。</span><br><br><span class="hljs-number">4</span><span class="hljs-string">.需要单独复制该问题使用jsfiddle或codepen，如果可能的话。</span><br><br><span class="hljs-string">贡献给fullpage.js</span><br><br><span class="hljs-string">请参阅贡献给fullpage.js</span><br><br><span class="hljs-string">更新日志</span><br><br><span class="hljs-string">要查看最近更改的列表，请参见发行版部分.</span><br><br><span class="hljs-string">构建任务</span><br><br><span class="hljs-string">想要构建fullpage.js分发文件？</span> <span class="hljs-string">请参阅Build</span> <span class="hljs-string">Tasks</span><br><br><span class="hljs-string">参考资源</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-string">Wordpress</span> <span class="hljs-string">theme</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">Vue.js</span> <span class="hljs-string">wrapper</span> <span class="hljs-string">component</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">CSS</span> <span class="hljs-string">Easing</span> <span class="hljs-string">Animation</span> <span class="hljs-string">Tool</span> <span class="hljs-bullet">-</span> <span class="hljs-string">Matthew</span> <span class="hljs-string">Lein</span> <span class="hljs-string">(用于定义`easingcss3的值)</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">fullPage.js</span> <span class="hljs-string">jsDelivr</span> <span class="hljs-string">CDN</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">fullPage.js</span> <span class="hljs-string">plugin</span> <span class="hljs-string">for</span> <span class="hljs-string">October</span> <span class="hljs-string">CMS</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">fullPage.js</span> <span class="hljs-string">wordpress</span> <span class="hljs-string">plugin</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">fullPage.js</span> <span class="hljs-string">Angular2</span> <span class="hljs-string">directive</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">fullPage.js</span> <span class="hljs-string">angular</span> <span class="hljs-string">directive</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">fullPage.js</span> <span class="hljs-string">ember-cli</span> <span class="hljs-string">addon</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">fullPage.js</span> <span class="hljs-string">Rails</span> <span class="hljs-string">Ruby</span> <span class="hljs-string">Gem</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">Angular</span> <span class="hljs-string">fullPage.js</span> <span class="hljs-bullet">-</span> <span class="hljs-string">Adaptation</span> <span class="hljs-string">for</span> <span class="hljs-string">Angular.js</span> <span class="hljs-string">v1.x</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">Integrating</span> <span class="hljs-string">fullPage.js</span> <span class="hljs-string">with</span> <span class="hljs-string">Wordpress</span> <span class="hljs-string">(Tutorial)</span><br><br><span class="hljs-string">谁在使用</span> <span class="hljs-string">fullPage.js</span><br><br><span class="hljs-string">如果你想让你的页面在这里列出。</span> <span class="hljs-string">请使用网址与我联系。</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">http://www.bbc.co.uk/news/resources/idt-d88680d1-26f2-4863-be95-83298fd01e02</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">http://pages.ebay.com/design/</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">http://www.yourprimer.com/</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">http://www.vogue.fr/chaumet-histoires-de-liens</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">http://burntmovie.com/</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">http://www.bugatti.com/veyron/veyron-164/</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">http://www.newjumoconcept.com/</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">http://www.shootinggalleryasia.com/</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">http://medoff.ua/en/</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">http://promo.prestigio.com/grace1/</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">http://www.mi.com/shouhuan</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">http://www.commoditiesdemystified.info/en/</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">http://torchbrowser.com/</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">http://thekorner.fr/</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">http://www.restaurantwoods.nl/</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">https://www.edarling.de/</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">http://urban-walks.com/</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">http://lingualeo.com/</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">http://charlotteaimes.com/</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">http://collection.madeofsundays.com</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">http://thiswasmybest.com/</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">http://www.boxreload.com/</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">http://educationaboveall.org/</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">http://camfindapp.com/</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">http://rockercreative.com/</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">http://usescribe.com/</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">http://lucilecazanave.com/</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">http://boxx.hk/</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">http://bearonunicycle.com/</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">http://rawmilk.dk/en/</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">http://www.famavolat.com/</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">http://www.carpetloverclub.com/</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">http://www.sanyang.com.tw/service/Conception/</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">http://www.batzaya.net/</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">http://www.graphicid.dk/</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">http://www.carlphot.com/</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">http://medissix.com/</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">http://trasmissione-energia.terna.it/</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">http://www.thefoodmovie.com/</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">http://www.villareginateodolinda.it</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">http://www.kesstrio.com</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">http://fossdistillery.is</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">http://ded-morozz.kiev.ua/</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">http://unabridgedsoftware.com/</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">http://atlanticcorp.us/</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">http://moysport.ru/</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">http://themify.me/demo/#theme=fullpane</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">http://dancingroad.com</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">http://www.camanihome.com/</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">https://life2film.com/en/</span><br><br><span class="hljs-string">你可以找到另一个列表这里.</span><br><br><span class="hljs-string">捐献</span><br><br><span class="hljs-string">非常欢迎您的捐款:)</span><br><br><br><br><span class="hljs-string">许可证</span><br><br><span class="hljs-string">JavaScript和CSS文件中的信用评论应保持不变（即使在组合或缩小之后）</span><br><br><span class="hljs-string">（MIT许可证）</span><br><br><span class="hljs-string">Copyright</span> <span class="hljs-string">(c)</span> <span class="hljs-number">2013 </span><span class="hljs-string">Alvaro</span> <span class="hljs-string">Trigo</span> <span class="hljs-string">alvaro@alvarotrigo.com</span><br><br><span class="hljs-string">特此免费授予任何人获得许可</span><br><br><span class="hljs-string">这个软件的副本和相关的文档文件（</span><br><br><span class="hljs-string">软件），不受限制地处理本软件，包括</span><br><br><span class="hljs-string">但不限于使用，复制，修改，合并，发布，</span><br><br><span class="hljs-string">分发，再许可和/或出售软件的副本，并且</span><br><br><span class="hljs-string">允许提供软件的人这样做，但须遵守</span><br><br><span class="hljs-string">以下条件：</span><br><br><span class="hljs-string">上述版权声明和本许可声明应为</span><br><br><span class="hljs-string">包括在本软件的所有副本或主要部分。</span><br><br><span class="hljs-string">本软件按原样提供，不提供任何形式的担保，</span><br><br><span class="hljs-string">明示或暗示，包括但不限于保证</span><br><br><span class="hljs-string">适销性，针对特定用途的适用性和不侵权。</span><br><br><span class="hljs-string">在任何情况下，作者或版权所有者都不承担任何责任</span><br><br><span class="hljs-string">索赔，损害赔偿或其他责任，无论是在合同行为中，</span><br><br><span class="hljs-string">民事侵权行为或其他由此引起或与之有关的</span><br><br><span class="hljs-string">软件或软件中的使用或其他交易。</span><br><br></code></pre></td></tr></table></figure><h2 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">verticalCentered     默认<span class="hljs-keyword">true</span>   内容是否垂直居中<br>scrollingSpeed   <span class="hljs-number">700</span>滚动速度，单位为毫秒<br>navigation<span class="hljs-keyword">false</span>是否显示项目导航<br>navigationColor      #<span class="hljs-number">000</span>项目导航的颜色<br>slidesNavigation<span class="hljs-keyword">false</span>是否显示左右滑块的项目导航<br><br><br>回调函数<br>onLeave 滚动前的回调函数，接收 <span class="hljs-keyword">index</span>、nextIndex 和 direction <span class="hljs-number">3</span>个参数：<span class="hljs-keyword">index</span> 是离开的“页面”的序号，从<span class="hljs-number">1</span>开始计算；nextIndex 是滚动到的“页面”的序号，从<span class="hljs-number">1</span>开始计算；direction 判断往上滚动还是往下滚动，值是 up 或 down。<br>例:       $(<span class="hljs-string">&#x27;#fullpage&#x27;</span>).fullpage(&#123;<br>        navigation: <span class="hljs-keyword">true</span>,<br>        verticalCentered: <span class="hljs-keyword">false</span>,<br>        onLeave:<span class="hljs-keyword">function</span>(<span class="hljs-keyword">index</span>, nextIndex, direction)&#123;<br>            // console.log(<span class="hljs-keyword">index</span>);<br>            // console.log(nextIndex);<br>            // console.log(direction);<br>&#125;)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>jQuery插件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jQuery插件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue_组件</title>
    <link href="/2020/06/05/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_%E7%BB%84%E4%BB%B6/"/>
    <url>/2020/06/05/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_%E7%BB%84%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="组件化应用构建"><a href="#组件化应用构建" class="headerlink" title="组件化应用构建"></a>组件化应用构建</h2><h3 id="基础示例"><a href="#基础示例" class="headerlink" title="基础示例"></a>基础示例</h3><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">这里有一个 Vue 组件的示例：</span><br><span class="language-xml"></span><br><span class="language-xml">// 定义一个名为 button-counter 的新组件</span><br><span class="language-xml">Vue.component(&#x27;button-counter&#x27;, </span><span class="hljs-template-variable">&#123;</span><br><span class="hljs-template-variable">  data: function () &#123;</span><br><span class="hljs-template-variable">    return &#123;</span><br><span class="hljs-template-variable">      count: 0</span><br><span class="hljs-template-variable">    &#125;</span><span class="language-xml"></span><br><span class="language-xml">  &#125;,</span><br><span class="language-xml">  template: &#x27;<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;count++&quot;</span>&gt;</span>You clicked me </span><span class="hljs-template-variable">&#123;&#123; count &#125;</span><span class="language-xml">&#125; times.<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>&#x27;</span><br><span class="language-xml">&#125;)</span><br><span class="language-xml"></span><br><span class="language-xml">new Vue(</span><span class="hljs-template-variable">&#123; el: &#x27;#components-demo&#x27; &#125;</span><span class="language-xml">)</span><br><span class="language-xml">实例化要放后面</span><br><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">HTML</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;components-demo&quot;</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">button-counter</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button-counter</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="创建组件"><a href="#创建组件" class="headerlink" title="创建组件"></a>创建组件</h3><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xquery">Vue.component(<span class="hljs-string">&#x27;todo-item&#x27;</span>, &#123;<br>        template: <span class="hljs-string">&#x27;&lt;li&gt;123&lt;/li&gt;&#x27;</span><br>    &#125;)<br><br>var app6 = new Vue(&#123;<br>        el:<span class="hljs-string">&#x27;#app6&#x27;</span>,<br>        data:&#123;<br>            i<br>        &#125;<br>    &#125;);<br><br>HTML<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ol</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app6&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-comment">&lt;!-- 创建一个 todo-item 组件的实例 --&gt;</span></span><br><span class="language-xml">        </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">todo-item</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">todo-item</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="组件的复用"><a href="#组件的复用" class="headerlink" title="组件的复用"></a>组件的复用</h3><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xquery"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;components-demo&quot;</span>&gt;</span></span><br><span class="language-xml">  </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button-counter</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button-counter</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">  </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button-counter</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button-counter</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">  </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button-counter</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button-counter</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><br><br>注意当点击按钮时，每个组件都会各自独立维护它的<span class="hljs-built_in"> count</span>。因为你每用一次组件，就会有一个它的新实例被创建。<br></code></pre></td></tr></table></figure><h3 id="组件传值"><a href="#组件传值" class="headerlink" title="组件传值"></a>组件传值</h3><h4 id="父组件子组件互相传值"><a href="#父组件子组件互相传值" class="headerlink" title="父组件子组件互相传值"></a>父组件子组件互相传值</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs xml">html<br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;valuedata&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&#x27;sub_fn&#x27;</span>&gt;</span>提交<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">item-li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item,index) in lists&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;index&quot;</span> <span class="hljs-attr">:content</span>=<span class="hljs-string">&quot;item&quot;</span> <span class="hljs-attr">:index</span>=<span class="hljs-string">&quot;index&quot;</span> @<span class="hljs-attr">delete</span>=<span class="hljs-string">&quot;handledelete&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">item-li</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><br>js<br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;item-li&#x27;</span>,&#123;</span><br><span class="language-javascript">    <span class="hljs-attr">props</span>:[<span class="hljs-string">&#x27;content&#x27;</span>,<span class="hljs-string">&#x27;index&#x27;</span>],</span><br><span class="language-javascript">    <span class="hljs-attr">template</span>:<span class="hljs-string">&#x27;&lt;li @click=&quot;handleclick&quot;&gt;&#123;&#123;content&#125;&#125;&lt;/li&gt;&#x27;</span>,</span><br><span class="language-javascript">    <span class="hljs-attr">methods</span>:&#123;</span><br><span class="language-javascript">      <span class="hljs-attr">handleclick</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.$emit(<span class="hljs-string">&#x27;delete&#x27;</span>,<span class="hljs-variable language_">this</span>.<span class="hljs-property">index</span>)</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;)</span><br><span class="language-javascript">  <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">    <span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#demo&#x27;</span>,</span><br><span class="language-javascript">    <span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript">      <span class="hljs-attr">valuedata</span>:<span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">lists</span>:[]</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-attr">methods</span>:&#123;</span><br><span class="language-javascript">      <span class="hljs-attr">sub_fn</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">       <span class="hljs-variable language_">this</span>.<span class="hljs-property">lists</span>.<span class="hljs-title function_">push</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">valuedata</span>)</span><br><span class="language-javascript">      &#125;,</span><br><span class="language-javascript">      <span class="hljs-attr">handledelete</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">lists</span>.<span class="hljs-title function_">splice</span>(e,<span class="hljs-number">1</span>)</span><br><span class="language-javascript">        </span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="父向子组件传值"><a href="#父向子组件传值" class="headerlink" title="父向子组件传值"></a>父向子组件传值</h4><p> 1.父组件parent代码如下：</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xquery">template<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">son</span> <span class="hljs-attr">psMsg</span>=<span class="hljs-string">&quot;父传子的内容:叫爸爸&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">son</span>&gt;</span></span><br>如果传对象<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">son</span> ：<span class="hljs-attr">psMsg</span>=<span class="hljs-string">&quot;mydata&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">son</span>&gt;</span></span><br><br>script<br><span class="hljs-keyword">import</span> son from <span class="hljs-string">&#x27;./Son&#x27;</span> //引入子组件<br>components:&#123;son&#125;,<br></code></pre></td></tr></table></figure><p>2.子组件son代码如下：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">template</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>子组件接收到内容：</span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">psMsg</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">script</span><br><span class="language-xml">props:[&#x27;psMsg&#x27;],//接手psMsg值</span><br></code></pre></td></tr></table></figure><p>通过 Prop 向子组件传递数据</p><h4 id="子组件向父组件传值"><a href="#子组件向父组件传值" class="headerlink" title="子组件向父组件传值"></a>子组件向父组件传值</h4><p>子组件  this.$emit(‘func’,this.msg)传出</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">input</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;sendMsg&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;给父组件传递值&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript"> </span><br><span class="language-javascript">    data () &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">//将msg传递给父组件</span></span><br><span class="language-javascript">            <span class="hljs-attr">msg</span>: <span class="hljs-string">&quot;我是子组件的msg&quot;</span>,</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">     <span class="hljs-attr">methods</span>:&#123;</span><br><span class="language-javascript">         <span class="hljs-title function_">sendMsg</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">             <span class="hljs-comment">//func: 是父组件指定的传数据绑定的函数，this.msg:子组件给父组件传递的数据</span></span><br><span class="language-javascript">             <span class="hljs-variable language_">this</span>.$emit(<span class="hljs-string">&#x27;func&#x27;</span>,<span class="hljs-variable language_">this</span>.<span class="hljs-property">msg</span>)</span><br><span class="language-javascript">         &#125;</span><br><span class="language-javascript">     &#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>父组件   @func&#x3D;”getMsgFormSon”  接收并调用方法</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">child</span> @<span class="hljs-attr">func</span>=<span class="hljs-string">&quot;getMsgFormSon&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">child</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">import</span> child <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./child.vue&#x27;</span></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">    data () &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">msgFormSon</span>: <span class="hljs-string">&quot;this is msg&quot;</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-attr">components</span>:&#123;</span><br><span class="language-javascript">        child,</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-attr">methods</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">getMsgFormSon</span>(<span class="hljs-params">data</span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">msgFormSon</span> = data</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">msgFormSon</span>)</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="通过插槽分发内容"><a href="#通过插槽分发内容" class="headerlink" title="通过插槽分发内容"></a>通过插槽分发内容</h4><p>和 HTML 元素一样，我们经常需要向一个组件传递内容，像这样：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">alert-box</span>&gt;</span><br>  Something bad happened.<br><span class="hljs-tag">&lt;/<span class="hljs-name">alert-box</span>&gt;</span><br>可能会渲染出这样的东西：<br><br>幸好，Vue 自定义的 <span class="hljs-tag">&lt;<span class="hljs-name">slot</span>&gt;</span> 元素让这变得非常简单：<br><br>Vue.component(&#x27;alert-box&#x27;, &#123;<br>  template: `<br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo-alert-box&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>Error!<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">slot</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  `<br>&#125;)<br></code></pre></td></tr></table></figure><p>我们只要在需要的地方加入插槽就行了</p><h4 id="动态组件"><a href="#动态组件" class="headerlink" title="动态组件"></a>动态组件</h4><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vhdl">可以通过 Vue 的 &lt;<span class="hljs-keyword">component</span>&gt; 元素加一个特殊的 <span class="hljs-keyword">is</span> <span class="hljs-keyword">attribute</span> 来实现：<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml"><br><span class="hljs-comment">&lt;!-- 组件会在 `currentTabComponent` 改变时改变 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">component</span> <span class="hljs-attr">v-bind:is</span>=<span class="hljs-string">&quot;currentTabComponent&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">component</span>&gt;</span><br><br>在上述示例中，currentTabComponent 可以包括<br><br>已注册组件的名字，或<br>一个组件的选项对象<br><br>计算属性<br>computed: &#123;<br>          currentTabComponent: function () &#123;<br>            return &quot;tab-home&quot;;<br>          &#125;<br>        &#125;<br><br>则<br><span class="hljs-tag">&lt;<span class="hljs-name">component</span> &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">component</span>&gt;</span><br>变成<br><span class="hljs-tag">&lt;<span class="hljs-name">tab-home</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">tab-home</span>/&gt;</span><br>==<br><span class="hljs-tag">&lt;<span class="hljs-name">component</span> <span class="hljs-attr">is</span>=<span class="hljs-string">&quot;tab-home&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">component</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h2 id="深入了解组件"><a href="#深入了解组件" class="headerlink" title="深入了解组件"></a>深入了解组件</h2><h3 id="组件注册"><a href="#组件注册" class="headerlink" title="组件注册"></a>组件注册</h3><h4 id="组件名大小写"><a href="#组件名大小写" class="headerlink" title="组件名大小写"></a>组件名大小写</h4><p>kebab-case<br>PascalCase</p><h4 id="全局注册"><a href="#全局注册" class="headerlink" title="全局注册"></a>全局注册</h4><h5 id="Vue-component-注册"><a href="#Vue-component-注册" class="headerlink" title="Vue.component 注册"></a>Vue.component 注册</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;my-component-name&#x27;</span>, &#123;<br>  <span class="hljs-comment">// ... 选项 ...</span><br>&#125;)<br>这些组件是全局注册的。也就是说它们在注册之后可以用在任何新创建的 <span class="hljs-title class_">Vue</span> 根实例 (<span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>) 的模板中。比如：<br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;component-a&#x27;</span>, &#123; <span class="hljs-comment">/* ... */</span> &#125;)<br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;component-b&#x27;</span>, &#123; <span class="hljs-comment">/* ... */</span> &#125;)<br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;component-c&#x27;</span>, &#123; <span class="hljs-comment">/* ... */</span> &#125;)<br><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123; <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span> &#125;)<br>&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">component-a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">component-a</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">component-b</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">component-b</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">component-c</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">component-c</span>&gt;</span></span><br>&lt;/div&gt;<br><br></code></pre></td></tr></table></figure><p>全局注册例子</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs maxima">Vue.component(&#x27;item-<span class="hljs-built_in">li</span>&#x27;,&#123;<br>   <span class="hljs-built_in">props</span>:[&#x27;<span class="hljs-built_in">content</span>&#x27;],<br>   template:&#x27;&lt;<span class="hljs-built_in">li</span>&gt;&#123;&#123;<span class="hljs-built_in">content</span>&#125;&#125;&lt;/<span class="hljs-built_in">li</span>&gt;&#x27;<br> &#125;)<br><br><br></code></pre></td></tr></table></figure><p>vue-cli  使用</p><p>全局组件<br>main.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> hyyyTitle <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/mycomponents/hyyyTitle.vue&#x27;</span><br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;hyyyTitle&#x27;</span>,hyyyTitle)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br><br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Detail&#x27;</span>,<br><br>  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>)&#123;<br><br>    <span class="hljs-keyword">return</span> &#123;<br><br>    &#125;<br><br>  &#125;,<br><br>  <span class="hljs-attr">components</span>:&#123;<br><br>     hyyyTitle<br><br>   &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="局部注册"><a href="#局部注册" class="headerlink" title="局部注册"></a>局部注册</h4><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-comment">// var ItemLi = &#123;</span><br>  <span class="hljs-comment">//   template:&#x27;&lt;li&gt;1&lt;/li&gt;&#x27;</span><br>  <span class="hljs-comment">// &#125;</span><br><span class="hljs-keyword">new</span> Vue(&#123;<br>    el:<span class="hljs-string">&#x27;#demo&#x27;</span>,<br>    data:&#123;<br>      valuedata:<span class="hljs-string">&#x27;&#x27;</span>,<br>      lists:[]<br>    &#125;,<br>    <span class="hljs-comment">// components:&#123;</span><br>    <span class="hljs-comment">//   ItemLi:ItemLi</span><br>    <span class="hljs-comment">// &#125;,</span><br>    methods:&#123;<br>      sub_fn:<span class="hljs-keyword">function</span><span class="hljs-params">()</span>&#123;<br>       <span class="hljs-keyword">this</span>.lists.push(<span class="hljs-keyword">this</span>.valuedata)<br>      &#125;<br>    &#125;<br>  &#125;)<br><br></code></pre></td></tr></table></figure><h4 id="vue-cli-使用"><a href="#vue-cli-使用" class="headerlink" title="vue-cli  使用"></a>vue-cli  使用</h4><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-regexp">//</span> <span class="hljs-keyword">import</span> hyyyTitle <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/mycomponents/hyyyTitle.vue&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  name: <span class="hljs-string">&#x27;Detail&#x27;</span>,<br>  data()&#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>    &#125;<br>  &#125;,<br>  components:&#123;<br>     hyyyTitle<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="使用组件"><a href="#使用组件" class="headerlink" title="使用组件"></a>使用组件</h4><p>vue文件使用标签</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;hyyyTitle /&gt;</span><br></code></pre></td></tr></table></figure><h3 id="模块系统"><a href="#模块系统" class="headerlink" title="模块系统"></a>模块系统</h3><h4 id="在模块系统中局部注册"><a href="#在模块系统中局部注册" class="headerlink" title="在模块系统中局部注册"></a>在模块系统中局部注册</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript">如果你还在阅读，说明你使用了诸如 <span class="hljs-title class_">Babel</span> 和 webpack 的模块系统。在这些情况下，我们推荐创建一个 components 目录，并将每个组件放置在其各自的文件中。<br><br>然后你需要在局部注册之前导入每个你想使用的组件。例如，在一个假设的 <span class="hljs-title class_">ComponentB</span>.<span class="hljs-property">js</span> 或 <span class="hljs-title class_">ComponentB</span>.<span class="hljs-property">vue</span> 文件中：<br><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ComponentA</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./ComponentA&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ComponentC</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./ComponentC&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">components</span>: &#123;<br>    <span class="hljs-title class_">ComponentA</span>,<br>    <span class="hljs-title class_">ComponentC</span><br>  &#125;,<br>  <span class="hljs-comment">// ...</span><br>&#125;<br>现在 <span class="hljs-title class_">ComponentA</span> 和 <span class="hljs-title class_">ComponentC</span> 都可以在 <span class="hljs-title class_">ComponentB</span> 的模板中使用了。<br></code></pre></td></tr></table></figure><h4 id="基础组件的自动化全局注册"><a href="#基础组件的自动化全局注册" class="headerlink" title="基础组件的自动化全局注册"></a>基础组件的自动化全局注册</h4><p><a href="https://vuejs.bootcss.com/guide/components-registration.html#%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6%E7%9A%84%E8%87%AA%E5%8A%A8%E5%8C%96%E5%85%A8%E5%B1%80%E6%B3%A8%E5%86%8C">https://vuejs.bootcss.com/guide/components-registration.html#基础组件的自动化全局注册</a></p><h4 id="导入基础组件库到全局"><a href="#导入基础组件库到全局" class="headerlink" title="导入基础组件库到全局"></a>导入基础组件库到全局</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">https</span>:<span class="hljs-comment">//vuejs.bootcss.com/guide/components-registration.html#基础组件的自动化全局注册</span><br><br><br><br>如果你恰好使用了 webpack (或在内部使用了 webpack 的 <span class="hljs-title class_">Vue</span> <span class="hljs-variable constant_">CLI</span> <span class="hljs-number">3</span>+)，那么就可以使用 <span class="hljs-built_in">require</span>.<span class="hljs-property">context</span> 只全局注册这些非常通用的基础组件。这里有一份可以让你在应用入口文件 (比如 src/main.<span class="hljs-property">js</span>) 中全局导入基础组件的示例代码：<br><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> upperFirst <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;lodash/upperFirst&#x27;</span><br><span class="hljs-keyword">import</span> camelCase <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;lodash/camelCase&#x27;</span><br><br><span class="hljs-keyword">const</span> requireComponent = <span class="hljs-built_in">require</span>.<span class="hljs-title function_">context</span>(<br>  <span class="hljs-comment">// 其组件目录的相对路径</span><br>  <span class="hljs-string">&#x27;./components&#x27;</span>,<br>  <span class="hljs-comment">// 是否查询其子目录</span><br>  <span class="hljs-literal">false</span>,<br>  <span class="hljs-comment">// 匹配基础组件文件名的正则表达式</span><br>  <span class="hljs-regexp">/Base[A-Z]\w+\.(vue|js)$/</span><br>)<br><br>requireComponent.<span class="hljs-title function_">keys</span>().<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">fileName</span> =&gt;</span> &#123;<br>  <span class="hljs-comment">// 获取组件配置</span><br>  <span class="hljs-keyword">const</span> componentConfig = requireComponent(fileName)<br><br>  <span class="hljs-comment">// 获取组件的 PascalCase 命名</span><br>  <span class="hljs-keyword">const</span> componentName = <span class="hljs-title function_">upperFirst</span>(<br>    <span class="hljs-title function_">camelCase</span>(<br>      <span class="hljs-comment">// 获取和目录深度无关的文件名</span><br>      fileName<br>        .<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;/&#x27;</span>)<br>        .<span class="hljs-title function_">pop</span>()<br>        .<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/\.\w+$/</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>    )<br>  )<br><br>  <span class="hljs-comment">// 全局注册组件</span><br>  <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<br>    componentName,<br>    <span class="hljs-comment">// 如果这个组件选项是通过 `export default` 导出的，</span><br>    <span class="hljs-comment">// 那么就会优先使用 `.default`，</span><br>    <span class="hljs-comment">// 否则回退到使用模块的根。</span><br>    componentConfig.<span class="hljs-property">default</span> || componentConfig<br>  )<br>&#125;)<br>记住全局注册的行为必须在根 <span class="hljs-title class_">Vue</span> 实例 (通过 <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>) 创建之前发生。这里有一个真实项目情景下的示例。<br></code></pre></td></tr></table></figure><p>Prop<br>Prop 的大小写 (camelCase vs kebab-case)</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">HTML 中的 attribute 名是大小写不敏感的，所以浏览器会把所有大写字符解释为小写字符。这意味着当你使用 DOM 中的模板时，camelCase (驼峰命名法) 的 prop 名需要使用其等价的 kebab-case (短横线分隔命名) 命名：</span><br><span class="language-xml"></span><br><span class="language-xml">Vue.component(&#x27;blog-post&#x27;, &#123;</span><br><span class="language-xml">  // 在 JavaScript 中是 camelCase 的</span><br><span class="language-xml">  props: [&#x27;postTitle&#x27;],</span><br><span class="language-xml">  template: &#x27;<span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">postTitle</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span>&#x27;</span><br><span class="language-xml">&#125;)</span><br><span class="language-xml"><span class="hljs-comment">&lt;!-- 在 HTML 中是 kebab-case 的 --&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">blog-post</span> <span class="hljs-attr">post-title</span>=<span class="hljs-string">&quot;hello!&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">blog-post</span>&gt;</span></span><br><span class="language-xml">重申一次，如果你使用字符串模板，那么这个限制就不存在了。</span><br></code></pre></td></tr></table></figure><h3 id="Prop-类型"><a href="#Prop-类型" class="headerlink" title="Prop 类型"></a>Prop 类型</h3><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs qml"><span class="hljs-attribute">https</span>:<span class="hljs-comment">//vuejs.bootcss.com/guide/components-props.html#Prop-类型</span><br><br><br>到这里，我们只看到了以字符串数组形式列出的 prop：<br><br><span class="hljs-attribute">props</span>: [<span class="hljs-string">&#x27;title&#x27;</span>, <span class="hljs-string">&#x27;likes&#x27;</span>, <span class="hljs-string">&#x27;isPublished&#x27;</span>, <span class="hljs-string">&#x27;commentIds&#x27;</span>, <span class="hljs-string">&#x27;author&#x27;</span>]<br>但是，通常你希望每个 prop 都有指定的值类型。这时，你可以以对象形式列出 prop，这些 <span class="hljs-keyword">property</span><span class="hljs-string"> 的名称和值分别是 prop 各自的名称和类型：</span><br><br><span class="hljs-attribute">props</span>: &#123;<br>  <span class="hljs-attribute">title</span>: <span class="hljs-built_in">String</span>,<br>  <span class="hljs-attribute">likes</span>: <span class="hljs-built_in">Number</span>,<br>  <span class="hljs-attribute">isPublished</span>: <span class="hljs-built_in">Boolean</span>,<br>  <span class="hljs-attribute">commentIds</span>: <span class="hljs-built_in">Array</span>,<br>  <span class="hljs-attribute">author</span>: <span class="hljs-built_in">Object</span>,<br>  <span class="hljs-attribute">callback</span>: <span class="hljs-built_in">Function</span>,<br>  <span class="hljs-attribute">contactsPromise</span>: <span class="hljs-built_in">Promise</span> <span class="hljs-comment">// or any other constructor</span><br>&#125;<br>这不仅为你的组件提供了文档，还会在它们遇到错误的类型时从浏览器的 JavaScript 控制台提示用户。你会在这个页面接下来的部分看到类型检查和其它 prop 验证。<br><br><span class="hljs-attribute">https</span>:<span class="hljs-comment">//vuejs.bootcss.com/guide/components-props.html#Prop-验证</span><br></code></pre></td></tr></table></figure><h4 id="传递静态或动态-Prop"><a href="#传递静态或动态-Prop" class="headerlink" title="传递静态或动态 Prop"></a>传递静态或动态 Prop</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml">https://vuejs.bootcss.com/guide/components-props.html#传递静态或动态-Prop<br><br>像这样，你已经知道了可以像这样给 prop 传入一个静态的值：<br><br><span class="hljs-tag">&lt;<span class="hljs-name">blog-post</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;My journey with Vue&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">blog-post</span>&gt;</span><br>你也知道 prop 可以通过 v-bind 动态赋值，例如：<br><br><span class="hljs-comment">&lt;!-- 动态赋予一个变量的值 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">blog-post</span> <span class="hljs-attr">v-bind:title</span>=<span class="hljs-string">&quot;post.title&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">blog-post</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 动态赋予一个复杂表达式的值 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">blog-post</span></span><br><span class="hljs-tag">  <span class="hljs-attr">v-bind:title</span>=<span class="hljs-string">&quot;post.title + &#x27; by &#x27; + post.author.name&quot;</span></span><br><span class="hljs-tag">&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">blog-post</span>&gt;</span><br><br>在上述两个示例中，我们传入的值都是字符串类型的，但实际上任何类型的值都可以传给一个 prop。<br></code></pre></td></tr></table></figure><p>传入一个数字<br>传入一个布尔值<br>传入一个数组<br>传入一个对象<br>传入一个对象的所有 property</p><h4 id="单向数据流"><a href="#单向数据流" class="headerlink" title="单向数据流"></a>单向数据流</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">https:<span class="hljs-comment">//vuejs.bootcss.com/guide/components-props.html#单向数据流</span><br><br>所有的 prop 都使得其父子 prop 之间形成了一个单向下行绑定：父级 prop 的更新会向下流动到子组件中，但是反过来则不行。这样会防止从子组件意外变更父级组件的状态，从而导致你的应用的数据流向难以理解。<br><br>额外的，每次父级组件发生变更时，子组件中所有的 prop 都将会刷新为最新的值。这意味着你不应该在一个子组件内部改变 prop。如果你这样做了，Vue 会在浏览器的控制台中发出警告。<br><br>这里有两种常见的试图变更一个 prop 的情形：<br><br>这个 prop 用来传递一个初始值；这个子组件接下来希望将其作为一个本地的 prop 数据来使用。在这种情况下，最好定义一个本地的 <span class="hljs-keyword">data</span> property 并将这个 prop 用作其初始值：<br><br>props: [<span class="hljs-string">&#x27;initialCounter&#x27;</span>],<br><span class="hljs-keyword">data</span>: function () &#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    counter: <span class="hljs-keyword">this</span>.initialCounter<br>  &#125;<br>&#125;<br>这个 prop 以一种原始的值传入且需要进行转换。在这种情况下，最好使用这个 prop 的值来定义一个计算属性：<br><br>props: [<span class="hljs-string">&#x27;size&#x27;</span>],<br>computed: &#123;<br>  normalizedSize: function () &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.size.trim().toLowerCase()<br>  &#125;<br>&#125;<br>注意在 JavaScript 中对象和数组是通过引用传入的，所以对于一个数组或对象类型的 prop 来说，在子组件中改变变更这个对象或数组本身将会影响到父组件的状态。<br></code></pre></td></tr></table></figure><p>Prop 验证</p><blockquote><p><a href="https://vuejs.bootcss.com/guide/components-props.html#Prop-%E9%AA%8C%E8%AF%81">https://vuejs.bootcss.com/guide/components-props.html#Prop-验证</a></p><p>我们可以为组件的 prop 指定验证要求，例如你知道的这些类型。如果有一个需求没有被满足，则 Vue 会在浏览器控制台中警告你。这在开发一个会被别人用到的组件时尤其有帮助。</p><p>为了定制 prop 的验证方式，你可以为 props 中的值提供一个带有验证需求的对象，而不是一个字符串数组。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;my-component&#x27;</span>, &#123;<br>  <span class="hljs-attr">props</span>: &#123;<br>    <span class="hljs-comment">// 基础的类型检查 (`null` 和 `undefined` 会通过任何类型验证)</span><br>    <span class="hljs-attr">propA</span>: <span class="hljs-title class_">Number</span>,<br>    <span class="hljs-comment">// 多个可能的类型</span><br>    <span class="hljs-attr">propB</span>: [<span class="hljs-title class_">String</span>, <span class="hljs-title class_">Number</span>],<br>    <span class="hljs-comment">// 必填的字符串</span><br>    <span class="hljs-attr">propC</span>: &#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-title class_">String</span>,<br>      <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span><br>    &#125;,<br>    <span class="hljs-comment">// 带有默认值的数字</span><br>    <span class="hljs-attr">propD</span>: &#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-title class_">Number</span>,<br>      <span class="hljs-attr">default</span>: <span class="hljs-number">100</span><br>    &#125;,<br>    <span class="hljs-comment">// 带有默认值的对象</span><br>    <span class="hljs-attr">propE</span>: &#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-title class_">Object</span>,<br>      <span class="hljs-comment">// 对象或数组默认值必须从一个工厂函数获取</span><br>      <span class="hljs-attr">default</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;hello&#x27;</span> &#125;<br>      &#125;<br>    &#125;,<br>    <span class="hljs-comment">// 自定义验证函数</span><br>    <span class="hljs-attr">propF</span>: &#123;<br>      <span class="hljs-attr">validator</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">value</span>) &#123;<br>        <span class="hljs-comment">// 这个值必须匹配下列字符串中的一个</span><br>        <span class="hljs-keyword">return</span> [<span class="hljs-string">&#x27;success&#x27;</span>, <span class="hljs-string">&#x27;warning&#x27;</span>, <span class="hljs-string">&#x27;danger&#x27;</span>].<span class="hljs-title function_">indexOf</span>(value) !== -<span class="hljs-number">1</span><br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure></blockquote><p>当 prop 验证失败的时候，(开发环境构建版本的) Vue 将会产生一个控制台的警告。</p><p>注意那些 prop 会在一个组件实例创建之前进行验证，所以实例的 property (如 data、computed 等) 在 default 或 validator 函数中是不可用的。</p><h4 id="类型检查"><a href="#类型检查" class="headerlink" title="类型检查"></a>类型检查</h4><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs qml"><span class="hljs-attribute">https</span>:<span class="hljs-comment">//vuejs.bootcss.com/guide/components-props.html#类型检查</span><br><br>type 可以是下列原生构造函数中的一个：<br><br><span class="hljs-built_in">String</span><br><span class="hljs-built_in">Number</span><br><span class="hljs-built_in">Boolean</span><br><span class="hljs-built_in">Array</span><br><span class="hljs-built_in">Object</span><br><span class="hljs-built_in">Date</span><br><span class="hljs-built_in">Function</span><br><span class="hljs-built_in">Symbol</span><br>额外的，type 还可以是一个自定义的构造函数，并且通过 <span class="hljs-keyword">instanceof</span> 来进行检查确认。例如，给定下列现成的构造函数：<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span> (<span class="hljs-params">firstName, lastName</span>) </span>&#123;<br>  <span class="hljs-keyword">this</span>.firstName = firstName<br>  <span class="hljs-keyword">this</span>.lastName = lastName<br>&#125;<br>你可以使用：<br><br>Vue.component(<span class="hljs-string">&#x27;blog-post&#x27;</span>, &#123;<br>  <span class="hljs-attribute">props</span>: &#123;<br>    <span class="hljs-attribute">author</span>: Person<br>  &#125;<br>&#125;)<br>来验证 author prop 的值是否是通过 <span class="hljs-keyword">new</span> Person 创建的。<br></code></pre></td></tr></table></figure><p>非 Prop 的 Attribute</p><p><a href="https://vuejs.bootcss.com/guide/components-props.html#%E9%9D%9E-Prop-%E7%9A%84-Attribute">https://vuejs.bootcss.com/guide/components-props.html#非-Prop-的-Attribute</a></p><p>替换&#x2F;合并已有的 Attribute<br>禁用 Attribute 继承</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs php">https:<span class="hljs-comment">//vuejs.bootcss.com/guide/components-props.html#非-Prop-的-Attribute</span><br><br>如果你不希望组件的根元素继承 attribute，你可以在组件的选项中设置 inheritAttrs: <span class="hljs-literal">false</span>。例如：<br><br>Vue.<span class="hljs-title function_ invoke__">component</span>(<span class="hljs-string">&#x27;my-component&#x27;</span>, &#123;<br>  <span class="hljs-attr">inheritAttrs</span>: <span class="hljs-literal">false</span>,<br>  // ...<br>&#125;)<br>这尤其适合配合实例的 <span class="hljs-variable">$attrs</span> property 使用，该 property 包含了传递给一个组件的 attribute 名和 attribute 值，例如：<br><br>&#123;<br>  required: <span class="hljs-literal">true</span>,<br>  placeholder: <span class="hljs-string">&#x27;Enter your username&#x27;</span><br>&#125;<br>有了 inheritAttrs: <span class="hljs-literal">false</span> 和 <span class="hljs-variable">$attrs</span>，你就可以手动决定这些 attribute 会被赋予哪个元素。在撰写基础组件的时候是常会用到的：<br><br>Vue.<span class="hljs-title function_ invoke__">component</span>(<span class="hljs-string">&#x27;base-input&#x27;</span>, &#123;<br>  <span class="hljs-attr">inheritAttrs</span>: <span class="hljs-literal">false</span>,<br>  <span class="hljs-attr">props</span>: [<span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;value&#x27;</span>],<br>  <span class="hljs-attr">template</span>: `<br>    &lt;label&gt;<br>      &#123;&#123; label &#125;&#125;<br>      &lt;input<br>        v-bind=<span class="hljs-string">&quot;<span class="hljs-subst">$attrs</span>&quot;</span><br>        v-<span class="hljs-attr">bind</span>:value=<span class="hljs-string">&quot;value&quot;</span><br>        v-<span class="hljs-attr">on</span>:input=<span class="hljs-string">&quot;<span class="hljs-subst">$emit</span>(&#x27;input&#x27;, <span class="hljs-subst">$event</span>.target.value)&quot;</span><br>      &gt;<br>    &lt;/label&gt;<br>  `<br>&#125;)<br>注意 inheritAttrs: <span class="hljs-literal">false</span> 选项不会影响 style 和 <span class="hljs-class"><span class="hljs-keyword">class</span> 的绑定。</span><br></code></pre></td></tr></table></figure><h3 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h3><p>事件名<br>推荐你始终使用 kebab-case 的事件名。<br>自定义组件的 v-model</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs php">https:<span class="hljs-comment">//vuejs.bootcss.com/guide/components-props.html#非-Prop-的-Attribute</span><br><br><br>一个组件上的 v-model 默认会利用名为 value 的 prop 和名为 input 的事件，但是像单选框、复选框等类型的输入控件可能会将 value attribute 用于不同的目的。model 选项可以用来避免这样的冲突：<br><br>Vue.<span class="hljs-title function_ invoke__">component</span>(<span class="hljs-string">&#x27;base-checkbox&#x27;</span>, &#123;<br>  <span class="hljs-attr">model</span>: &#123;<br>    <span class="hljs-attr">prop</span>: <span class="hljs-string">&#x27;checked&#x27;</span>,<br>    <span class="hljs-attr">event</span>: <span class="hljs-string">&#x27;change&#x27;</span><br>  &#125;,<br>  <span class="hljs-attr">props</span>: &#123;<br>    <span class="hljs-attr">checked</span>: Boolean<br>  &#125;,<br>  <span class="hljs-attr">template</span>: `<br>    &lt;input<br>      type=<span class="hljs-string">&quot;checkbox&quot;</span><br>      v-<span class="hljs-attr">bind</span>:checked=<span class="hljs-string">&quot;checked&quot;</span><br>      v-<span class="hljs-attr">on</span>:change=<span class="hljs-string">&quot;<span class="hljs-subst">$emit</span>(&#x27;change&#x27;, <span class="hljs-subst">$event</span>.target.checked)&quot;</span><br>    &gt;<br>  `<br>&#125;)<br>现在在这个组件上使用 v-model 的时候：<br><br>&lt;base-checkbox v-model=<span class="hljs-string">&quot;lovingVue&quot;</span>&gt;&lt;/base-checkbox&gt;<br>这里的 lovingVue 的值将会传入这个名为 checked 的 prop。同时当 &lt;base-checkbox&gt; 触发一个 change 事件并附带一个新的值的时候，这个 lovingVue 的 property 将会被更新。<br><br>注意你仍然需要在组件的 props 选项里声明 checked 这个 prop。<br></code></pre></td></tr></table></figure><p>将原生事件绑定到组件</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs dart">https:<span class="hljs-comment">//vuejs.bootcss.com/guide/components-props.html#非-Prop-的-Attribute</span><br><br>可能有很多次想要在一个组件的根元素上直接监听一个原生事件。这时，你可以使用 v-<span class="hljs-keyword">on</span> 的 .native 修饰符：<br><br><br>你可能有很多次想要在一个组件的根元素上直接监听一个原生事件。这时，你可以使用 v-<span class="hljs-keyword">on</span> 的 .native 修饰符：<br><br>&lt;<span class="hljs-keyword">base</span>-input v-<span class="hljs-keyword">on</span>:focus.native=<span class="hljs-string">&quot;onFocus&quot;</span>&gt;&lt;/<span class="hljs-keyword">base</span>-input&gt;<br>在有的时候这是很有用的，不过在你尝试监听一个类似 &lt;input&gt; 的非常特定的元素时，这并不是个好主意。比如上述 &lt;<span class="hljs-keyword">base</span>-input&gt; 组件可能做了如下重构，所以根元素实际上是一个 &lt;label&gt; 元素：<br><br>&lt;label&gt;<br>  &#123;&#123; label &#125;&#125;<br>  &lt;input<br>    v-bind=<span class="hljs-string">&quot;<span class="hljs-subst">$attrs</span>&quot;</span><br>    v-bind:value=<span class="hljs-string">&quot;value&quot;</span><br>    v-<span class="hljs-keyword">on</span>:input=<span class="hljs-string">&quot;<span class="hljs-subst">$emit</span>(&#x27;input&#x27;, <span class="hljs-subst">$event</span>.target.value)&quot;</span><br>  &gt;<br>&lt;/label&gt;<br>这时，父级的 .native 监听器将静默失败。它不会产生任何报错，但是 onFocus 处理函数不会如你预期地被调用。<br><br>为了解决这个问题，Vue 提供了一个 $listeners property，它是一个对象，里面包含了作用在这个组件上的所有监听器。例如：<br><br>&#123;<br>  focus: function (event) &#123; <span class="hljs-comment">/* ... */</span> &#125;<br>  input: function (value) &#123; <span class="hljs-comment">/* ... */</span> &#125;,<br>&#125;<br>有了这个 $listeners property，你就可以配合 v-<span class="hljs-keyword">on</span>=<span class="hljs-string">&quot;<span class="hljs-subst">$listeners</span>&quot;</span> 将所有的事件监听器指向这个组件的某个特定的子元素。对于类似 &lt;input&gt; 的你希望它也可以配合 v-model 工作的组件来说，为这些监听器创建一个类似下述 inputListeners 的计算属性通常是非常有用的：<br><br>Vue.component(<span class="hljs-string">&#x27;base-input&#x27;</span>, &#123;<br>  inheritAttrs: <span class="hljs-keyword">false</span>,<br>  props: [<span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;value&#x27;</span>],<br>  computed: &#123;<br>    inputListeners: function () &#123;<br>      <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">this</span><br>      <span class="hljs-comment">// `Object.assign` 将所有的对象合并为一个新对象</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">Object</span>.assign(&#123;&#125;,<br>        <span class="hljs-comment">// 我们从父级添加所有的监听器</span><br>        <span class="hljs-keyword">this</span>.$listeners,<br>        <span class="hljs-comment">// 然后我们添加自定义监听器，</span><br>        <span class="hljs-comment">// 或覆写一些监听器的行为</span><br>        &#123;<br>          <span class="hljs-comment">// 这里确保组件配合 `v-model` 的工作</span><br>          input: function (event) &#123;<br>            vm.$emit(<span class="hljs-string">&#x27;input&#x27;</span>, event.target.value)<br>          &#125;<br>        &#125;<br>      )<br>    &#125;<br>  &#125;,<br>  template: `<br>    &lt;label&gt;<br>      &#123;&#123; label &#125;&#125;<br>      &lt;input<br>        v-bind=<span class="hljs-string">&quot;<span class="hljs-subst">$attrs</span>&quot;</span><br>        v-bind:value=<span class="hljs-string">&quot;value&quot;</span><br>        v-<span class="hljs-keyword">on</span>=<span class="hljs-string">&quot;inputListeners&quot;</span><br>      &gt;<br>    &lt;/label&gt;<br>  `<br>&#125;)<br>现在 &lt;<span class="hljs-keyword">base</span>-input&gt; 组件是一个完全透明的包裹器了，也就是说它可以完全像一个普通的 &lt;input&gt; 元素一样使用了：所有跟它相同的 attribute 和监听器都可以工作，不必再使用 .native 监听器。<br></code></pre></td></tr></table></figure><p>.native 修饰符<br>Vue 提供了一个 $listeners property<br>Object.assign（）将所有对象整合成一个新对象<br>.sync 修饰符<br>对一个 prop 进行“双向绑定”。</p>]]></content>
    
    
    <categories>
      
      <category>vue笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>获得元素dom&amp;创建dom&amp;操作dom</title>
    <link href="/2020/05/29/%E8%8E%B7%E5%BE%97%E5%85%83%E7%B4%A0dom&amp;%E5%88%9B%E5%BB%BAdom&amp;%E6%93%8D%E4%BD%9Cdom/"/>
    <url>/2020/05/29/%E8%8E%B7%E5%BE%97%E5%85%83%E7%B4%A0dom&amp;%E5%88%9B%E5%BB%BAdom&amp;%E6%93%8D%E4%BD%9Cdom/</url>
    
    <content type="html"><![CDATA[<h1 id="javascript-API笔记"><a href="#javascript-API笔记" class="headerlink" title="javascript API笔记"></a>javascript API笔记</h1><h2 id="特殊元素获取"><a href="#特殊元素获取" class="headerlink" title="特殊元素获取"></a>特殊元素获取</h2><p>​var html &#x3D; document.documentElement;<br>    var body &#x3D; document.body</p><h2 id="获得元素document"><a href="#获得元素document" class="headerlink" title="获得元素document."></a>获得元素document.</h2><p>根据id名获取元素：getElementById;<br>根据标签名获取元素：getElementsByTagName，返回一个数组；<br>根据类名获取元素：getElementsByClassName，返回一个数组；<br>根据name属性值获取元素：getElementsByName，返回一个数组；<br>根据选择器获取元素：<br>querySelector：获取一个元素，推荐使用 用法类似写css；<br>querySelectorAll：返回一个元素数组。</p><h3 id="getElementById"><a href="#getElementById" class="headerlink" title="getElementById"></a>getElementById</h3><blockquote><p>var p1 &#x3D; document.getElementById( ‘p1’ );<br>语法: document.getElementById( ‘id’ )<br> 习惯: 写标签的时候, 属性使用 双引号, 写字符串的时候属性写 单引号</p></blockquote><h3 id="getElementsByTagName"><a href="#getElementsByTagName" class="headerlink" title="getElementsByTagName"></a>getElementsByTagName</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>111<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>div<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>222<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>div<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>333<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>div<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 获得所有的 p 标签, 然后打印出来</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> nodes = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByTagName</span>( <span class="hljs-string">&#x27;p&#x27;</span> );</span><br><span class="language-javascript">    </span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>document.getElementsByTagName( ‘p’ );</p></blockquote><h3 id="getElementsByTagName-1"><a href="#getElementsByTagName-1" class="headerlink" title="getElementsByTagName"></a>getElementsByTagName</h3><blockquote><p>var div &#x3D; document.getElementsByTagName( ‘div’ )[ 0 ];</p></blockquote><h3 id="getElementsByClassName"><a href="#getElementsByClassName" class="headerlink" title="getElementsByClassName"></a>getElementsByClassName</h3><blockquote><p>document.getElementsByClassName (‘class’) 通过类名获取元素，以伪数组形式存在。</p></blockquote><h3 id="querySelector"><a href="#querySelector" class="headerlink" title="querySelector"></a>querySelector</h3><blockquote><p> &#x2F;&#x2F; 选择器 ( selector )<br>        &#x2F;&#x2F; -&gt; 基本选择器: #id, .className, tagName, *<br>        &#x2F;&#x2F; -&gt; 复合选择器: 子代选择器( &gt; ), 后代选择器( ‘ ‘ ), …</p><pre><code class="hljs">    // 如果想到定位 这两个 p    // #dv1 &gt; p        // 使用选择器获得元素的 语法      // docuemnt.querySelector( &#39;选择器的字符串&#39; ) 获得所有的 符合选择器的元素中的 第 0 个</code></pre></blockquote><h3 id="querySelectorAll"><a href="#querySelectorAll" class="headerlink" title="querySelectorAll"></a>querySelectorAll</h3><blockquote><p>&#x2F;&#x2F; document.querySelectorAll( ‘选择器字符串’ )  获得所有的 符合选择器的元素( 伪数组 )</p></blockquote><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-built_in">document</span>.<span class="hljs-built_in">querySelectorAll</span>(<span class="hljs-string">&#x27;selector&#x27;</span>) 通过CSS选择器获取元素，以伪数组形式存在。<br></code></pre></td></tr></table></figure><h3 id="document-body"><a href="#document-body" class="headerlink" title="document.body"></a>document.body</h3><blockquote><p>如果需要获得页面中的 body, 除了使用 get 或 query 系列的方法之外<br>还可以使用 document.body, 其就是 当前页面的 body 标签</p></blockquote><h3 id="children"><a href="#children" class="headerlink" title="children"></a>children</h3><blockquote><p>使用 children 来获得元素的 子元素</p><p>例如</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;menu&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>测试<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>测试<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>测试<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>测试<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>测试<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>测试<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 使用传统的方法, 获得 主菜单的 a 标签</span></span><br><span class="language-javascript">        <span class="hljs-comment">// 可以使用 children 来获得元素的 子元素</span></span><br><span class="language-javascript">        <span class="hljs-comment">// 1&gt; 拿到菜单的 容器 ( menu )</span></span><br><span class="language-javascript">        <span class="hljs-comment">// 2&gt; 利用 children 来拿到容器中的 所有 li</span></span><br><span class="language-javascript">        <span class="hljs-comment">// 3&gt; 循环遍历 li 找到每一个 li 中的 第 0 的子元素( children[ 0 ] )</span></span><br><span class="language-javascript">        <span class="hljs-comment">/*</span></span><br><span class="hljs-comment"><span class="language-javascript">        var menu = document.getElementById( &#x27;menu&#x27; );</span></span><br><span class="hljs-comment"><span class="language-javascript">        var li_list = menu.children;</span></span><br><span class="hljs-comment"><span class="language-javascript">        // console.log( li_list );</span></span><br><span class="hljs-comment"><span class="language-javascript">        for ( var i = 0; i &lt; li_list.length; i++ ) &#123;</span></span><br><span class="hljs-comment"><span class="language-javascript">            var li = li_list[ i ]; // 就是每一个 一级菜单的 li 标签</span></span><br><span class="hljs-comment"><span class="language-javascript">            // console.log( li.children );</span></span><br><span class="hljs-comment"><span class="language-javascript">            var a = li.children[ 0 ];</span></span><br><span class="hljs-comment"><span class="language-javascript">            console.log( a );</span></span><br><span class="hljs-comment"><span class="language-javascript">        &#125;</span></span><br><span class="hljs-comment"><span class="language-javascript">        */</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 使用选择器</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> a_list = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>( <span class="hljs-string">&#x27;#menu &gt; li &gt; a&#x27;</span> );</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( a_list );</span><br><span class="language-javascript">    </span><br><span class="language-javascript">    &lt;/scri</span><br></code></pre></td></tr></table></figure><h2 id="创建元素-重要"><a href="#创建元素-重要" class="headerlink" title="创建元素( 重要 )"></a>创建元素( 重要 )</h2><p>利用字符串来拼接<br>拿字符串拼接只能一次性处理, 无法对每一个标签( DOM 对象 )精细的控制</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;div&gt;<br>           <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span>主菜单<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br>           <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">               <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;...&quot;</span>&gt;</span>子菜单<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="language-xml">               <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;...&quot;</span>&gt;</span>子菜单<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="language-xml">               ...</span><br><span class="language-xml">           <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>       &lt;/div&gt;<br><br>       <span class="hljs-keyword">var</span> html = <span class="hljs-string">&#x27;&lt;div class=&quot;menu&quot;&gt;&#x27;</span>;<br><br>       <span class="hljs-comment">// 遍历数据数组, 拼接每一个菜单</span><br>       <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; data.<span class="hljs-property">length</span>; i++) &#123;<br>           <span class="hljs-comment">// 在每一个循环中拼接出一个完整的字符串出来</span><br>           html += <span class="hljs-string">&#x27;&lt;div&gt;&#x27;</span>;<br>           html += <span class="hljs-string">&#x27;    &lt;a&gt;&#x27;</span> + data[i].<span class="hljs-property">menuName</span> + <span class="hljs-string">&#x27;&lt;/a&gt;&#x27;</span>;<br>           html += <span class="hljs-string">&#x27;    &lt;div class=&quot;hide&quot;&gt;&#x27;</span>;<br><br>           <span class="hljs-comment">// 循环子菜单, 循环的是 data[ i ].submenus</span><br>           <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> j = <span class="hljs-number">0</span>; j &lt; data[i].<span class="hljs-property">submenus</span>.<span class="hljs-property">length</span>; j++) &#123;<br>               <span class="hljs-comment">// 拼接子菜单中的 a 标签的 内容</span><br>               <span class="hljs-keyword">var</span> url = data[i].<span class="hljs-property">submenus</span>[j].<span class="hljs-property">url</span>;<br>               <span class="hljs-keyword">var</span> submenuName = data[i].<span class="hljs-property">submenus</span>[j].<span class="hljs-property">submenuName</span>;<br><br>               html += <span class="hljs-string">&#x27;    &lt;a href=&quot;&#x27;</span> + url + <span class="hljs-string">&#x27;&quot;&gt;&#x27;</span> + submenuName + <span class="hljs-string">&#x27;&lt;/a&gt;&#x27;</span>;<br>           &#125;<br><br>           html += <span class="hljs-string">&#x27;    &lt;/div&gt;&#x27;</span>;<br>           html += <span class="hljs-string">&#x27;&lt;/div&gt;&#x27;</span>;<br>       &#125;<br><br><br>       html += <span class="hljs-string">&#x27;&lt;/div&gt;&#x27;</span>;<br></code></pre></td></tr></table></figure><p>创建元素<br>    document.createElement( ‘元素的标签名字’ )</p><h2 id="元素操作"><a href="#元素操作" class="headerlink" title="元素操作"></a>元素操作</h2><h3 id="类名操作"><a href="#类名操作" class="headerlink" title="类名操作"></a>类名操作</h3><p>Node指一个有效的DOM节点，是一个通称</p><p>Node.classList.add(‘class’) 添加class</p><p>Node.classList.remove(‘class’) 移除class</p><p>Node.classList.toggle(‘class’) 切换class，有则移除，无则添加</p><p>Node.classList.contains(‘class’) 检测是否存在class</p><h3 id="自定义属性的获取和设置"><a href="#自定义属性的获取和设置" class="headerlink" title="自定义属性的获取和设置"></a>自定义属性的获取和设置</h3><p>获取自定义属性：元素对象.dataget[‘自定义属性名称’]</p><p>设置自定义属性：元素对象.dataset[‘自定义属性名称’]</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">注：当我们如下格式设置时，则需要以驼峰格式才能正确获取<br>&lt;<span class="hljs-selector-tag">div</span> data-my-name=<span class="hljs-string">&quot;itcast&quot;</span>&gt; 这样获取Node<span class="hljs-selector-class">.dataset</span><span class="hljs-selector-attr">[<span class="hljs-string">&#x27;myName&#x27;</span>]</span><br></code></pre></td></tr></table></figure><p>追加元素<br>    父元素.appendChild( 子元素 )</p><p>插入元素</p><blockquote><p>父元素.insertBefore( 新元素, 页面中的元素 )<br>将 “新元素” 插入到 “页面中的元素” 的 前面</p></blockquote><p>删除元素</p><blockquote><p>父元素.removeChild( 子元素 )  </p></blockquote><p>修改元素<br>查询元素<br>删除( remove )元素    从父元素中删除子元素<br>替换( replace )元素[ 知道 ]<br>cloneNode 与 移动 DOM 元素</p><h2 id="dom节点操作"><a href="#dom节点操作" class="headerlink" title="dom节点操作"></a>dom节点操作</h2><p>html</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">&lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;tableBody&quot;</span> <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;mytable&quot;</span> <span class="hljs-keyword">ref</span>=<span class="hljs-string">&quot;mytable&quot;</span>&gt;&lt;/<span class="hljs-keyword">div</span>&gt;<br></code></pre></td></tr></table></figure><h3 id="获取节点"><a href="#获取节点" class="headerlink" title="获取节点"></a>获取节点</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus">this.<span class="hljs-variable">$refs</span><span class="hljs-selector-class">.mytable</span>   获取 <br>或者  this.<span class="hljs-variable">$refs</span><span class="hljs-selector-class">.mytable</span>.<span class="hljs-variable">$el</span><br> 或者    document<span class="hljs-selector-class">.getElementById</span>(<span class="hljs-string">&#x27;id&#x27;</span>)<br>或者  document<span class="hljs-selector-class">.querySelector</span>(<span class="hljs-string">&#x27;类名&#x27;</span>)<br><span class="hljs-selector-tag">var</span> container = document<span class="hljs-selector-class">.getElementById</span>(<span class="hljs-string">&#x27;mytable&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="创建节点"><a href="#创建节点" class="headerlink" title="创建节点"></a>创建节点</h3><p>var newnode &#x3D; document.createElement(“p”);</p><h3 id="添加节点内容"><a href="#添加节点内容" class="headerlink" title="添加节点内容"></a>添加节点内容</h3><p>newnode.innerHTML &#x3D; “创建的节点内容”</p><h3 id="插入节点"><a href="#插入节点" class="headerlink" title="插入节点"></a>插入节点</h3><p>container.appendChild(newnode)</p><h3 id="修改节点样式"><a href="#修改节点样式" class="headerlink" title="修改节点样式"></a>修改节点样式</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">newnode.style.width</span> = <span class="hljs-string">&#x27;200px&#x27;</span><br><span class="hljs-attr">newnode.style.height</span> = <span class="hljs-string">&#x27;200px&#x27;</span><br><span class="hljs-attr">newnode.style.background</span> = <span class="hljs-string">&#x27;pink&#x27;</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h3 id="普通节点删除"><a href="#普通节点删除" class="headerlink" title="普通节点删除"></a>普通节点删除</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs stylus">dom元素<span class="hljs-selector-class">.remove</span>()<br><br>querySelectorAll    节点  删除<br>document<span class="hljs-selector-class">.querySelectorAll</span>(‘<span class="hljs-selector-class">.esedbox</span> .triangle_b’)返回的不是数组，而是类数组，不能用remove方法（remove方法是dom元素节点的方法）<br><br><span class="hljs-selector-tag">var</span> box = document<span class="hljs-selector-class">.querySelectorAll</span>(<span class="hljs-string">&#x27;.haha&#x27;</span>)<br>        Array<span class="hljs-selector-class">.from</span>(box)<span class="hljs-selector-class">.forEach</span>((item) =&gt; &#123;<br>          item<span class="hljs-selector-class">.remove</span>()<br>        &#125;)<br>  <br></code></pre></td></tr></table></figure><h3 id="获取元素长宽高和滚动距离"><a href="#获取元素长宽高和滚动距离" class="headerlink" title="获取元素长宽高和滚动距离"></a>获取元素长宽高和滚动距离</h3><p>1.对于css盒子模型，我们使用width和height等来定义dom元素的宽高，而有时我们需要在js中获取元素的宽高进行一些操作。</p><p>2.dom操作提供了相应的属性来实现这一点</p><p>窗口大小<br>二，clientWidth和clientHeight<br>1.clientWidth和clientHeight用于获取元素的视口宽高，不包含border，margin,还要滚动条。</p><p>元素大小<br>三，offsetWidth和offsetHeight<br>1.元素的实际宽高，包含滚动条和border,不包含margin</p><p>四，scrollHeight和scrollWidth<br>1.当一个元素出现滚动时，这个元素的clientWidth和clientHeight表示了元素的视口宽高，而scrollHeight和scrollWidth用于表示该元素的滚动的实际宽高。</p><p>五，scrollTop<br>1.出现滚动条的元素，滚动距离上边界的距离。</p><p>2.如下图，红色的元素的scrollTop 等于绿色线段的长度。</p><p>3.scrollTop是可以修改的，修改时蓝色元素移动到相应位置</p><p>使用<br>dom.offsetWidth</p><p>var container &#x3D; document.getElementById(‘mytable’)<br>console.log(‘width’,container.offsetWidth);</p><p>元素相对可视窗口的位置</p><p>dom.getBoundingClientRect()</p><p>let object &#x3D; document.getElementById(‘object’)<br>let rectObject &#x3D; object.getBoundingClientRect();<br>rectObject.top &#x2F; left &#x2F; right &#x2F; bottom &#x2F; width &#x2F; height;</p>]]></content>
    
    
    <categories>
      
      <category>javascript API笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>dom操作</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue随笔_生命周期</title>
    <link href="/2020/05/25/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <url>/2020/05/25/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
    
    <content type="html"><![CDATA[<h2 id="一、Vue的生命周期阶段"><a href="#一、Vue的生命周期阶段" class="headerlink" title="一、Vue的生命周期阶段"></a>一、Vue的生命周期阶段</h2><p>vue生命周期分为四个阶段<br>第一阶段（创建阶段）：beforeCreate，created<br>第二阶段（挂载阶段）：beforeMount（render），mounted<br>第三阶段（更新阶段）：beforeUpdate，updated<br>第四阶段（销毁阶段）：beforeDestroy，destroyed<br>————————————————</p><h2 id="二、生命周期钩子函数"><a href="#二、生命周期钩子函数" class="headerlink" title="二、生命周期钩子函数"></a>二、生命周期钩子函数</h2><ol><li><h3 id="beforeCreate"><a href="#beforeCreate" class="headerlink" title="beforeCreate"></a>beforeCreate</h3></li></ol><p>  官网：在实例初始化之后,进行数据侦听和事件&#x2F;侦听器的配置之前同步调用。</p><p>详细：在这个阶段，数据是获取不到的，并且真实dom元素也是没有渲染出来的</p><ol start="2"><li><h3 id="created"><a href="#created" class="headerlink" title="created"></a>created</h3></li></ol><p>  官网：在实例创建完成后被立即同步调用。在这一步中，实例已完成对选项的处理，意味着以下内容已被配置完毕：数据侦听、计算属性、方法、事件&#x2F;侦听器的回调函数。然而，挂载阶段还没开始，且 $el property 目前尚不可用。</p><p>详细：在这个阶段，可以访问到数据了，但是页面当中真实dom节点还是没有渲染出来，在这个钩子函数里面，可以进行相关初始化事件的绑定、发送请求操作</p><ol start="3"><li><h3 id="beforeMount"><a href="#beforeMount" class="headerlink" title="beforeMount"></a>beforeMount</h3></li></ol><p>  官网：在挂载开始之前被调用：相关的 render 函数首次被调用。</p><p>详细：代表dom马上就要被渲染出来了，但是却还没有真正的渲染出来，这个钩子函数与created钩子函数用法基本一致，可以进行相关初始化事件的绑定、发送ajax操作</p><ol start="4"><li><h3 id="mounted"><a href="#mounted" class="headerlink" title="mounted"></a>mounted</h3></li></ol><p>  官网：实例被挂载后调用，这时 el 被新创建的 vm.$el 替换了。如果根实例挂载到了一个文档内的元素上，当 mounted 被调用时 vm.$el 也在文档内。<br>  注意 mounted 不会保证所有的子组件也都被挂载完成。如果你希望等到整个视图都渲染完毕再执行某些操作，可以在 mounted 内部使用 vm.$nextTick：</p><p>详细：挂载阶段的最后一个钩子函数,数据挂载完毕，真实dom元素也已经渲染完成了,这个钩子函数内部可以做一些实例化相关的操作</p><ol start="5"><li><h3 id="beforeUpdate"><a href="#beforeUpdate" class="headerlink" title="beforeUpdate"></a>beforeUpdate</h3></li></ol><p>  官网：在数据发生改变后，DOM 被更新之前被调用。这里适合在现有 DOM 将要被更新之前访问它，比如移除手动添加的事件监听器。</p><p>详细：这个钩子函数初始化的不会执行,当组件挂载完毕的时候，并且当数据改变的时候，才会立马执行,这个钩子函数获取dom的内容是更新之前的内容</p><ol start="6"><li><h3 id="updated"><a href="#updated" class="headerlink" title="updated"></a>updated</h3></li></ol><p>  官网：在数据更改导致的虚拟 DOM 重新渲染和更新完毕之后被调用。<br>  当这个钩子被调用时，组件 DOM 已经更新，所以你现在可以执行依赖于 DOM 的操作。然而在大多数情况下，你应该避免在此期间更改状态。如果要相应状态改变，通常最好使用计算属性或 watcher 取而代之。</p><p>详细：这个钩子函数获取dom的内容是更新之后的内容生成新的虚拟dom，新的虚拟dom与之前的虚拟dom进行比对，差异之后，就会进行真实dom渲染。在updated钩子函数里面就可以获取到因diff算法比较差异得出来的真实dom渲染了。</p><ol start="7"><li><h3 id="beforeDestroy"><a href="#beforeDestroy" class="headerlink" title="beforeDestroy"></a>beforeDestroy</h3></li></ol><p>  官网：实例销毁之前调用。在这一步，实例仍然完全可用。</p><p>详细：当组件销毁的时候，就会触发这个钩子函数代表销毁之前，可以做一些善后操作,可以清除一些初始化事件、定时器相关的东西。</p><ol start="8"><li><h3 id="destroyed"><a href="#destroyed" class="headerlink" title="destroyed"></a>destroyed</h3></li></ol><p>  官网：实例销毁后调用。该钩子被调用后，对应 Vue 实例的所有指令都被解绑，所有的事件监听器被移除，所有的子实例也都被销毁。</p><p>详细：Vue实例失去活性，完全丧失功能</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">msg</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;change&quot;</span>&gt;</span>更新<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  data () &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;hello&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">methods</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    change () &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-variable language_">this</span>.<span class="hljs-property">msg</span> = <span class="hljs-string">&#x27;hello world&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  beforeCreate () &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;----------------&gt;beforeCreate&#x27;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">msg</span>, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;box&#x27;</span>))</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  created () &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;----------------&gt;created&#x27;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">msg</span>, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;box&#x27;</span>))</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  beforeMount () &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;----------------&gt;beforeMount&#x27;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">msg</span>, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;box&#x27;</span>))</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  mounted () &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;----------------&gt;mounted&#x27;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">msg</span>, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;box&#x27;</span>))</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  beforeUpdate () &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;----------------&gt;beforeUpdate&#x27;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$el</span>.<span class="hljs-property">innerHTML</span>)</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">msg</span>, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;box&#x27;</span>))</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  updated () &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;----------------&gt;updated&#x27;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$el</span>.<span class="hljs-property">innerHTML</span>)</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">msg</span>, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;box&#x27;</span>))</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>当页面初始化挂载完成之后，</p><p>当数据改变之后又会触发beforeUpdate，updated两个钩子函数</p><p><img src="https://v2.cn.vuejs.org/images/lifecycle.png"></p>]]></content>
    
    
    <categories>
      
      <category>vue笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>操作dom坐标</title>
    <link href="/2020/05/16/%E6%93%8D%E4%BD%9Cdom%E5%9D%90%E6%A0%87/"/>
    <url>/2020/05/16/%E6%93%8D%E4%BD%9Cdom%E5%9D%90%E6%A0%87/</url>
    
    <content type="html"><![CDATA[<h1 id="操作dom坐标"><a href="#操作dom坐标" class="headerlink" title="操作dom坐标"></a>操作dom坐标</h1><h2 id="与坐标有关的属性"><a href="#与坐标有关的属性" class="headerlink" title="与坐标有关的属性"></a>与坐标有关的属性</h2><p>screenX, screenY,   screen </p><p>屏幕, 鼠标相对于我们的计算机屏幕左上角的坐标<br>clientX, clientY,   client</p><p> 客户端, 鼠标相对于浏览器中的页面的可视区域的左上角的坐标<br> pageX, pageY,       page </p><p>页面的意思, 鼠标相对于页面( 页芯 )的左上角的坐标<br> offsetX, offsetY    offset </p><p>偏移量, 可以认为是相对的距离.<br>offsetX 与 offsetY </p><p>表示鼠标在盒子内部, 相对于盒子而言它的坐标是多少<br>layerX, layerY     </p><p> 其功能能可以简单的理解为就是 offsetX Y, 但是这个属性是火狐中的属性<br>练习: 跟着鼠标移动的图片<br> 需求是鼠标移动到哪里, 图片就跟到哪里<br> 练习: 拖拽<br>页面中有一个盒子, 鼠标点击盒子里面的某一个区域( 任意 )<br>在鼠标按着不动, 移动鼠标, 盒子会跟着鼠标一起移动, 鼠标放开后<br>盒子停留.</p><h2 id="获取元素宽高及其他属性"><a href="#获取元素宽高及其他属性" class="headerlink" title="获取元素宽高及其他属性"></a>获取元素宽高及其他属性</h2><p>​    元素.offsetWidth<br>    元素.offsetHeight<br>    元素.offsetLeft<br>    元素.offsetTop</p><p>html  元素  clientWidth  浏览器可视区域的宽度</p><p>var sw &#x3D; document.documentElement.clientWidth;</p><p>元素.offsetX </p><p> 点击的盒子内部某个点距离盒子的距离</p><h2 id="vue-获取dom宽高和坐标"><a href="#vue-获取dom宽高和坐标" class="headerlink" title="vue 获取dom宽高和坐标"></a>vue 获取dom宽高和坐标</h2>]]></content>
    
    
    <categories>
      
      <category>javascript API笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>dom操作</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue_条件渲染</title>
    <link href="/2020/05/15/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_%E6%9D%A1%E4%BB%B6%E6%B8%B2%E6%9F%93/"/>
    <url>/2020/05/15/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_%E6%9D%A1%E4%BB%B6%E6%B8%B2%E6%9F%93/</url>
    
    <content type="html"><![CDATA[<h4 id=""><a href="#" class="headerlink" title=""></a></h4><h2 id="条件与循环"><a href="#条件与循环" class="headerlink" title="条件与循环"></a>条件与循环</h2><h3 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h3><h3 id="v-if和v-else和v-else-if"><a href="#v-if和v-else和v-else-if" class="headerlink" title="v-if和v-else和v-else-if"></a>v-if和v-else和v-else-if</h3><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs applescript">v-<span class="hljs-keyword">if</span> 指令用于条件性地渲染一块内容。这块内容只会在指令的表达式返回 truthy 值的时候被渲染。<br><br>&lt;h1 v-<span class="hljs-keyword">if</span>=<span class="hljs-string">&quot;awesome&quot;</span>&gt;Vue <span class="hljs-keyword">is</span> awesome!&lt;/h1&gt;<br>也可以用 v-<span class="hljs-keyword">else</span> 添加一个“<span class="hljs-keyword">else</span> 块”：<br><br>&lt;h1 v-<span class="hljs-keyword">if</span>=<span class="hljs-string">&quot;awesome&quot;</span>&gt;Vue <span class="hljs-keyword">is</span> awesome!&lt;/h1&gt;<br>&lt;h1 v-<span class="hljs-keyword">else</span>&gt;Oh no 😢&lt;/h1&gt;<br><br>&lt;<span class="hljs-keyword">div</span> v-<span class="hljs-keyword">if</span>=<span class="hljs-string">&quot;type === &#x27;A&#x27;&quot;</span>&gt;<br>  A<br>&lt;/<span class="hljs-keyword">div</span>&gt;<br>&lt;<span class="hljs-keyword">div</span> v-<span class="hljs-keyword">else</span>-<span class="hljs-keyword">if</span>=<span class="hljs-string">&quot;type === &#x27;B&#x27;&quot;</span>&gt;<br>  B<br>&lt;/<span class="hljs-keyword">div</span>&gt;<br>&lt;<span class="hljs-keyword">div</span> v-<span class="hljs-keyword">else</span>-<span class="hljs-keyword">if</span>=<span class="hljs-string">&quot;type === &#x27;C&#x27;&quot;</span>&gt;<br>  C<br>&lt;/<span class="hljs-keyword">div</span>&gt;<br>&lt;<span class="hljs-keyword">div</span> v-<span class="hljs-keyword">else</span>&gt;<br>  Not A/B/C<br>&lt;/<span class="hljs-keyword">div</span>&gt;<br></code></pre></td></tr></table></figure><h3 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h3><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs maxima">另一个用于根据条件展示元素的选项是 v-<span class="hljs-built_in">show</span> 指令。用法大致一样：<br><br>&lt;h1 v-<span class="hljs-built_in">show</span>=<span class="hljs-string">&quot;ok&quot;</span>&gt;Hello!&lt;/h1&gt;<br>不同的是带有 v-<span class="hljs-built_in">show</span> 的元素始终会被渲染并保留在 DOM 中。v-<span class="hljs-built_in">show</span> 只是简单地切换元素的 CSS property <span class="hljs-built_in">display</span>。<br><br>注意，v-<span class="hljs-built_in">show</span> 不支持 &lt;template&gt; 元素，也不支持 v-<span class="hljs-keyword">else</span>。<br></code></pre></td></tr></table></figure><h3 id="v-if-vs-v-show"><a href="#v-if-vs-v-show" class="headerlink" title="v-if vs v-show"></a>v-if vs v-show</h3><p>一个是否渲染，一个是否显示</p><h3 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h3><p>v-for的四种使用方法分别是： </p><p>1.使用v-for循环一个简单的数组</p><p> 2.使用v-for循环一个复杂的数组 </p><p>3.使用v-for循环对象 </p><p>4.v-for循环一个迭代的数字 </p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-comment">&lt;!--v-for循环一个简单的数组--&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in list&quot;</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">item</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">P</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item ,i) in list&quot;</span>&gt;</span>索引值：</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">i</span>&#125;&#125;</span><span class="language-xml">---每一项：</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">item</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">P</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-comment">&lt;!--v-for循环一个复杂的数组--&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item,i) in list1&quot;</span>&gt;</span>索引值：</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">i</span>&#125;&#125;</span><span class="language-xml">--id：</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">item.userid</span>&#125;&#125;</span><span class="language-xml">---姓名：</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">item.username</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-comment">&lt;!--v-for循环一个对象--&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(val,key,i) in list2&quot;</span>&gt;</span>id：</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">val</span>&#125;&#125;</span><span class="language-xml">,name:</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">key</span>&#125;&#125;</span><span class="language-xml">,index:</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">i</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-comment">&lt;!--v-for 循环一个迭代数字--&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;count in 10&quot;</span>&gt;</span>这是第</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">count</span>&#125;&#125;</span><span class="language-xml">次循环<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml"></span><br></code></pre></td></tr></table></figure><h3 id="不推荐v-if-与-v-for-一起使用"><a href="#不推荐v-if-与-v-for-一起使用" class="headerlink" title="不推荐v-if 与 v-for 一起使用"></a>不推荐v-if 与 v-for 一起使用</h3><p>当它们处于同一节点，v-for 的优先级比 v-if 更高，这意味着 v-if 将分别重复运行于每个 v-for 循环中。当你只想为部分项渲染节点时，这种优先级的机制会十分有用，如下：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;todo in todos&quot;</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;!todo.isComplete&quot;</span>&gt;</span></span><br><span class="language-xml">  </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">todo</span> &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>上面的代码将只渲染未完成的 todo。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">而如果你的目的是有条件地跳过循环的执行，那么可以将 v-<span class="hljs-keyword">if</span> 置于外层元素 (或 &lt;<span class="hljs-keyword">template</span>&gt;) 上。如：<br></code></pre></td></tr></table></figure><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;todos.length&quot;</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;todo in todos&quot;</span>&gt;</span></span><br><span class="language-xml">    </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">todo</span> &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-else</span>&gt;</span>No todos left!<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h2><p>官方文档<br><a href="https://vuejs.bootcss.com/guide/list.html">https://vuejs.bootcss.com/guide/list.html</a></p><h3 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h3><h4 id="基础用法"><a href="#基础用法" class="headerlink" title="基础用法"></a>基础用法</h4><p>用 v-for 把一个数组对应为一组元素</p><p>我们可以用 v-for 指令基于一个数组来渲染一个列表。v-for 指令需要使用 item in items 形式的特殊语法，其中 items 是源数据数组，而 item 则是被迭代的数组元素的别名。</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xquery"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;example-1&quot;</span>&gt;</span></span><br><span class="language-xml">  </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in items&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;item.message&quot;</span>&gt;</span></span><br><span class="language-xml">    </span><span class="language-xquery">&#123;&#123; <span class="hljs-type">item</span>.message &#125;</span><span class="language-xml">&#125;</span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br>var example1 = new Vue(&#123;<br>  el: <span class="hljs-string">&#x27;#example-1&#x27;</span>,<br>  data: &#123;<br>    items: [<br>      &#123; message: <span class="hljs-string">&#x27;Foo&#x27;</span> &#125;,<br>      &#123; message: <span class="hljs-string">&#x27;Bar&#x27;</span> &#125;<br>    ]<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="第二参数，索引"><a href="#第二参数，索引" class="headerlink" title="第二参数，索引"></a>第二参数，索引</h4><p>在 v-for 块中，我们可以访问所有父作用域的 property。v-for 还支持一个可选的第二个参数，即当前项的索引。</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;example-2&quot;</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item, index) in items&quot;</span>&gt;</span></span><br><span class="language-xml">    </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">parentMessage</span> &#125;&#125;</span><span class="language-xml"> - </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">index</span> &#125;&#125;</span><span class="language-xml"> - </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">item.message</span> &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">var example2 = new Vue(&#123;</span><br><span class="language-xml">  el: &#x27;#example-2&#x27;,</span><br><span class="language-xml">  data: &#123;</span><br><span class="language-xml">    parentMessage: &#x27;Parent&#x27;,</span><br><span class="language-xml">    items: [</span><br><span class="language-xml">      &#123; message: &#x27;Foo&#x27; &#125;,</span><br><span class="language-xml">      &#123; message: &#x27;Bar&#x27; &#125;</span><br><span class="language-xml">    ]</span><br><span class="language-xml">  &#125;</span><br><span class="language-xml">&#125;)</span><br></code></pre></td></tr></table></figure><p>你也可以用 of 替代 in 作为分隔符，因为它更接近 JavaScript 迭代器的语法：</p><h3 id="遍历对象"><a href="#遍历对象" class="headerlink" title="遍历对象"></a>遍历对象</h3><h4 id="在-v-for-里使用对象"><a href="#在-v-for-里使用对象" class="headerlink" title="在 v-for 里使用对象"></a>在 v-for 里使用对象</h4><p>你也可以用 v-for 来遍历一个对象的 property。</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs haskell">&lt;ul id=<span class="hljs-string">&quot;v-for-object&quot;</span> <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;<br>  &lt;li v-for=<span class="hljs-string">&quot;value in object&quot;</span>&gt;<br>    &#123;&#123; value &#125;&#125;<br>  &lt;/li&gt;<br>&lt;/ul&gt;<br><span class="hljs-title">new</span> <span class="hljs-type">Vue</span>(&#123;<br>  el: &#x27;#v-for-object&#x27;,<br>  <span class="hljs-class"><span class="hljs-keyword">data</span>: &#123;</span><br><span class="hljs-class">    <span class="hljs-title">object</span>: &#123;</span><br><span class="hljs-class">      <span class="hljs-title">title</span>: &#x27;<span class="hljs-type">How</span> <span class="hljs-title">to</span> <span class="hljs-title">do</span> <span class="hljs-title">lists</span> <span class="hljs-title">in</span> <span class="hljs-type">Vue</span>&#x27;,</span><br><span class="hljs-class">      <span class="hljs-title">author</span>: &#x27;<span class="hljs-type">Jane</span> <span class="hljs-type">Doe</span>&#x27;,</span><br><span class="hljs-class">      <span class="hljs-title">publishedAt</span>: &#x27;2016-04-10&#x27;</span><br><span class="hljs-class">    &#125;</span><br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="第二参数-键名，第三参数-索引"><a href="#第二参数-键名，第三参数-索引" class="headerlink" title="第二参数:键名，第三参数:索引"></a>第二参数:键名，第三参数:索引</h4><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(value, name, index) in object&quot;</span>&gt;</span></span><br><span class="language-xml">  </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">index</span> &#125;&#125;</span><span class="language-xml">. </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">name</span> &#125;&#125;</span><span class="language-xml">: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">value</span> &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="key"><a href="#key" class="headerlink" title=":key"></a>:key</h4><p>为了给 Vue 一个提示，以便它能跟踪每个节点的身份，从而重用和重新排序现有元素，你需要为每项提供一个唯一 key attribute：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in list&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">item</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item,index) in list&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;index&quot;</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">item</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>:key  可以用item(前提是唯一的值)  也可以用索引</p><p>有key可提渲染升速度，便于维护</p><h3 id="数组更新检测"><a href="#数组更新检测" class="headerlink" title="数组更新检测"></a>数组更新检测</h3><h4 id="变更方法"><a href="#变更方法" class="headerlink" title="变更方法"></a>变更方法</h4><p>Vue 将被侦听的数组的变更方法进行了包裹，所以它们也将会触发视图更新。这些被包裹过的方法包括：</p><blockquote><p>push()<br>pop()<br>shift()<br>unshift()<br>splice()<br>sort()<br>reverse()<br>你可以打开控制台，然后对前面例子的 items 数组尝试调用变更方法。比如 example1.items.push({ message: ‘Baz’ })。</p></blockquote><h4 id="替换数组"><a href="#替换数组" class="headerlink" title="替换数组"></a>替换数组</h4><p>filter()、concat() 和 slice()。</p><p>变更方法，顾名思义，会变更调用了这些方法的原始数组。相比之下，也有非变更方法，例如 filter()、concat() 和 slice()。它们不会变更原始数组，而总是返回一个新数组。当使用非变更方法时，可以用新数组替换旧数组：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">example1.<span class="hljs-keyword">items</span> = example1.<span class="hljs-keyword">items</span>.<span class="hljs-built_in">filter</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-title">item</span>) &#123;</span><br>  <span class="hljs-literal">return</span> <span class="hljs-keyword">item</span>.message.match(/Foo/)<br>&#125;)<br></code></pre></td></tr></table></figure><p>你可能认为这将导致 Vue 丢弃现有 DOM 并重新渲染整个列表。幸运的是，事实并非如此。Vue 为了使得 DOM 元素得到最大范围的重用而实现了一些智能的启发式方法，所以用一个含有相同元素的数组去替换原来的数组是非常高效的操作。</p><h3 id="显示过滤-排序后的结果"><a href="#显示过滤-排序后的结果" class="headerlink" title="显示过滤&#x2F;排序后的结果"></a>显示过滤&#x2F;排序后的结果</h3><p>循环，计算属性和方法处理后的数据</p><p>有时，我们想要显示一个数组经过过滤或排序后的版本，而不实际变更或重置原始数据。在这种情况下，可以创建一个计算属性，来返回过滤或排序后的数组。</p><p>例如：</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xquery"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;n in evenNumbers&quot;</span>&gt;</span></span><span class="language-xquery">&#123;&#123; n &#125;</span><span class="language-xml">&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>data: &#123;<br>  numbers: [ <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span> ]<br>&#125;,<br>computed: &#123;<br>  evenNumbers: <span class="hljs-keyword">function</span> () &#123;<br>    <span class="hljs-keyword">return</span> this.numbers<span class="hljs-built_in">.filter</span>(<span class="hljs-keyword">function</span> <span class="hljs-built_in">(number</span>) &#123;<br>      <span class="hljs-keyword">return</span><span class="hljs-built_in"> number</span> % <span class="hljs-number">2</span> === <span class="hljs-number">0</span><br>    &#125;)<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>在计算属性不适用的情况下 (例如，在嵌套 v-for 循环中) 你可以使用一个方法：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs lua">&lt;ul v-<span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;set in sets&quot;</span>&gt;<br>  &lt;li v-<span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;n in even(set)&quot;</span>&gt;&#123;&#123; n &#125;&#125;&lt;/li&gt;<br>&lt;/ul&gt;<br>data: &#123;<br>  sets: <span class="hljs-string">[[ 1, 2, 3, 4, 5 ], [6, 7, 8, 9, 10]]</span><br>&#125;,<br>methods: &#123;<br>  even: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(numbers)</span></span> &#123;<br>    <span class="hljs-keyword">return</span> numbers.filter(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(number)</span></span> &#123;<br>      <span class="hljs-keyword">return</span> number % <span class="hljs-number">2</span> === <span class="hljs-number">0</span><br>    &#125;)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="在组件上使用-v-for"><a href="#在组件上使用-v-for" class="headerlink" title="在组件上使用 v-for"></a>在组件上使用 v-for</h3><p>在自定义组件上，你可以像在任何普通元素上一样使用 v-for。</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir">&lt;my-component v-<span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;item in items&quot;</span> <span class="hljs-symbol">:key=<span class="hljs-string">&quot;item.id&quot;</span>&gt;&lt;/my-component&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>vue笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue_属性绑定</title>
    <link href="/2020/05/10/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_%E5%B1%9E%E6%80%A7%E7%BB%91%E5%AE%9A/"/>
    <url>/2020/05/10/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_%E5%B1%9E%E6%80%A7%E7%BB%91%E5%AE%9A/</url>
    
    <content type="html"><![CDATA[<h2 id="1-vue是什么"><a href="#1-vue是什么" class="headerlink" title="1.vue是什么"></a>1.vue是什么</h2><p>Vue (读音 &#x2F;vjuː&#x2F;，类似于 view) 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。</p><p>1是一套用于构建用户界面的渐进式框架<br>2与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用<br>3Vue 的核心库只关注视图层，易于上手，还便于与第三方库或既有项目整合。<br>4Vue 也完全能够为复杂的单页应用提供驱动。</p><h2 id="2-数据交互"><a href="#2-数据交互" class="headerlink" title="2.数据交互"></a>2.数据交互</h2><h3 id="基础数据与属性交互"><a href="#基础数据与属性交互" class="headerlink" title="基础数据与属性交互"></a>基础数据与属性交互</h3><p>​v-bind:属性</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><br>&lt;<span class="hljs-keyword">div</span> id=<span class="hljs-string">&quot;app&quot;</span> v-bind:title=<span class="hljs-string">&#x27;msg1&#x27;</span>&gt;<br>        &#123;&#123;message&#125;&#125;<br>    &lt;/<span class="hljs-keyword">div</span>&gt;<br><br><br><span class="hljs-built_in">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;<br>        el:<span class="hljs-string">&#x27;#app&#x27;</span>,<br>        data:&#123;<br>            message:<span class="hljs-string">&#x27;hellow Vue1&#x27;</span>,<br>            msg1:<span class="hljs-string">&#x27;这是一个标题&#x27;</span><br>        &#125;<br>    &#125;)<br><br><br>常规数据绑定加&#123;&#123;&#125;&#125;<br>元素属性绑定不加&#123;&#123;&#125;&#125;<br></code></pre></td></tr></table></figure><h4 id="与-Style-绑定"><a href="#与-Style-绑定" class="headerlink" title="与 Style 绑定"></a>与 Style 绑定</h4><h5 id="绑定类名v-bind-class"><a href="#绑定类名v-bind-class" class="headerlink" title="绑定类名v-bind:class"></a>绑定类名v-bind:class</h5><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs applescript">我们可以传给 v-bind:<span class="hljs-built_in">class</span> 一个对象，以动态地切换 <span class="hljs-built_in">class</span>：<br><br>&lt;<span class="hljs-keyword">div</span> v-bind:<span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;&#123; active: isActive &#125;&quot;</span>&gt;&lt;/<span class="hljs-keyword">div</span>&gt;<br>和如下 data：<br><br>data: &#123;<br>  isActive: <span class="hljs-literal">true</span>,<br>  hasError: <span class="hljs-literal">false</span><br>&#125;<br>结果渲染为：<br><br>&lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;static active&quot;</span>&gt;&lt;/<span class="hljs-keyword">div</span>&gt;<br></code></pre></td></tr></table></figure><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">&lt;<span class="hljs-keyword">div</span> v-bind:<span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;&#123; active: isActive &#125;&quot;</span>&gt;&lt;/<span class="hljs-keyword">div</span>&gt;<br></code></pre></td></tr></table></figure><p>语法表示 active 这个 class 存在与否将取决于数据 property isActive 的 truthiness。</p><h5 id="对象语法"><a href="#对象语法" class="headerlink" title="对象语法"></a>对象语法</h5><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">HTML<br>&lt;div v-bind:<span class="hljs-keyword">class</span>=&quot;<span class="hljs-symbol">classObject</span>&quot;&gt;&lt;/<span class="hljs-symbol">div</span>&gt;<br><br><br><span class="hljs-symbol">js</span><br><span class="hljs-symbol">data: </span>&#123;<br>  classObject: &#123;<br>    active: <span class="hljs-literal">true</span>,<br>    <span class="hljs-string">&#x27;text-danger&#x27;</span>: <span class="hljs-literal">false</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="计算属性控制"><a href="#计算属性控制" class="headerlink" title="计算属性控制"></a>计算属性控制</h5><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">&lt;div v-bind:<span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;classObject&quot;</span>&gt;&lt;/div&gt;<br><br><br><span class="hljs-keyword">data</span>: &#123;<br>  isActive: <span class="hljs-literal">true</span>,<br>  error: <span class="hljs-literal">null</span><br>&#125;,<br>computed: &#123;<br>  classObject: function () &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      active: <span class="hljs-keyword">this</span>.isActive &amp;&amp; !<span class="hljs-keyword">this</span>.error,<br>      <span class="hljs-string">&#x27;text-danger&#x27;</span>: <span class="hljs-keyword">this</span>.error &amp;&amp; <span class="hljs-keyword">this</span>.error.type === <span class="hljs-string">&#x27;fatal&#x27;</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="数组语法"><a href="#数组语法" class="headerlink" title="数组语法"></a>数组语法</h5><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">v-bind:<span class="hljs-keyword">class</span>=&quot;[<span class="hljs-symbol">activeClass, <span class="hljs-symbol">errorClass</span></span>]&quot;<br></code></pre></td></tr></table></figure><h5 id="三元表达式"><a href="#三元表达式" class="headerlink" title="三元表达式"></a>三元表达式</h5><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">v-bind:<span class="hljs-keyword">class</span>=&quot;[<span class="hljs-symbol">isActive</span> ? <span class="hljs-symbol">activeClass</span> : &#x27;&#x27;, <span class="hljs-symbol">errorClass</span>]&quot;<br></code></pre></td></tr></table></figure><h5 id="数组混合对象语法"><a href="#数组混合对象语法" class="headerlink" title="数组混合对象语法"></a>数组混合对象语法</h5><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs verilog">v-<span class="hljs-keyword">bind</span>:<span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;[&#123; active: isActive &#125;, errorClass]&quot;</span><br></code></pre></td></tr></table></figure><h5 id="在组件上"><a href="#在组件上" class="headerlink" title="在组件上"></a>在组件上</h5><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs applescript">例如，如果你声明了这个组件：<br><br>Vue.component(&#x27;<span class="hljs-keyword">my</span>-component&#x27;, &#123;<br>  template: &#x27;&lt;p <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;foo bar&quot;</span>&gt;Hi&lt;/p&gt;&#x27;<br>&#125;)<br>然后在使用它的时候添加一些 <span class="hljs-built_in">class</span>：<br><br>&lt;<span class="hljs-keyword">my</span>-component <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;baz boo&quot;</span>&gt;&lt;/<span class="hljs-keyword">my</span>-component&gt;<br>HTML 将被渲染为：<br><br>&lt;p <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;foo bar baz boo&quot;</span>&gt;Hi&lt;/p&gt;<br>对于带数据绑定 <span class="hljs-built_in">class</span> 也同样适用：<br><br>&lt;<span class="hljs-keyword">my</span>-component v-bind:<span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;&#123; active: isActive &#125;&quot;</span>&gt;&lt;/<span class="hljs-keyword">my</span>-component&gt;<br>当 isActive 为 truthy[<span class="hljs-number">1</span>] 时，HTML 将被渲染成为：<br><br>&lt;p <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;foo bar active&quot;</span>&gt;Hi&lt;/p&gt;<br></code></pre></td></tr></table></figure><h4 id="绑定内联样式v-bind-style"><a href="#绑定内联样式v-bind-style" class="headerlink" title="绑定内联样式v-bind:style"></a>绑定内联样式v-bind:style</h4><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">&lt;header<br><span class="hljs-title">   :</span>style=<span class="hljs-string">&quot;&#123;height: `calc(1.06rem + $&#123;statusBarHeight&#125;px)`, paddingTop: `$&#123;statusBarHeight&#125;px`&#125;&quot;</span>&gt;<br></code></pre></td></tr></table></figure><h5 id="对象语法-1"><a href="#对象语法-1" class="headerlink" title="对象语法"></a>对象语法</h5><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">v-bind:<span class="hljs-built_in">style</span>=<span class="hljs-string">&quot;&#123; color: activeColor, fontSize: fontSize + &#x27;px&#x27; &#125;&quot;</span><br></code></pre></td></tr></table></figure><h5 id="数组语法-1"><a href="#数组语法-1" class="headerlink" title="数组语法"></a>数组语法</h5><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">v-bind:<span class="hljs-built_in">style</span>=<span class="hljs-string">&quot;[baseStyles, overridingStyles]&quot;</span><br></code></pre></td></tr></table></figure><h5 id="多重值"><a href="#多重值" class="headerlink" title="多重值"></a>多重值</h5><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-meta">:style=&quot;&#123; display:</span> [<span class="hljs-emphasis">&#x27;-webkit-box&#x27;</span>, <span class="hljs-emphasis">&#x27;-ms-flexbox&#x27;</span>, <span class="hljs-emphasis">&#x27;flex&#x27;</span>] &#125;&quot;<br></code></pre></td></tr></table></figure><h4 id="子组件样式给style加scoped-（作用域）这样不会影响父组件"><a href="#子组件样式给style加scoped-（作用域）这样不会影响父组件" class="headerlink" title="子组件样式给style加scoped  （作用域）这样不会影响父组件"></a>子组件样式给style加scoped  （作用域）这样不会影响父组件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-class">.licolor</span>&#123;</span><br><span class="language-css">    <span class="hljs-attribute">color</span>: green;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="使用less或scss"><a href="#使用less或scss" class="headerlink" title="使用less或scss"></a>使用less或scss</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&#x27;less&#x27;</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-class">.licolor</span>&#123;</span><br><span class="language-css">    <span class="hljs-attribute">color</span>: green;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="style-动态拼接"><a href="#style-动态拼接" class="headerlink" title="style 动态拼接"></a>style 动态拼接</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;div <span class="hljs-attribute">class</span>=<span class="hljs-string">&quot;metop_title&quot;</span> :<span class="hljs-attribute">style</span>=<span class="hljs-string">&quot;&#123;</span><br><span class="hljs-string">      height: `calc(1.06rem + <span class="hljs-variable">$&#123;statusBarHeight&#125;</span>px)`,</span><br><span class="hljs-string">      paddingTop: `<span class="hljs-variable">$&#123;statusBarHeight&#125;</span>px`,</span><br><span class="hljs-string">    &#125;&quot;</span>&gt;我的&lt;/div&gt;<br></code></pre></td></tr></table></figure><h3 id="数据更改"><a href="#数据更改" class="headerlink" title="数据更改"></a>数据更改</h3><p>​更改data数据</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs applescript">&lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;app3&quot;</span>&gt;<br>       &lt;p v-<span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;everylast in boxs&quot;</span>&gt;<br>           &#123;&#123;everylast.<span class="hljs-built_in">text</span>&#125;&#125;<br>       &lt;/p&gt;<br>    &lt;/<span class="hljs-keyword">div</span>&gt;<br><br><br>var app3 = new Vue(&#123;<br>        el:&#x27;<span class="hljs-comment">#app3&#x27;,</span><br>        data:&#123;<br>            boxs:[<br>                &#123;<span class="hljs-built_in">text</span>:<span class="hljs-number">1</span>&#125;,<br>                &#123;<span class="hljs-built_in">text</span>:<span class="hljs-number">2</span>&#125;,<br>                &#123;<span class="hljs-built_in">text</span>:<span class="hljs-number">3</span>&#125;<br>            ]<br>        &#125;<br>    &#125;)<br><br><br>数据更改<br>app3.boxs.push(&#123;<span class="hljs-built_in">text</span>:<span class="hljs-number">4</span>&#125;)<br></code></pre></td></tr></table></figure><p>可以看vue实例-》数据与方法<br><a href="https://cn.vuejs.org/v2/guide/instance.html">https://cn.vuejs.org/v2/guide/instance.html</a></p><h3 id="添加事件监听"><a href="#添加事件监听" class="headerlink" title="添加事件监听"></a>添加事件监听</h3><p>​v-on</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;div id=<span class="hljs-string">&quot;app4&quot;</span>&gt;<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123;app4message&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;reversefn&quot;</span>&gt;</span>点击翻转<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>    &lt;/div&gt;<br><br><span class="hljs-keyword">var</span> app4 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>        <span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#app4&#x27;</span>,<br>        <span class="hljs-attr">data</span>:&#123;<br>            <span class="hljs-attr">app4message</span>:<span class="hljs-string">&#x27;这是一句话&#x27;</span><br>        &#125;,<br>        <span class="hljs-attr">methods</span>:&#123;<br>            <span class="hljs-attr">reversefn</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">app4message</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">app4message</span>.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;&#x27;</span>).<span class="hljs-title function_">reverse</span>().<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>)<br>            &#125;<br>        &#125;<br>    &#125;)<br></code></pre></td></tr></table></figure><h3 id="数据的双向绑定"><a href="#数据的双向绑定" class="headerlink" title="数据的双向绑定"></a>数据的双向绑定</h3><p>​v-model</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-comment">&lt;!-- v-model的双向数据绑定 --&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app5&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">message</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;message&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">var app5 = new Vue(&#123;</span><br><span class="language-xml">        el:&#x27;#app5&#x27;,</span><br><span class="language-xml">        data:&#123;</span><br><span class="language-xml">            message:&#x27;实时数据的双向绑定&#x27;</span><br><span class="language-xml">        &#125;</span><br><span class="language-xml">    &#125;)</span><br></code></pre></td></tr></table></figure><h3 id="v-text-和-v-html-可以代替差值表达式"><a href="#v-text-和-v-html-可以代替差值表达式" class="headerlink" title="v-text  和 v-html  可以代替差值表达式"></a>v-text  和 v-html  可以代替差值表达式</h3><h3 id="属性数据的双向绑定"><a href="#属性数据的双向绑定" class="headerlink" title="属性数据的双向绑定"></a>属性数据的双向绑定</h3><p>​v-bind  可缩写为   :bind</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">html</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&#x27;msgfn&#x27;</span> <span class="hljs-attr">v-bind:title</span>=<span class="hljs-string">&#x27;title&#x27;</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">msg</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">js</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">data</span>:&#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">msg</span>:<span class="hljs-string">&#x27;hello word&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">title</span>:<span class="hljs-string">&#x27;这是个信息&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;)</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="表单输入绑定"><a href="#表单输入绑定" class="headerlink" title="表单输入绑定"></a>表单输入绑定</h2><h3 id="基础用法v-model"><a href="#基础用法v-model" class="headerlink" title="基础用法v-model"></a>基础用法v-model</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">你可以用 v-model 指令在表单 <span class="hljs-tag">&lt;<span class="hljs-name">input</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">textarea</span>&gt;</span> 及 <span class="hljs-tag">&lt;<span class="hljs-name">select</span>&gt;</span> 元素上创建双向数据绑定。它会根据控件类型自动选取正确的方法来更新元素。尽管有些神奇，但 v-model 本质上不过是语法糖。它负责监听用户的输入事件以更新数据，并对一些极端场景进行一些特殊处理。<br></code></pre></td></tr></table></figure><h4 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h4><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;message&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;edit me&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Message is: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">message</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="多行文本"><a href="#多行文本" class="headerlink" title="多行文本"></a>多行文本</h4><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Multiline message is:<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;white-space: pre-line;&quot;</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">message</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;message&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;add multiple lines&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span></span><br></code></pre></td></tr></table></figure><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">注意：在文本区域插值 (<span class="hljs-tag">&lt;<span class="hljs-name">textarea</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">text</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span>) 并不会生效，应用 v-model 来代替。</span><br></code></pre></td></tr></table></figure><h4 id="复选框"><a href="#复选框" class="headerlink" title="复选框"></a>复选框</h4><p>单个复选框，绑定到布尔值：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;checked&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;checkbox&quot;</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">checked</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>多个复选框，绑定到同一个数组：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;jack&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Jack&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;checkedNames&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;jack&quot;</span>&gt;</span>Jack<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;john&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;John&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;checkedNames&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;john&quot;</span>&gt;</span>John<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;mike&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Mike&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;checkedNames&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;mike&quot;</span>&gt;</span>Mike<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Checked names: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">checkedNames</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">new Vue(&#123;</span><br><span class="language-xml">  el: &#x27;...&#x27;,</span><br><span class="language-xml">  data: &#123;</span><br><span class="language-xml">    checkedNames: []</span><br><span class="language-xml">  &#125;</span><br><span class="language-xml">&#125;)</span><br></code></pre></td></tr></table></figure><h4 id="单选按钮"><a href="#单选按钮" class="headerlink" title="单选按钮"></a>单选按钮</h4><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;example-4&quot;</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;one&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;One&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;picked&quot;</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;one&quot;</span>&gt;</span>One<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;two&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Two&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;picked&quot;</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;two&quot;</span>&gt;</span>Two<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Picked: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">picked</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">new Vue(&#123;</span><br><span class="language-xml">  el: &#x27;#example-4&#x27;,</span><br><span class="language-xml">  data: &#123;</span><br><span class="language-xml">    picked: &#x27;&#x27;</span><br><span class="language-xml">  &#125;</span><br><span class="language-xml">&#125;)</span><br></code></pre></td></tr></table></figure><h4 id="选择框"><a href="#选择框" class="headerlink" title="选择框"></a>选择框</h4><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">单选时：</span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;example-5&quot;</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;selected&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">disabled</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>请选择<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>A<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>B<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>C<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Selected: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">selected</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">new Vue(&#123;</span><br><span class="language-xml">  el: &#x27;...&#x27;,</span><br><span class="language-xml">  data: &#123;</span><br><span class="language-xml">    selected: &#x27;&#x27;</span><br><span class="language-xml">  &#125;</span><br><span class="language-xml">&#125;)</span><br></code></pre></td></tr></table></figure><h4 id="用-v-for-渲染的动态选项："><a href="#用-v-for-渲染的动态选项：" class="headerlink" title="用 v-for 渲染的动态选项："></a>用 v-for 渲染的动态选项：</h4><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xquery"><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;selected&quot;</span>&gt;</span></span><br><span class="language-xml">  </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;option in options&quot;</span> <span class="hljs-attr">v-bind:value</span>=<span class="hljs-string">&quot;option.value&quot;</span>&gt;</span></span><br><span class="language-xml">    </span><span class="language-xquery">&#123;&#123; <span class="hljs-keyword">option</span>.<span class="hljs-type">text</span> &#125;</span><span class="language-xml">&#125;</span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Selected: </span><span class="language-xquery">&#123;&#123; selected &#125;</span><span class="language-xml">&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br>new Vue(&#123;<br>  el: <span class="hljs-string">&#x27;...&#x27;</span>,<br>  data: &#123;<br>    selected: <span class="hljs-string">&#x27;A&#x27;</span>,<br>    options: [<br>      &#123; text: <span class="hljs-string">&#x27;One&#x27;</span>, value: <span class="hljs-string">&#x27;A&#x27;</span> &#125;,<br>      &#123; text: <span class="hljs-string">&#x27;Two&#x27;</span>, value: <span class="hljs-string">&#x27;B&#x27;</span> &#125;,<br>      &#123; text: <span class="hljs-string">&#x27;Three&#x27;</span>, value: <span class="hljs-string">&#x27;C&#x27;</span> &#125;<br>    ]<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="3-组件化应用构建"><a href="#3-组件化应用构建" class="headerlink" title="3.组件化应用构建"></a>3.组件化应用构建</h2><h4 id="创建组件"><a href="#创建组件" class="headerlink" title="创建组件"></a>创建组件</h4><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xquery">Vue.component(<span class="hljs-string">&#x27;todo-item&#x27;</span>, &#123;<br>        template: <span class="hljs-string">&#x27;&lt;li&gt;123&lt;/li&gt;&#x27;</span><br>    &#125;)<br><br>var app6 = new Vue(&#123;<br>        el:<span class="hljs-string">&#x27;#app6&#x27;</span>,<br>        data:&#123;<br>            i<br>        &#125;<br>    &#125;);<br><br>HTML<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ol</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app6&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-comment">&lt;!-- 创建一个 todo-item 组件的实例 --&gt;</span></span><br><span class="language-xml">        </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">todo-item</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">todo-item</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="组件传值"><a href="#组件传值" class="headerlink" title="组件传值"></a>组件传值</h4><h5 id="父组件子组件互相传值"><a href="#父组件子组件互相传值" class="headerlink" title="父组件子组件互相传值"></a>父组件子组件互相传值</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs xml">html<br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;valuedata&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&#x27;sub_fn&#x27;</span>&gt;</span>提交<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">item-li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item,index) in lists&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;index&quot;</span> <span class="hljs-attr">:content</span>=<span class="hljs-string">&quot;item&quot;</span> <span class="hljs-attr">:index</span>=<span class="hljs-string">&quot;index&quot;</span> @<span class="hljs-attr">delete</span>=<span class="hljs-string">&quot;handledelete&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">item-li</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><br>js<br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;item-li&#x27;</span>,&#123;</span><br><span class="language-javascript">    <span class="hljs-attr">props</span>:[<span class="hljs-string">&#x27;content&#x27;</span>,<span class="hljs-string">&#x27;index&#x27;</span>],</span><br><span class="language-javascript">    <span class="hljs-attr">template</span>:<span class="hljs-string">&#x27;&lt;li @click=&quot;handleclick&quot;&gt;&#123;&#123;content&#125;&#125;&lt;/li&gt;&#x27;</span>,</span><br><span class="language-javascript">    <span class="hljs-attr">methods</span>:&#123;</span><br><span class="language-javascript">      <span class="hljs-attr">handleclick</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.$emit(<span class="hljs-string">&#x27;delete&#x27;</span>,<span class="hljs-variable language_">this</span>.<span class="hljs-property">index</span>)</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;)</span><br><span class="language-javascript">  <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">    <span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#demo&#x27;</span>,</span><br><span class="language-javascript">    <span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript">      <span class="hljs-attr">valuedata</span>:<span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">lists</span>:[]</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-attr">methods</span>:&#123;</span><br><span class="language-javascript">      <span class="hljs-attr">sub_fn</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">       <span class="hljs-variable language_">this</span>.<span class="hljs-property">lists</span>.<span class="hljs-title function_">push</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">valuedata</span>)</span><br><span class="language-javascript">      &#125;,</span><br><span class="language-javascript">      <span class="hljs-attr">handledelete</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">lists</span>.<span class="hljs-title function_">splice</span>(e,<span class="hljs-number">1</span>)</span><br><span class="language-javascript">        </span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>​定”。</p>]]></content>
    
    
    <categories>
      
      <category>vue笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>dom节点的亲属访问</title>
    <link href="/2020/04/08/%E8%8A%82%E7%82%B9%E7%9A%84%E4%BA%B2%E5%B1%9E%E8%AE%BF%E9%97%AE/"/>
    <url>/2020/04/08/%E8%8A%82%E7%82%B9%E7%9A%84%E4%BA%B2%E5%B1%9E%E8%AE%BF%E9%97%AE/</url>
    
    <content type="html"><![CDATA[<h3 id="该知识点属于元素查找的范畴"><a href="#该知识点属于元素查找的范畴" class="headerlink" title="该知识点属于元素查找的范畴"></a>该知识点属于元素查找的范畴</h3><p>​元素.parentElement<br>        获取父元素<br>    元素.previousElementSibling<br>         获取其哥哥<br>    元素.nextElementSibling<br>        获得其弟弟<br>    元素.children<br>        孩子们( 注意这里拿到的是伪数组, 是所有的子元素 )<br>    语法补充了解</p>]]></content>
    
    
    <categories>
      
      <category>javascript API笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>dom操作</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue $root 的用法</title>
    <link href="/2020/03/11/Vue%20$root%20%E7%9A%84%E7%94%A8%E6%B3%95/"/>
    <url>/2020/03/11/Vue%20$root%20%E7%9A%84%E7%94%A8%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>Vue 中$root 的用法:<br> $root用法:<br>  作用:  访问跟组件的属性和方法:<br>  $root 只是对跟组件有用,  不是父组件, $root 只是对对跟组件有用。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;ie=edge&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>$root访问根组件中的属性或方法<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">com1</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">com1</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">      <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="language-javascript">      <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">          <span class="hljs-attr">rootInfo</span>:<span class="hljs-string">&quot;我是根元素的属性&quot;</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">      &#125;,</span><br><span class="language-javascript">      <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">alerts</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">          <span class="hljs-title function_">alert</span>(<span class="hljs-number">111</span>)</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">      &#125;,</span><br><span class="language-javascript">      <span class="hljs-attr">components</span>: &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">com1</span>: &#123;</span><br><span class="language-javascript">          <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">              <span class="hljs-attr">info</span>: <span class="hljs-string">&quot;组件1&quot;</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">          &#125;,</span><br><span class="language-javascript">          <span class="hljs-attr">template</span>: <span class="hljs-string">&quot;&lt;p&gt;&#123;&#123; info &#125;&#125; &lt;com2&gt;&lt;/com2&gt;&lt;/p&gt;&quot;</span>,</span><br><span class="language-javascript">          <span class="hljs-attr">components</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">com2</span>: &#123;</span><br><span class="language-javascript">              <span class="hljs-attr">template</span>: <span class="hljs-string">&quot;&lt;p&gt;我是组件1的子组件&lt;/p&gt;&quot;</span>,</span><br><span class="language-javascript">              <span class="hljs-title function_">created</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">              <span class="hljs-variable language_">this</span>.<span class="hljs-property">$root</span>.<span class="hljs-title function_">alerts</span>()<span class="hljs-comment">//111</span></span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$root</span>.<span class="hljs-property">rootInfo</span>)<span class="hljs-comment">//我是根元素的属性</span></span><br><span class="language-javascript">              &#125;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">          &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>访问父组件的属性或方法 this.$parent;<br>访问子组件的属性或方法 this.$ref;</p>]]></content>
    
    
    <categories>
      
      <category>vue笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue_事件处理</title>
    <link href="/2020/02/10/vue_%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86/"/>
    <url>/2020/02/10/vue_%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h1><h2 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h2><p>可以用 <code>v-on</code> 指令监听 DOM 事件，并在触发时运行一些 JavaScript 代码。</p><p>示例：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;example-1&quot;</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;counter += 1&quot;</span>&gt;</span>Add 1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>The button above has been clicked </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">counter</span> &#125;&#125;</span><span class="language-xml"> times.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></code></pre></td></tr></table></figure><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">var</span> example1 = <span class="hljs-keyword">new</span> <span class="hljs-type">Vue</span>(&#123;<br>  el: <span class="hljs-type"></span>&#x27;<span class="hljs-meta">#example-1&#x27;,</span><br>  data: <span class="hljs-type"></span>&#123;<br>    counter: <span class="hljs-type">0</span><br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="事件处理方法"><a href="#事件处理方法" class="headerlink" title="事件处理方法"></a>事件处理方法</h2><p>然而许多事件处理逻辑会更为复杂，所以直接把 JavaScript 代码写在 <code>v-on</code> 指令中是不可行的。因此 <code>v-on</code> 还可以接收一个需要调用的方法名称。 </p><p>示例： </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;example-2&quot;</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- `greet` 是在下面定义的方法名 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;greet&quot;</span>&gt;</span>Greet<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-tag">var</span> example2 = new <span class="hljs-built_in">Vue</span>(&#123;<br>  el: <span class="hljs-string">&#x27;#example-2&#x27;</span>,<br>  data: &#123;<br>    name: <span class="hljs-string">&#x27;Vue.js&#x27;</span><br>  &#125;,<br>  <span class="hljs-comment">// 在 `methods` 对象中定义方法</span><br>  methods: &#123;<br>    greet: function (event) &#123;<br>      <span class="hljs-comment">// `this` 在方法里指向当前 Vue 实例</span><br>      <span class="hljs-built_in">alert</span>(<span class="hljs-string">&#x27;Hello &#x27;</span> + this<span class="hljs-selector-class">.name</span> + <span class="hljs-string">&#x27;!&#x27;</span>)<br>      <span class="hljs-comment">// `event` 是原生 DOM 事件</span><br>      <span class="hljs-keyword">if</span> (event) &#123;<br>        <span class="hljs-built_in">alert</span>(event<span class="hljs-selector-class">.target</span>.tagName)<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;)<br><br><span class="hljs-comment">// 也可以用 JavaScript 直接调用方法</span><br>example2<span class="hljs-selector-class">.greet</span>() <span class="hljs-comment">// =&gt; &#x27;Hello Vue.js!&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="内联处理器中的方法"><a href="#内联处理器中的方法" class="headerlink" title="内联处理器中的方法"></a>内联处理器中的方法</h2><p>除了直接绑定到一个方法，也可以在内联 JavaScript 语句中调用方法： </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;example-3&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;say(&#x27;hi&#x27;)&quot;</span>&gt;</span>Say hi<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;say(&#x27;what&#x27;)&quot;</span>&gt;</span>Say what<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">new</span> Vue(&#123;<br>  el: <span class="hljs-string">&#x27;#example-3&#x27;</span>,<br>  methods: &#123;<br>    say: <span class="hljs-keyword">function</span> <span class="hljs-params">(message)</span> &#123;<br>      alert(message)<br>    &#125;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>有时也需要在内联语句处理器中访问原始的 DOM 事件。可以用特殊变量 <code>$event</code> 把它传入方法 </p><figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs hsp">&lt;<span class="hljs-keyword">button</span> v-<span class="hljs-keyword">on</span>:click=<span class="hljs-string">&quot;warn(&#x27;Form cannot be submitted yet.&#x27;, $event)&quot;</span>&gt;<br>  Submit<br>&lt;/<span class="hljs-keyword">button</span>&gt;<br></code></pre></td></tr></table></figure><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-comment">// ...</span><br>methods: &#123;<br>  warn: function (message, event) &#123;<br>    <span class="hljs-comment">// 现在我们可以访问原生事件对象</span><br>    if (event) &#123;<br>      event<span class="hljs-selector-class">.preventDefault</span>()<br>    &#125;<br>    <span class="hljs-built_in">alert</span>(message)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h2><p>在事件处理程序中调用 <code>event.preventDefault()</code> 或 <code>event.stopPropagation()</code> 是非常常见的需求。尽管我们可以在方法中轻松实现这点，但更好的方式是：方法只有纯粹的数据逻辑，而不是去处理 DOM 事件细节。</p><p>为了解决这个问题，Vue.js 为 <code>v-on</code> 提供了<strong>事件修饰符</strong>。之前提过，修饰符是由点开头的指令后缀来表示的。</p><ul><li><code>.stop</code></li><li><code>.prevent</code></li><li><code>.capture</code></li><li><code>.self</code></li><li><code>.once</code></li><li><code>.passive</code></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 阻止单击事件继续传播 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">v-on:click.stop</span>=<span class="hljs-string">&quot;doThis&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 提交事件不再重载页面 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">v-on:submit.prevent</span>=<span class="hljs-string">&quot;onSubmit&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 修饰符可以串联 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">v-on:click.stop.prevent</span>=<span class="hljs-string">&quot;doThat&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 只有修饰符 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">v-on:submit.prevent</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 添加事件监听器时使用事件捕获模式 --&gt;</span><br><span class="hljs-comment">&lt;!-- 即内部元素触发的事件先在此处理，然后才交由内部元素进行处理 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-on:click.capture</span>=<span class="hljs-string">&quot;doThis&quot;</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 只当在 event.target 是当前元素自身时触发处理函数 --&gt;</span><br><span class="hljs-comment">&lt;!-- 即事件不是从内部元素触发的 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-on:click.self</span>=<span class="hljs-string">&quot;doThat&quot;</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 点击事件将只会触发一次 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">v-on:click.once</span>=<span class="hljs-string">&quot;doThis&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 滚动事件的默认行为 (即滚动行为) 将会立即触发 --&gt;</span><br><span class="hljs-comment">&lt;!-- 而不会等待 `onScroll` 完成  --&gt;</span><br><span class="hljs-comment">&lt;!-- 这其中包含 `event.preventDefault()` 的情况 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-on:scroll.passive</span>=<span class="hljs-string">&quot;onScroll&quot;</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>使用修饰符时，顺序很重要；相应的代码会以同样的顺序产生。因此，用 <code>v-on:click.prevent.self</code> 会阻止<strong>所有的点击</strong>，而 <code>v-on:click.self.prevent</code> 只会阻止对元素自身的点击。 </p><blockquote><p>不要把 <code>.passive</code> 和 <code>.prevent</code> 一起使用，因为 <code>.prevent</code> 将会被忽略，同时浏览器可能会向你展示一个警告。请记住，<code>.passive</code> 会告诉浏览器你<em>不</em>想阻止事件的默认行为。 </p></blockquote><h2 id="按键修饰符"><a href="#按键修饰符" class="headerlink" title="按键修饰符"></a>按键修饰符</h2><p>在监听键盘事件时，我们经常需要检查详细的按键。Vue 允许为 <code>v-on</code> 在监听键盘事件时添加按键修饰符： </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 只有在 `key` 是 `Enter` 时调用 `vm.submit()` --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-on:keyup.enter</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>你可以直接将 <a href="https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values"><code>KeyboardEvent.key</code></a> 暴露的任意有效按键名转换为 kebab-case 来作为修饰符。 </p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sas">&lt;<span class="hljs-keyword">input</span> v-<span class="hljs-keyword">on</span>:keyup.<span class="hljs-keyword">page</span>-down=<span class="hljs-string">&quot;onPageDown&quot;</span>&gt;<br></code></pre></td></tr></table></figure><p>在上述示例中，处理函数只会在 <code>$event.key</code> 等于 <code>PageDown</code> 时被调用。 </p><p>为了在必要的情况下支持旧浏览器，Vue 提供了绝大多数常用的按键码的别名：</p><ul><li><code>.enter</code></li><li><code>.tab</code></li><li><code>.delete</code> (捕获“删除”和“退格”键)</li><li><code>.esc</code></li><li><code>.space</code></li><li><code>.up</code></li><li><code>.down</code></li><li><code>.left</code></li><li><code>.right</code></li></ul><p>有一些按键 (<code>.esc</code> 以及所有的方向键) 在 IE9 中有不同的 <code>key</code> 值, 如果你想支持 IE9，这些内置的别名应该是首选。 </p><p>你还可以通过全局 <code>config.keyCodes</code> 对象<a href="https://v2.cn.vuejs.org/v2/api/#keyCodes">自定义按键修饰符别名</a>： </p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">// 可以使用 `v-on:keyup.f1`</span><br>Vue<span class="hljs-selector-class">.config</span><span class="hljs-selector-class">.keyCodes</span><span class="hljs-selector-class">.f1</span> = <span class="hljs-number">112</span><br></code></pre></td></tr></table></figure><h2 id="系统修饰键"><a href="#系统修饰键" class="headerlink" title="系统修饰键"></a>系统修饰键</h2><p>可以用如下修饰符来实现仅在按下相应按键时才触发鼠标或键盘事件的监听器。</p><ul><li><code>.ctrl</code></li><li><code>.alt</code></li><li><code>.shift</code></li><li><code>.meta</code></li></ul><p>注意：在 Mac 系统键盘上，meta 对应 command 键 (⌘)。在 Windows 系统键盘 meta 对应 Windows 徽标键 (⊞)。在 Sun 操作系统键盘上，meta 对应实心宝石键 (◆)。在其他特定键盘上，尤其在 MIT 和 Lisp 机器的键盘、以及其后继产品，比如 Knight 键盘、space-cadet 键盘，meta 被标记为“META”。在 Symbolics 键盘上，meta 被标记为“META”或者“Meta </p><p>例如： </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Alt + C --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-on:keyup.alt.67</span>=<span class="hljs-string">&quot;clear&quot;</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- Ctrl + Click --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-on:click.ctrl</span>=<span class="hljs-string">&quot;doSomething&quot;</span>&gt;</span>Do something<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>请注意修饰键与常规按键不同，在和 <code>keyup</code> 事件一起用时，事件触发时修饰键必须处于按下状态。换句话说，只有在按住 <code>ctrl</code> 的情况下释放其它按键，才能触发 <code>keyup.ctrl</code>。而单单释放 <code>ctrl</code> 也不会触发事件。如果你想要这样的行为，请为 <code>ctrl</code> 换用 <code>keyCode</code>：<code>keyup.17</code>。 </p><h2 id="exact修饰符"><a href="#exact修饰符" class="headerlink" title="exact修饰符"></a>exact修饰符</h2><p><code>.exact</code> 修饰符允许你控制由精确的系统修饰符组合触发的事件。 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 即使 Alt 或 Shift 被一同按下时也会触发 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click.ctrl</span>=<span class="hljs-string">&quot;onClick&quot;</span>&gt;</span>A<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 有且只有 Ctrl 被按下的时候才触发 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click.ctrl.exact</span>=<span class="hljs-string">&quot;onCtrlClick&quot;</span>&gt;</span>A<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 没有任何系统修饰符被按下的时候才触发 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click.exact</span>=<span class="hljs-string">&quot;onClick&quot;</span>&gt;</span>A<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="加事件对象加参数"><a href="#加事件对象加参数" class="headerlink" title="加事件对象加参数"></a>加事件对象加参数</h2><p>@click&#x3D;”tm($event,参数)”</p><p>methods:{<br>      tm:function(e,value){<br>        console.log(e);<br>        console.log(value);<br>    }</p>]]></content>
    
    
    <categories>
      
      <category>vue笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>dom事件操作1</title>
    <link href="/2020/01/10/dom%E4%BA%8B%E4%BB%B6%E6%93%8D%E4%BD%9C/"/>
    <url>/2020/01/10/dom%E4%BA%8B%E4%BB%B6%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h2 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>  -&gt; 事件对象<br>-&gt; 为什么需要事件对象<br>键盘事件, 鼠标事件会在触发的时候 得到很多的数据, 例键盘按下的是什么键(组合件)再比如鼠标移动时候的坐标是什么…<br>为了好使用这些数据, 浏览器帮我们将生成的这些数据进行 “打包”, 将其打包一个对象.<br>  -&gt; 怎么使用事件对象呢?<br>  1&gt; 怎么拿到对象<br>   在事件触发( 人执行某一个预定义行为的时候 )的时候, 浏览器会检查是否提前注册过事件处理函数, 一旦注册了函数, 浏览器就会将函数调用一下.</p><pre><code class="hljs">数据是浏览器收集的，函数也是浏览器调用的，所以实际上浏览器在调用函数的时候给函数传入了一个参数, 这个参数就是事件对象.所以要拿到事件对象:1) 在函数参数中写上形参2) 使用 arguments 2&gt; 这些属性有什么用键盘事件: keyCode, 键盘的键位码案例: 在页面上利用键盘的 wsad 控制小盒子的移动1&gt; 盒子要移动: 上下左右 的移动绝对定位, 利用 left 与 top 控制盒子的位置2&gt; 只有文本框可以获得键盘事件, 那么如何在全页面中监视键盘事件呢?将事件注册到 document 上</code></pre><h2 id="什么是事件"><a href="#什么是事件" class="headerlink" title="什么是事件"></a>什么是事件</h2><p>什么是事件( event ), 我们向浏览器做一件事情, 浏览器给我们一个反应. 浏览器时时对我们的行为有一个监视, 浏览器知道我们做的所有事情: 鼠标与键盘的操作.正常情况, 浏览器什么也不说.</p><p>浏览器会有很多的默认行为, 如果我们需要在我们进行操作的时候, 浏览器来响应我们的自定义行为那么我们就需要 注册事件. 就是告诉浏览器我们在执行某某行为的时候调用某一个函数.</p><h2 id="简单的说事件的操作步骤"><a href="#简单的说事件的操作步骤" class="headerlink" title="简单的说事件的操作步骤"></a>简单的说事件的操作步骤</h2><p>找到元素</p><p>注册事件: 元素.on事件名 &#x3D; 函数</p><p>在用户执行某一个行为的时候, 函数就会调用</p><h2 id="语法的说明注意事项及this指向说明"><a href="#语法的说明注意事项及this指向说明" class="headerlink" title="语法的说明注意事项及this指向说明"></a>语法的说明注意事项及this指向说明</h2><p> 语法的说明:<br>        1&gt; 事件相关的函数( 事件处理函数 )可以单独的写, 也可以直接在注册事件的时候赋值.<br>        2&gt; 我们需要注意的是, 同一个事件只允许注册一次. 重复给 onxxxx 赋值只会覆盖以前的函数.<br>        3&gt; 我们可以给同一个元素注册多个事件: 例如鼠标进入与离开.<br>        4&gt; 事件的书写也可以直接写到 onclick 标签属性中( 了解为主 ). 属性值就是一个匿名函数.<br>        5&gt; 关于 this, this 就是 “这一个, 它”, 在代码中它的表示是容易出错的.<br>            如果一个对象的方法调用了, 在方法中 this 就是这个对象本身<br>            var o &#x3D; {<br>                method: function () {<br>                    console.log( this );<br>                }<br>            };<br>            &#x2F;&#x2F; o.method &#x3D; function () { … };</p><pre><code class="hljs">因为我们的事件是被注册到 元素上, 事件处理函数中的 this 就是这个元素        btn.onclick = function () &#123;            // this 就是 btn        &#125;;事件处理函数中的 this 就是这个触发事件的元素</code></pre><h2 id="常用事件"><a href="#常用事件" class="headerlink" title="常用事件"></a>常用事件</h2><h3 id="鼠标类"><a href="#鼠标类" class="headerlink" title="鼠标类:"></a>鼠标类:</h3><p>​click       单击事件: 是按下与抬起组合在一起叫单击<br>        dblclick    双击事件<br>        mousedown   鼠标按下事件<br>        mouseup     鼠标抬起事件<br>        mouseenter  鼠标进入事件不冒泡<br>        mouseleave  鼠标离开事件   不冒泡<br>        mouseover   鼠标进入事件    冒泡<br>        mouseout    鼠标离开事件冒泡<br>        mousemove   鼠标移动事件</p><p>简单的说 enter 组不会冒泡, over 组会冒泡</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-keyword">function</span> <span class="hljs-keyword">func</span>() &#123;<br>            alert( <span class="hljs-string">&#x27;我们自己定义的行为给执行了, 哈哈哈哈哈哈\n呵呵呵呵\n嘻嘻嘻嘻&#x27;</span> );<br>        &#125;<br>var btn = document.getElementsByTagName( <span class="hljs-string">&#x27;button&#x27;</span> )[ <span class="hljs-number">0</span> ];<br> btn.onclick = <span class="hljs-keyword">func</span>;   <span class="hljs-regexp">//</span> 注意不是 <span class="hljs-keyword">func</span>() 的返回值赋值给 onclick<br></code></pre></td></tr></table></figure><h3 id="键盘类事件"><a href="#键盘类事件" class="headerlink" title="键盘类事件:"></a>键盘类事件:</h3><p>keypress    击键事件: 键盘按下与抬起组合到一起叫击键<br>keydown     键盘按下<br>keyup       键盘抬起<br>keyCode 键盘的键位码<br>在事件处理函数中如果需要使用当前的 元素 一般都会使用 this 来代替<br>onchange  值发生改变事件(文本改变并失去焦点)<br>onblur   失去焦点事件<br>onresize 当浏览器窗口大小发生变化是触发事件<br>onscroll当浏览器滚动时</p><h3 id="滚轮事件"><a href="#滚轮事件" class="headerlink" title="滚轮事件"></a>滚轮事件</h3><p>在谷歌浏览器中 滚轮事件是 onmousewheel<br>在火狐浏览器中 滚轮事件是 onDOMMouseScroll</p><h3 id="input事件"><a href="#input事件" class="headerlink" title="input事件"></a>input事件</h3><p>focus()获取焦点  事件<br>oninput 文本框内容发生改变事件</p><h2 id="追加点击事件"><a href="#追加点击事件" class="headerlink" title="追加点击事件"></a>追加点击事件</h2><p>元素.addEventListener( ‘事件的类型’, 事件处理函数 )</p><h2 id="事件的移除"><a href="#事件的移除" class="headerlink" title="事件的移除"></a>事件的移除</h2><p>传统移除  btn.onclick &#x3D; null;<br>元素.removeEventListener( ‘事件的类型’, 要移除的函数 )</p><h2 id="取消事件的默认行为"><a href="#取消事件的默认行为" class="headerlink" title="取消事件的默认行为"></a>取消事件的默认行为</h2><blockquote><p> form 表单的提交<br>    a 标签的跳转</p><pre><code class="hljs">我们要想办法取消事件的默认行为只需要在事件处理函数中返回 false 即可问题:1&gt; 代码规范.2&gt; 表单案例一定要有 form 标签, 没有 form 标签是不会提交的.</code></pre><p>var btn &#x3D; document.querySelector( ‘input’ );<br>        btn.onclick &#x3D; function () {<br>            alert( ‘点击提交’ );<br>            return false; &#x2F;&#x2F; 在点击按钮事件触发后, 不会执行事件的默认行为. 即不会提交<br>        };</p></blockquote><h2 id="事件冒泡"><a href="#事件冒泡" class="headerlink" title="事件冒泡"></a>事件冒泡</h2><p>冒泡[ 重点 ]<br>    描述:<br>        <div><br>            <div></div><br>        </div><br>    我们点击 里面的 div, 问是点击的 里面的 div 还是点击的 外面的 div 呢?</p><p>​我们的 html 结构是一个嵌套关系的时候, 如果对里面的元素触发事件, 那么也相当于对外面的元素触发事件，那么这个过程不是我们注册事件才会实现, 而是浏览器对事件处理的基本原理, 不是因为我们注册了事件才有这个效果, 而是原本就有这个特征, 我们注册了事件才可以观察到.</p><pre><code class="hljs"> 这样事件的触发会 从里往外 自动的传递, 我们将其称为事件的冒泡.</code></pre><p>​有些浏览器( 老 ), 我们在嵌套标签中触发事件的时候, 事件执行会 从 外 往 里. 那么将其称为 事件的捕获.</p><p>​    由于 js 不断发展, 为了实现向下兼容. js 的事件语法中支持控制让事件以冒泡的形式传递 还是 以捕获的形式传递.</p><pre><code class="hljs">语法:    元素.addEventListener( &#39;事件的类型&#39;, 事件处理函数[, 是否捕获 ] );该语法的第三个参数是可选参数, 提供一个 boolean 值1&gt; 如果不传入, 或传入的是 false, 表示采用冒泡的方式传递事件2&gt; 如果传入的是 true 则以捕获的形式进行传递事件</code></pre><h3 id="事件冒泡-1"><a href="#事件冒泡-1" class="headerlink" title="事件冒泡"></a>事件冒泡</h3><p>事件的触发会 从里往外 自动的传递, 我们将其称为事件的冒泡.</p><p>利用事件冒泡来实现事件代理<br>代理( delegate, 委托 ), 自己要做, 但是不做, 让另一个对象帮你做, 那么这个对象就是你的 代理.<br>事件代理, 就是原本应该触发你的事件, 但是触发的是别人的事件, 让这个事件来给你完成任务.</p><p>案例:<br>    列表鼠标悬浮高量<br>思考: 冒泡在这个案例中, 存在什么特征? 就是每一次鼠标进入与离开, 都会被外层的 div 所察觉.<br>思考: 如果不给里面的所有 div 注册鼠标进入与离开的事件, 外层 容器的事件会 触发么? 会</p><p>考虑, 如果在事件的传递过程中, 可以得到最早触发事件的元素( 事件的源头 ).<br>如果可以得到这个源头, 我们的 代码 会怎么样?</p><p>事件处理函数中的事件对象, 有一个属性叫 target, 就是我们事件的源头.</p><h3 id="事件捕获"><a href="#事件捕获" class="headerlink" title="事件捕获"></a>事件捕获</h3><p>事件执行会 从 外 往 里. 那么将其称为 事件的捕获.</p><p>事件处理函数中的事件对象, 有一个属性叫 target, 就是我们事件的源头.</p><h3 id="target-属性"><a href="#target-属性" class="headerlink" title="target,属性"></a>target,属性</h3><p>事件处理函数中的事件对象, 有一个属性叫 target, 就是我们事件的源头.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;ie=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.list</span> <span class="hljs-selector-tag">div</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#ccc</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgba</span>( <span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0.3</span> );</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;list&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> list = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>( <span class="hljs-string">&#x27;.list&#x27;</span> );</span><br><span class="language-javascript"></span><br><span class="language-javascript">        list.<span class="hljs-property">onmouseover</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"> e </span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// console.log( &#x27;进入事件触发了&#x27; );</span></span><br><span class="language-javascript">            <span class="hljs-comment">// console.log( e );</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-comment">// var div = 源头;</span></span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> div = e.<span class="hljs-property">target</span>;</span><br><span class="language-javascript">            div.<span class="hljs-property">style</span>.<span class="hljs-property">backgroundColor</span> = <span class="hljs-string">&#x27;red&#x27;</span>;</span><br><span class="language-javascript">        &#125;;</span><br><span class="language-javascript">        list.<span class="hljs-property">onmouseout</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"> e </span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// console.log( &#x27;离开事件触发了&#x27; );</span></span><br><span class="language-javascript">            <span class="hljs-comment">// console.log( e );</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-comment">// var div = 源头;</span></span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> div = e.<span class="hljs-property">target</span>;</span><br><span class="language-javascript">            div.<span class="hljs-property">style</span>.<span class="hljs-property">backgroundColor</span> = <span class="hljs-string">&#x27;&#x27;</span>;</span><br><span class="language-javascript">        &#125;;</span><br><span class="language-javascript">        </span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="取消事件的默认行为-1"><a href="#取消事件的默认行为-1" class="headerlink" title="取消事件的默认行为"></a>取消事件的默认行为</h3><p>return false</p><h3 id="取消事件冒泡"><a href="#取消事件冒泡" class="headerlink" title="取消事件冒泡"></a>取消事件冒泡</h3><p>stopPropagation()</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">span.onclick = <span class="hljs-keyword">function</span> <span class="hljs-params">( e )</span> &#123;<br>            alert( <span class="hljs-string">&#x27;span&#x27;</span> );<br>            e.stopPropagation(); <span class="hljs-comment">// 阻止了事件向上传递( 没有冒泡了 )</span><br>        &#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>javascript API笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>dom操作</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>dom模板2</title>
    <link href="/2020/01/10/dom%E6%A8%A1%E6%9D%BF/"/>
    <url>/2020/01/10/dom%E6%A8%A1%E6%9D%BF/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>javascript API笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>dom操作</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>获得元素document</title>
    <link href="/2020/01/09/%E6%B5%8B%E8%AF%95/"/>
    <url>/2020/01/09/%E6%B5%8B%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<h1 id="javascript-API笔记"><a href="#javascript-API笔记" class="headerlink" title="javascript API笔记"></a>javascript API笔记</h1><h2 id="获得元素document"><a href="#获得元素document" class="headerlink" title="获得元素document."></a>获得元素document.</h2><h3 id="getElementById"><a href="#getElementById" class="headerlink" title="getElementById"></a>getElementById</h3><blockquote><p>var p1 &#x3D; document.getElementById( ‘p1’ );<br>语法: document.getElementById( ‘id’ )<br> 习惯: 写标签的时候, 属性使用 双引号, 写字符串的时候属性写 单引号</p></blockquote><h3 id="getElementsByTagName"><a href="#getElementsByTagName" class="headerlink" title="getElementsByTagName"></a>getElementsByTagName</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>111<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>div<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>222<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>div<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>333<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>div<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 获得所有的 p 标签, 然后打印出来</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> nodes = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByTagName</span>( <span class="hljs-string">&#x27;p&#x27;</span> );</span><br><span class="language-javascript">    </span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>document.getElementsByTagName( ‘p’ );</p></blockquote><h3 id="getElementsByTagName-1"><a href="#getElementsByTagName-1" class="headerlink" title="getElementsByTagName"></a>getElementsByTagName</h3><blockquote><p>var div &#x3D; document.getElementsByTagName( ‘div’ )[ 0 ];</p></blockquote><h3 id="querySelector"><a href="#querySelector" class="headerlink" title="querySelector"></a>querySelector</h3><blockquote><p> &#x2F;&#x2F; 选择器 ( selector )<br>        &#x2F;&#x2F; -&gt; 基本选择器: #id, .className, tagName, *<br>        &#x2F;&#x2F; -&gt; 复合选择器: 子代选择器( &gt; ), 后代选择器( ‘ ‘ ), …</p><pre><code class="hljs">    // 如果想到定位 这两个 p    // #dv1 &gt; p        // 使用选择器获得元素的 语法      // docuemnt.querySelector( &#39;选择器的字符串&#39; ) 获得所有的 符合选择器的元素中的 第 0 个</code></pre></blockquote><h3 id="querySelectorAll"><a href="#querySelectorAll" class="headerlink" title="querySelectorAll"></a>querySelectorAll</h3><blockquote><p>&#x2F;&#x2F; document.querySelectorAll( ‘选择器字符串’ )  获得所有的 符合选择器的元素( 伪数组 )</p></blockquote><h3 id="document-body"><a href="#document-body" class="headerlink" title="document.body"></a>document.body</h3><blockquote><p>如果需要获得页面中的 body, 除了使用 get 或 query 系列的方法之外<br>还可以使用 document.body, 其就是 当前页面的 body 标签</p></blockquote><h3 id="children"><a href="#children" class="headerlink" title="children"></a>children</h3><blockquote><p>使用 children 来获得元素的 子元素</p><p>例如</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;menu&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>测试<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>测试<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>测试<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>测试<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>测试<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>测试<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 使用传统的方法, 获得 主菜单的 a 标签</span></span><br><span class="language-javascript">        <span class="hljs-comment">// 可以使用 children 来获得元素的 子元素</span></span><br><span class="language-javascript">        <span class="hljs-comment">// 1&gt; 拿到菜单的 容器 ( menu )</span></span><br><span class="language-javascript">        <span class="hljs-comment">// 2&gt; 利用 children 来拿到容器中的 所有 li</span></span><br><span class="language-javascript">        <span class="hljs-comment">// 3&gt; 循环遍历 li 找到每一个 li 中的 第 0 的子元素( children[ 0 ] )</span></span><br><span class="language-javascript">        <span class="hljs-comment">/*</span></span><br><span class="hljs-comment"><span class="language-javascript">        var menu = document.getElementById( &#x27;menu&#x27; );</span></span><br><span class="hljs-comment"><span class="language-javascript">        var li_list = menu.children;</span></span><br><span class="hljs-comment"><span class="language-javascript">        // console.log( li_list );</span></span><br><span class="hljs-comment"><span class="language-javascript">        for ( var i = 0; i &lt; li_list.length; i++ ) &#123;</span></span><br><span class="hljs-comment"><span class="language-javascript">            var li = li_list[ i ]; // 就是每一个 一级菜单的 li 标签</span></span><br><span class="hljs-comment"><span class="language-javascript">            // console.log( li.children );</span></span><br><span class="hljs-comment"><span class="language-javascript">            var a = li.children[ 0 ];</span></span><br><span class="hljs-comment"><span class="language-javascript">            console.log( a );</span></span><br><span class="hljs-comment"><span class="language-javascript">        &#125;</span></span><br><span class="hljs-comment"><span class="language-javascript">        */</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 使用选择器</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> a_list = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>( <span class="hljs-string">&#x27;#menu &gt; li &gt; a&#x27;</span> );</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( a_list );</span><br><span class="language-javascript">    </span><br><span class="language-javascript">    &lt;/scri</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>javascript API笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>javascripts_this指向&amp;&amp;函数进阶&amp;&amp;继承&amp;&amp;递归</title>
    <link href="/2019/10/10/javascripts_this%E6%8C%87%E5%90%91&amp;&amp;%E5%87%BD%E6%95%B0%E8%BF%9B%E9%98%B6&amp;&amp;%E7%BB%A7%E6%89%BF&amp;&amp;%E9%80%92%E5%BD%92/"/>
    <url>/2019/10/10/javascripts_this%E6%8C%87%E5%90%91&amp;&amp;%E5%87%BD%E6%95%B0%E8%BF%9B%E9%98%B6&amp;&amp;%E7%BB%A7%E6%89%BF&amp;&amp;%E9%80%92%E5%BD%92/</url>
    
    <content type="html"><![CDATA[<h1 id="javascripts知识点梳理5"><a href="#javascripts知识点梳理5" class="headerlink" title="javascripts知识点梳理5"></a>javascripts知识点梳理5</h1><h2 id="this指向"><a href="#this指向" class="headerlink" title="this指向"></a>this指向</h2><h3 id="指向window"><a href="#指向window" class="headerlink" title="指向window"></a>指向window</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span> (<span class="hljs-params"></span>)&#123;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(this)  <span class="hljs-comment">//  window</span><br>&#125;<br>fn();<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="指向实例对象-obj"><a href="#指向实例对象-obj" class="headerlink" title="指向实例对象  obj"></a>指向实例对象  obj</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span> (<span class="hljs-params">name , age</span>)&#123;<br>...<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(this)<br>&#125;<br><span class="hljs-keyword">var</span> obj = <span class="hljs-keyword">new</span> fn (<span class="hljs-string">&#x27;zs&#x27;</span> , <span class="hljs-number">21</span>);<br></code></pre></td></tr></table></figure><h3 id="this指向对象本身"><a href="#this指向对象本身" class="headerlink" title="this指向对象本身"></a>this指向对象本身</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> obj = &#123;<br><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;zs&#x27;</span>,<br><span class="hljs-attr">age</span>:<span class="hljs-number">12</span>,<br>fn <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(this)&#125;<br>&#125;<br>obj.fn()<br></code></pre></td></tr></table></figure><h3 id="事件源"><a href="#事件源" class="headerlink" title="事件源"></a>事件源</h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">btn.onclick = <span class="hljs-keyword">function</span><span class="hljs-params">()</span> &#123;<br>              <span class="hljs-comment">//this指向事件源</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="改变this指向"><a href="#改变this指向" class="headerlink" title="改变this指向"></a>改变this指向</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">fn</span>.call(obj , 参数<span class="hljs-number">1</span> , 参数<span class="hljs-number">2</span>)   对函数调用,同时修改调用时this指向obj<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">fn.<span class="hljs-built_in">apply</span>(obj , [参数<span class="hljs-number">1</span> , 参数<span class="hljs-number">2</span>])   对函数调用,同时修改调用时<span class="hljs-keyword">this</span>指向<br></code></pre></td></tr></table></figure><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs fortran">fn.<span class="hljs-keyword">bind</span>(obj, 参数)  永久改变this指向  返回函数副本  不会调用执行<br><span class="hljs-keyword">bind</span>后续参数调用时进行实参传入,表示被绑定实参后续参数<br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">fun.<span class="hljs-keyword">call</span>(&#123;<span class="hljs-type">name</span> : <span class="hljs-string">&#x27;jack&#x27;</span>&#125;);<br>fun.<span class="hljs-keyword">call</span>(&#123;<span class="hljs-type">name</span> : <span class="hljs-string">&#x27;jack&#x27;</span>&#125;);<br><br>var fun2 = fun.bind(&#123;<span class="hljs-type">name</span> : <span class="hljs-string">&#x27;rose&#x27;</span>&#125;);<br>fun2();<br>fun2();<br>fun2();<br></code></pre></td></tr></table></figure><h2 id="函数进阶"><a href="#函数进阶" class="headerlink" title="函数进阶"></a>函数进阶</h2><h3 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h3><p>回调函数就是一个参数，将这个函数作为参数传到另一个函数里面，当那个函数执行完之后，再执行传进去的这个函数。这个过程就叫做回调。 </p><p>曾经用过的回调函数<br>当一个固定函数中的代码不确定时使用</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ada">$(&#x27;#box&#x27;).fadeIn(<span class="hljs-number">1000</span>, <span class="hljs-keyword">function</span> <span class="hljs-title"></span>() &#123;&#125;);<br>setInterval(<span class="hljs-keyword">function</span> <span class="hljs-title"></span>() &#123;&#125;, 100);<br>btn.on(<span class="hljs-symbol">&#x27;click</span>&#x27;, <span class="hljs-keyword">function</span> <span class="hljs-title"></span>() &#123;&#125;);<br>arr.sort(<span class="hljs-keyword">function</span> <span class="hljs-title"></span>(a, b) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-type">a</span> - b;<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>函数内部变量能被外部使用<br>对私有变量操作的函数,称之为闭包<br>原理:不对原函数进行二次调用,而是对函数返回结果进行多次调用</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">function <span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">()</span></span> &#123;<br>            <span class="hljs-keyword">var</span> num = <span class="hljs-number">100</span>;<br>            <span class="hljs-keyword">var</span> obj = &#123;<br>                getValue: function() &#123;<br>                    console.log(num);<br>                &#125;,<br>                setValue: function() &#123;<br>                    num++;<br>                &#125;,<br>                setValue2: function() &#123;<br>                    num--<br>                &#125;<br>            &#125;;<br>            <span class="hljs-keyword">return</span> obj;<br>            <span class="hljs-comment">// 通过对象可以一次返回多个闭包函数</span><br>        &#125;<br>        <span class="hljs-keyword">var</span> result = <span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">()</span></span>;<br>        result.getValue();<br>        result.setValue();<br>        result.getValue();<br></code></pre></td></tr></table></figure><p>通过对象可以一次返回多个闭包函数</p><h3 id="函数使用方式"><a href="#函数使用方式" class="headerlink" title="函数使用方式"></a>函数使用方式</h3><h4 id="函数作为参数"><a href="#函数作为参数" class="headerlink" title="函数作为参数"></a>函数作为参数</h4><h4 id="函数作为返回值"><a href="#函数作为返回值" class="headerlink" title="函数作为返回值"></a>函数作为返回值</h4><h4 id="自执行函数"><a href="#自执行函数" class="headerlink" title="自执行函数"></a>自执行函数</h4><p>可以在自执行函数的形参与实参中写入window , document<br>可以提高性能</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">(<span class="hljs-keyword">function</span>(<span class="hljs-params"><span class="hljs-variable language_">window</span>, <span class="hljs-variable language_">document</span></span>) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">window</span>.<span class="hljs-property">num</span>);<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">window</span>.<span class="hljs-property">str</span>);<br><br>            <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>();<br><br>        &#125;)(<span class="hljs-variable language_">window</span>, <span class="hljs-variable language_">document</span>);<br></code></pre></td></tr></table></figure><h3 id="函数方法"><a href="#函数方法" class="headerlink" title="函数方法"></a>函数方法</h3><h4 id="函数声明方式"><a href="#函数声明方式" class="headerlink" title="函数声明方式"></a>函数声明方式</h4><p>function fun () {}</p><pre><code class="hljs">    // 函数声明语句在预解析阶段会进行函数提升，将函数体提升到当前作用域顶端    // 下面的代码在不同的浏览器中具有不同的展现效果    /*if (true) &#123;        function fun () &#123;            console.log(&#39;这是if中的函数体&#39;);        &#125;    &#125; else &#123;        function fun () &#123;            console.log(&#39;这是else中的函数体&#39;);        &#125;    &#125;    fun();*/</code></pre><p>&#x2F;&#x2F; 由于函数声明语句会存在一些问题，所以通常推荐使用函数表达式进行函数声明。<br>        &#x2F;&#x2F; 但是如果执意希望使用函数声明语句:遵循以下规则即可<br>        &#x2F;&#x2F;   1 不要在if中书写函数声明语句，使用函数表达式<br>        &#x2F;&#x2F;   2 建议在函数声明后再进行调用</p><pre><code class="hljs">    /*var fun;    if (true) &#123;        fun = function () &#123;            console.log(&#39;这是if中的函数体&#39;);        &#125;    &#125; else &#123;        fun = function () &#123;            console.log(&#39;这是else中的函数体&#39;);        &#125;    &#125;    fun();*/</code></pre><h4 id="函数表达式方式"><a href="#函数表达式方式" class="headerlink" title="函数表达式方式"></a>函数表达式方式</h4><p>var fun &#x3D; function () {};  </p><h4 id="构造函数方式"><a href="#构造函数方式" class="headerlink" title="构造函数方式"></a>构造函数方式</h4><p>var fun &#x3D; new Function(‘x’, ‘y’, ‘console.log(x, y);’);</p><h4 id="函数的属性"><a href="#函数的属性" class="headerlink" title="函数的属性"></a>函数的属性</h4><p>​fn.name   函数名<br>    fn.length   形参的长度<br>    arguments.callee  可以得到当前函数<br>    arguments 一个函数的参数和其他属性<br>    fn.arguments   用于访问实参,作用和arguments对象相同<br>    fn.caller   用于获取函数的调用位置</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">showcallee</span>(<span class="hljs-params">a,b</span>) &#123;<br>        <span class="hljs-keyword">var</span> c = a + b;<br>        <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(showcallee.name)<br>        <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(showcallee.<span class="hljs-built_in">length</span>)<br>        <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arguments.callee)<br>        <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arguments)<br>        <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(showcallee.arguments)<br>        <span class="hljs-keyword">return</span> c;<br>  &#125;<br>  showcallee(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<br></code></pre></td></tr></table></figure><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs scss">function <span class="hljs-built_in">outer</span>()&#123;<br>            <span class="hljs-built_in">inner</span>();<br>        &#125;<br> function <span class="hljs-built_in">inner</span>()&#123;<br>      console<span class="hljs-selector-class">.log</span>(arguments.callee.caller);<br> &#125;<br> <span class="hljs-built_in">outer</span>();<br></code></pre></td></tr></table></figure><h4 id="函数的方法"><a href="#函数的方法" class="headerlink" title="函数的方法"></a>函数的方法</h4><p> call() 用于对函数进行调用，同时可以修改调用时的this指向</p><p>apply() 用于对函数进行调用，同时可以修改调用时的this指向</p><p>bind()方法不会立刻调用函数，而是在调用bind后返回一个当前函数的副本。<br>参数1：可以绑定函数副本中的this指向<br>与call和apply的第二个区别：<br>call和apply只会在调用时修改一次this的指向，bind会将返回的函数副本中的this永久的设置为指定对象。</p><h3 id="立即执行函数"><a href="#立即执行函数" class="headerlink" title="立即执行函数"></a>立即执行函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">(<span class="hljs-keyword">function</span> (<span class="hljs-params"><span class="hljs-variable language_">window</span>, <span class="hljs-variable language_">document</span></span>) &#123; <br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">window</span>.<span class="hljs-property">num</span>);<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>();<br>&#125;)(<span class="hljs-variable language_">window</span>, <span class="hljs-variable language_">document</span>);<br></code></pre></td></tr></table></figure><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><h3 id="单一继承"><a href="#单一继承" class="headerlink" title="单一继承"></a>单一继承</h3><h4 id="函数call方法"><a href="#函数call方法" class="headerlink" title="函数call方法"></a>函数call方法</h4><p>​函数执行两种方法:1,调用 2,事件驱动<br>    fun.call();  与fun()完全一致<br>    当传入第一个参数(对象)后,表示设置当前函数内的this指向当前对象,后面按顺序传入实参</p><p>函数执行两种方法:1,调用 2,事件驱动</p><p>fun.call();  与fun()完全一致</p><p>当传入第一个参数(对象)后,表示设置当前函数内的this指向当前对象,后面按顺序传入实参</p><h5 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h5><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">fun</span>.call()不传参数==<span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">()</span></span><br><span class="hljs-keyword">fun</span>.call(obj);  传入参数<span class="hljs-number">1</span>后，表示设置当前函数内的<span class="hljs-keyword">this</span>指向当前对象。<br><span class="hljs-keyword">fun</span>.call(obj, <span class="hljs-number">100</span>, <span class="hljs-number">200</span>)  传入后续参数，用于表示实参。<br><br><br>练习的案例<br>&lt;script&gt;<br>    function people(name, age) &#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.age = age;<br>        <span class="hljs-comment">// this.sayHi = function() &#123;</span><br>        <span class="hljs-comment">//     console.log(this.name + &#x27;今年&#x27; + this.age + &#x27;岁了&#x27;);</span><br><br>        <span class="hljs-comment">// &#125;</span><br>    &#125;<br>    people.prototype.sayHi = function() &#123;<br>        console.log(<span class="hljs-keyword">this</span>.name + <span class="hljs-string">&#x27;今年&#x27;</span> + <span class="hljs-keyword">this</span>.age + <span class="hljs-string">&#x27;岁了&#x27;</span>);<br><br>    &#125;<br><br>    function student(name1, age1, banji) &#123;<br><br>        <span class="hljs-comment">// 利用call的第一个参数改变people的指向</span><br>        people.call(<span class="hljs-keyword">this</span>, name1, age1);<br>        <span class="hljs-keyword">this</span>.banji = banji;<br>    &#125;<br>    student.prototype.sayHi1 = function() &#123;<br>        console.log(<span class="hljs-keyword">this</span>.name + <span class="hljs-string">&#x27;今年&#x27;</span> + <span class="hljs-keyword">this</span>.age + <span class="hljs-string">&#x27;岁了&#x27;</span>);<br><br>    &#125;<br>    <span class="hljs-keyword">var</span> obj = new student(<span class="hljs-string">&#x27;jack&#x27;</span>, <span class="hljs-number">28</span>, <span class="hljs-string">&#x27;2班&#x27;</span>);<br><br>    console.log(obj);<br>    obj.sayHi1();<br>    obj.sayHi();<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h4 id="借用构造函数继承"><a href="#借用构造函数继承" class="headerlink" title="借用构造函数继承"></a>借用构造函数继承</h4><p>这种方式可以继承属性,并且可以传入参数,但无法继承方法</p><p>在Student中的this指向jack jack也就是student这个函数，<br>如果将jack传入到call中，意味着修改People函数中的this为jack<br>这时两个构造函数的this都指向jack</p><h5 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">People</span>(<span class="hljs-params">name, age</span>) &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;<br>        &#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Student</span>(<span class="hljs-params">name1, age1, banJi</span>) &#123;<br><span class="hljs-title class_">People</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>, name1, age1);<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">class</span> = banJi;<br>&#125;<br><span class="hljs-keyword">var</span> jack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&#x27;jack&#x27;</span>, <span class="hljs-number">21</span>, <span class="hljs-string">&#x27;2班&#x27;</span>);<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(jack);<br>        jack.<span class="hljs-title function_">sayHi</span>();<br></code></pre></td></tr></table></figure><h3 id="原型继承"><a href="#原型继承" class="headerlink" title="原型继承"></a>原型继承</h3><p>People的实例对象拥有People的方法,令Student的原型对象等于一个People的实例对象,之后便可调用People原型对象中的方法.</p><p>继承顺序:原函数内&gt;附加函数内&gt;原函数外&gt;附加函数外<br>单独设置的功能需要在继承操作后设置</p><p>由于使用了覆盖方式设置原型constructor被改为People<br>需要补全constructor属性<br>Student.prototype.constructor &#x3D; Student;</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">People</span>(<span class="hljs-params">name, age</span>) &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;<br>        &#125;<br><span class="hljs-title class_">People</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">sayHi</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;你好,我叫&#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>);<br>        &#125;;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Student</span>(<span class="hljs-params">name1, age1, banJi</span>) &#123;<br><span class="hljs-title class_">People</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>, name1, age1);<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">class</span> = banJi;<br>&#125;<br><span class="hljs-title class_">Student</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">People</span>();<br><span class="hljs-title class_">Student</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">constructor</span> = <span class="hljs-title class_">Student</span>;<br><span class="hljs-keyword">var</span> jack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&#x27;jack&#x27;</span>, <span class="hljs-number">21</span>, <span class="hljs-string">&#x27;2班&#x27;</span>);<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(jack);<br>        jack.<span class="hljs-title function_">sayHi</span>();<br></code></pre></td></tr></table></figure><h3 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h3><p>将两种单一继承组合,兼顾两者优点</p><h2 id="构造函数与原型对象与实例对象的关系"><a href="#构造函数与原型对象与实例对象的关系" class="headerlink" title="构造函数与原型对象与实例对象的关系"></a>构造函数与原型对象与实例对象的关系</h2><p>实例对象：通过构造函数创建的，具有一个属性__proto__，指向构造函数的原型对象。<br>构造函数：具有一个属性prototype，指向构造函数的原型对象。<br>原型对象：具有一个属性constructor，指向构造函数。</p><p>实例对象</p><pre><code class="hljs">   function Person(personName) &#123; // 括号内为参数，可以设置多个参数来定制对象。        this.name = personName; // 将传入的personName值赋予name属性        this.info = &#39;I am called&#39; + this.name; //设置info属性        this.infoShow = function () &#123;   // 利用匿名函数添加方法            alert(this.info);        &#125;    &#125;</code></pre><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">var</span> person1 = <span class="hljs-keyword">new</span> <span class="hljs-type">Person</span>(<span class="hljs-string">&#x27;Adam&#x27;</span>);<br> <span class="hljs-keyword">var</span> person2 = <span class="hljs-keyword">new</span> <span class="hljs-type">Person</span>(<span class="hljs-string">&#x27;Eve&#x27;</span>); <span class="hljs-comment">//利用构造函数实例化了两个对象，并根据传入的参数的不同，定制了两个不同的对象</span><br></code></pre></td></tr></table></figure><p>person1  person2  都是  Person 构造函数 的实例对象</p><p>原型对象</p><p>任何一个JavaScript对象（一般有对花括号）都有一个原型对象，这个原型对象是JavaScript语言内置的，JavaScript对象可以使用原型对象的属性和方法。 </p><p>实例对象：通过构造函数创建的，具有一个属性__proto__，指向构造函数的原型对象。<br>构造函数：具有一个属性prototype，指向构造函数的原型对象。<br>原型对象：具有一个属性constructor，指向构造函数。</p><h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><p>原型链的作用：<br>&#x2F;&#x2F;1 用于描述实例对象与原型对象之间关系的一种方式。<br>&#x2F;&#x2F;      2 用于描述对象属性的查找方式（沿原型链向上查找）。<br>&#x2F;&#x2F; 原型链的终点：Object.prototype</p><p>用于描述实例对象与原型对象之间关系的一种方式<br>也用于描述对象属性的查找方式（沿原型链向上查找)</p><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><p>可以利用递归进行深拷贝</p><p>案例</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> obj = &#123;<br><span class="hljs-attr">name</span> : <span class="hljs-string">&#x27;jack&#x27;</span>,<br><span class="hljs-attr">age</span> : <span class="hljs-number">18</span>,<br><span class="hljs-attr">aiHao</span> : &#123;<br><span class="hljs-attr">qiMa</span> : <span class="hljs-string">&#x27;我喜欢骑大白马&#x27;</span>,<br><span class="hljs-attr">swim</span> : <span class="hljs-string">&#x27;我喜欢自由泳&#x27;</span>,<br><span class="hljs-attr">daQiu</span> : &#123;<br><span class="hljs-attr">lanQiu</span> : <span class="hljs-string">&#x27;因为喜欢看NBA，所以也喜欢打篮球&#x27;</span>,<br><span class="hljs-attr">zuQiu</span> : <span class="hljs-string">&#x27;我喜欢c罗，所以也喜欢踢足球&#x27;</span><br>&#125;<br>&#125;,<br><span class="hljs-attr">arr</span> : [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>&#125;;<br><span class="hljs-comment">// 如果希望对一个复杂数据类型进行复制，可以使用遍历拷贝的方式</span><br><span class="hljs-comment">// 但是如果对象的属性值也是对象，就不能只执行一次拷贝操作了，需要对这个属性进行遍历拷贝</span><br><span class="hljs-keyword">var</span> obj2 = &#123;&#125;;<br><br><span class="hljs-comment">/*for (var k in obj) &#123;</span><br><span class="hljs-comment">obj2[k] = obj[k];</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">obj.name = &#x27;rose&#x27;;</span><br><span class="hljs-comment">obj.aiHao.qiMa= &#x27;我喜欢骑大黑马&#x27;;</span><br><span class="hljs-comment">console.log(obj, obj2);*/</span><br><br><span class="hljs-comment">// 对功能进行完善：</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">deepCopy</span> (<span class="hljs-params">obj, obj2</span>) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> k in obj) &#123;<br><span class="hljs-comment">// 检测对象的某个属性是基本数据类型还是复杂数据类型</span><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">typeof</span> obj[k] !== <span class="hljs-string">&#x27;object&#x27;</span> || obj[k] === <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-comment">// 说明是基本数据类型</span><br>obj2[k] = obj[k];<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// 说明是复杂数据类型</span><br><span class="hljs-comment">// 由于obj2[k]是一个新设置的属性，所以默认为undefined，如果需要进行拷贝，应当设置为对象</span><br><span class="hljs-comment">// 由于复杂数据类型除了对象以外还有数组形式，还需要考虑obj[k]的具体类型</span><br>obj2[k] = obj[k].constructor === <span class="hljs-built_in">Array</span> ? [] : &#123;&#125;;<br>deepCopy(obj[k], obj2[k]);<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-comment">// 表示将obj中的所有属性拷贝到obj2中</span><br>deepCopy(obj, obj2);<br>obj.aiHao.qiMa = <span class="hljs-string">&#x27;我喜欢骑大黑马&#x27;</span>;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(obj, obj2);<br><br><span class="hljs-comment">// 通过以上案例我们发现，递归是可以不显示的设置结束条件的。</span><br><br></code></pre></td></tr></table></figure><p>FB数列的计算</p>]]></content>
    
    
    <categories>
      
      <category>javascript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTML5标签知识整理</title>
    <link href="/2019/06/08/HTML5CSS3%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/"/>
    <url>/2019/06/08/HTML5CSS3%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h2 id="html-结构"><a href="#html-结构" class="headerlink" title="html  结构"></a>html  结构</h2><p>head  title  base   meta  link   body </p><h2 id="单标签"><a href="#单标签" class="headerlink" title="单标签"></a>单标签</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">hr  线  <br>br  换行<br><span class="hljs-selector-tag">img</span>  &lt;<span class="hljs-selector-tag">img</span> <span class="hljs-attribute">src</span> = <span class="hljs-string">&quot;&quot;</span>  lalt =“文字”/&gt;<br>base  meta <br></code></pre></td></tr></table></figure><h2 id="双标签"><a href="#双标签" class="headerlink" title="双标签"></a>双标签</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-tag">a</span>  超链接  href =<span class="hljs-string">&quot;路径&quot;</span>  title =<span class="hljs-string">&quot;提示&quot;</span> <br><span class="hljs-selector-tag">p</span> 段落<br><span class="hljs-selector-tag">strong</span>       <span class="hljs-selector-tag">b</span><br><span class="hljs-selector-tag">em</span>   <span class="hljs-selector-tag">i</span><br><span class="hljs-selector-tag">ins</span>  u<br><span class="hljs-selector-tag">del</span>   s<br><span class="hljs-selector-tag">sup</span>   sub <br>h1-H6<br></code></pre></td></tr></table></figure><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml">有序列表 <span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br>无序列表<span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>自定义列表<span class="hljs-tag">&lt;<span class="hljs-name">dl</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dl</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;700&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;500&quot;</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;2&quot;</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span> <span class="hljs-attr">cellspacing</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">cellpadding</span>=<span class="hljs-string">&quot;0&quot;</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">caption</span>&gt;</span>表格标题<span class="hljs-tag">&lt;/<span class="hljs-name">caption</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>表头<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>内容<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span><br>合并单元格  合并两行:rowspan合并两列:colspan 同时删除要被合并的单元格<br></code></pre></td></tr></table></figure><h3 id="css属性"><a href="#css属性" class="headerlink" title="css属性"></a>css属性</h3><h4 id="vertical-align-对齐方式"><a href="#vertical-align-对齐方式" class="headerlink" title="vertical-align 对齐方式"></a>vertical-align 对齐方式</h4><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq">vertical-align : baseline |<span class="hljs-type">top</span> |<span class="hljs-type">middle</span> |<span class="hljs-type">bottom</span> <br></code></pre></td></tr></table></figure><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">vertical</span>-<span class="hljs-meta">align</span> 不影响块级元素中的内容对齐，它只针对于 行内元素或者行内块元素，特别是行内块元素， 通常用来控制图片/表单与文字的对齐。<br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">去除图片底侧空白缝隙<br>解决方法：<br>给<span class="hljs-selector-tag">img</span> <span class="hljs-attribute">vertical-align</span>:middle | top等等。  让图片不要和基线对齐<br>给<span class="hljs-selector-tag">img</span> 添加 <span class="hljs-attribute">display</span>：block; 转换为块级元素就不会存在问题了。<br></code></pre></td></tr></table></figure><h4 id="表格线合并-border-collapse-collapse"><a href="#表格线合并-border-collapse-collapse" class="headerlink" title="表格线合并 border-collapse:collapse;"></a>表格线合并 border-collapse:collapse;</h4><h2 id="HTML5语义标签"><a href="#HTML5语义标签" class="headerlink" title="HTML5语义标签"></a>HTML5语义标签</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;header&gt;</span><span class="hljs-section">&lt;/header&gt;</span><br></code></pre></td></tr></table></figure><p>代表网页头部或者文章头部<br>在一个页面内没有限制header出现次数，可以在不同的内容区块上分别加header标签<br>在header标签中可以至少包含一个标题标签 也可以包含logo或导航元素</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;footer&gt;</span><span class="hljs-section">&lt;/footer&gt;</span><br></code></pre></td></tr></table></figure><p>代表网页底部或者文章底部</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;nav&gt;</span><span class="hljs-section">&lt;/nav&gt;</span><br></code></pre></td></tr></table></figure><p>代表网页导航，并不是所有的导航都要被放进nav标签中，只需要将主要的放入即可。<br>应用场景：传统导航条、侧边栏导航、翻页操作。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;article&gt;</span><span class="hljs-section">&lt;/article&gt;</span><br></code></pre></td></tr></table></figure><p>代表页面中独立完整的内容区域。它可以是博客中的文章、帖子、用户的回复，它可以有自己独立的标题、页脚。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;aside&gt;</span><span class="hljs-section">&lt;/aside&gt;</span><br></code></pre></td></tr></table></figure><p>表示当前页面附属信息部分，可以包含侧边栏、广告、以及其他类似的有区别于主要内容的部分</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;main&gt;</span><span class="hljs-section">&lt;/main&gt;</span><br></code></pre></td></tr></table></figure><p>表示网页的主体内容，内容对于文档来说应当是唯一的，它不应包含在网页中重复出现的内容，比如侧栏、导航栏、版权信息、站点标志或搜索表单。main标签在IE高版本中不识别，IE高版本又不识别IE条件注释，所以需要单独处理</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;figure&gt;</span><br><span class="hljs-section">&lt;figcaption&gt;</span><span class="hljs-section">&lt;/figcaption&gt;</span><br><span class="hljs-section">&lt;/figure&gt;</span><br></code></pre></td></tr></table></figure><p>用于定义图片+标题或者图片+标题+描述。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt; title&gt;</span><span class="hljs-section">&lt;/title&gt;</span><br></code></pre></td></tr></table></figure><p>简短、描述性、唯一（提升搜索引擎排名）。 </p><p> 搜索引擎会将title作为判断页面主要内容的指标，有效的title应该包含几个与页面内容密切相关的关键字，建议将title核心内容放在前60个字符中 </p><h2 id="常用标签"><a href="#常用标签" class="headerlink" title="常用标签"></a>常用标签</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;div&gt;</span><span class="hljs-section">&lt;/div&gt;</span><br></code></pre></td></tr></table></figure><p> <strong>通用容器</strong>：div——块级通用容器；span——短语内容无语义容器。 </p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;hn&gt;</span><span class="hljs-section">&lt;/hn&gt;</span><br></code></pre></td></tr></table></figure><p>h1~h6分级标题，用于创建页面信息的层级关系。 </p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;q&gt;</span><span class="hljs-section">&lt;/q&gt;</span><br></code></pre></td></tr></table></figure><p>文字段落</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">caption</span>&gt;</span> 支出统计 <span class="hljs-tag">&lt;/<span class="hljs-name">caption</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span> 娱乐项目 <span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span> 项目支出 <span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span> 聚餐 <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>200 元 <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><p>表格标签</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;br&gt;</span><br></code></pre></td></tr></table></figure><p>换行标签</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;html&gt;</span><br></code></pre></td></tr></table></figure><p>定义 HTML 文档。 </p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">&lt;<span class="hljs-keyword">body</span>&gt;<br></code></pre></td></tr></table></figure><p> 定义文档的主体。 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--...--&gt;</span><br></code></pre></td></tr></table></figure><p> 定义注释。 </p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;i&gt;</span><br></code></pre></td></tr></table></figure><p>定义斜体文本。 </p><h2 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;form&gt;</span><br></code></pre></td></tr></table></figure><p>定义供用户输入的 HTML 表单。 </p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;input&gt;</span><br></code></pre></td></tr></table></figure><h3 id="input属性"><a href="#input属性" class="headerlink" title="input属性"></a>input属性</h3><h4 id="type属性"><a href="#type属性" class="headerlink" title="type属性"></a>type属性</h4><blockquote><p>text单行文本</p><p>password密码</p><p>radio单选按钮</p><p>checkbox复选框</p><p>button普通按钮</p><p>submit提交按钮</p><p>reset 重置按钮</p><p>image图像形式</p><p>file文件域</p></blockquote><h4 id="其他属性"><a href="#其他属性" class="headerlink" title="其他属性"></a>其他属性</h4><p>name属性控件名称</p><p>value属性默认文本</p><p>size属性显示宽度</p><p>checked属性默认被选中项</p><p>maxlength属性最多字符数</p><p>lable标签</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stata">方法1:&lt;<span class="hljs-keyword">label</span>&gt; male &lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=<span class="hljs-string">&quot;radio&quot;</span> name=<span class="hljs-string">&quot;sex&quot;</span> value=<span class="hljs-string">&quot;male&quot;</span>&gt;   &lt;/<span class="hljs-keyword">label</span>&gt;<br><br>方法2:&lt;<span class="hljs-keyword">label</span> <span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;male&quot;</span>&gt;Male&lt;/<span class="hljs-keyword">label</span>&gt;<br><br>&lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=<span class="hljs-string">&quot;radio&quot;</span> name=<span class="hljs-string">&quot;sex&quot;</span>  id=<span class="hljs-string">&quot;male&quot;</span>&gt;<br><br></code></pre></td></tr></table></figure><p>定义输入控件。 </p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;textarea&gt;</span><br></code></pre></td></tr></table></figure><p>显示行数</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs abnf">&lt;textarea cols<span class="hljs-operator">=</span><span class="hljs-string">&quot;每行中的字符数&quot;</span> rows<span class="hljs-operator">=</span><span class="hljs-string">&quot;显示的行数&quot;</span>&gt;<br><br>  文本内容<br><br>&lt;/textarea&gt;<br><br></code></pre></td></tr></table></figure><p>防止拖拽文本域resize</p><blockquote><p>resize：none    这个单词可以防止 火狐 谷歌等浏览器随意的拖动 文本域。</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">textarea</span>  <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;resize: none;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br></code></pre></td></tr></table></figure><p>定义多行的文本输入控件。 </p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;button&gt;</span><br></code></pre></td></tr></table></figure><p>定义按钮。 </p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">&lt;<span class="hljs-keyword">select</span>&gt;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>选项1<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>  ...<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>selected默认选中项</p><p>定义选择列表（下拉列表）。 </p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;optgroup&gt;</span><br></code></pre></td></tr></table></figure><p>定义选择列表中相关选项的组合。 </p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;option&gt;</span><br></code></pre></td></tr></table></figure><p> 定义选择列表中的选项。 </p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;label&gt;</span><br></code></pre></td></tr></table></figure><p>定义 input 元素的标注。 </p><h2 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;frame&gt;</span><br></code></pre></td></tr></table></figure><p>定义框架集的窗口或框架。 </p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;frameset&gt;</span><br></code></pre></td></tr></table></figure><p>定义框架集。 </p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;noframes&gt;</span><br></code></pre></td></tr></table></figure><p>定义针对不支持框架的用户的替代内容。 </p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;iframe&gt;</span><br></code></pre></td></tr></table></figure><p>定义内联框架。 </p><h2 id="图像"><a href="#图像" class="headerlink" title="图像"></a>图像</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;img&gt;</span><br></code></pre></td></tr></table></figure><p>定义图像。 </p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;map&gt;</span><br></code></pre></td></tr></table></figure><p>定义图像映射。 </p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;area&gt;</span><br></code></pre></td></tr></table></figure><p>定义图像地图内部的区域。 </p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;canvas&gt;</span><br></code></pre></td></tr></table></figure><p>定义图形。 </p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;figcaption&gt;</span><br></code></pre></td></tr></table></figure><p>定义 figure 元素的标题。 </p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;figure&gt;</span><br></code></pre></td></tr></table></figure><p>定义媒介内容的分组，以及它们的标题。 </p><h2 id="音频-视频"><a href="#音频-视频" class="headerlink" title="音频&#x2F;视频"></a>音频&#x2F;视频</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;audio&gt;</span><br></code></pre></td></tr></table></figure><p> 定义声音内容。 </p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;source&gt;</span><br></code></pre></td></tr></table></figure><p>定义媒介源。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">&lt;video src<span class="hljs-operator">=</span><span class="hljs-string">&quot;video/chrome.mp4&quot;</span> controls poster<span class="hljs-operator">=</span><span class="hljs-string">&quot;images/poster.jpg&quot;</span> loop autoplay muted&gt;&lt;/video&gt;<br></code></pre></td></tr></table></figure><p> 视频标签</p><p>在谷歌高版本中，默认禁用了自动播放，只要将视频的声音禁掉，视频就可以自动播放了，video标签的播放器的样式，在不同的浏览器中表现形式不一致，只能隐藏不能修改他原有的样式</p><p>controls  显示播放控件</p><p>poster  在视频播放前视频中显示的图片</p><p>loop   循环播放视频</p><p>muted 静音，在自动播放时，音量被禁止</p><p>autoplay  自动播放</p>]]></content>
    
    
    <categories>
      
      <category>H5C3</category>
      
    </categories>
    
    
    <tags>
      
      <tag>H5C3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jQuery_fullpage全屏插件</title>
    <link href="/2019/06/03/jQuery_fullpage%E5%85%A8%E5%B1%8F%E6%8F%92%E4%BB%B6/"/>
    <url>/2019/06/03/jQuery_fullpage%E5%85%A8%E5%B1%8F%E6%8F%92%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>fullPage.js 是一个基于 jQuery 的插件，它能够帮你很方便、很轻松的制作出全屏网站。<br><a href="http://www.dowebok.com/demo/2014/77/">http://www.dowebok.com/demo/2014/77/</a>    演示地址</p><p>主要功能有：</p><p>支持鼠标滚动</p><p>支持前进后退和键盘控制</p><p>多个回调函数</p><p>支持手机、平板触摸事件</p><p>支持 CSS3 动画</p><p>支持窗口缩放</p><p>窗口缩放时自动调整</p><p>可设置滚动宽度、背景颜色、滚动速度、循环选项、回调、文本对齐方式等等</p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><h3 id="1-引用文件"><a href="#1-引用文件" class="headerlink" title="1,引用文件"></a>1,引用文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 插件依赖jQuery --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/jquery/jquery.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 插件JS --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/fullpage/jquery.fullpage.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 插件CSS --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;js/fullpage/jquery.fullpage.min.css&quot;</span>&gt;</span><br><br>以及自己的页面css,js<br></code></pre></td></tr></table></figure><h3 id="2-HTML-结构"><a href="#2-HTML-结构" class="headerlink" title="2,HTML 结构"></a>2,HTML 结构</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">&lt;div id=<span class="hljs-string">&quot;fullpage&quot;</span>&gt;<br>    &lt;div <span class="hljs-keyword">class</span>=&quot;<span class="hljs-symbol">section</span>&quot;&gt;第一屏&lt;/<span class="hljs-symbol">div</span>&gt;<br>    &lt;<span class="hljs-symbol">div</span> <span class="hljs-symbol">class</span>=&quot;<span class="hljs-symbol">section</span>&quot;&gt;第二屏&lt;/<span class="hljs-symbol">div</span>&gt;<br>    &lt;<span class="hljs-symbol">div</span> <span class="hljs-symbol">class</span>=&quot;<span class="hljs-symbol">section</span>&quot;&gt;<br>        &lt;<span class="hljs-symbol">div</span> <span class="hljs-symbol">class</span>=&quot;<span class="hljs-symbol">slide</span>&quot;&gt;第三屏的第一屏&lt;/<span class="hljs-symbol">div</span>&gt;<br>        &lt;<span class="hljs-symbol">div</span> <span class="hljs-symbol">class</span>=&quot;<span class="hljs-symbol">slide</span>&quot;&gt;第三屏的第二屏&lt;/<span class="hljs-symbol">div</span>&gt;<br>        &lt;<span class="hljs-symbol">div</span> <span class="hljs-symbol">class</span>=&quot;<span class="hljs-symbol">slide</span>&quot;&gt;第三屏的第三屏&lt;/<span class="hljs-symbol">div</span>&gt;<br>        &lt;<span class="hljs-symbol">div</span> <span class="hljs-symbol">class</span>=&quot;<span class="hljs-symbol">slide</span>&quot;&gt;第三屏的第四屏&lt;/<span class="hljs-symbol">div</span>&gt;<br>    &lt;/<span class="hljs-symbol">div</span>&gt;<br>    &lt;<span class="hljs-symbol">div</span> <span class="hljs-symbol">class</span>=&quot;<span class="hljs-symbol">section</span>&quot;&gt;第四屏&lt;/<span class="hljs-symbol">div</span>&gt;<br>&lt;/<span class="hljs-symbol">div</span>&gt;<br></code></pre></td></tr></table></figure><p>3.调用插件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">JavaScript</span>入口函数<br>$(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    $(<span class="hljs-string">&#x27;#fullpage&#x27;</span>).<span class="hljs-title function_">fullpage</span>();<br>&#125;);<br><br><br>或者事件<br>$(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">ready</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>$(<span class="hljs-string">&#x27;#fullpage&#x27;</span>).<span class="hljs-title function_">fullpage</span>();<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="内部初始化方法"><a href="#内部初始化方法" class="headerlink" title="内部初始化方法"></a>内部初始化方法</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br><span class="line">968</span><br><span class="line">969</span><br><span class="line">970</span><br><span class="line">971</span><br><span class="line">972</span><br><span class="line">973</span><br><span class="line">974</span><br><span class="line">975</span><br><span class="line">976</span><br><span class="line">977</span><br><span class="line">978</span><br><span class="line">979</span><br><span class="line">980</span><br><span class="line">981</span><br><span class="line">982</span><br><span class="line">983</span><br><span class="line">984</span><br><span class="line">985</span><br><span class="line">986</span><br><span class="line">987</span><br><span class="line">988</span><br><span class="line">989</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">fullPage.js</span><br><br><br><br><br><br><span class="hljs-string">&lt;p</span> <span class="hljs-string">align=&quot;center&quot;&gt;</span><br><br>  <span class="hljs-string">English</span> <span class="hljs-string">|</span><br><br>  <span class="hljs-string">Español</span> <span class="hljs-string">|</span><br><br>  <span class="hljs-string">Pусский</span> <span class="hljs-string">|</span><br><br>  <span class="hljs-string">&lt;span&gt;中文&lt;/span&gt;</span> <span class="hljs-string">|</span><br><br>  <span class="hljs-string">한국어</span><br><br><span class="hljs-string">&lt;/p&gt;</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-meta"></span><br><span class="hljs-meta"></span><br><span class="hljs-meta"></span><br><span class="hljs-meta"></span><br><span class="hljs-meta"></span><br><span class="hljs-meta"></span><br><span class="hljs-meta"></span><br><span class="hljs-meta"></span><br> <span class="hljs-string">|</span> <span class="hljs-string">7Kb</span> <span class="hljs-string">gziped</span> <span class="hljs-string">|</span> <span class="hljs-string">Created</span> <span class="hljs-string">by</span> <span class="hljs-string">@imac2</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-string">现场演示</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">Wordpress</span> <span class="hljs-string">的主题</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">fullpage.js扩展</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">常见问题</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-string">通过调用本库可轻易创建全屏滚动网站（也称为单页网站）。</span><br><br><span class="hljs-string">本库可创建全屏滚动网站，同时也可在网站中添加横向滚动条。</span><br><br><span class="hljs-string">请我喝杯咖啡</span><br><br><br><br><span class="hljs-string">根据要求，可提供模块定制和紧急更改服务，价格合理。。</span><br><br> <span class="hljs-string">联系我.</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-string">介绍</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">兼容性</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">用法</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">创建链接到段落或幻灯片</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">创建更小或更大的段落</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">fullpage.js添加的状态类</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">快速加载</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">自动播放内嵌媒体</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">使用扩展</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">选项</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">方法</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">回调</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">报告问题</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">完善fullpage.js</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">变更日志</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">创建任务</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">资源</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">谁在使用fullpage.js</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">赞赏</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">许可证</span><br><br><span class="hljs-string">介绍</span><br><br><span class="hljs-string">不仅限于提需求，也欢迎提出编码风格改进的建议。</span><br><br><span class="hljs-string">集思广益，让这个库更加强大，让写代码更轻松！</span><br><br><span class="hljs-string">兼容性</span><br><br><span class="hljs-string">fullPage.js在所有的现代浏览器，以及一些旧版浏览器，如Internet</span> <span class="hljs-string">Explorer</span> <span class="hljs-number">8</span><span class="hljs-string">，9，Opera</span> <span class="hljs-number">12</span><span class="hljs-string">等都能兼容。</span><br><br><span class="hljs-string">可兼容支持CSS3的浏览器与非支持CSS3的浏览器，适用于旧版浏览器。</span> <span class="hljs-string">同时，手机、平板电脑和触摸屏电脑还提供触屏支持。</span><br><br><br><br><span class="hljs-string">特别感谢Browserstack</span> <span class="hljs-string">支持fullpage.js。</span><br><br><span class="hljs-string">用法</span><br><br><span class="hljs-string">正如示例文件所示，需要引用：</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-string">jQuery库.</span> <span class="hljs-string">(最低1.6.0)</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">JavaScript</span> <span class="hljs-string">文件jquery.fullPage.js</span> <span class="hljs-string">(或其缩小版本</span> <span class="hljs-string">jquery.fullPage.min.js)</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">css</span> <span class="hljs-string">文件jquery.fullPage.css</span><br><br> <span class="hljs-string">或者，当调用css3:false,</span> <span class="hljs-string">时，如果想调用jQuery库中(linear</span> <span class="hljs-string">and</span> <span class="hljs-string">swing</span> <span class="hljs-string">)或fullPage.js</span> <span class="hljs-string">(easeInOutCubic)中默认包含的其他缓和效果控件，可添加jQuery</span> <span class="hljs-string">UI库</span> <span class="hljs-string">。</span><br><br><span class="hljs-string">使用bower或npm进行安装</span><br><br><span class="hljs-string">或者，如果您愿意，可以使用bower或npm安装fullPage.js：</span><br><br><span class="hljs-string">终端：</span><br><br>    <span class="hljs-string">//</span> <span class="hljs-string">使用bower</span><br>    <span class="hljs-string">bower</span> <span class="hljs-string">install</span> <span class="hljs-string">fullpage.js</span><br>    <br>    <span class="hljs-string">//</span> <span class="hljs-string">使用npm</span><br>    <span class="hljs-string">npm</span> <span class="hljs-string">install</span> <span class="hljs-string">fullpage.js</span><br><br><span class="hljs-string">包含文件：</span><br><br>    <span class="hljs-string">&lt;link</span> <span class="hljs-string">rel=&quot;stylesheet&quot;</span> <span class="hljs-string">type=&quot;text/css&quot;</span> <span class="hljs-string">href=&quot;jquery.fullPage.css&quot;</span> <span class="hljs-string">/&gt;</span><br>    <br>    <span class="hljs-string">&lt;script</span> <span class="hljs-string">src=&quot;http://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br>    <br>    <span class="hljs-string">&lt;!--</span> <span class="hljs-string">以下行是可选的。</span> <span class="hljs-string">只有在使用选项css3:false，并且您希望使用其他缓动效果，而非“linear”、“swing”或“easeInOutCubic”时才有必要。</span> <span class="hljs-string">--&gt;</span><br>    <span class="hljs-string">&lt;script</span> <span class="hljs-string">src=&quot;vendors/jquery.easings.min.js&quot;&gt;&lt;/script&gt;</span><br>    <br>    <br>    <span class="hljs-string">&lt;!--</span> <span class="hljs-string">以下行仅在使用选项scrollOverflow:true的情况下是必需的</span> <span class="hljs-string">--&gt;</span><br>    <span class="hljs-string">&lt;script</span> <span class="hljs-string">type=&quot;text/javascript&quot;</span> <span class="hljs-string">src=&quot;vendors/scrolloverflow.min.js&quot;&gt;&lt;/script&gt;</span><br>    <br>    <span class="hljs-string">&lt;script</span> <span class="hljs-string">type=&quot;text/javascript&quot;</span> <span class="hljs-string">src=&quot;jquery.fullPage.js&quot;&gt;&lt;/script&gt;</span><br><br><span class="hljs-string">可选用CDN：</span><br><br><span class="hljs-string">如果您倾向使用CDN载入所需文件，fullPage.js在CDNJS：</span><br><br><span class="hljs-string">https://cdnjs.com/libraries/fullPage.js</span><br><br><span class="hljs-string">要求HTML结构</span><br><br><span class="hljs-string">HTML文件中的首行HTML代码必须使用HTML</span> <span class="hljs-string">DOCTYPE</span> <span class="hljs-string">声明，否则可能会遇到代码段高度问题。HTML</span> <span class="hljs-number">5</span> <span class="hljs-string">doctype中的示例：</span> <span class="hljs-string">&lt;!DOCTYPE</span> <span class="hljs-string">html&gt;.</span><br><br><span class="hljs-string">每个代码段定义为包含section类的元素。</span><br><br><span class="hljs-string">第一个代码段作为主页，是默认激活代码。</span><br><br><span class="hljs-string">代码段应进行封装（即&lt;div</span> <span class="hljs-string">id=&quot;fullpage&quot;&gt;</span> <span class="hljs-string">）。</span> <span class="hljs-string">封装不能是body元素。</span><br><br>    <span class="hljs-string">&lt;div</span> <span class="hljs-string">id=&quot;fullpage&quot;&gt;</span><br>    <span class="hljs-string">&lt;div</span> <span class="hljs-string">class=&quot;section&quot;&gt;Some</span> <span class="hljs-string">section&lt;/div&gt;</span><br>    <span class="hljs-string">&lt;div</span> <span class="hljs-string">class=&quot;section&quot;&gt;Some</span> <span class="hljs-string">section&lt;/div&gt;</span><br>    <span class="hljs-string">&lt;div</span> <span class="hljs-string">class=&quot;section&quot;&gt;Some</span> <span class="hljs-string">section&lt;/div&gt;</span><br>    <span class="hljs-string">&lt;div</span> <span class="hljs-string">class=&quot;section&quot;&gt;Some</span> <span class="hljs-string">section&lt;/div&gt;</span><br>    <span class="hljs-string">&lt;/div&gt;</span><br><br><span class="hljs-string">如果你想定义一个与众不同的起始页面，而不是原始第一段或第一个滑动页，只需将active类添加到你想首先载入的段或滑动页。</span><br><br>    <span class="hljs-string">&lt;div</span> <span class="hljs-string">class=&quot;section</span> <span class="hljs-string">active&quot;&gt;Some</span> <span class="hljs-string">section&lt;/div&gt;</span><br><br><span class="hljs-string">为在代码段中创建横向滑块，每个滑动页将默认定义为包含slide类的元素：</span><br><br>    <span class="hljs-string">&lt;div</span> <span class="hljs-string">class=&quot;section&quot;&gt;</span><br>    <span class="hljs-string">&lt;div</span> <span class="hljs-string">class=&quot;slide&quot;&gt;</span> <span class="hljs-string">幻灯片</span> <span class="hljs-number">1</span> <span class="hljs-string">&lt;/div&gt;</span><br>    <span class="hljs-string">&lt;div</span> <span class="hljs-string">class=&quot;slide&quot;&gt;</span> <span class="hljs-string">幻灯片</span> <span class="hljs-number">2</span> <span class="hljs-string">&lt;/div&gt;</span><br>    <span class="hljs-string">&lt;div</span> <span class="hljs-string">class=&quot;slide&quot;&gt;</span> <span class="hljs-string">幻灯片</span> <span class="hljs-number">3</span> <span class="hljs-string">&lt;/div&gt;</span><br>    <span class="hljs-string">&lt;div</span> <span class="hljs-string">class=&quot;slide&quot;&gt;</span> <span class="hljs-string">幻灯片</span> <span class="hljs-number">4</span> <span class="hljs-string">&lt;/div&gt;</span><br>    <span class="hljs-string">&lt;/div&gt;</span><br>    <span class="hljs-string">````</span><br>    <span class="hljs-string">可以在[`demoPage.html`文件](https://github.com/alvarotrigo/fullPage.js/tree/master/examples/demoPage.html)看到完整的HTML结构的例子</span><br>    <br>    <span class="hljs-comment">### 初始化</span><br>    <span class="hljs-string">你所需要做的就是在`$(document).ready`函数中调用fullPage.js：</span><br>    <br>    <span class="hljs-string">```javascript</span><br>    <span class="hljs-string">$(document).ready(function()</span> &#123;<br>    <span class="hljs-string">$(&#x27;#fullpage&#x27;).fullpage();</span><br>    &#125;<span class="hljs-string">);</span><br><br><span class="hljs-string">所有选项设置的更复杂的初始化如下所示：</span><br><br>    <span class="hljs-string">$(document).ready(function()</span> &#123;<br>    <span class="hljs-string">$(&#x27;#fullpage&#x27;).fullpage(</span>&#123;<br>    <span class="hljs-string">//导航</span><br>    <span class="hljs-attr">menu:</span> <span class="hljs-string">&#x27;#menu&#x27;</span>,<br>    <span class="hljs-attr">lockAnchors:</span> <span class="hljs-literal">false</span>,<br>    <span class="hljs-string">anchors:</span>[<span class="hljs-string">&#x27;firstPage&#x27;</span>, <span class="hljs-string">&#x27;secondPage&#x27;</span>],<br>    <span class="hljs-attr">navigation:</span> <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">navigationPosition:</span> <span class="hljs-string">&#x27;right&#x27;</span>,<br>    <span class="hljs-attr">navigationTooltips:</span> [<span class="hljs-string">&#x27;firstSlide&#x27;</span>, <span class="hljs-string">&#x27;secondSlide&#x27;</span>],<br>    <span class="hljs-attr">showActiveTooltip:</span> <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">slidesNavigation:</span> <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">slidesNavPosition:</span> <span class="hljs-string">&#x27;bottom&#x27;</span>,<br>    <br>    <span class="hljs-string">//滚动</span><br>    <span class="hljs-attr">css3:</span> <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">scrollingSpeed:</span> <span class="hljs-number">700</span>,<br>    <span class="hljs-attr">autoScrolling:</span> <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">fitToSection:</span> <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">fitToSectionDelay:</span> <span class="hljs-number">1000</span>,<br>    <span class="hljs-attr">scrollBar:</span> <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">easing:</span> <span class="hljs-string">&#x27;easeInOutCubic&#x27;</span>,<br>    <span class="hljs-attr">easingcss3:</span> <span class="hljs-string">&#x27;ease&#x27;</span>,<br>    <span class="hljs-attr">loopBottom:</span> <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">loopTop:</span> <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">loopHorizontal:</span> <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">continuousVertical:</span> <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">continuousHorizontal:</span> <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">scrollHorizontally:</span> <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">interlockedSlides:</span> <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">dragAndMove:</span> <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">offsetSections:</span> <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">resetSliders:</span> <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">fadingEffect:</span> <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">normalScrollElements:</span> <span class="hljs-string">&#x27;#element1, .element2&#x27;</span>,<br>    <span class="hljs-attr">scrollOverflow:</span> <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">scrollOverflowReset:</span> <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">scrollOverflowOptions:</span> <span class="hljs-literal">null</span>,<br>    <span class="hljs-attr">touchSensitivity:</span> <span class="hljs-number">15</span>,<br>    <span class="hljs-attr">normalScrollElementTouchThreshold:</span> <span class="hljs-number">5</span>,<br>    <span class="hljs-attr">bigSectionsDestination:</span> <span class="hljs-literal">null</span>,<br>    <br>    <span class="hljs-string">//可访问</span><br>    <span class="hljs-attr">keyboardScrolling:</span> <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">animateAnchor:</span> <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">recordHistory:</span> <span class="hljs-literal">true</span>,<br>    <br>    <span class="hljs-string">//设计</span><br>    <span class="hljs-attr">controlArrows:</span> <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">verticalCentered:</span> <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">sectionsColor :</span> [<span class="hljs-string">&#x27;#ccc&#x27;</span>, <span class="hljs-string">&#x27;#fff&#x27;</span>],<br>    <span class="hljs-attr">paddingTop:</span> <span class="hljs-string">&#x27;3em&#x27;</span>,<br>    <span class="hljs-attr">paddingBottom:</span> <span class="hljs-string">&#x27;10px&#x27;</span>,<br>    <span class="hljs-attr">fixedElements:</span> <span class="hljs-string">&#x27;#header, .footer&#x27;</span>,<br>    <span class="hljs-attr">responsiveWidth:</span> <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">responsiveHeight:</span> <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">responsiveSlides:</span> <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">parallax:</span> <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">parallaxOptions:</span> &#123;<span class="hljs-attr">type:</span> <span class="hljs-string">&#x27;reveal&#x27;</span>, <span class="hljs-attr">percentage:</span> <span class="hljs-number">62</span>, <span class="hljs-attr">property:</span> <span class="hljs-string">&#x27;translate&#x27;</span>&#125;,<br>    <br>    <span class="hljs-string">//自定义选择器</span><br>    <span class="hljs-attr">sectionSelector:</span> <span class="hljs-string">&#x27;.section&#x27;</span>,<br>    <span class="hljs-attr">slideSelector:</span> <span class="hljs-string">&#x27;.slide&#x27;</span>,<br>    <br>    <span class="hljs-attr">lazyLoading:</span> <span class="hljs-literal">true</span>,<br>    <br>    <span class="hljs-string">//事件</span><br>    <span class="hljs-attr">onLeave:</span> <span class="hljs-string">function(index</span>, <span class="hljs-string">nextIndex</span>, <span class="hljs-string">direction)</span>&#123;&#125;,<br>    <span class="hljs-attr">afterLoad:</span> <span class="hljs-string">function(anchorLink</span>, <span class="hljs-string">index)</span>&#123;&#125;,<br>    <span class="hljs-attr">afterRender:</span> <span class="hljs-string">function()</span>&#123;&#125;,<br>    <span class="hljs-attr">afterResize:</span> <span class="hljs-string">function()</span>&#123;&#125;,<br>    <span class="hljs-attr">afterResponsive:</span> <span class="hljs-string">function(isResponsive)</span>&#123;&#125;,<br>    <span class="hljs-attr">afterSlideLoad:</span> <span class="hljs-string">function(anchorLink</span>, <span class="hljs-string">index</span>, <span class="hljs-string">slideAnchor</span>, <span class="hljs-string">slideIndex)</span>&#123;&#125;,<br>    <span class="hljs-attr">onSlideLeave:</span> <span class="hljs-string">function(anchorLink</span>, <span class="hljs-string">index</span>, <span class="hljs-string">slideIndex</span>, <span class="hljs-string">direction</span>, <span class="hljs-string">nextSlideIndex)</span>&#123;&#125;<br>    &#125;<span class="hljs-string">);</span><br>    &#125;<span class="hljs-string">);</span><br><br><span class="hljs-string">创建链接到段落或幻灯片</span><br><br><span class="hljs-string">如果你在段落中使用fullPage.js和锚链接（在每个部分使用anchors选项或属性data-anchor），那么你将能够在一个段落里使用锚链接直接导航到某个幻灯片。</span><br><br><span class="hljs-string">这是一个锚链接的例子：</span><br><br><span class="hljs-string">http://alvarotrigo.com/fullPage/#secondPage/2</span> <span class="hljs-string">（在你手动访问该段落/幻灯片就会看到的URL）</span><br><br><span class="hljs-string">请注意，URL的最后部分以＃secondPage</span> <span class="hljs-string">/</span> <span class="hljs-number">2</span><span class="hljs-string">结尾。</span><br><br><span class="hljs-string">以下初始化：</span><br><br>    <span class="hljs-string">$(document).ready(function()</span> &#123;<br>    <span class="hljs-string">$(&#x27;#fullpage&#x27;).fullpage(</span>&#123;<br>    <span class="hljs-string">anchors:</span>[<span class="hljs-string">&#x27;firstPage&#x27;</span>, <span class="hljs-string">&#x27;secondPage&#x27;</span>, <span class="hljs-string">&#x27;thirdPage&#x27;</span>]<br>    &#125;<span class="hljs-string">);</span><br>    &#125;<span class="hljs-string">);</span><br><br><span class="hljs-string">URL#secondPage/2</span> <span class="hljs-string">结尾处的锚分别定义了目标段落和幻灯片。</span> <span class="hljs-string">在前面的URL中，目标段落将是使用锚点</span> <span class="hljs-string">secondPage</span> <span class="hljs-string">定义的段落，幻灯片将会是第2张幻灯片，因为我们使用索引</span> <span class="hljs-number">2</span> <span class="hljs-string">。</span> <span class="hljs-string">（一个段落的第一个幻灯片有索引0，在技术上这是一个段落）。</span><br><br><span class="hljs-string">如果我们在HTML标记中使用属性data-anchor，就可以使用自定义锚点来代替它的索引：</span><br><br>    <span class="hljs-string">&lt;div</span> <span class="hljs-string">class=&quot;section&quot;&gt;</span><br>    <span class="hljs-string">&lt;div</span> <span class="hljs-string">class=&quot;slide&quot;</span> <span class="hljs-string">data-anchor=&quot;slide1&quot;&gt;</span> <span class="hljs-string">幻灯片</span> <span class="hljs-number">1</span> <span class="hljs-string">&lt;/div&gt;</span><br>    <span class="hljs-string">&lt;div</span> <span class="hljs-string">class=&quot;slide&quot;</span> <span class="hljs-string">data-anchor=&quot;slide2&quot;&gt;</span> <span class="hljs-string">幻灯片</span> <span class="hljs-number">2</span> <span class="hljs-string">&lt;/div&gt;</span><br>    <span class="hljs-string">&lt;div</span> <span class="hljs-string">class=&quot;slide&quot;</span> <span class="hljs-string">data-anchor=&quot;slide3&quot;&gt;</span> <span class="hljs-string">幻灯片</span> <span class="hljs-number">3</span> <span class="hljs-string">&lt;/div&gt;</span><br>    <span class="hljs-string">&lt;div</span> <span class="hljs-string">class=&quot;slide&quot;</span> <span class="hljs-string">data-anchor=&quot;slide4&quot;&gt;</span> <span class="hljs-string">幻灯片</span> <span class="hljs-number">4</span> <span class="hljs-string">&lt;/div&gt;</span><br>    <span class="hljs-string">&lt;/div&gt;</span><br><br><span class="hljs-string">在最后一种情况中，我们使用的URL将是#secondPage/slide3，这相当于之前的</span> <span class="hljs-comment">#secondPage/2。</span><br><br><span class="hljs-string">请注意，如果没有提供anchors数组，则也可以使用data-anchor属性以同样的方式定义节锚点。</span><br><br><span class="hljs-string">注意！data-anchor标记的值不能与站点上的任何ID元素（或IE的NAME元素）相同。</span><br><br><span class="hljs-string">创建更小或更大的段落</span><br><br><span class="hljs-string">演示</span> <span class="hljs-string">fullPage.js提供了一种方法来删除段落和幻灯片的全高限制。</span> <span class="hljs-string">可以创建高度小于或大于视口的段落。</span> <span class="hljs-string">这是页脚的理想方式。</span><br><br><span class="hljs-string">需明白所有段落使用此功能并没有意义，这一点很重要。</span> <span class="hljs-string">如果网站的初始加载中有多个段落，则fullPage.js将不会滚动以查看下一个段落，因为它已经在视口中。</span><br><br><span class="hljs-string">创建更小的段落，只需在要应用的段落中使用fp-auto-height</span> <span class="hljs-string">类即可，则可以调用您的段落/幻灯片中定义的高度。</span><br><br>    <span class="hljs-string">&lt;div</span> <span class="hljs-string">class=&quot;section&quot;&gt;整个视口&lt;/div&gt;</span><br>    <span class="hljs-string">&lt;div</span> <span class="hljs-string">class=&quot;section</span> <span class="hljs-string">fp-auto-height&quot;&gt;自动高度&lt;/div&gt;</span><br><br><span class="hljs-string">响应自动高度段落</span><br><br><span class="hljs-string">演示</span> <span class="hljs-string">响应自动高度可以通过使用fp-auto-height-responsive类来调用。</span> <span class="hljs-string">这种方式段落将全屏，直到响应模式终止。</span> <span class="hljs-string">根据定义调整大小，可能是大于或小于视口。</span><br><br><span class="hljs-string">由fullpage.js添加的状态类</span><br><br><span class="hljs-string">Fullpage.js在不同的元素中添加多个类来保存网站状态的记录：</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-string">active</span> <span class="hljs-string">添加当前可见部分并滑动。</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">active</span> <span class="hljs-string">被添加到当前菜单元素（如果使用menu选项）。</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">fp-viewing-SECTION-SLIDE形式的类被添加到网站的</span> <span class="hljs-string">body</span> <span class="hljs-string">元素中。(例如：</span> <span class="hljs-string">fp-viewing-secondPage-0)</span> <span class="hljs-string">SECTION和SLIDE部分将成为当前部分和幻灯片的锚（或索引，如果没有提供锚）。</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">当进入响应模式时，fp-responsive添加到body元素`</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">当启用fullpage.js时，fp-enabled添加到html元素。</span> <span class="hljs-string">（并在销毁时被移除）。</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">当fullPage.js被销毁时，fp-destroyed被添加到fullpage.js容器中。</span><br><br><span class="hljs-string">延迟加载</span><br><br><span class="hljs-string">演示</span> <span class="hljs-string">fullPage.js提供了一种延迟加载图像、视频和音频元素的方式，这样它们不会减慢网站的加载速度，也不会浪费数据传输。</span><br><br><span class="hljs-string">当使用延迟加载时，所有这些元素只有在进入视口时才会加载。</span><br><br><span class="hljs-string">要启用延迟加载，您只需将src属性更改为data-src，如下所示：</span><br><br>    <span class="hljs-string">&lt;img</span> <span class="hljs-string">data-src=&quot;image.png&quot;&gt;</span><br>    <span class="hljs-string">&lt;video&gt;</span><br>    <span class="hljs-string">&lt;source</span> <span class="hljs-string">data-src=&quot;video.webm&quot;</span> <span class="hljs-string">type=&quot;video/webm&quot;</span> <span class="hljs-string">/&gt;</span><br>    <span class="hljs-string">&lt;source</span> <span class="hljs-string">data-src=&quot;video.mp4&quot;</span> <span class="hljs-string">type=&quot;video/mp4&quot;</span> <span class="hljs-string">/&gt;</span><br>    <span class="hljs-string">&lt;/video&gt;</span><br><br><span class="hljs-string">如果您已经使用另一个使用data-src的延迟加载解决方案，则可以通过设置</span> <span class="hljs-attr">lazyLoading:</span> <span class="hljs-literal">false</span><span class="hljs-string">选项来禁用fullPage.js延迟加载。</span><br><br><span class="hljs-string">自动播放/暂停嵌入式媒体</span><br><br><span class="hljs-string">注意：根据操作系统和浏览器的不同，自动播放功能可能无法在某些移动设备上使用（即iOS的Safari</span> <span class="hljs-string">版本</span> <span class="hljs-string">&lt;</span> <span class="hljs-number">10.0</span><span class="hljs-string">）。</span><br><br><span class="hljs-string">播放部分/幻灯片载入：</span><br><br><span class="hljs-string">对于视频或音频使用属性</span> <span class="hljs-string">autoplay，或者对于youtube</span> <span class="hljs-string">iframe使用参数autoplay=1将使得在加载页面时播放媒体元素。</span><br><br><span class="hljs-string">在段落/幻灯片载入使用而不是属性data-autoplay播放。</span> <span class="hljs-string">例如：</span><br><br>    <span class="hljs-string">&lt;audio</span> <span class="hljs-string">data-autoplay&gt;</span><br>    <span class="hljs-string">&lt;source</span> <span class="hljs-string">src=&quot;http://metakoncept.hr/horse.ogg&quot;</span> <span class="hljs-string">type=&quot;audio/ogg&quot;&gt;</span><br>    <span class="hljs-string">&lt;/audio&gt;</span><br><br><span class="hljs-string">暂停</span><br><br><span class="hljs-string">嵌入式HTML5&lt;video&gt;/&lt;audio&gt;和Youtube</span> <span class="hljs-string">iframe在离开某个段落或幻灯片时自动暂停。</span> <span class="hljs-string">可以通过使用属性data-keepplaying来禁用。</span> <span class="hljs-string">例如：</span><br><br>    <span class="hljs-string">&lt;audio</span> <span class="hljs-string">data-keepplaying&gt;</span><br>    <span class="hljs-string">&lt;source</span> <span class="hljs-string">src=&quot;http://metakoncept.hr/horse.ogg&quot;</span> <span class="hljs-string">type=&quot;audio/ogg&quot;&gt;</span><br>    <span class="hljs-string">&lt;/audio&gt;</span><br><br><span class="hljs-string">使用扩展</span><br><br><span class="hljs-string">fullpage.js</span> <span class="hljs-string">提供了一组扩展您可以使用它来增强其默认功能。</span> <span class="hljs-string">所有这些都被列为</span> <span class="hljs-string">fullpage.js</span> <span class="hljs-string">选项.</span><br><br><span class="hljs-string">扩展需要使用在dist</span> <span class="hljs-string">文件夹中的缩小文件</span> <span class="hljs-string">jquery.fullpage.extensions.min.js，而不是通常的fullPage.js文件</span> <span class="hljs-string">(jquery.fullpage.js</span> <span class="hljs-string">或</span> <span class="hljs-string">jquery.fullpage.min.js)。</span><br><br><span class="hljs-string">一旦你需要扩展文件，你需要在fullPage之前添加它。</span> <span class="hljs-string">例如，如果我想要使用Continuos</span> <span class="hljs-string">Horizontal扩展，我将包含扩展文件，然后包含fullPage文件的扩展版本。</span><br><br>    <span class="hljs-string">&lt;script</span> <span class="hljs-string">type=&quot;text/javascript&quot;</span> <span class="hljs-string">src=&quot;fullpage.continuousHorizontal.min.js&quot;&gt;&lt;/script&gt;</span><br>    <span class="hljs-string">&lt;script</span> <span class="hljs-string">type=&quot;text/javascript&quot;</span> <span class="hljs-string">src=&quot;fullpage/jquery.fullpage.extensions.min.js&quot;&gt;&lt;/script&gt;</span><br><br><span class="hljs-string">每个扩展都需要激活密钥和许可证密钥。在这里看到更多细节.</span><br><br><span class="hljs-string">然后你就可以按照选项的说明使用和配置它们。</span><br><br><span class="hljs-string">选项</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-string">controlArrows：（默认为</span> <span class="hljs-literal">true</span><span class="hljs-string">）确定是否将幻灯片的控制箭头向右或向左移动。</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">verticalCentered：（默认为true）在段落内部垂直居中。</span> <span class="hljs-string">当设置为true时，您的代码将被库包装。可考虑使用委托或在afterRender回调中加载其他脚本。</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">scrollingSpeed：（默认700）滚动转换的速度（以毫秒为单位）。</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">sectionsColor：（默认none）为每个部分定义CSSbackground-color属性。</span><br>  <span class="hljs-string">例：</span><br><br>    <span class="hljs-string">$(&#x27;#fullpage&#x27;).fullpage(&#123;</span><br>    <span class="hljs-attr">sectionsColor:</span> [<span class="hljs-string">&#x27;#f2f2f2&#x27;</span>, <span class="hljs-string">&#x27;#4BBFC3&#x27;</span>, <span class="hljs-string">&#x27;#7BAABE&#x27;</span>, <span class="hljs-string">&#x27;whitesmoke&#x27;</span>, <span class="hljs-string">&#x27;#000&#x27;</span>]<span class="hljs-string">,</span><br>    <span class="hljs-string">&#125;);</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-string">anchors：（默认[]）定义要在每个部分的URL上显示的锚链接（#example）。</span> <span class="hljs-string">锚点的值应该是独一无二的。</span> <span class="hljs-string">数组中的锚的位置将限定锚被应用于哪些部分。</span> <span class="hljs-string">（第二部分的第二个位置等等）。</span> <span class="hljs-string">通过浏览器也可以使用锚点向前和向后导航。</span> <span class="hljs-string">该选项还允许用户为特定的部分或幻灯片添加书签。</span> <span class="hljs-string">注意！锚点不能与站点上的任何ID元素（或IE的NAME元素）具有相同的值。</span><br>  <span class="hljs-string">现在可以通过使用属性data-anchor直接在HTML结构中定义锚点，如此处所述。</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">lockAnchors：（默认为false）确定URL中的锚是否在库中完全有效。</span> <span class="hljs-string">您仍然可以在函数和回调内部使用锚，但是它们在滚动网站时不起任何作用。</span> <span class="hljs-string">如果你想在URL中使用锚点来将fullPage.js和其他插件结合起来，那就很有用。</span><br><br><span class="hljs-string">重要理解</span> <span class="hljs-string">anchors选项数组中的值通过在标记中的位置直接关联到具有.section</span> <span class="hljs-string">类的元素是有帮助的。</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-string">easing:(默认easeInOutCubic）定义用于垂直和水平滚动的过渡效果。</span><br>  <span class="hljs-string">它需要文件vendors</span> <span class="hljs-string">/</span> <span class="hljs-string">jquery.easings.min.js或jQuery</span> <span class="hljs-string">UI来使用它的转换。</span> <span class="hljs-string">其他库可以用来代替。</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">easingcss3:</span> <span class="hljs-string">（默认ease）定义在使用css3：true的情况下使用的过渡效果。</span> <span class="hljs-string">你可以使用预定义的（比如linear，ease-out</span> <span class="hljs-string">...）或者使用立方bezier功能创建你自己的。</span> <span class="hljs-string">你可能想使用Matthew</span> <span class="hljs-string">Lein</span> <span class="hljs-string">CSS缓动动画工具。</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">loopTop:（默认为false）定义在第一节中向上滚动是否滚动到最后一个。</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">loopBottom:</span> <span class="hljs-string">（默认为false）定义滚动到最后一节是否应该滚动到第一个。</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">loopHorizontal:（默认为true）定义水平滑块是否在到达上一张或上一张幻灯片后循环。</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">css3:</span> <span class="hljs-string">（默认true）。</span> <span class="hljs-string">定义是否使用JavaScript或CSS3变换在部分和幻灯片中滚动。</span> <span class="hljs-string">有助于通过支持CSS3的浏览器加速平板电脑和移动设备的移动。</span> <span class="hljs-string">如果此选项设置为`true，并且浏览器不支持CSS3，则将使用jQuery后备。</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">autoScrolling:</span> <span class="hljs-string">（默认为true）定义是使用“自动”滚动还是“正常”滚动。</span> <span class="hljs-string">它同时也影响了平板电脑和移动电话中浏览器/设备窗口部分适配的方式。</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">fitToSection:</span> <span class="hljs-string">（默认为true）确定是否节放入视口中。</span> <span class="hljs-string">当设置为`true时，当前活动节将始终填充整个视口。</span> <span class="hljs-string">否则，用户可以自由地停留在一个节的中间（何时）</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">fitToSectionDelay:</span> <span class="hljs-string">（默认1000）。</span> <span class="hljs-string">如果fitToSection设置为true，则延迟</span><br>  <span class="hljs-string">以毫秒为单位进行拟合。</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">scrollBar:</span> <span class="hljs-string">（默认false）确定是否使用站点的滚动条。</span> <span class="hljs-string">在使用滚动条的情况下，autoScrolling功能仍将按预期工作。</span> <span class="hljs-string">用户也可以使用滚动条自由滚动网站，当滚动完成时，fullPage.js将适配屏幕上的部分。</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">paddingTop:</span> <span class="hljs-string">（默认0）用数值和度量（paddingTop：&#x27;10px&#x27;，paddingTop：&#x27;10em&#x27;...）定义每个部分的顶部填充。</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">paddingBottom:</span> <span class="hljs-string">（默认为0）用数值和度量（paddingBottom：&#x27;10px&#x27;，paddingBottom：&#x27;10em&#x27;...）定义每个部分的底部填充。</span> <span class="hljs-string">使用固定页脚的情况下会有用。</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">fixedElements:</span> <span class="hljs-string">（默认null）定义当使用css3选项保持固定时，哪些元素将从插件的滚动结构中移除。</span> <span class="hljs-string">它需要一个字符串与这些元素的jQuery选择器。</span> <span class="hljs-string">（例如：fixedElements：&#x27;＃element1，.element2&#x27;）</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">normalScrollElements:</span> <span class="hljs-string">（默认null）如果你想在滚动某些元素时避免自动滚动，这是你需要使用的选项。</span> <span class="hljs-string">（地图，滚动div等有用）它需要一个字符串与这些元素的jQuery选择器。</span> <span class="hljs-string">（例如：normalScrollElements：&#x27;＃element1，.element2&#x27;）。</span> <span class="hljs-string">此选项不应该应用于任何节/幻灯片元素本身。</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">normalScrollElementTouchThreshold :</span> <span class="hljs-string">（默认5）定义html节点树的跳数阈值Fullpage将测试normalScrollElements是否匹配，以允许在触摸设备上的div的滚动功能。</span> <span class="hljs-string">（例如：normalScrollElementTouchThreshold：3`）</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">bigSectionsDestination:</span> <span class="hljs-string">（默认null）定义如何滚动到比视口大的部分。</span> <span class="hljs-string">默认情况下，如果您来自目的地上方的部分，fullPage.js将滚动到顶部，如果您来自目的地之下的部分，则会滚动到底部。</span> <span class="hljs-string">可能的值是top，bottom，null。</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">keyboardScrolling:</span> <span class="hljs-string">（默认为true）定义是否可以使用键盘浏览内容。</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">touchSensitivity:</span> <span class="hljs-string">（默认5）定义浏览器窗口宽度/高度的百分比，以及滑动到下一个节/幻灯片必须测量的距离</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">continuousVertical:（默认为false）定义是否在最后一个区段向下滚动，或是否应该向下滚动到第一个区段，或如果在第一个区段向上滚动时是否应该滚动到最后一个区段。</span> <span class="hljs-string">不兼容loopTop，loopBottom或站点中存在的任何滚动条（scrollBar：true或autoScrolling：false）。</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">continuousHorizontal:</span> <span class="hljs-string">（默认false）fullpage.js的扩展。</span> <span class="hljs-string">定义在最后一张幻灯片中向右滑动是否应该向右滑动到第一张幻灯片，或者如果在第一张幻灯片中向左滚动是否应向左滑动到最后一张。</span> <span class="hljs-string">不兼容loopHorizontal。</span> <span class="hljs-string">需要fullpage.js&gt;</span> <span class="hljs-string">=</span> <span class="hljs-number">2.8</span><span class="hljs-number">.3</span><span class="hljs-string">。</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">scrollHorizontally:（默认false）fullpage.js的扩展。</span> <span class="hljs-string">定义是否使用鼠标滚轮或触控板在滑块内水平滑动。</span> <span class="hljs-string">讲故事的理想选择。</span> <span class="hljs-string">需要fullpage.js&gt;</span> <span class="hljs-string">=</span> <span class="hljs-number">2.8</span><span class="hljs-number">.3</span><span class="hljs-string">。</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">interlockedSlides:</span> <span class="hljs-string">（默认false）fullpage.js的扩展。</span> <span class="hljs-string">确定移动一个水平滑块是否会强制滑块在其他段落中的滑动方向相同。</span> <span class="hljs-string">可能的值是true，false或带有互锁部分的数组。</span> <span class="hljs-string">例如[1,3,5]`从1开始。需要fullpage.js&gt;</span> <span class="hljs-string">=</span> <span class="hljs-number">2.8</span><span class="hljs-number">.3</span><span class="hljs-string">。</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">dragAndMove:</span> <span class="hljs-string">（默认false）fullpage.js的扩展。</span> <span class="hljs-string">启用或禁用鼠标或手指拖动和滑动部分和幻灯片。</span> <span class="hljs-string">需要fullpage.js&gt;</span> <span class="hljs-string">=</span> <span class="hljs-number">2.8</span><span class="hljs-number">.9</span><span class="hljs-string">。</span> <span class="hljs-string">可能的值是：</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">true:</span> <span class="hljs-string">启用该功能。</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">false:</span> <span class="hljs-string">禁用该功能。</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">vertical:</span> <span class="hljs-string">只能在垂直情况下启用该功能。</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">horizontal:</span> <span class="hljs-string">只能在水平情况下启用该功能。</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">fingersonly:</span> <span class="hljs-string">仅启用触摸设备的功能。</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">mouseonly:</span> <span class="hljs-string">仅启用桌面设备的功能（鼠标和触控板）。</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">offsetSections:</span> <span class="hljs-string">（默认false）fullpage.js的扩展。</span> <span class="hljs-string">提供基于百分比使用非全屏幕部分的方法。</span> <span class="hljs-string">通过显示下一部分或上一部分的内容，向访问者显示网站中的更多内容的理想选择。</span> <span class="hljs-string">需要fullPage.js&gt;</span> <span class="hljs-string">=</span> <span class="hljs-number">2.8</span><span class="hljs-number">.8</span><br>  <span class="hljs-string">要定义每个部分的百分比，必须使用属性data-percentage。</span> <span class="hljs-string">可以通过在属性data-centered中使用布尔值来确定视口中该部分的居中（如果未指定，则默认为true）。</span> <span class="hljs-string">例如：</span><br><br>        <span class="hljs-string">&lt;div</span> <span class="hljs-string">class=&quot;section&quot;</span> <span class="hljs-string">data-percentage=&quot;80&quot;</span> <span class="hljs-string">data-centered=&quot;true&quot;&gt;</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-attr">resetSliders:</span> <span class="hljs-string">（默认false）。</span> <span class="hljs-string">fullpage.js的扩展。</span> <span class="hljs-string">定义是否在离开节后重置每个滑块。</span> <span class="hljs-string">需要fullpage.js&gt;</span> <span class="hljs-string">=</span> <span class="hljs-number">2.8</span><span class="hljs-number">.3</span><span class="hljs-string">。</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">fadingEffect:</span> <span class="hljs-string">（默认false）。</span> <span class="hljs-string">fullpage.js的扩展。</span> <span class="hljs-string">定义是否使用淡入淡出效果，而不是默认的滚动效果。</span> <span class="hljs-string">可能的值是true，false，sections，slideides。</span> <span class="hljs-string">因此，可以垂直或水平地应用，或者同时应用于两者。</span> <span class="hljs-string">需要fullpage.js&gt;</span> <span class="hljs-string">=</span> <span class="hljs-number">2.8</span><span class="hljs-number">.6</span><span class="hljs-string">。</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">animateAnchor:</span> <span class="hljs-string">（默认true）定义给定锚点（＃）的站点的负载是否会随着动画滚动到其目的地或直接加载给定部分。</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">recordHistory:</span> <span class="hljs-string">（默认为true）定义是否将网站的状态推送到浏览器的历史记录。</span> <span class="hljs-string">设置为true时，网站的每个部分/幻灯片将作为新页面，浏览器的后退和前进按钮将滚动部分/幻灯片以达到网站的上一个或下一个状态。</span> <span class="hljs-string">当设置为false时，URL将保持更改，但不会影响浏览器的历史记录。</span> <span class="hljs-string">使用autoScrolling：false时，该选项会自动关闭。</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">menu:</span> <span class="hljs-string">（默认false）选择器可以用来指定菜单链接到部分。</span> <span class="hljs-string">这样，节的滚动将使用`active类激活菜单中的相应元素。</span><br>  <span class="hljs-string">这将不会生成菜单，而只是将`active类添加到给定菜单中的元素，并带有相应的锚链接。</span><br>  <span class="hljs-string">为了将菜单的元素与各个部分相链接，将需要一个HTML</span> <span class="hljs-number">5</span><span class="hljs-string">数据标签（data-menuanchor）来使用这些部分中使用的锚链接。</span> <span class="hljs-string">例：</span><br><br>    <span class="hljs-string">&lt;ul</span> <span class="hljs-string">id=&quot;myMenu&quot;&gt;</span><br>    <span class="hljs-string">&lt;li</span> <span class="hljs-string">data-menuanchor=&quot;firstPage&quot;</span> <span class="hljs-string">class=&quot;active&quot;&gt;&lt;a</span> <span class="hljs-string">href=&quot;#firstPage&quot;&gt;第一节&lt;/a&gt;&lt;/li&gt;</span><br>    <span class="hljs-string">&lt;li</span> <span class="hljs-string">data-menuanchor=&quot;secondPage&quot;&gt;&lt;a</span> <span class="hljs-string">href=&quot;#secondPage&quot;&gt;第二节&lt;/a&gt;&lt;/li&gt;</span><br>    <span class="hljs-string">&lt;li</span> <span class="hljs-string">data-menuanchor=&quot;thirdPage&quot;&gt;&lt;a</span> <span class="hljs-string">href=&quot;#thirdPage&quot;&gt;第三节&lt;/a&gt;&lt;/li&gt;</span><br>    <span class="hljs-string">&lt;li</span> <span class="hljs-string">data-menuanchor=&quot;fourthPage&quot;&gt;&lt;a</span> <span class="hljs-string">href=&quot;#fourthPage&quot;&gt;第四节&lt;/a&gt;&lt;/li&gt;</span><br>    <span class="hljs-string">&lt;/ul&gt;</span><br><br>    <span class="hljs-string">$(&#x27;#fullpage&#x27;).fullpage(&#123;</span><br>    <span class="hljs-attr">anchors:</span> [<span class="hljs-string">&#x27;firstPage&#x27;</span>, <span class="hljs-string">&#x27;secondPage&#x27;</span>, <span class="hljs-string">&#x27;thirdPage&#x27;</span>, <span class="hljs-string">&#x27;fourthPage&#x27;</span>, <span class="hljs-string">&#x27;lastPage&#x27;</span>]<span class="hljs-string">,</span><br>    <span class="hljs-attr">menu:</span> <span class="hljs-string">&#x27;#myMenu&#x27;</span><br>    <span class="hljs-string">&#125;);</span><br><br><span class="hljs-string">注意：</span> <span class="hljs-string">菜单元素应放置在整页包装外，以避免使用css3：true时出现问题。</span> <span class="hljs-string">否则它会被插件本身附加到body。</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-attr">navigation:</span> <span class="hljs-string">（默认false）如果设置为true，则会显示一个由小圆圈组成的导航栏。</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">navigationPosition:</span> <span class="hljs-string">（默认none）可以设置为left或right，并定义导航栏显示的位置（如果使用的话）。</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">navigationTooltips:</span> <span class="hljs-string">（默认为[]）定义要使用导航圈的工具提示。</span> <span class="hljs-string">例如：navigationTooltips：[&#x27;firstSlide&#x27;，&#x27;secondSlide&#x27;]。</span> <span class="hljs-string">如果您愿意，也可以在每个部分中使用属性data-tooltip来定义它们。</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">showActiveTooltip:</span> <span class="hljs-string">（默认为false）显示垂直导航中主动查看节的持久工具提示。</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">slidesNavigation:</span> <span class="hljs-string">（默认为false）如果设置为true，则会显示一个导航栏，该导航栏由站点上每个横向滑块的小圆圈组成。</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">slidesNavPosition:</span> <span class="hljs-string">（默认bottom）定义滑块的横向导航栏的位置。</span> <span class="hljs-string">值为top和bottom。</span> <span class="hljs-string">您可能需要修改CSS样式以确定从顶部或底部以及任何其他样式（如颜色）的距离。</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">scrollOverflow:</span> <span class="hljs-string">（默认为false）（与IE</span> <span class="hljs-number">8</span><span class="hljs-string">不兼容）定义在内容大于它的高度的情况下是否为节/幻灯片创建滚动。</span> <span class="hljs-string">当设置为true时，您的内容将被插件包装。</span> <span class="hljs-string">考虑使用委托或在afterRender回调中加载其他脚本。</span><br>  <span class="hljs-string">如果设置为true，则需要库scrolloverflow.min.js。</span> <span class="hljs-string">这个文件必须在fullPage.js插件之前而非jQuery加载。</span><br>  <span class="hljs-string">例如：</span><br><br>    <span class="hljs-string">&lt;script</span> <span class="hljs-string">type=&quot;text/javascript&quot;</span> <span class="hljs-string">src=&quot;vendors/scrolloverflow.min.js&quot;&gt;&lt;/script&gt;</span><br>    <span class="hljs-string">&lt;script</span> <span class="hljs-string">type=&quot;text/javascript&quot;</span> <span class="hljs-string">src=&quot;jquery.fullPage.js&quot;&gt;&lt;/script&gt;</span><br><br><span class="hljs-string">为了防止fullpage.js在某些节或幻灯片中创建滚动条，请使用fp-noscroll类。</span> <span class="hljs-string">例如：</span> <span class="hljs-string">&lt;div</span> <span class="hljs-string">class=&quot;section</span> <span class="hljs-string">fp-noscroll&quot;&gt;</span><br><br><span class="hljs-string">在section元素中使用fp-auto-height-responsive时，您也可以防止scrolloverflow应用于响应模式。</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-string">scrollOverflowReset:（默认false）fullpage.js的扩展。</span> <span class="hljs-string">如果设置为true，当离开另一个垂直节时，使用滚动条向上滚动节/幻灯片的内容。</span> <span class="hljs-string">这样，即使从下面的节滚动，节/幻灯片也会始终显示其内容的开始。</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">scrollOverflowOptions:</span> <span class="hljs-string">当使用scrollOverflow：true时，fullpage.js将使用iScroll.js库文件的分叉和修改版本。</span> <span class="hljs-string">您可以通过为要使用的iScroll.js选项提供fullpage.js来自定义滚动行为。</span> <span class="hljs-string">查看它的文档了解更多信息。</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">sectionSelector:</span> <span class="hljs-string">（默认.section）定义用于插件部分的jQuery选择器。</span> <span class="hljs-string">有时可能需要更改，以避免与使用与fullpage.js相同的选择器的其他插件的问题。</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">slideSelector:</span> <span class="hljs-string">（默认.slide）定义用于插件幻灯片的jQuery选择器。</span> <span class="hljs-string">有时可能需要更改，以避免与使用与fullpage.js相同的选择器的其他插件的问题。</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">responsiveWidth:</span> <span class="hljs-string">（默认0）一个正常的滚动（autoScrolling：false）将在定义的宽度下以像素为单位使用。</span> <span class="hljs-string">如果用户希望将自己的响应式CSS用于身体标记，则会将fp-responsive类添加到身体标记中。</span> <span class="hljs-string">例如，如果设置为900，则每当浏览器的宽度小于900时，插件将像正常站点一样滚动。</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">responsiveHeight:</span> <span class="hljs-string">（默认0）一个正常的滚动（autoScrolling：false）将在定义的高度下以像素为单位使用。</span> <span class="hljs-string">如果用户希望将自己的响应式CSS用于身体标记，则会将fp-responsive类添加到身体标记中。</span> <span class="hljs-string">例如，如果设置为900，则每当浏览器的高度小于900时，插件将像正常站点一样滚动。</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">responsiveSlides:</span> <span class="hljs-string">（默认false）fullpage.js的扩展。</span> <span class="hljs-string">设置为true时，在响应模式被触发时，幻灯片将变成垂直节。</span> <span class="hljs-string">（通过使用上面详述的responsiveWidth或responsiveHeight选项）。</span> <span class="hljs-string">需要fullpage.js&gt;</span> <span class="hljs-string">=</span> <span class="hljs-number">2.8</span><span class="hljs-number">.5</span><span class="hljs-string">。</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">parallax:</span> <span class="hljs-string">（默认false）fullpage.js的扩展。</span> <span class="hljs-string">定义是否在节/幻灯片上使用视差背景效果。</span> <span class="hljs-string">详细了解如何应用视差选项.</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">parallaxOptions:</span> <span class="hljs-string">（默认：&#123;type：&#x27;reveal&#x27;，percent：62，property：&#x27;translate&#x27;&#125;）。</span> <span class="hljs-string">允许在使用选项parallax:true时配置视差背景效果的参数。</span> <span class="hljs-string">详细了解如何应用视差选项.</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">lazyLoading:</span> <span class="hljs-string">（默认true）延迟加载默认是激活的，这意味着它会延迟加载包含属性data-src的任何媒体元素，详见Lazy</span> <span class="hljs-string">Loading</span> <span class="hljs-string">docs。</span> <span class="hljs-string">如果你想使用任何其他的后加载库，你可以禁用这个fullpage.js功能。</span><br><br><span class="hljs-string">方法</span><br><br><span class="hljs-string">你可以在这里看到它们</span><br><br><span class="hljs-string">moveSectionUp()</span><br><br><span class="hljs-string">示例</span> <span class="hljs-string">向上滚动一节：</span><br><br>    <span class="hljs-string">$.fn.fullpage.moveSectionUp();</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-string">moveSectionDown()</span><br><br><span class="hljs-string">示例</span> <span class="hljs-string">向下滚动一节：</span><br><br>    <span class="hljs-string">$.fn.fullpage.moveSectionDown();</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-string">moveTo(第节,</span> <span class="hljs-string">幻灯片)</span><br><br><span class="hljs-string">示例</span> <span class="hljs-string">将页面滚动到给定节并滑动。</span> <span class="hljs-string">第一张幻灯片，默认情况下，将有索引0。</span><br><br>    <span class="hljs-string">/*滚动到锚链接`firstSlide`和第二张幻灯片的部分</span> <span class="hljs-string">*/</span><br>    <span class="hljs-string">$.fn.fullpage.moveTo(&#x27;firstSlide&#x27;,</span> <span class="hljs-number">2</span><span class="hljs-string">);</span><br><br>    <span class="hljs-string">//滚动到网站的第三节</span><br>    <span class="hljs-string">$.fn.fullpage.moveTo(3,</span> <span class="hljs-number">0</span><span class="hljs-string">);</span><br>    <br>    <span class="hljs-string">//这是一样的</span><br>    <span class="hljs-string">$.fn.fullpage.moveTo(3);</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-string">silentMoveTo(第节,</span> <span class="hljs-string">幻灯片)</span><br><br><span class="hljs-string">示例</span> <span class="hljs-string">与moveTo完全相同，但是在这种情况下，它将执行没有动画的滚动。</span> <span class="hljs-string">直接跳到目的地。</span><br><br>    <span class="hljs-string">/*滚动到锚链接`firstSlide`和第二张幻灯片的部分</span> <span class="hljs-string">*/</span><br>    <span class="hljs-string">$.fn.fullpage.silentMoveTo(&#x27;firstSlide&#x27;,</span> <span class="hljs-number">2</span><span class="hljs-string">);</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-string">moveSlideRight()</span><br><br><span class="hljs-string">示例</span> <span class="hljs-string">将当前节的水平滑块滚动到下一张幻灯片：</span><br><br>    <span class="hljs-string">$.fn.fullpage.moveSlideRight();</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-string">moveSlideLeft()</span><br><br><span class="hljs-string">示例</span> <span class="hljs-string">将当前节的水平滑块滚动到上一张幻灯片:</span><br><br>    <span class="hljs-string">$.fn.fullpage.moveSlideLeft();</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-string">setAutoScrolling(boolean)</span><br><br><span class="hljs-string">示例</span> <span class="hljs-string">实时设置滚动配置。</span><br><br><span class="hljs-string">定义页面滚动行为的方式。</span> <span class="hljs-string">如果设置为true，则将使用&quot;自动&quot;滚动，否则将使用站点的&quot;手动&quot;或&quot;正常&quot;滚动。</span><br><br>    <span class="hljs-string">$.fn.fullpage.setAutoScrolling(false);</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-string">setFitToSection(boolean)</span><br><br><span class="hljs-string">示例</span> <span class="hljs-string">设置选项fitToSection的值，确定是否适合屏幕中的部分。</span><br><br>    <span class="hljs-string">$.fn.fullpage.setFitToSection(false);</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-string">fitToSection()</span><br><br><span class="hljs-string">示例</span> <span class="hljs-string">滚动到最近的适合视口的活动节。</span><br><br>    <span class="hljs-string">$.fn.fullpage.fitToSection();</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-string">setLockAnchors(boolean)</span><br><br><span class="hljs-string">示例</span> <span class="hljs-string">设置选项lockAnchors的值，确定锚是否在URL中有效。</span><br><br>    <span class="hljs-string">$.fn.fullpage.setLockAnchors(false);</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-string">setAllowScrolling(boolean,</span> [<span class="hljs-string">directions</span>]<span class="hljs-string">)</span><br><br><span class="hljs-string">示例</span> <span class="hljs-string">添加或删除通过使用鼠标滚轮/触控板或触摸手势（默认处于活动状态）滚动节/幻灯片的可能性。</span> <span class="hljs-string">注意这不会禁用键盘滚动。</span> <span class="hljs-string">您将需要使用setKeyboardScrolling。</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-string">directions：（可选参数）允许的值：all，up，down，left，right或者它们的组合，用down，right等逗号分隔。</span> <span class="hljs-string">它定义了滚动将被启用或禁用的方向。</span><br><br>    <span class="hljs-string">//禁用滚动</span><br>    <span class="hljs-string">$.fn.fullpage.setAllowScrolling(false);</span><br>    <br>    <span class="hljs-string">//禁用向下滚动</span><br>    <span class="hljs-string">$.fn.fullpage.setAllowScrolling(false,</span> <span class="hljs-string">&#x27;down&#x27;</span><span class="hljs-string">);</span><br>    <br>    <span class="hljs-string">//禁用向下和向右滚动</span><br>    <span class="hljs-string">$.fn.fullpage.setAllowScrolling(false,</span> <span class="hljs-string">&#x27;down, right&#x27;</span><span class="hljs-string">);</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-string">setKeyboardScrolling(boolean,</span> [<span class="hljs-string">directions</span>]<span class="hljs-string">)</span><br><br><span class="hljs-string">示例</span> <span class="hljs-string">添加或删除通过使用键盘（默认情况下处于活动状态）滚动节的可能性。</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-attr">directions:</span> <span class="hljs-string">（可选参数）允许的值：all，up，down，left，right或者它们的组合，用down，right等逗号分隔。</span> <span class="hljs-string">它定义了滚动将被启用或禁用的方向。</span><br><br>    <span class="hljs-string">//禁用所有键盘滚动</span><br>    <span class="hljs-string">$.fn.fullpage.setKeyboardScrolling(false);</span><br>    <br>    <span class="hljs-string">//禁用键盘向下滚动</span><br>    <span class="hljs-string">$.fn.fullpage.setKeyboardScrolling(false,</span> <span class="hljs-string">&#x27;down&#x27;</span><span class="hljs-string">);</span><br>    <br>    <span class="hljs-string">//禁用键盘向下和向右滚动</span><br>    <span class="hljs-string">$.fn.fullpage.setKeyboardScrolling(false,</span> <span class="hljs-string">&#x27;down, right&#x27;</span><span class="hljs-string">);</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-string">setRecordHistory(boolean)</span><br><br><span class="hljs-string">示例</span> <span class="hljs-string">定义是否在URL中记录每个散列更改的历史记录。</span><br><br>    <span class="hljs-string">$.fn.fullpage.setRecordHistory(false);</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-string">setScrollingSpeed(milliseconds)</span><br><br><span class="hljs-string">示例</span> <span class="hljs-string">定义以毫秒为单位的滚动速度。</span><br><br>    <span class="hljs-string">$.fn.fullpage.setScrollingSpeed(700);</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-string">destroy(type)</span><br><br><span class="hljs-string">示例</span> <span class="hljs-string">销毁插件事件以及可选的HTML标记和样式。使用AJAX加载内容时的理想选择。</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">（可选参数）可以为空或all。</span> <span class="hljs-string">如果all被传递，fullpage.js使用的HTML标记和样式将被删除。</span> <span class="hljs-string">这样，原始的HTML标记，即任何插件修改之前使用的标记都将被保留。</span><br><br>    <span class="hljs-string">//销毁由fullPage.js创建的所有Javascript事件（URL中的卷动，hashchange）</span><br>    <span class="hljs-string">$.fn.fullpage.destroy();</span><br>    <br>    <span class="hljs-string">//销毁所有的JavaScript事件，以及在原始HTML标记中由fullPage.js所做的任何修改。</span><br>    <span class="hljs-string">$.fn.fullpage.destroy(&#x27;all&#x27;);</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-string">reBuild()</span><br><br><span class="hljs-string">更新DOM结构以适应新的窗口大小或其内容。</span><br><br>  <span class="hljs-string">非常适合与AJAX调用或站点的DOM结构中的外部更改结合使用，特别是在使用scrollOverflow：true时。</span><br><br>    <span class="hljs-string">$.fn.fullpage.reBuild();</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-string">setResponsive(boolean)</span><br><br><span class="hljs-string">示例</span> <span class="hljs-string">设置页面的响应模式。</span> <span class="hljs-string">当设置为true时，自动滚动将被关闭，结果与responsiveWidth或responsiveHeight`选项被触发时的结果完全相同。</span><br><br>    <span class="hljs-string">$.fn.fullpage.setResponsive(true);</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-string">responsiveSlides.toSections()</span><br><br><span class="hljs-string">fullpage.js的扩展。</span> <span class="hljs-string">需要fullpage.js&gt;</span> <span class="hljs-string">=</span> <span class="hljs-number">2.8</span><span class="hljs-number">.5</span><span class="hljs-string">。将水平幻灯片变成垂直节。</span><br><br>    <span class="hljs-string">$.fn.fullpage.responsiveSlides.toSections();</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-string">responsiveSlides.toSlides()</span><br><br><span class="hljs-string">fullpage.js的扩展。</span> <span class="hljs-string">需要fullpage.js&gt;</span> <span class="hljs-string">=</span> <span class="hljs-number">2.8</span><span class="hljs-number">.5</span><span class="hljs-string">。将原始幻灯片（现转换为垂直节）重新转换为水平幻灯片。</span><br><br>    <span class="hljs-string">$.fn.fullpage.responsiveSlides.toSlides();</span><br><br><span class="hljs-string">Callbacks</span><br><br><span class="hljs-string">示例</span> <span class="hljs-string">你可以在这里看到他们。</span><br><br><span class="hljs-string">afterLoad</span> <span class="hljs-string">(anchorLink,</span> <span class="hljs-string">index)</span><br><br><span class="hljs-string">滚动结束之后，一旦加载了节，就会触发回调。参数：</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-string">anchorLink：该部分对应的anchorLink。</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">`index：该部分的索引。</span> <span class="hljs-string">从1开始。</span><br><br><span class="hljs-string">如果在插件中没有定义anchorLink，那么index参数将是唯一使用的参数。</span><br><br><span class="hljs-string">例如：</span><br><br>    <span class="hljs-string">$(&#x27;#fullpage&#x27;).fullpage(&#123;</span><br>    <span class="hljs-attr">anchors:</span> [<span class="hljs-string">&#x27;firstPage&#x27;</span>, <span class="hljs-string">&#x27;secondPage&#x27;</span>, <span class="hljs-string">&#x27;thirdPage&#x27;</span>, <span class="hljs-string">&#x27;fourthPage&#x27;</span>, <span class="hljs-string">&#x27;lastPage&#x27;</span>]<span class="hljs-string">,</span><br>    <br>    <span class="hljs-attr">afterLoad:</span> <span class="hljs-string">function(anchorLink,</span> <span class="hljs-string">index)&#123;</span><br>    <span class="hljs-string">var</span> <span class="hljs-string">loadedSection</span> <span class="hljs-string">=</span> <span class="hljs-string">$(this);</span><br>    <br>    <span class="hljs-string">//使用</span> <span class="hljs-string">index</span><br>    <span class="hljs-string">if(index</span> <span class="hljs-string">==</span> <span class="hljs-number">3</span><span class="hljs-string">)&#123;</span><br>    <span class="hljs-string">alert(&quot;第3节停止加载&quot;);</span><br>    <span class="hljs-string">&#125;</span><br>    <br>    <span class="hljs-string">//使用</span> <span class="hljs-string">anchorLink</span><br>    <span class="hljs-string">if(anchorLink</span> <span class="hljs-string">==</span> <span class="hljs-string">&#x27;secondSlide&#x27;</span><span class="hljs-string">)&#123;</span><br>    <span class="hljs-string">alert(&quot;第2节停止加载&quot;);</span><br>    <span class="hljs-string">&#125;</span><br>    <span class="hljs-string">&#125;</span><br>    <span class="hljs-string">&#125;);</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-string">onLeave</span> <span class="hljs-string">(index,</span> <span class="hljs-string">nextIndex,</span> <span class="hljs-string">direction)</span><br><br><span class="hljs-string">一旦用户离开某个节，过渡到新节，就会触发此回调。</span><br><br><span class="hljs-string">返回“false”将在移动发生之前取消移动。</span><br><br><span class="hljs-string">参数：</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-string">index离开节的索引。</span> <span class="hljs-string">从1开始。</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">nextIndex：目标节的索引。</span> <span class="hljs-string">从1开始。</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">direction：取决于滚动方向，取值为up或down。</span><br><br><span class="hljs-string">例如：</span><br><br>    <span class="hljs-string">$(&#x27;#fullpage&#x27;).fullpage(&#123;</span><br>    <span class="hljs-attr">onLeave:</span> <span class="hljs-string">function(index,</span> <span class="hljs-string">nextIndex,</span> <span class="hljs-string">direction)&#123;</span><br>    <span class="hljs-string">var</span> <span class="hljs-string">leavingSection</span> <span class="hljs-string">=</span> <span class="hljs-string">$(this);</span><br>    <br>    <span class="hljs-string">//离开第二节后</span><br>    <span class="hljs-string">if(index</span> <span class="hljs-string">==</span> <span class="hljs-number">2</span> <span class="hljs-string">&amp;&amp;</span> <span class="hljs-string">direction</span> <span class="hljs-string">==&#x27;down&#x27;)&#123;</span><br>    <span class="hljs-string">alert(&quot;前往第3节！&quot;);</span><br>    <span class="hljs-string">&#125;</span><br>    <br>    <span class="hljs-string">else</span> <span class="hljs-string">if(index</span> <span class="hljs-string">==</span> <span class="hljs-number">2</span> <span class="hljs-string">&amp;&amp;</span> <span class="hljs-string">direction</span> <span class="hljs-string">==</span> <span class="hljs-string">&#x27;up&#x27;</span><span class="hljs-string">)&#123;</span><br>    <span class="hljs-string">alert(&quot;前往第1节！&quot;);</span><br>    <span class="hljs-string">&#125;</span><br>    <span class="hljs-string">&#125;</span><br>    <span class="hljs-string">&#125;);</span><br><br><span class="hljs-string">触发之前取消滚动</span><br><br><span class="hljs-string">您可以通过在onLeave回调函数上返回`false来取消滚动：</span><br><br>    <span class="hljs-string">$(&#x27;#fullpage&#x27;).fullpage(&#123;</span><br>    <span class="hljs-attr">onLeave:</span> <span class="hljs-string">function(index,</span> <span class="hljs-string">nextIndex,</span> <span class="hljs-string">direction)&#123;</span><br>    <span class="hljs-string">//如果目标是第三节，它将不会滚动</span><br>    <span class="hljs-string">if(nextIndex</span> <span class="hljs-string">==</span> <span class="hljs-number">3</span><span class="hljs-string">)&#123;</span><br>    <span class="hljs-string">return</span> <span class="hljs-literal">false</span><span class="hljs-string">;</span><br>    <span class="hljs-string">&#125;</span><br>    <span class="hljs-string">&#125;</span><br>    <span class="hljs-string">&#125;);</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-string">afterRender()</span><br><br><span class="hljs-string">这个回调在页面结构生成后立即被触发。</span> <span class="hljs-string">这是您要用来初始化其他插件的回调函数，或者触发任何需要文档准备就绪的代码（因为这个插件修改了DOM来创建结果的结构）。</span> <span class="hljs-string">请参阅常见问题了解更多信息。</span><br><br><span class="hljs-string">例如：</span><br><br>    <span class="hljs-string">$(&#x27;#fullpage&#x27;).fullpage(&#123;</span><br>    <span class="hljs-attr">afterRender:</span> <span class="hljs-string">function()&#123;</span><br>    <span class="hljs-string">var</span> <span class="hljs-string">pluginContainer</span> <span class="hljs-string">=</span> <span class="hljs-string">$(this);</span><br>    <span class="hljs-string">alert(&quot;DOM结构已完成&quot;);</span><br>    <span class="hljs-string">&#125;</span><br>    <span class="hljs-string">&#125;);</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-string">afterResize()</span><br><br><span class="hljs-string">调整浏览器窗口大小后，会触发此回调。</span> <span class="hljs-string">就在节被调整之后。</span><br><br><span class="hljs-string">例如：</span><br><br>    <span class="hljs-string">$(&#x27;#fullpage&#x27;).fullpage(&#123;</span><br>    <span class="hljs-attr">afterResize:</span> <span class="hljs-string">function()&#123;</span><br>    <span class="hljs-string">var</span> <span class="hljs-string">pluginContainer</span> <span class="hljs-string">=</span> <span class="hljs-string">$(this);</span><br>    <span class="hljs-string">alert(&quot;节已重新调整大小&quot;);</span><br>    <span class="hljs-string">&#125;</span><br>    <span class="hljs-string">&#125;);</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-string">afterResponsive(isResponsive)</span><br><br><span class="hljs-string">在fullpage.js从正常模式变为响应模式或从响应模式变为正常模式之后，此回调将被触发。</span><br><br><span class="hljs-string">参数：</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-string">isResponsive：布尔值，用于确定是否进入响应模式（true）或返回正常模式（false）。</span><br><br><span class="hljs-string">例如：</span><br><br>    <span class="hljs-string">$(&#x27;#fullpage&#x27;).fullpage(&#123;</span><br>    <span class="hljs-attr">afterResponsive:</span> <span class="hljs-string">function(isResponsive)&#123;</span><br>    <span class="hljs-string">alert(&quot;是否响应&quot;</span> <span class="hljs-string">+</span> <span class="hljs-string">isResponsive);</span><br>    <span class="hljs-string">&#125;</span><br>    <span class="hljs-string">&#125;);</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-string">afterSlideLoad</span> <span class="hljs-string">(anchorLink,</span> <span class="hljs-string">index,</span> <span class="hljs-string">slideAnchor,</span> <span class="hljs-string">slideIndex)</span><br><br><span class="hljs-string">滚动结束后，加载一个节的幻灯片后触发回调。参数：</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-string">anchorLink：该节对应的anchorLink。</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">index：该节的索引。</span> <span class="hljs-string">从1开始。</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">slideAnchor：与幻灯片对应的锚点（如果有的话）</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">slideIndex：幻灯片的索引。</span> <span class="hljs-string">从1开始（默认幻灯片不计算为幻灯片，但作为一个节）</span><br><br><span class="hljs-string">如果没有为幻灯片或幻灯片定义anchorLinks，那么slideIndex参数将是唯一使用的参数。例如：</span><br><br>    <span class="hljs-string">$(&#x27;#fullpage&#x27;).fullpage(&#123;</span><br>    <span class="hljs-attr">anchors:</span> [<span class="hljs-string">&#x27;firstPage&#x27;</span>, <span class="hljs-string">&#x27;secondPage&#x27;</span>, <span class="hljs-string">&#x27;thirdPage&#x27;</span>, <span class="hljs-string">&#x27;fourthPage&#x27;</span>, <span class="hljs-string">&#x27;lastPage&#x27;</span>]<span class="hljs-string">,</span><br>    <br>    <span class="hljs-attr">afterSlideLoad:</span> <span class="hljs-string">function(</span> <span class="hljs-string">anchorLink,</span> <span class="hljs-string">index,</span> <span class="hljs-string">slideAnchor,</span> <span class="hljs-string">slideIndex)&#123;</span><br>    <span class="hljs-string">var</span> <span class="hljs-string">loadedSlide</span> <span class="hljs-string">=</span> <span class="hljs-string">$(this);</span><br>    <br>    <span class="hljs-string">//第二节的第一张幻灯片</span><br>    <span class="hljs-string">if(anchorLink</span> <span class="hljs-string">==</span> <span class="hljs-string">&#x27;secondPage&#x27;</span> <span class="hljs-string">&amp;&amp;</span> <span class="hljs-string">slideIndex</span> <span class="hljs-string">==</span> <span class="hljs-number">1</span><span class="hljs-string">)&#123;</span><br>    <span class="hljs-string">alert(&quot;第一张幻灯片加载完毕&quot;);</span><br>    <span class="hljs-string">&#125;</span><br>    <br>    <span class="hljs-string">//第二节的第二张幻灯片（假设#secondSlide是</span><br>            <span class="hljs-string">//为第二张幻灯片锚点</span><br>    <span class="hljs-string">if(index</span> <span class="hljs-string">==</span> <span class="hljs-number">2</span> <span class="hljs-string">&amp;&amp;</span> <span class="hljs-string">slideIndex</span> <span class="hljs-string">==</span> <span class="hljs-string">&#x27;secondSlide&#x27;</span><span class="hljs-string">)&#123;</span><br>    <span class="hljs-string">alert(&quot;第二张幻灯片加载完毕&quot;);</span><br>    <span class="hljs-string">&#125;</span><br>    <span class="hljs-string">&#125;</span><br>    <span class="hljs-string">&#125;);</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-string">onSlideLeave</span> <span class="hljs-string">(anchorLink,</span> <span class="hljs-string">index,</span> <span class="hljs-string">slideIndex,</span> <span class="hljs-string">direction,</span> <span class="hljs-string">nextSlideIndex)</span><br><br><span class="hljs-string">一旦用户离开幻灯片转到另一个幻灯片，就会触发此回调。返回false将在移动发生之前取消移动。</span><br><br><span class="hljs-string">参数：</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-string">anchorLink：该节对应的anchorLink。</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">index：该节的索引。</span> <span class="hljs-string">从1开始。</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">slideIndex：幻灯片的索引。</span> <span class="hljs-string">从0开始。</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">direction：取决于滚动方向，取值为right或left。</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">nextSlideIndex：目标幻灯片的索引。</span> <span class="hljs-string">从0开始。</span><br><br><span class="hljs-string">例如：</span><br><br>    <span class="hljs-string">$(&#x27;#fullpage&#x27;).fullpage(&#123;</span><br>    <span class="hljs-attr">onSlideLeave:</span> <span class="hljs-string">function(</span> <span class="hljs-string">anchorLink,</span> <span class="hljs-string">index,</span> <span class="hljs-string">slideIndex,</span> <span class="hljs-string">direction,</span> <span class="hljs-string">nextSlideIndex)&#123;</span><br>    <span class="hljs-string">var</span> <span class="hljs-string">leavingSlide</span> <span class="hljs-string">=</span> <span class="hljs-string">$(this);</span><br>    <br>    <span class="hljs-string">//留下第二节的第一张幻灯片</span><br>    <span class="hljs-string">if(index</span> <span class="hljs-string">==</span> <span class="hljs-number">2</span> <span class="hljs-string">&amp;&amp;</span> <span class="hljs-string">slideIndex</span> <span class="hljs-string">==</span> <span class="hljs-number">0</span> <span class="hljs-string">&amp;&amp;</span> <span class="hljs-string">direction</span> <span class="hljs-string">==</span> <span class="hljs-string">&#x27;right&#x27;</span><span class="hljs-string">)&#123;</span><br>    <span class="hljs-string">alert(&quot;离开第一张幻灯片！&quot;);</span><br>    <span class="hljs-string">&#125;</span><br>    <br>    <span class="hljs-string">//将第二节的第三张幻灯片留在左边</span><br>    <span class="hljs-string">if(index</span> <span class="hljs-string">==</span> <span class="hljs-number">2</span> <span class="hljs-string">&amp;&amp;</span> <span class="hljs-string">slideIndex</span> <span class="hljs-string">==</span> <span class="hljs-number">2</span> <span class="hljs-string">&amp;&amp;</span> <span class="hljs-string">direction</span> <span class="hljs-string">==</span> <span class="hljs-string">&#x27;left&#x27;</span><span class="hljs-string">)&#123;</span><br>    <span class="hljs-string">alert(&quot;前往第二张幻灯片！&quot;);</span><br>    <span class="hljs-string">&#125;</span><br>    <span class="hljs-string">&#125;</span><br>    <span class="hljs-string">&#125;);</span><br><br><span class="hljs-string">在发生移动之前取消移动</span><br><br><span class="hljs-string">您可以通过在onSlideLeave回调中返回false来取消移动。</span> <span class="hljs-string">与使用onLeave取消动作一样。</span><br><br><span class="hljs-string">报告问题</span><br><br><span class="hljs-number">1</span><span class="hljs-string">.请在提问之前使用github问题搜索查找您的问题。</span><br><br><span class="hljs-number">2</span><span class="hljs-string">.确保使用最新的fullpage.js版本。</span> <span class="hljs-string">不支持旧版本。</span><br><br><span class="hljs-number">3</span><span class="hljs-string">.使用Github问题论坛来创建问题。</span><br><br><span class="hljs-number">4</span><span class="hljs-string">.需要单独复制该问题使用jsfiddle或codepen，如果可能的话。</span><br><br><span class="hljs-string">贡献给fullpage.js</span><br><br><span class="hljs-string">请参阅贡献给fullpage.js</span><br><br><span class="hljs-string">更新日志</span><br><br><span class="hljs-string">要查看最近更改的列表，请参见发行版部分.</span><br><br><span class="hljs-string">构建任务</span><br><br><span class="hljs-string">想要构建fullpage.js分发文件？</span> <span class="hljs-string">请参阅Build</span> <span class="hljs-string">Tasks</span><br><br><span class="hljs-string">参考资源</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-string">Wordpress</span> <span class="hljs-string">theme</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">Vue.js</span> <span class="hljs-string">wrapper</span> <span class="hljs-string">component</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">CSS</span> <span class="hljs-string">Easing</span> <span class="hljs-string">Animation</span> <span class="hljs-string">Tool</span> <span class="hljs-bullet">-</span> <span class="hljs-string">Matthew</span> <span class="hljs-string">Lein</span> <span class="hljs-string">(用于定义`easingcss3的值)</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">fullPage.js</span> <span class="hljs-string">jsDelivr</span> <span class="hljs-string">CDN</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">fullPage.js</span> <span class="hljs-string">plugin</span> <span class="hljs-string">for</span> <span class="hljs-string">October</span> <span class="hljs-string">CMS</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">fullPage.js</span> <span class="hljs-string">wordpress</span> <span class="hljs-string">plugin</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">fullPage.js</span> <span class="hljs-string">Angular2</span> <span class="hljs-string">directive</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">fullPage.js</span> <span class="hljs-string">angular</span> <span class="hljs-string">directive</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">fullPage.js</span> <span class="hljs-string">ember-cli</span> <span class="hljs-string">addon</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">fullPage.js</span> <span class="hljs-string">Rails</span> <span class="hljs-string">Ruby</span> <span class="hljs-string">Gem</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">Angular</span> <span class="hljs-string">fullPage.js</span> <span class="hljs-bullet">-</span> <span class="hljs-string">Adaptation</span> <span class="hljs-string">for</span> <span class="hljs-string">Angular.js</span> <span class="hljs-string">v1.x</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">Integrating</span> <span class="hljs-string">fullPage.js</span> <span class="hljs-string">with</span> <span class="hljs-string">Wordpress</span> <span class="hljs-string">(Tutorial)</span><br><br><span class="hljs-string">谁在使用</span> <span class="hljs-string">fullPage.js</span><br><br><span class="hljs-string">如果你想让你的页面在这里列出。</span> <span class="hljs-string">请使用网址与我联系。</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">http://www.bbc.co.uk/news/resources/idt-d88680d1-26f2-4863-be95-83298fd01e02</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">http://pages.ebay.com/design/</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">http://www.yourprimer.com/</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">http://www.vogue.fr/chaumet-histoires-de-liens</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">http://burntmovie.com/</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">http://www.bugatti.com/veyron/veyron-164/</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">http://www.newjumoconcept.com/</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">http://www.shootinggalleryasia.com/</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">http://medoff.ua/en/</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">http://promo.prestigio.com/grace1/</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">http://www.mi.com/shouhuan</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">http://www.commoditiesdemystified.info/en/</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">http://torchbrowser.com/</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">http://thekorner.fr/</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">http://www.restaurantwoods.nl/</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">https://www.edarling.de/</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">http://urban-walks.com/</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">http://lingualeo.com/</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">http://charlotteaimes.com/</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">http://collection.madeofsundays.com</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">http://thiswasmybest.com/</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">http://www.boxreload.com/</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">http://educationaboveall.org/</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">http://camfindapp.com/</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">http://rockercreative.com/</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">http://usescribe.com/</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">http://lucilecazanave.com/</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">http://boxx.hk/</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">http://bearonunicycle.com/</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">http://rawmilk.dk/en/</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">http://www.famavolat.com/</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">http://www.carpetloverclub.com/</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">http://www.sanyang.com.tw/service/Conception/</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">http://www.batzaya.net/</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">http://www.graphicid.dk/</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">http://www.carlphot.com/</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">http://medissix.com/</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">http://trasmissione-energia.terna.it/</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">http://www.thefoodmovie.com/</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">http://www.villareginateodolinda.it</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">http://www.kesstrio.com</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">http://fossdistillery.is</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">http://ded-morozz.kiev.ua/</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">http://unabridgedsoftware.com/</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">http://atlanticcorp.us/</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">http://moysport.ru/</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">http://themify.me/demo/#theme=fullpane</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">http://dancingroad.com</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">http://www.camanihome.com/</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">https://life2film.com/en/</span><br><br><span class="hljs-string">你可以找到另一个列表这里.</span><br><br><span class="hljs-string">捐献</span><br><br><span class="hljs-string">非常欢迎您的捐款:)</span><br><br><br><br><span class="hljs-string">许可证</span><br><br><span class="hljs-string">JavaScript和CSS文件中的信用评论应保持不变（即使在组合或缩小之后）</span><br><br><span class="hljs-string">（MIT许可证）</span><br><br><span class="hljs-string">Copyright</span> <span class="hljs-string">(c)</span> <span class="hljs-number">2013 </span><span class="hljs-string">Alvaro</span> <span class="hljs-string">Trigo</span> <span class="hljs-string">alvaro@alvarotrigo.com</span><br><br><span class="hljs-string">特此免费授予任何人获得许可</span><br><br><span class="hljs-string">这个软件的副本和相关的文档文件（</span><br><br><span class="hljs-string">软件），不受限制地处理本软件，包括</span><br><br><span class="hljs-string">但不限于使用，复制，修改，合并，发布，</span><br><br><span class="hljs-string">分发，再许可和/或出售软件的副本，并且</span><br><br><span class="hljs-string">允许提供软件的人这样做，但须遵守</span><br><br><span class="hljs-string">以下条件：</span><br><br><span class="hljs-string">上述版权声明和本许可声明应为</span><br><br><span class="hljs-string">包括在本软件的所有副本或主要部分。</span><br><br><span class="hljs-string">本软件按原样提供，不提供任何形式的担保，</span><br><br><span class="hljs-string">明示或暗示，包括但不限于保证</span><br><br><span class="hljs-string">适销性，针对特定用途的适用性和不侵权。</span><br><br><span class="hljs-string">在任何情况下，作者或版权所有者都不承担任何责任</span><br><br><span class="hljs-string">索赔，损害赔偿或其他责任，无论是在合同行为中，</span><br><br><span class="hljs-string">民事侵权行为或其他由此引起或与之有关的</span><br><br><span class="hljs-string">软件或软件中的使用或其他交易。</span><br><br></code></pre></td></tr></table></figure><h2 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">verticalCentered     默认<span class="hljs-keyword">true</span>   内容是否垂直居中<br>scrollingSpeed   <span class="hljs-number">700</span>滚动速度，单位为毫秒<br>navigation<span class="hljs-keyword">false</span>是否显示项目导航<br>navigationColor      #<span class="hljs-number">000</span>项目导航的颜色<br>slidesNavigation<span class="hljs-keyword">false</span>是否显示左右滑块的项目导航<br><br><br>回调函数<br>onLeave 滚动前的回调函数，接收 <span class="hljs-keyword">index</span>、nextIndex 和 direction <span class="hljs-number">3</span>个参数：<span class="hljs-keyword">index</span> 是离开的“页面”的序号，从<span class="hljs-number">1</span>开始计算；nextIndex 是滚动到的“页面”的序号，从<span class="hljs-number">1</span>开始计算；direction 判断往上滚动还是往下滚动，值是 up 或 down。<br>例:       $(<span class="hljs-string">&#x27;#fullpage&#x27;</span>).fullpage(&#123;<br>        navigation: <span class="hljs-keyword">true</span>,<br>        verticalCentered: <span class="hljs-keyword">false</span>,<br>        onLeave:<span class="hljs-keyword">function</span>(<span class="hljs-keyword">index</span>, nextIndex, direction)&#123;<br>            // console.log(<span class="hljs-keyword">index</span>);<br>            // console.log(nextIndex);<br>            // console.log(direction);<br>&#125;)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>jQuery插件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jQuery插件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jQuery随笔1</title>
    <link href="/2019/05/12/jQuery%E9%9A%8F%E7%AC%941/"/>
    <url>/2019/05/12/jQuery%E9%9A%8F%E7%AC%941/</url>
    
    <content type="html"><![CDATA[<h1 id="jQuery知识点梳理"><a href="#jQuery知识点梳理" class="headerlink" title="jQuery知识点梳理"></a>jQuery知识点梳理</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>&#x2F;&#x2F; 1 jQuery是一个js库，实际上就是一个js文件，内部有许多其他人给我们写好的功能，我们只需要学习使用方式即可。</p><pre><code class="hljs">    // 2 版本简介：    //   jQuery分为3大版本    //    1.x 版本 兼容现代浏览器    //2.x 版本（不支持ie678）    //    3.x 版本（不支持ie678）    // 3 压缩与未压缩版本的区别:    //   压缩版本适用于上线使用（生产环境），好处是体积小    //   未压缩版本使用于开发与学习，好处是有注释</code></pre><h2 id="入口函数"><a href="#入口函数" class="headerlink" title="入口函数"></a>入口函数</h2><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arcade">$(document).ready(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;这是jq的入口函数1&#x27;</span>);<br>&#125;);<br>$(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;这是jq的入口函数2&#x27;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade">window.onload = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;这是js的入口函数&#x27;</span>);<br>&#125;;<br></code></pre></td></tr></table></figure><p>js  与 jquery 入口函数区别</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs gauss">js的入口函数：<br>在页面加载完成后（结构，图片，文件）执行内部代码。<br><br> jQuery的入口函数：<br>执行时机： 在页面的结构加载完毕后执行内部代码。<br>如果希望使用jQuery时也可以在页面加载完成后执行，可以使用jQuery的方式给<span class="hljs-built_in">window</span>对象设置一个<span class="hljs-keyword">load</span>事件(后面的事件操作部分说明)。<br><span class="hljs-comment">// 要求掌握：</span><br><span class="hljs-comment">//   1 jQuery入口函数的写法。</span><br><span class="hljs-comment">//   2 jQuery入口函数与js入口函数执行时机的区别。</span><br></code></pre></td></tr></table></figure><h2 id="jQuery顶级对象"><a href="#jQuery顶级对象" class="headerlink" title="jQuery顶级对象"></a>jQuery顶级对象</h2><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir">jQuery中的顶级对象有两个，一个叫<span class="hljs-variable">$，</span>另一个叫jQuery// console.log(<span class="hljs-variable">$ </span>=== jQuery); // <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h2 id=""><a href="#" class="headerlink" title="$"></a>$</h2><p>$这个函数根据传入的参数形式不同，会具有不同的功能：</p><p> 1 选择器功能：$(‘div’);</p><p>2 入口函数功能：   $(function () {});</p><p> 3 给DOM对象设置新的功能：$(document).ready(function () {})</p><h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><p>1 标签选择器<br>$(‘div’).text(‘这是内容’);<br>2 id选择器<br>$(‘#box’).text(‘这是box’);<br>3 类选择器<br>$(‘.box’).text(‘这是类名为box的元素’);<br>4 子代选择器<br>$(‘#list&gt;li’).css(‘backgroundColor’, ‘red’);<br>5 后代选择器<br>$(‘#list li’).css(‘backgroundColor’, ‘red’);<br>交集选择器<br>获取页面中的类名为box的div<br> $(‘div.box’).text(‘这是类名为box的div’);<br>并集选择器<br>$(‘div,p’).text(‘这是div和p标签’);</p><h2 id="过滤选择器"><a href="#过滤选择器" class="headerlink" title="过滤选择器"></a>过滤选择器</h2><p>:eq(index)  $(‘li:eq(2)’).CSS(‘color’,’red’)<br>:odd   $(‘li:odd’)   奇数行<br>:even  $(‘li:even’)     偶数行<br>:selected  选中的<br>:checkbox   选中所有的复选框<br>:checkbox :checked   选中所有被选中的复选框</p><h2 id="筛选选着器"><a href="#筛选选着器" class="headerlink" title="筛选选着器"></a>筛选选着器</h2><p> <strong>1 children()  子代选择器</strong><br>children() 不书写选择器参数表示获取所有子元素，如果书写了选择器参数表示选择指定的部分内容<br>我们发现，这个选择器与 $(‘#list&gt;li’) 的功能是相似的，好处是可以完善链式编程操作。<br><strong>2 find() 后代选择器</strong><br>注意：find()如果不设置选择器参数，不会生效</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">$(<span class="hljs-string">&#x27;#list&#x27;</span>).<span class="hljs-built_in">find</span>(<span class="hljs-string">&#x27;li&#x27;</span>).css(<span class="hljs-string">&#x27;backgroundColor&#x27;</span>, <span class="hljs-string">&#x27;red&#x27;</span>);<br></code></pre></td></tr></table></figure><p><strong>3 parent() 父元素获取,相当于parentNod</strong><br>由于jQuery对象中可能具有多个DOM对象，所以parent()获取的结果可能为多个元素</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">$(<span class="hljs-string">&#x27;p&#x27;</span>).parent().css(<span class="hljs-string">&#x27;width&#x27;</span>, <span class="hljs-string">&#x27;100px&#x27;</span>);<br></code></pre></td></tr></table></figure><p> <strong>4 parents() 祖先元素</strong><br>parents方法可以不书写参数直接使用，但是没有意义，所以还是推荐设置参数后使用<br><strong>5 siblings() 同级元素(兄弟元素)</strong></p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">$(<span class="hljs-string">&#x27;#item&#x27;</span>).siblings(<span class="hljs-string">&#x27;.item&#x27;</span>).<span class="hljs-built_in">text</span>(<span class="hljs-string">&#x27;这是同级元素&#x27;</span>);<br></code></pre></td></tr></table></figure><p><strong>6 next() 下一个 prev() 上一个</strong></p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade">$(<span class="hljs-string">&#x27;#item&#x27;</span>).next(<span class="hljs-string">&#x27;.item2&#x27;</span>).<span class="hljs-built_in">text</span>(<span class="hljs-string">&#x27;这是下一个同级元素&#x27;</span>);<br>$(<span class="hljs-string">&#x27;#item&#x27;</span>).prev(<span class="hljs-string">&#x27;.item&#x27;</span>).<span class="hljs-built_in">text</span>(<span class="hljs-string">&#x27;这是上一个同级元素&#x27;</span>);<br></code></pre></td></tr></table></figure><p><strong>7 nextAll()</strong><br>前面所有同级元素<br>nextAll</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">$(<span class="hljs-string">&#x27;#item&#x27;</span>).nextAll(<span class="hljs-string">&#x27;.item&#x27;</span>).<span class="hljs-built_in">text</span>(<span class="hljs-string">&#x27;这是后面的所有同级元素&#x27;</span>);<br></code></pre></td></tr></table></figure><p><strong>8 eq() 根据指定下标获取元素</strong></p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs perl">// var <span class="hljs-keyword">index</span> = <span class="hljs-number">1</span>; <span class="hljs-regexp">//</span> 例如<span class="hljs-keyword">index</span>变量中保存了需要操作的元素下标值<br>// $(<span class="hljs-string">&#x27;#list2&gt;li:eq(&#x27;</span> + <span class="hljs-keyword">index</span> + <span class="hljs-string">&#x27;)&#x27;</span>)<br>// e<span class="hljs-string">q()</span>是推荐的形式，好处可以不进行字符串拼接。<br>$(<span class="hljs-string">&#x27;#list2&gt;li&#x27;</span>).e<span class="hljs-string">q(index)</span>.css(<span class="hljs-string">&#x27;backgroundColor&#x27;</span>, <span class="hljs-string">&#x27;red&#x27;</span>);<br></code></pre></td></tr></table></figure><h2 id="DOM对象与jQuery对象"><a href="#DOM对象与jQuery对象" class="headerlink" title="DOM对象与jQuery对象"></a>DOM对象与jQuery对象</h2><h3 id="1获取方式"><a href="#1获取方式" class="headerlink" title="1获取方式"></a>1获取方式</h3><p>DOM对象：通过DOM的方式获取的标签。<br>jQuery对象：通过jQuery的方式获取的标签。</p><h3 id="2-DOM对象与jQuery对象之间的关系"><a href="#2-DOM对象与jQuery对象之间的关系" class="headerlink" title="2 DOM对象与jQuery对象之间的关系"></a>2 DOM对象与jQuery对象之间的关系</h3><p>我们会称jQuery对象是DOM对象的包装集（jQuery对象是一个伪数组，内部包裹了一个或多个DOM对象）</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs 1c">/*var box = document.getElementById(&#x27;box&#x27;); <br>console.dir(box);<br>console.<span class="hljs-built_in">log</span>($(&#x27;div&#x27;));*/<br></code></pre></td></tr></table></figure><h3 id="3-DOM对象与jQuery对象使用时的注意点："><a href="#3-DOM对象与jQuery对象使用时的注意点：" class="headerlink" title="3 DOM对象与jQuery对象使用时的注意点："></a>3 DOM对象与jQuery对象使用时的注意点：</h3><p>DOM对象只能使用DOM的功能，不能使用jQuery的功能<br>&#x2F;&#x2F;    jQuery对象只能使用jQuery的功能，不能使用DOM的功能</p><h3 id="4-DOM对象与jQuery对象的转换方式"><a href="#4-DOM对象与jQuery对象的转换方式" class="headerlink" title="4 DOM对象与jQuery对象的转换方式"></a>4 DOM对象与jQuery对象的转换方式</h3><h4 id="将DOM对象转换为jQuery对象：通过-包裹即可"><a href="#将DOM对象转换为jQuery对象：通过-包裹即可" class="headerlink" title="将DOM对象转换为jQuery对象：通过$()包裹即可"></a>将DOM对象转换为jQuery对象：通过$()包裹即可</h4><p>​&#x2F;<em>var box &#x3D; document.getElementById(‘box’);<br>    $(box).text(‘这是新的内容’);</em>&#x2F;</p><h4 id="将jQuery对象转换为DOM对象："><a href="#将jQuery对象转换为DOM对象：" class="headerlink" title="将jQuery对象转换为DOM对象："></a>将jQuery对象转换为DOM对象：</h4><p>​$(‘#box’)[0].innerHTML &#x3D; ‘这是box的内容’; &#x2F;&#x2F; 推荐方式<br>    $(‘#box’).get(0).innerHTML &#x3D; ‘这是更新的内容’;</p><h2 id="获取元素"><a href="#获取元素" class="headerlink" title="获取元素"></a>获取元素</h2><h3 id="获取多个标签中下标为奇数的元素"><a href="#获取多个标签中下标为奇数的元素" class="headerlink" title="获取多个标签中下标为奇数的元素"></a>获取多个标签中下标为奇数的元素</h3><p>$(‘li:odd’).text(‘这是下标为奇数的元素’);</p><h3 id="获取多个标签中下标为偶数的元素"><a href="#获取多个标签中下标为偶数的元素" class="headerlink" title="获取多个标签中下标为偶数的元素"></a>获取多个标签中下标为偶数的元素</h3><p>$(‘li:even’).text(‘这是下标为偶数的元素’);</p><h3 id="获取下标为多少的元素"><a href="#获取下标为多少的元素" class="headerlink" title="获取下标为多少的元素"></a>获取下标为多少的元素</h3><p>$(‘li:eq(2)’).text(‘这是第三个li’);</p><h2 id="jQuery的两大特性"><a href="#jQuery的两大特性" class="headerlink" title="jQuery的两大特性"></a>jQuery的两大特性</h2><h3 id="1-链式编程"><a href="#1-链式编程" class="headerlink" title="1 链式编程"></a>1 链式编程</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">含义：任意的设置型操作后可以继续操作当前对象。<br>//  $(<span class="hljs-string">&#x27;#box&#x27;</span>).text(<span class="hljs-string">&#x27;这是box的内容&#x27;</span>).css(<span class="hljs-string">&#x27;backgroundColor&#x27;</span>, <span class="hljs-string">&#x27;red&#x27;</span>);<br><br>// 下面是一个内容获取操作，获取操作后是对返回的结果操作了，而不是<span class="hljs-type">box</span><br>//   $(<span class="hljs-string">&#x27;#box&#x27;</span>).text().<br>//   console.log($(<span class="hljs-string">&#x27;#box&#x27;</span>).text());<br></code></pre></td></tr></table></figure><h3 id="2-隐式迭代：-偷偷的遍历"><a href="#2-隐式迭代：-偷偷的遍历" class="headerlink" title="2 隐式迭代： 偷偷的遍历"></a>2 隐式迭代： 偷偷的遍历</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">//隐式迭代只能在设置操作时生效</span><br><span class="hljs-comment">//$(&#x27;div&#x27;).css(&#x27;width&#x27;, &#x27;100px&#x27;);</span><br><br><span class="hljs-comment">// 下面是对jQuery对象进行获取操作，不会隐式迭代，只获取到第一个div的宽度</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>($(<span class="hljs-string">&#x27;div&#x27;</span>).css(<span class="hljs-string">&#x27;width&#x27;</span>));<br></code></pre></td></tr></table></figure><h2 id="设置样式操作-css"><a href="#设置样式操作-css" class="headerlink" title="设置样式操作.css()"></a>设置样式操作.css()</h2><h3 id="设置样式操作："><a href="#设置样式操作：" class="headerlink" title="设置样式操作："></a>设置样式操作：</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arcade">$(<span class="hljs-string">&#x27;#box&#x27;</span>).css(<span class="hljs-string">&#x27;backgroundColor&#x27;</span>, <span class="hljs-string">&#x27;red&#x27;</span>); <span class="hljs-comment">// 推荐</span><br> $(<span class="hljs-string">&#x27;#box&#x27;</span>).css(<span class="hljs-string">&#x27;background-color&#x27;</span>, <span class="hljs-string">&#x27;red&#x27;</span>); <span class="hljs-comment">// 不推荐，推荐使用驼峰（上一种）</span><br>$(<span class="hljs-string">&#x27;#box&#x27;</span>).css(<span class="hljs-string">&#x27;width&#x27;</span>, <span class="hljs-string">&#x27;100px&#x27;</span>);<br>$(<span class="hljs-string">&#x27;#box&#x27;</span>).css(<span class="hljs-string">&#x27;height&#x27;</span>, <span class="hljs-number">100</span>); <span class="hljs-comment">// 推荐你们写这个</span><br></code></pre></td></tr></table></figure><h3 id="多个样式的同时设置方式："><a href="#多个样式的同时设置方式：" class="headerlink" title="多个样式的同时设置方式："></a>多个样式的同时设置方式：</h3><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs processing">$(<span class="hljs-string">&#x27;#box&#x27;</span>).<span class="hljs-property">css</span>(&#123;<br><span class="hljs-built_in">width</span> : <span class="hljs-number">100</span>,<br><span class="hljs-built_in">height</span> : <span class="hljs-number">100</span>,<br>backgroundColor : <span class="hljs-string">&#x27;red&#x27;</span><br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="样式获取操作"><a href="#样式获取操作" class="headerlink" title="样式获取操作"></a>样式获取操作</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade">注意的点：只能进行单个元素的单个样式获取<br><span class="hljs-comment">//    获取结果是字符串形式，具有单位</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>($(<span class="hljs-string">&#x27;#box&#x27;</span>).css(<span class="hljs-string">&#x27;width&#x27;</span>));<br></code></pre></td></tr></table></figure><h2 id="类名操作"><a href="#类名操作" class="headerlink" title="类名操作"></a>类名操作</h2><h3 id="1-类名添加-addClass"><a href="#1-类名添加-addClass" class="headerlink" title="1 类名添加 addClass()"></a>1 类名添加 addClass()</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">$(<span class="hljs-string">&#x27;#box&#x27;</span>).addClass(<span class="hljs-string">&#x27;colorBlue fl&#x27;</span>);<br></code></pre></td></tr></table></figure><h3 id="2-移除类名-removeClass"><a href="#2-移除类名-removeClass" class="headerlink" title="2 移除类名 removeClass()"></a>2 移除类名 removeClass()</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade"> 移除类名时可以移除一个或多个，并且不需要考虑移除时的书写顺序<br>$(<span class="hljs-string">&#x27;#box&#x27;</span>).removeClass(<span class="hljs-string">&#x27;colorBlue&#x27;</span>);<br>$(<span class="hljs-string">&#x27;#box&#x27;</span>).removeClass(<span class="hljs-string">&#x27;fl colorBlue&#x27;</span>);<br></code></pre></td></tr></table></figure><h3 id="3-切换类名-toggleClass"><a href="#3-切换类名-toggleClass" class="headerlink" title="3 切换类名 toggleClass()"></a>3 切换类名 toggleClass()</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade">如果某个类名已经存在，会被移除，如果某个类名不存在，会被添加<br>$(<span class="hljs-string">&#x27;#box&#x27;</span>).toggleClass(<span class="hljs-string">&#x27;box2 colorBlue&#x27;</span>);<br></code></pre></td></tr></table></figure><h3 id="4-检测类名是否存在-hasClass"><a href="#4-检测类名是否存在-hasClass" class="headerlink" title="4 检测类名是否存在 hasClass()"></a>4 检测类名是否存在 hasClass()</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>($(<span class="hljs-string">&#x27;#box&#x27;</span>).hasClass(<span class="hljs-string">&#x27;colorBlue&#x27;</span>)); <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>($(<span class="hljs-string">&#x27;#box&#x27;</span>).hasClass(<span class="hljs-string">&#x27;box6&#x27;</span>)); <span class="hljs-comment">// false</span><br><span class="hljs-comment">// 使用时不推荐同时检测多个类名，可能不准确。（需要保证书写顺序一致）</span><br><span class="hljs-comment">//   console.log($(&#x27;#box&#x27;).hasClass(&#x27;fl colorBlue&#x27;));</span><br><br><span class="hljs-comment">// 使用多个类名时进行检测，只要某个元素具有指定类名即可返回true，不推荐</span><br><span class="hljs-comment">// console.log($(&#x27;div&#x27;).hasClass(&#x27;box1&#x27;));</span><br></code></pre></td></tr></table></figure><h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><h3 id="show与hide"><a href="#show与hide" class="headerlink" title="show与hide"></a>show与hide</h3><p>show与hide不设置参数时，是普通的显示与隐藏效果，不具有动画</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs arcade">$(<span class="hljs-string">&#x27;#btn1&#x27;</span>).click(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br><span class="hljs-comment">// 参数1 运动时间，毫秒单位</span><br><span class="hljs-comment">// 参数2 函数，表示运动完毕后执行的操作</span><br>$(<span class="hljs-string">&#x27;#box&#x27;</span>).show(<span class="hljs-number">1000</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;运动完毕了&#x27;</span>);<br>&#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><p>参数1 运动时间，毫秒单位<br> 参数2 函数，表示运动完毕后执行的操作</p><h3 id="slideDown-划入"><a href="#slideDown-划入" class="headerlink" title="slideDown()划入"></a>slideDown()划入</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs arcade">$(<span class="hljs-string">&#x27;#btn1&#x27;</span>).click(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br><span class="hljs-comment">// slideDown() 滑入，下拉</span><br><span class="hljs-comment">// 参数1: 运动时间，默认为400</span><br><span class="hljs-comment">// 参数2: 函数，运动完毕后执行的操作</span><br>$(<span class="hljs-string">&#x27;#box&#x27;</span>).slideDown(<span class="hljs-number">1000</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;运动完毕了&#x27;</span>);<br>&#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="slideUp-划出"><a href="#slideUp-划出" class="headerlink" title="slideUp()划出"></a>slideUp()划出</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs arcade">$(<span class="hljs-string">&#x27;#btn2&#x27;</span>).click(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br><span class="hljs-comment">// slideUp()  滑出，上拉</span><br><span class="hljs-comment">// 参数1: 运动时间，默认为400</span><br><span class="hljs-comment">// 参数2: 函数，运动完毕后执行的操作</span><br>$(<span class="hljs-string">&#x27;#box&#x27;</span>).slideUp(<span class="hljs-number">1000</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;运动完毕了&#x27;</span>);<br>&#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="slideToggle-切换"><a href="#slideToggle-切换" class="headerlink" title="slideToggle()切换"></a>slideToggle()切换</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs arcade">$(<span class="hljs-string">&#x27;#btn3&#x27;</span>).click(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br><span class="hljs-comment">// slideToggle() 切换</span><br><span class="hljs-comment">// 当前为显示状态，执行slideDown，否则执行slideUp</span><br><span class="hljs-comment">// 参数1: 运动时间，默认为400</span><br><span class="hljs-comment">// 参数2: 函数，运动完毕后执行的操作</span><br>$(<span class="hljs-string">&#x27;#box&#x27;</span>).slideToggle(<span class="hljs-number">1000</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;运动完毕了&#x27;</span>);<br>&#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="fadeIn-渐入"><a href="#fadeIn-渐入" class="headerlink" title="fadeIn() 渐入"></a>fadeIn() 渐入</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs arcade">$(<span class="hljs-string">&#x27;#btn1&#x27;</span>).click(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br><span class="hljs-comment">// fadeIn() 渐入</span><br><span class="hljs-comment">// 参数1： 运动时间，默认400</span><br><span class="hljs-comment">// 参数2： 函数，运动完毕后执行的操作</span><br>$(<span class="hljs-string">&#x27;#box&#x27;</span>).fadeIn(<span class="hljs-number">1000</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;我渐入了&#x27;</span>);<br>&#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="fadeOut-渐出"><a href="#fadeOut-渐出" class="headerlink" title="fadeOut() 渐出"></a>fadeOut() 渐出</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs arcade">$(<span class="hljs-string">&#x27;#btn2&#x27;</span>).click(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br><span class="hljs-comment">// fadeOut() 渐出</span><br><span class="hljs-comment">// 参数1： 运动时间，默认400</span><br><span class="hljs-comment">// 参数2： 函数，运动完毕后执行的操作</span><br>$(<span class="hljs-string">&#x27;#box&#x27;</span>).fadeOut(<span class="hljs-number">1000</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;我渐出了&#x27;</span>);<br>&#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="fadeToggle-切换"><a href="#fadeToggle-切换" class="headerlink" title="fadeToggle() 切换"></a>fadeToggle() 切换</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs arcade">$(<span class="hljs-string">&#x27;#btn3&#x27;</span>).click(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br><span class="hljs-comment">// fadeToggle() 切换</span><br><span class="hljs-comment">// 参数1： 运动时间，默认400</span><br><span class="hljs-comment">// 参数2： 函数，运动完毕后执行的操作</span><br>$(<span class="hljs-string">&#x27;#box&#x27;</span>).fadeToggle(<span class="hljs-number">1000</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;我切换了&#x27;</span>);<br>&#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="fadeTo-渐到"><a href="#fadeTo-渐到" class="headerlink" title="fadeTo() 渐到"></a>fadeTo() 渐到</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs arcade">$(<span class="hljs-string">&#x27;#btn4&#x27;</span>).click(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br><span class="hljs-comment">// fadeTo() 渐到</span><br><span class="hljs-comment">// 参数1： 运动时间，默认400</span><br><span class="hljs-comment">// 参数2： 渐变到什么程度</span><br><span class="hljs-comment">// 参数3： 函数，运动完毕后执行的操作</span><br>$(<span class="hljs-string">&#x27;#box&#x27;</span>).fadeTo(<span class="hljs-number">1000</span>, <span class="hljs-number">0.3</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;我渐到了&#x27;</span>);<br>&#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="animate-自定义动画"><a href="#animate-自定义动画" class="headerlink" title="animate() 自定义动画"></a>animate() 自定义动画</h3><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gcode">参数<span class="hljs-number">1</span>：运动要修改的样式<span class="hljs-comment">(必选)</span><br> 参数<span class="hljs-number">2</span>：运动时间<br>参数<span class="hljs-number">3</span>：运动模式   默认，变速<span class="hljs-string">&#x27;swing&#x27;</span>  匀速<span class="hljs-string">&#x27;linear&#x27;</span><br>参数<span class="hljs-number">4</span>：运动完毕后执行的操作，函数<br></code></pre></td></tr></table></figure><h3 id="stop-结束排队-加到动画前"><a href="#stop-结束排队-加到动画前" class="headerlink" title="stop()结束排队,加到动画前"></a>stop()结束排队,加到动画前</h3><h2 id="节点创建操作"><a href="#节点创建操作" class="headerlink" title="节点创建操作"></a>节点创建操作</h2><p> 1 使用$()内部书写结构的方式可以进行标签创建，但是创建的元素不在页面中显示，需要进行添加操作</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">$(&#x27;<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>这是div<span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这是p标签<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>&#x27;)<br></code></pre></td></tr></table></figure><p>html()<br>html() 相当于innerHTML</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">$(&#x27;#box&#x27;).html(&#x27;这是box的内容<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>这是div<span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这是p标签<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>&#x27;)<br></code></pre></td></tr></table></figure><p>append()<br>向某个元素的子节点最后添加元素也可移动元素</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> var <span class="hljs-variable">$div</span> = $(<span class="hljs-string">&#x27;&lt;div&gt;这是创建的div&lt;/div&gt;&#x27;</span>);<br><span class="hljs-regexp">//</span> $(<span class="hljs-string">&#x27;#box&#x27;</span>).append(<span class="hljs-variable">$div</span>);<br><span class="hljs-regexp">//</span> append方法可以直接传入字符串形式的标签结构，可以直接生成<br><span class="hljs-regexp">//</span> $(<span class="hljs-string">&#x27;#box&#x27;</span>).append(<span class="hljs-string">&#x27;&lt;div&gt;这是div&lt;/div&gt;&lt;div&gt;这是div&lt;/div&gt;&#x27;</span>);<br><br></code></pre></td></tr></table></figure><p>prepend()<br>想某个元素的子节点最前面添加元素</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-variable">$(</span><span class="hljs-string">&#x27;#box&#x27;</span>).<span class="hljs-keyword">prepend</span>(<span class="hljs-string">&#x27;&lt;div&gt;这是div&lt;/div&gt;&#x27;</span>);<br><span class="hljs-variable">$(</span><span class="hljs-string">&#x27;#box&#x27;</span>).<span class="hljs-keyword">prepend</span>(<span class="hljs-variable">$(</span><span class="hljs-string">&#x27;.text&#x27;</span>));<br></code></pre></td></tr></table></figure><p>after()<br>用于将某个元素添加到指定元素同级的后面</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elixir">//  <span class="hljs-variable">$(</span><span class="hljs-string">&#x27;.item&#x27;</span>).<span class="hljs-keyword">after</span>(<span class="hljs-variable">$(</span><span class="hljs-string">&#x27;.text&#x27;</span>));<br>//  <span class="hljs-variable">$(</span><span class="hljs-string">&#x27;.item&#x27;</span>).<span class="hljs-keyword">after</span>(<span class="hljs-string">&#x27;&lt;div&gt;这是创建的div&lt;/div&gt;&#x27;</span>);<br></code></pre></td></tr></table></figure><p>before()<br>用于将某个元素添加到指定元素同级的前面<br>appendTo() - 与append()对应</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs elixir">// appendTo方法的参数可以直接书写选择器<br>// <span class="hljs-variable">$(</span><span class="hljs-string">&#x27;.text&#x27;</span>).css(<span class="hljs-string">&#x27;width&#x27;</span>, <span class="hljs-number">100</span>).appendTo(<span class="hljs-string">&#x27;#box&#x27;</span>);<br> <span class="hljs-variable">$(</span><span class="hljs-string">&#x27;#box&#x27;</span>).append(<span class="hljs-variable">$(</span><span class="hljs-string">&#x27;.text&#x27;</span>));<br></code></pre></td></tr></table></figure><p>prependTo() - 与prepend()对应<br> insertAfter() - 与after()对应<br>insertBefore() - 将某个元素添加到指定元素的同级的前面</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-comment">// 上面的四个方法与前面案例中的四个方法是对应的，只不过操作的元素与传入的元素书写顺序相反</span><br><span class="hljs-comment">// 目的是为了完善jQuery的链式编程操作</span><br></code></pre></td></tr></table></figure><h2 id="清楚元素内部内容"><a href="#清楚元素内部内容" class="headerlink" title="清楚元素内部内容"></a>清楚元素内部内容</h2><h3 id="1html"><a href="#1html" class="headerlink" title="1html()"></a>1html()</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">$(<span class="hljs-string">&#x27;#box&#x27;</span>).html(<span class="hljs-string">&#x27;&#x27;</span>);<br></code></pre></td></tr></table></figure><h3 id="2-empty-用于清除元素的内部内容"><a href="#2-empty-用于清除元素的内部内容" class="headerlink" title="2 empty() 用于清除元素的内部内容"></a>2 empty() 用于清除元素的内部内容</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">$(<span class="hljs-string">&#x27;#box&#x27;</span>).empty();<br></code></pre></td></tr></table></figure><h3 id="3-remove-用于移除元素以及内容内容"><a href="#3-remove-用于移除元素以及内容内容" class="headerlink" title="3 remove() 用于移除元素以及内容内容"></a>3 remove() 用于移除元素以及内容内容</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$(<span class="hljs-string">&#x27;div.box&#x27;</span>).<span class="hljs-built_in">remove</span>();<br></code></pre></td></tr></table></figure><h2 id="克隆clone"><a href="#克隆clone" class="headerlink" title="克隆clone()"></a>克隆clone()</h2><p>用于对元素进行克隆操作<br>参数默认值为false，表示复制标签以及内部内容<br> 参数设置为true表示不仅复制结构，还会复制事件</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">// DOM中具有一个cloneNode()  false不复制内容  true复制标签以及内部内容</span><br><br><span class="hljs-comment">// jQuery的方法 clone() 用于对元素进行克隆操作</span><br><span class="hljs-comment">// 参数默认值为false，表示复制标签以及内部内容</span><br><span class="hljs-comment">// 参数设置为true表示不仅复制结构，还会复制事件</span><br><br><span class="hljs-comment">// 注意：DOM中的cloneNode是无法复制事件的，jQuery是可以复制事件的</span><br>$(<span class="hljs-string">&#x27;.box&#x27;</span>).click(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;这是box&#x27;</span>);<br>&#125;);<br>$(<span class="hljs-string">&#x27;body&#x27;</span>).append($(<span class="hljs-string">&#x27;.box&#x27;</span>).clone(<span class="hljs-literal">true</span>));<br></code></pre></td></tr></table></figure><h2 id="属性操作方法"><a href="#属性操作方法" class="headerlink" title="属性操作方法"></a>属性操作方法</h2><p>prop() </p><p>用于操作标签行内的自带属性</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> <span class="hljs-number">1</span> 获取操作<br><span class="hljs-regexp">//</span>  console.log($(<span class="hljs-string">&#x27;#box&#x27;</span>).prop(<span class="hljs-string">&#x27;id&#x27;</span>));<br><span class="hljs-regexp">//</span> <span class="hljs-number">2</span> 设置操作<br><span class="hljs-regexp">//</span>  $(<span class="hljs-string">&#x27;#box&#x27;</span>).prop(<span class="hljs-string">&#x27;class&#x27;</span>, <span class="hljs-string">&#x27;box6&#x27;</span>);<br>/*$(<span class="hljs-string">&#x27;#box&#x27;</span>).prop(&#123;<br>class : <span class="hljs-string">&#x27;box6&#x27;</span>,<br>title : <span class="hljs-string">&#x27;这是新的title&#x27;</span><br>&#125;);*/<br><span class="hljs-regexp">//</span> prop无法操作标签的自定义属性<br><span class="hljs-regexp">//</span> console.log($(<span class="hljs-string">&#x27;#box&#x27;</span>).prop(<span class="hljs-string">&#x27;data-hehe&#x27;</span>));<br></code></pre></td></tr></table></figure><p> attr()</p><p>用于操作标签的行内自定义属性</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs 1c">/*console.<span class="hljs-built_in">log</span>($(&#x27;#box&#x27;).attr(&#x27;data-hehe&#x27;));<br>$(&#x27;#box&#x27;).attr(&#x27;data-hehe&#x27;, &#x27;新内容&#x27;);*/<br><span class="hljs-comment">// 不推荐使用attr操作自带属性，基本属性可以操作，但是对于表单元素的一些属性操作不便</span><br>/*console.<span class="hljs-built_in">log</span>($(&#x27;#text&#x27;).attr(&#x27;disabled&#x27;)); <span class="hljs-comment">// &#x27;disabled&#x27;</span><br>console.<span class="hljs-built_in">log</span>($(&#x27;#text&#x27;).prop(&#x27;disabled&#x27;)); <span class="hljs-comment">// true*/</span><br></code></pre></td></tr></table></figure><p> data()</p><p>用于操作标签的行内自定义属性</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">//  与attr方法的区别：在获取自定义行内属性时，可以不加data-</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>($(<span class="hljs-string">&#x27;#box&#x27;</span>).data(<span class="hljs-string">&#x27;hehe&#x27;</span>)); <span class="hljs-comment">// 获取data-hehe属性的内容</span><br>$(<span class="hljs-string">&#x27;#box&#x27;</span>).data(<span class="hljs-string">&#x27;title&#x27;</span>, <span class="hljs-string">&#x27;这是title&#x27;</span>);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>($(<span class="hljs-string">&#x27;#box&#x27;</span>).data(<span class="hljs-string">&#x27;title&#x27;</span>));<br></code></pre></td></tr></table></figure><h2 id="样式操作"><a href="#样式操作" class="headerlink" title="样式操作"></a>样式操作</h2><h3 id="获取操作："><a href="#获取操作：" class="headerlink" title="获取操作："></a>获取操作：</h3><p>1 width() 用于获取元素的width属性值</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>($(<span class="hljs-string">&#x27;#box&#x27;</span>).width());<br></code></pre></td></tr></table></figure><p> 2 innerWidth() 用于获取元素的width+padding</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>($(<span class="hljs-string">&#x27;#box&#x27;</span>).innerWidth());<br></code></pre></td></tr></table></figure><p>3 outerWidth() 用于获取元素的width+padding+border</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>($(<span class="hljs-string">&#x27;#box&#x27;</span>).outerWidth());<br></code></pre></td></tr></table></figure><p>4 outerWidth(true) 用于获取盒模型的整体宽度</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>($(<span class="hljs-string">&#x27;#box&#x27;</span>).outerWidth(<span class="hljs-literal">true</span>));<br></code></pre></td></tr></table></figure><h3 id="设置操作："><a href="#设置操作：" class="headerlink" title="设置操作："></a>设置操作：</h3><p>1 width() 用于设置元素的width属性值</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">$(<span class="hljs-string">&#x27;#box&#x27;</span>).width(<span class="hljs-number">150</span>);<br></code></pre></td></tr></table></figure><p>2 innerWidth() 用于设置元素的width+padding，注意，设置值时只会修改width属性</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">$(<span class="hljs-string">&#x27;#box&#x27;</span>).innerWidth(<span class="hljs-number">150</span>);<br></code></pre></td></tr></table></figure><p>3 outerWidth() 用于设置元素的width+padding+border，注意，设置值时只会修改width属性</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">$(<span class="hljs-string">&#x27;#box&#x27;</span>).outerWidth(<span class="hljs-number">150</span>);<br></code></pre></td></tr></table></figure><p>4 outerWidth(数, true) 用于设置盒模型的整体宽度，注意，设置值时只会修改width属性<br>  使用时：先传数，再传true，忘了就试一试</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">$(<span class="hljs-string">&#x27;#box&#x27;</span>).outerWidth(<span class="hljs-number">150</span>, <span class="hljs-literal">true</span>);<br></code></pre></td></tr></table></figure><h2 id="页面滚动事件"><a href="#页面滚动事件" class="headerlink" title="页面滚动事件"></a>页面滚动事件</h2><p>scroll</p><p> 滚动事件：某个元素的内部滚动条滚动时触发事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br><span class="hljs-comment">// 页面的卷曲尺寸：</span><br><span class="hljs-comment">//    卷曲高度：从可视区域顶部，计算到页面的最顶部</span><br><span class="hljs-comment">//    卷曲宽度：从可视区域左侧，计算到页面的最左侧</span><br><br><span class="hljs-comment">// 滚动事件：某个元素的内部滚动条滚动时触发事件</span><br><span class="hljs-comment">//   scroll</span><br><br><span class="hljs-comment">// scrollTop() 用于获取卷曲的高度</span><br><span class="hljs-comment">//   console.log($(window).scrollTop());</span><br><span class="hljs-comment">// scrollLeft() 用于获取卷曲的宽度 （了解，不常用）</span><br><span class="hljs-comment">//   console.log($(window).scrollLeft());</span><br><br>$(<span class="hljs-variable language_">window</span>).<span class="hljs-title function_">scroll</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($(<span class="hljs-variable language_">window</span>).<span class="hljs-title function_">scrollTop</span>(), $(<span class="hljs-variable language_">window</span>).<span class="hljs-title function_">scrollLeft</span>());<br>&#125;);<br><br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="事件发展历程"><a href="#事件发展历程" class="headerlink" title="事件发展历程"></a>事件发展历程</h2><p>1 简单事件设置方式</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs lua">/*$(<span class="hljs-string">&#x27;#btn&#x27;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span></span> &#123;<br>console.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;这是点击事件1&#x27;</span>);<br>&#125;);<br>// ....<br>$(<span class="hljs-string">&#x27;#btn&#x27;</span>).mouseover(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span></span> &#123;<br>console.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;这是点击事件2&#x27;</span>);<br>&#125;);*/<br></code></pre></td></tr></table></figure><p>2 bind() 用于设置事件</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs lua">/*$(<span class="hljs-string">&#x27;#btn&#x27;</span>).bind(<span class="hljs-string">&#x27;click mouseover&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span></span> &#123;<br>console.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;这是点击事件与移入事件&#x27;</span>);<br>&#125;);*/<br><br>/*$(<span class="hljs-string">&#x27;#btn&#x27;</span>).bind(&#123;<br>click : <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span></span> &#123;<br>console.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;这是点击事件&#x27;</span>);<br>&#125;,<br>mouseover : <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span></span> &#123;<br>console.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;这是移入事件&#x27;</span>);<br>&#125;<br>&#125;);*/<br></code></pre></td></tr></table></figure><p>3 delegate() 用于设置事件委托3</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs lua">/*$(<span class="hljs-string">&#x27;#box&#x27;</span>).delegate(<span class="hljs-string">&#x27;p&#x27;</span>, <span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span></span> &#123;<br>console.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;这是使用delegate设置的事件&#x27;</span>);<br>&#125;);*/<br></code></pre></td></tr></table></figure><p>4 on()  jQuery使用on的方式统一了所有的事件设置方式</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs lua"> <span class="hljs-number">4.1</span> 进行简单事件设置<br>/*$(<span class="hljs-string">&#x27;#btn&#x27;</span>).on(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span></span> &#123;<br>console.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;这是普通事件设置&#x27;</span>);<br>&#125;);*/<br> <span class="hljs-number">4.2</span> 模拟bind方法<br>/*$(<span class="hljs-string">&#x27;#btn&#x27;</span>).on(<span class="hljs-string">&#x27;click mouseover&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span></span> &#123;<br>console.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;这是事件&#x27;</span>);<br>&#125;);*/<br>/*$(<span class="hljs-string">&#x27;#btn&#x27;</span>).on(&#123;<br>click : <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span></span> &#123;<br>console.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;这是点击事件&#x27;</span>);<br>&#125;,<br>mouseover : <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span></span> &#123;<br>console.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;这是移入事件&#x27;</span>);<br>&#125;<br>&#125;);*/<br> <span class="hljs-number">4.3</span> 用于设置事件委托<br>// $(<span class="hljs-string">&#x27;#box&#x27;</span>).on(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-string">&#x27;p,span,.box,#box&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span></span> &#123;<br>// console.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;这是事件委托&#x27;</span>);<br>// &#125;);<br></code></pre></td></tr></table></figure><p>移除事件off()</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">// unbind() 与 undelegate()</span><br><br><span class="hljs-keyword">var</span> fun = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;这是点击事件&#x27;</span>);<br>&#125;;<br>$(<span class="hljs-string">&#x27;#box&#x27;</span>).click(fun);<br>$(<span class="hljs-string">&#x27;#box&#x27;</span>).on(<span class="hljs-string">&#x27;mouseover&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;这是移入事件&#x27;</span>);<br>&#125;);<br>$(<span class="hljs-string">&#x27;#box&#x27;</span>).on(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-string">&#x27;p&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;这是事件委托&#x27;</span>);<br>&#125;);<br><span class="hljs-comment">// 要求掌握off()的使用方式 - 用于移除事件</span><br><span class="hljs-comment">//   1 不传参数：用于移除所有事件</span><br><span class="hljs-comment">//     $(&#x27;#box&#x27;).off();</span><br><span class="hljs-comment">// 2 指定类型移除:用于移除指定类型的事件</span><br><span class="hljs-comment">//  $(&#x27;#box&#x27;).off(&#x27;click&#x27;);</span><br><span class="hljs-comment">//    $(&#x27;#box&#x27;).off(&#x27;click mouseover&#x27;);</span><br><span class="hljs-comment">// 3 移除事件委托：</span><br><span class="hljs-comment">//  $(&#x27;#box&#x27;).off(&#x27;click&#x27;, &#x27;**&#x27;);</span><br><span class="hljs-comment">//   4 指定事件处理程序移除：(最好用，适合任意场景)</span><br><span class="hljs-comment">// $(&#x27;#box&#x27;).off(&#x27;click&#x27;, fun);</span><br></code></pre></td></tr></table></figure><h2 id="取消默认事件效果-阻止传播"><a href="#取消默认事件效果-阻止传播" class="headerlink" title="取消默认事件效果,阻止传播"></a>取消默认事件效果,阻止传播</h2><h3 id="1-阻止事件传播-阻止冒泡"><a href="#1-阻止事件传播-阻止冒泡" class="headerlink" title="1 阻止事件传播: (阻止冒泡)"></a>1 阻止事件传播: (阻止冒泡)</h3><p>e.stopPropagation(); </p><h3 id="2-取消标签默认事件效果-例如阻止跳转"><a href="#2-取消标签默认事件效果-例如阻止跳转" class="headerlink" title="2 取消标签默认事件效果: (例如阻止跳转)"></a>2 取消标签默认事件效果: (例如阻止跳转)</h3><p>e.preventDefault();<br>由于return false具有两种功能，如果在需求中只需要一种，就可以使用上面的两个方法</p><h3 id="return-false"><a href="#return-false" class="headerlink" title="return false;"></a>return false;</h3><h2 id="链式编程原理"><a href="#链式编程原理" class="headerlink" title="链式编程原理"></a>链式编程原理</h2><p> 小结：实际上链式编程的基本原理就是在设置型操作后设置了return this</p>]]></content>
    
    
    <categories>
      
      <category>jQuery</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jQuery</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTML5_API</title>
    <link href="/2019/05/10/HTML5_API/"/>
    <url>/2019/05/10/HTML5_API/</url>
    
    <content type="html"><![CDATA[<h2 id="H5API"><a href="#H5API" class="headerlink" title="H5API"></a>H5API</h2><h3 id="类名操作"><a href="#类名操作" class="headerlink" title="类名操作"></a>类名操作</h3><p>Node指一个有效的DOM节点，是一个通称<br>Node.classList.add(‘class’) 添加class<br>Node.classList.remove(‘class’) 移除class<br>Node.classList.toggle(‘class’) 切换class，有则移除，无则添加<br>Node.classList.contains(‘class’) 检测是否存在class</p><h3 id="自定义属性"><a href="#自定义属性" class="headerlink" title="自定义属性"></a>自定义属性</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus">类名操作<br>Node指一个有效的DOM节点，是一个通称<br>Node<span class="hljs-selector-class">.classList</span><span class="hljs-selector-class">.add</span>(<span class="hljs-string">&#x27;class&#x27;</span>) 添加class<br>Node<span class="hljs-selector-class">.classList</span><span class="hljs-selector-class">.remove</span>(<span class="hljs-string">&#x27;class&#x27;</span>) 移除class<br>Node<span class="hljs-selector-class">.classList</span><span class="hljs-selector-class">.toggle</span>(<span class="hljs-string">&#x27;class&#x27;</span>) 切换class，有则移除，无则添加<br>Node<span class="hljs-selector-class">.classList</span><span class="hljs-selector-class">.contains</span>(<span class="hljs-string">&#x27;class&#x27;</span>) 检测是否存在class<br></code></pre></td></tr></table></figure><h3 id="拖拽"><a href="#拖拽" class="headerlink" title="拖拽"></a>拖拽</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><br><span class="hljs-code">           -&gt; 能够拖拽 draggable=&quot;true&quot;</span><br><span class="hljs-code"></span><br><span class="hljs-code">           -&gt; ondragstart</span><br><span class="hljs-code"></span><br><span class="hljs-code">           -&gt; ondrop</span><br><span class="hljs-code"></span><br><span class="hljs-code">           -&gt; ondragover</span><br><span class="hljs-code"></span><br><span class="hljs-code">              preventDefault()</span><br><span class="hljs-code"></span><br>步骤：<br><span class="hljs-bullet">    1.</span> 首先要保证元素可以被拖拽，通过设置 draggable=&quot;true&quot;<br><br><span class="hljs-bullet">    2.</span> 被拖拽元素会触发一个ondragstart事件，在该事件中通过事件对象参数e,可对被拖拽数据信息进行操作<br><br><span class="hljs-code">          e.dataTransfer.setData(k,value) 设置被拖拽对象的数据</span><br><span class="hljs-code"></span><br><span class="hljs-bullet">    3.</span> 容器在接收被拖拽元素的时候会触发一个ondrop的事件，通过该事件中的事件对象参数可以获取到被拖拽元素的信息 <br><span class="hljs-code">          e.dataTransfer.getData(k)</span><br><span class="hljs-code"></span><br><span class="hljs-code">          e.target.appendChild(被拖拽元素)   添加到容器中</span><br><span class="hljs-code"></span><br><span class="hljs-bullet">    4.</span> 容器在接收完被拖拽的元素后，会触发一个ondragover的事件，在该事件中可以通过事件对象参数设置让该容器允许接收元素<br><span class="hljs-code">         e.preventDefault()</span><br></code></pre></td></tr></table></figure><h3 id="多媒体"><a href="#多媒体" class="headerlink" title="多媒体"></a>多媒体</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs scss">canplay 事件<br>paused 播放状态<br>duration 获取总时长<br>currentTime 当前播放时间<br><span class="hljs-built_in">play</span>() 播放<br><span class="hljs-attribute">pause</span>() 暂停<br>注意： 存在一定的兼容信息 <span class="hljs-selector-tag">video</span><span class="hljs-selector-class">.webkitRequestFullScreen</span>() 全屏<br><span class="hljs-selector-tag">video</span><span class="hljs-selector-class">.webkitExitFullScreen</span>(); 退出全屏<br></code></pre></td></tr></table></figure><h3 id="地理位置"><a href="#地理位置" class="headerlink" title="地理位置"></a>地理位置</h3><p>获取当前地理位置信息(一次)</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sas"><span class="hljs-keyword">window</span>.navigator.geolocation.getCurrentPositio<span class="hljs-meta">n</span>(success,<span class="hljs-keyword">error</span>)<br><br>  success ：当能够获取地理位置信息的回调函数<br>  <span class="hljs-keyword">error</span>：   当不能获取地理位置信息的回调函数<br></code></pre></td></tr></table></figure><p>实时获取当前地理位置信息（实时获取）</p><h3 id="网络状态"><a href="#网络状态" class="headerlink" title="网络状态"></a>网络状态</h3><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">window.navigator.onLine;、</span><br><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-comment">&lt;!-- 联网时候触发 --&gt;</span></span><br><span class="language-xml">window.addEventListener(&quot;online&quot;,function()</span><span class="hljs-template-variable">&#123;&#125;</span><span class="language-xml">);</span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-comment">&lt;!-- 断网时候触发 --&gt;</span></span><br><span class="language-xml">window.addEventListener(&quot;offline&quot;,function()</span><span class="hljs-template-variable">&#123;&#125;</span><span class="language-xml">);</span><br></code></pre></td></tr></table></figure><h3 id="本地存储cookie-local-session"><a href="#本地存储cookie-local-session" class="headerlink" title="本地存储cookie local session"></a>本地存储cookie local session</h3><h4 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h4><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-title">.Cookie cookie的大小是受限的，并且每次你请求一个新的页面的时候Cookie都会被发送过去 这样无形中浪费了带宽.</span><br></code></pre></td></tr></table></figure><h4 id="sessionStorage"><a href="#sessionStorage" class="headerlink" title="sessionStorage"></a>sessionStorage</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs markdown">特点：<br><span class="hljs-bullet">    1.</span> 数据只能在同一个页面中数据，不能跨页面访问<br><br><span class="hljs-bullet">    2.</span> 页面关闭后数据随之销毁<br><br><span class="hljs-bullet">    3.</span> 不属于持久性本地存储<br><br><span class="hljs-bullet">    4.</span> 大小为5M<br><br></code></pre></td></tr></table></figure><h4 id="localStorage"><a href="#localStorage" class="headerlink" title="localStorage"></a>localStorage</h4><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs gcode">localStorage.getItem<span class="hljs-comment">(关键名)</span><br><br>localStorage.setItem<span class="hljs-comment">(关键名,新数组)</span><br><br>删除本地存储<br><br>localStorae.removeItem<span class="hljs-comment">(数据名)</span><br><br>localStorae.clear<span class="hljs-comment">()</span>;<br><br></code></pre></td></tr></table></figure><h3 id="历史管理"><a href="#历史管理" class="headerlink" title="历史管理"></a>历史管理</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs markdown">history对象，历史记录管理对象。<br><br>常可用于单页面web应用(Single Page Application)，为应用添加历史记录。<br><br><span class="hljs-bullet">-</span> history.pushState(data, title) 追加一条历史记录  <br><span class="hljs-bullet">  -</span> data用于存储自定义数据<br><span class="hljs-bullet">  -</span> title网页标题，基本上没有被支持，一般设为空<br><span class="hljs-bullet">-</span> history.state 获取最新一条历史记录<br><span class="hljs-bullet">-</span> window.onpopstate事件，当前进或后退时则触发 <br><br>单页Web应用（single page web application） 简称SPA<br><br><span class="hljs-bullet">-</span> 单页面应用程序的特点<br><span class="hljs-bullet">  -</span> 整个网站由一个页面构成<br><span class="hljs-bullet">  -</span> 公共部分只加载一次<br><span class="hljs-bullet">  -</span> 利用Ajax局部刷新达到页面切换的目的<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>H5C3</category>
      
    </categories>
    
    
    <tags>
      
      <tag>H5C3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>javascripts知识点梳理5</title>
    <link href="/2019/04/02/javascripts%E7%9F%A5%E8%AF%86%E7%82%B9%E6%A2%B3%E7%90%865/"/>
    <url>/2019/04/02/javascripts%E7%9F%A5%E8%AF%86%E7%82%B9%E6%A2%B3%E7%90%865/</url>
    
    <content type="html"><![CDATA[<h1 id="javascripts知识点梳理5"><a href="#javascripts知识点梳理5" class="headerlink" title="javascripts知识点梳理5"></a>javascripts知识点梳理5</h1><h2 id="JS面向对象"><a href="#JS面向对象" class="headerlink" title="JS面向对象"></a>JS面向对象</h2><p>ECMAScript 有两种开发模式：1.函数式(过程化)，2.面向对象(OOP)。面向对象的语言有一个标志，那就是类的概念，而通过类可以创建任意多个具有相同属性和方法的对象。但是，ECMAScript 没有类的概念，因此它的对象也与基于类的语言中的对象有所不同。</p><p>js（如果没有作特殊说明，本文中的js仅包含ES5以内的内容）本身是没有class类型的，但是<u>每个函数都有一个prototype属性。prototype指向一个对象，</u><u>当函数作为构造函数时，prototype则起到类似class的作用。</u></p><p>面向过程：以前大部分的代码都是面向过程的</p><p>面向对象：使用内置对象功能，jQuery</p><h3 id="面向对象的三个特征"><a href="#面向对象的三个特征" class="headerlink" title="面向对象的三个特征"></a>面向对象的三个特征</h3><p><strong>封装：</strong>封装为对象(工具的封装操作)，需要调用即可，无需多次重写。 </p><p><strong>继承：</strong>子类可以继承父类的属性和方法 ，为了实现代码更好的复用</p><p><strong>多态（</strong>多状态）：让代码操作更加灵活</p><ol><li>重载：严格意义上说JS中没有重载的功能，不过我们可以通过判断函数的参数的不同来实现不同的功能来模拟重载。</li><li>重写：子类可以改写父类的属性和方法</li></ol><p>在这里我们可以理解为创造对象的几种模式：</p><h3 id="创造对象的几种模式"><a href="#创造对象的几种模式" class="headerlink" title="创造对象的几种模式"></a>创造对象的几种模式</h3><blockquote><p>单例模式，工厂模式，构造函数模式,原型模式等。 </p></blockquote><p><strong>单例模式</strong> </p><p>小王在一个小公司，就自己一个前端，所以他写js都是这样的 </p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ada">var a = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title">getNum</span>()&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-type">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>后来公司又招了个前端小明，于是变成他们2个一起写同一个js了。一天小王发现自己写的getNum方法出问题了，原来是小华写的js中也有个getNum的函数，代码合并后把他的覆盖掉了，于是便找小华理论去，经过一番妥协后，两人都把自己的代码改了改 </p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">var</span> xiaoming = &#123;<br>    num:<span class="hljs-number">1</span>,<br>    getNum:<span class="hljs-keyword">function</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br> <br><span class="hljs-keyword">var</span> xiaohua = &#123;<br>    num:<span class="hljs-number">2</span>,<br>    getNum: <span class="hljs-keyword">function</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这就是我们所谓的单例模式(命名空间) </p><p><strong>单例模式的优劣</strong> </p><ol><li>使用单例模式，我们可以实现简单的模块化开发</li></ol><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">var</span> utils = &#123;<br>    getCss:<span class="hljs-keyword">function</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//code</span><br>    &#125;,<br>    getByClass:<span class="hljs-keyword">function</span><span class="hljs-params">()</span>&#123;<br>         <span class="hljs-comment">//code</span><br>    &#125;,<br>    setCss:<span class="hljs-keyword">function</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//code</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们可以把自己写好的工具方法放到一个单独的js文件中，然后直接引入即可。</p><ol><li>避免了全局变量名的冲突<br>需要注意的是，我们在引入各个模块的时候，需要注意引入的顺序，引入顺序是按照各模块之间的相互依赖进行前后排列的；</li><li>缺点：</li><li><ul><li>单例模式只是一定程度上避免了变量名的冲突，但并不能彻底解决此问题，而且在不同的对象下，我们可能会有很多功能相同的代码，最终造成大量的冗余代码。</li></ul></li></ol><ul><li>单例模式让每个对象有了自己独立的命名空间，但是并不能批量生产的问题，每一个新的对象都要重新写一份一模一样的代码。</li></ul><p><strong>工厂模式</strong> </p><ol><li>工厂模式其实就是把需要一个个的编写的对象,放在一个函数中统一的进行创建，说白了就是普通函数的封装。</li><li>工厂模式总共3步骤：</li></ol><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-number">1</span>）引进原材料 <span class="hljs-comment">--- 创建一个空对象</span><br><span class="hljs-number">2</span>）加工原材料 <span class="hljs-comment">--- 加工对象：给对象添加属性和方法；</span><br><span class="hljs-number">3</span>）输出产品 <span class="hljs-comment">--- 返回对象：return 对象；</span><br></code></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">CreatePerson</span>(<span class="hljs-params">name,age</span>)&#123;<br>        <span class="hljs-keyword">var</span> obj=&#123;&#125;;<span class="hljs-comment">//1.创建一个空对象</span><br>        <span class="hljs-comment">//2.加工对象</span><br>        obj.name=name;<br>        obj.age=age;<br>        obj.showName=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>            <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;我的名字是：&#x27;</span>+this.name)<br>        &#125;;<br>        <span class="hljs-keyword">return</span> obj;<span class="hljs-comment">//3.输出对象；</span><br>&#125;<br><span class="hljs-keyword">var</span> person1 = CreatePerson(<span class="hljs-string">&#x27;小明&#x27;</span>,<span class="hljs-number">23</span>)<br><span class="hljs-keyword">var</span> person2 = CreatePerson(<span class="hljs-string">&#x27;小华&#x27;</span>,<span class="hljs-number">23</span>)<br>person1.showName(); <span class="hljs-comment">//我的名字是：小明</span><br>person2.showName(); <span class="hljs-comment">//我的名字是：小华</span><br></code></pre></td></tr></table></figure><p>工厂模式的优缺点 </p><ul><li><ol><li>既然叫工厂模式，它就和我们周围的工厂一样，我们只需要把原材料放进去，就能得到我们需要的产品了。</li><li>工厂模式也解决了单例模式的批量生产的问题，避免了单例模式中的大量冗余代码，进行系统的封装，提高代码的重复利用率</li><li>不过工厂模式跟我们js内置类的调用方法不同</li></ol></li><li></li></ul><p> <strong>构造函数模式</strong> </p><ol><li>可以创建一个自定义的类，并且可以new出实例</li><li>构造函数做的就是类和实例打交道。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"> <span class="hljs-comment">//构造函数：首字母大写(约定俗成)；</span><br> <span class="hljs-keyword">function</span> <span class="hljs-title function_">CreatePerson</span>(<span class="hljs-params">name,age</span>)&#123; <span class="hljs-comment">//创建一个自定义的类</span><br>     <span class="hljs-comment">//构造函数中的this，都是new出来的实例</span><br>     <span class="hljs-comment">//构造函数中存放的都是私有的属性和方法；</span><br>     <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>=name;<br>     <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span>=age;<br>     <span class="hljs-variable language_">this</span>.<span class="hljs-property">showName</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;我的名字是：&#x27;</span>+<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>)<br>     &#125;<br> &#125;<br><span class="hljs-comment">//实例1</span><br> <span class="hljs-keyword">var</span> person1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CreatePerson</span>(<span class="hljs-string">&#x27;小明&#x27;</span>,<span class="hljs-number">25</span>)<br><span class="hljs-comment">//实例2</span><br> <span class="hljs-keyword">var</span> person2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CreatePerson</span>(<span class="hljs-string">&#x27;小华&#x27;</span>,<span class="hljs-number">24</span>)<br></code></pre></td></tr></table></figure><p>这里说一下工厂模式和构造函数模式的区别： </p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-number">1</span>. 在调用的时候不同：<br>工厂模式：调用的时候，只是普通函数的调用<span class="hljs-built_in">createPerson</span>();<br>构造函数模式：new <span class="hljs-built_in">CreatePerson</span>();<br><span class="hljs-number">2</span>. 在函数体内不同：<br>工厂模式有三步：<span class="hljs-number">1</span>）创建对象 <span class="hljs-number">2</span>）加工对象 <span class="hljs-number">3</span>）返回对象；<br>构造函数模式只有<span class="hljs-number">1</span>步： 只有加工对象； 因为系统默认会为其创建对象和返回对象；<br><span class="hljs-number">3</span>. 构造函数默认给我们返回了一个对象，如果我们非要自己手动返回的话：<br>    (<span class="hljs-number">1</span>)手动返回的是字符串类型：对以前实例上的属性和方法没有影响；<br>    (<span class="hljs-number">2</span>)手动返回的是引用数据类型:以前实例身上的属性和方法就被覆盖了；实例无法调用属性和方法；<br></code></pre></td></tr></table></figure><p>我们可以使用原型模式来解决每个实例中都有相同方法的函数的问题 </p><p><strong>原型模式</strong></p><p>我们把公有的方法放到函数的原型链上</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">CreatePerson</span>(<span class="hljs-params">name,age</span>)&#123; <br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>=name;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span>=age;<br>&#125;<br><span class="hljs-comment">// 我们把公有的方法放到函数的原型链上</span><br><span class="hljs-title class_">CreatePerson</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">showName</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>         <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;我的名字是：&#x27;</span>+<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>)<br>&#125;  <br><span class="hljs-keyword">var</span> person1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CreatePerson</span>(<span class="hljs-string">&#x27;小明&#x27;</span>,<span class="hljs-number">25</span>) <br><span class="hljs-keyword">var</span> person2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CreatePerson</span>(<span class="hljs-string">&#x27;小华&#x27;</span>,<span class="hljs-number">24</span>)<br>person1.<span class="hljs-title function_">showName</span>() <span class="hljs-comment">//小明</span><br></code></pre></td></tr></table></figure><p><strong>原型模式的关键：</strong> </p><ol><li><p>1）每个函数数据类型（普通函数，类）上，都有一个属性，叫prototype。</p></li><li><p>2）prototype这个对象上，天生自带一个属性，叫constructor:指向当前这个类；</p></li><li><p>3）每个对象数据类型（普通对象，prototype，实例）上都有一个属性，</p></li><li><p>   叫做__proto__:指向当前实例所属类的原型</p></li></ol><h3 id="一．创建对象"><a href="#一．创建对象" class="headerlink" title="一．创建对象"></a>一．创建对象</h3><p>创建一个对象，然后给这个对象新建属性和方法。 </p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs processing">var <span class="hljs-built_in">box</span> = <span class="hljs-keyword">new </span><span class="hljs-class title_">Object</span>(); <span class="hljs-comment">//创建一个Object 对象</span><br><span class="hljs-built_in">box</span>.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;Lee&#x27;</span>; <span class="hljs-comment">//创建一个name 属性并赋值</span><br><span class="hljs-built_in">box</span>.<span class="hljs-property">age</span> = <span class="hljs-number">100</span>; <span class="hljs-comment">//创建一个age 属性并赋值</span><br><span class="hljs-built_in">box</span>.<span class="hljs-property">run</span> = <span class="hljs-title function_">function</span> () &#123; <span class="hljs-comment">//创建一个run()方法并返回值</span><br><span class="hljs-keyword">return</span> <span class="hljs-variable">this</span>.<span class="hljs-property">name</span> + <span class="hljs-variable">this</span>.<span class="hljs-property">age</span> + <span class="hljs-string">&#x27;运行中...&#x27;</span>;<br>&#125;;<br><span class="hljs-title function_">alert</span>(<span class="hljs-built_in">box</span>.<span class="hljs-property">run</span>()); <span class="hljs-comment">//输出属性和方法的值</span><br><br></code></pre></td></tr></table></figure><p>上面创建了一个对象，并且创建属性和方法，在run()方法里的this，就是代表box 对象本身。这种是JavaScript 创建对象最基本的方法，但有个缺点，想创建多个类似的对象，就会产生大量的代码。 为了解决多个类似对象声明的问题，我们可以使用一种叫做工厂模式的方法，这种方法就是为了解决实例化对象产生大量重复的问题。 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">createObject</span>(<span class="hljs-params">name, age</span>) &#123; <span class="hljs-comment">//集中实例化的函数</span><br><span class="hljs-keyword">var</span> obj = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br>obj.<span class="hljs-property">name</span> = name;<br>obj.<span class="hljs-property">age</span> = age;<br>obj.<span class="hljs-property">run</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> + <span class="hljs-string">&#x27;运行中...&#x27;</span>;<br>&#125;;<br><span class="hljs-keyword">return</span> obj;<br>&#125;<br><span class="hljs-keyword">var</span> box1 = <span class="hljs-title function_">createObject</span>(<span class="hljs-string">&#x27;Lee&#x27;</span>, <span class="hljs-number">100</span>); <span class="hljs-comment">//第一个实例</span><br><span class="hljs-keyword">var</span> box2 = <span class="hljs-title function_">createObject</span>(<span class="hljs-string">&#x27;Jack&#x27;</span>, <span class="hljs-number">200</span>); <span class="hljs-comment">//第二个实例</span><br><span class="hljs-title function_">alert</span>(box1.<span class="hljs-title function_">run</span>());<br><span class="hljs-title function_">alert</span>(box2.<span class="hljs-title function_">run</span>()); <span class="hljs-comment">//保持独立</span><br><br></code></pre></td></tr></table></figure><p>工厂模式解决了重复实例化的问题，但是它有许多问题，创建不同对象其中属性和方法都会重复建立，消耗内存；还有函数识别问题等等。</p><h3 id="二．构造函数的方法"><a href="#二．构造函数的方法" class="headerlink" title="二．构造函数的方法"></a>二．构造函数的方法</h3><p>构造函数的方法有一些规范： 1）函数名和实例化构造名相同且大写，(PS：非强制，但这么写有助于区分构造函数和 普通函数)； 2）通过构造函数创建对象，必须使用new 运算符。 </p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Box</span><span class="hljs-params">(name, age)</span> &#123; <span class="hljs-comment">//构造函数模式</span><br><span class="hljs-keyword">this</span>.name = name;<br><span class="hljs-keyword">this</span>.age = age;<br><span class="hljs-keyword">this</span>.run = <span class="hljs-keyword">function</span> <span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.name + <span class="hljs-keyword">this</span>.age + <span class="hljs-string">&#x27;运行中...&#x27;</span>;<br>&#125;;<br>&#125;<br><span class="hljs-keyword">var</span> box1 = <span class="hljs-keyword">new</span> Box(<span class="hljs-string">&#x27;Lee&#x27;</span>, <span class="hljs-number">100</span>); <span class="hljs-comment">//new Box()即可</span><br><span class="hljs-keyword">var</span> box2 = <span class="hljs-keyword">new</span> Box(<span class="hljs-string">&#x27;Jack&#x27;</span>, <span class="hljs-number">200</span>);<br>alert(box1.run());<br>alert(box1 <span class="hljs-keyword">instanceof</span> Box); <span class="hljs-comment">//很清晰的识别他从属于Box</span><br><br></code></pre></td></tr></table></figure><p> 构造函数可以创建对象执行的过程： 1）当使用了构造函数，并且new 构造函数()，那么就后台执行了new Object()； 2）将构造函数的作用域给新对象，(即new Object()创建出的对象)，而函数体内的this 就 代表new Object()出来的对象。 3）执行构造函数内的代码； 4）返回新对象(后台直接返回)。 </p><p>注：</p><p>1）构造函数和普通函数的唯一区别，就是他们调用的方式不同。只不过，构造函数也是函数，必须用new 运算符来调用，否则就是普通函数。</p><p>2）this就是代表当前作用域对象的引用。如果在全局范围this 就代表window 对象，如果在构造函数体内，就代表当前的构造函数所声明的对象。</p><p>这种方法解决了函数识别问题，但消耗内存问题没有解决。同时又带来了一个新的问题，全局中的this 在对象调用的时候是Box 本身，而当作普通函数调用的时候，this 又代表window。即this作用域的问题。</p><h3 id="三-原型"><a href="#三-原型" class="headerlink" title="三.原型"></a>三.原型</h3><p>我们创建的每个函数都有一个prototype(原型)属性，这个属性是一个对象，它的用途是包含可以由特定类型的所有实例共享的属性和方法。逻辑上可以这么理解：prototype 通过调用构造函数而创建的那个对象的原型对象。使用原型的好处可以让所有对象实例共享它所包含的属性和方法。也就是说，不必在构造函数中定义对象信息，而是可以直接将这些信息添加到原型中。 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Box</span>(<span class="hljs-params"></span>) &#123;&#125; <span class="hljs-comment">//声明一个构造函数</span><br><span class="hljs-title class_">Box</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;Lee&#x27;</span>; <span class="hljs-comment">//在原型里添加属性</span><br><span class="hljs-title class_">Box</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">age</span> = <span class="hljs-number">100</span>;<br><span class="hljs-title class_">Box</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">run</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123; <span class="hljs-comment">//在原型里添加方法</span><br><span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> + <span class="hljs-string">&#x27;运行中...&#x27;</span>;<br>&#125;;<br><br></code></pre></td></tr></table></figure><p>所以，它解决了消耗内存问题。当然它也可以解决this作用域等问题。 </p><p>我们经常把属性（一些在实例化对象时属性值改变的），定义在构造函数内；把公用的方法添加在原型上面，也就是混合方式构造对象（构造方法+原型方式）： </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> person = <span class="hljs-keyword">function</span>(<span class="hljs-params">name</span>)&#123;<br>   <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br> &#125;;<br> person.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">getName</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>     <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>; <br> &#125;<br> <span class="hljs-keyword">var</span> zjh = <span class="hljs-keyword">new</span> <span class="hljs-title function_">person</span>(‘zhangjiahao’);<br> zjh.<span class="hljs-title function_">getName</span>(); <span class="hljs-comment">//zhangjiahao</span><br><br></code></pre></td></tr></table></figure><h2 id="内置对象添加方法"><a href="#内置对象添加方法" class="headerlink" title="内置对象添加方法"></a>内置对象添加方法</h2><p>直接给内置构造函数原型添加即可</p><p>例如:Array.prototype.getSum &#x3D; function () {}</p><h2 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h2><p>表示将代码根据功能分为不同区域<br>使用立即执行函数对不同功能的代码进行包裹<br>使用一个js库requirejs<br>用于解决引入顺序问题</p><p>在html页面中引入require文件,并设置data-main属性声明入口模块路径</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span> =<span class="hljs-string">&quot;require.js&quot;</span> <span class="hljs-attr">data-main</span>=<span class="hljs-string">&quot;main&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">在入口模块中声明依赖关系,参数<span class="hljs-number">1</span>为地址,参数<span class="hljs-number">2</span>为函数<br><span class="hljs-built_in">require</span>([<span class="hljs-string">&#x27;js/game&#x27;</span>],<span class="hljs-keyword">function</span>(<span class="hljs-params">Game</span>)&#123;<br>......<br>&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arcade">在模块中需要被其他模块调用的进行返回值设置<br>define([<span class="hljs-string">&#x27;js/food&#x27;</span> , <span class="hljs-string">&#x27;js/snake&#x27;</span>] , <span class="hljs-keyword">function</span>(<span class="hljs-params">Food , Snake</span>)&#123;<br>......<br><span class="hljs-keyword">return</span> Game;<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="高级技巧-判断是数组还是对象"><a href="#高级技巧-判断是数组还是对象" class="headerlink" title="高级技巧_判断是数组还是对象"></a>高级技巧_判断是数组还是对象</h2><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs delphi">  <span class="hljs-comment">// console.log(a.consturctor);</span><br>    <span class="hljs-comment">// function fn()&#123;</span><br>        <span class="hljs-keyword">var</span> a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>];<br>        <span class="hljs-keyword">var</span> c = <span class="hljs-comment">&#123;</span><br><span class="hljs-comment">            name:&#x27;zs&#x27;,</span><br><span class="hljs-comment">            age:18</span><br><span class="hljs-comment">        &#125;</span><br>        <span class="hljs-keyword">var</span> b = c.<span class="hljs-keyword">constructor</span><br>  <br>    console.log(b);<br><br><br> <span class="hljs-keyword">var</span> a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>];<br><span class="hljs-keyword">var</span> b = a.<span class="hljs-keyword">constructor</span> === <span class="hljs-keyword">Array</span> ? [] :<span class="hljs-comment">&#123;&#125;</span>;<br>console.log(b);<br><br>因为  数组  和   对象都属于函数  函数就有原型对象<br>利用原型对象里的<span class="hljs-function"><span class="hljs-keyword">constructor</span>  属性指向</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>javascript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>javascripts知识点梳理4</title>
    <link href="/2019/03/26/javascripts%E7%9F%A5%E8%AF%86%E7%82%B9%E6%A2%B3%E7%90%864/"/>
    <url>/2019/03/26/javascripts%E7%9F%A5%E8%AF%86%E7%82%B9%E6%A2%B3%E7%90%864/</url>
    
    <content type="html"><![CDATA[<h1 id="javascripts知识点梳理4"><a href="#javascripts知识点梳理4" class="headerlink" title="javascripts知识点梳理4"></a>javascripts知识点梳理4</h1><h2 id="函数"><a href="#函数" class="headerlink" title="-函数"></a>-函数</h2><p>带返回值的函数</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs ada">语法：<br><span class="hljs-keyword">function</span> <span class="hljs-title">函数名（）&#123;</span><br>    <span class="hljs-keyword">return</span>  <span class="hljs-type">需要返回的值；</span><br>&#125;<br>函数调用<br>函数名（）    //   此时 调用 函数就可以得到   函数体内<span class="hljs-keyword">return</span>  后面的值<br><br>注意：retrun 后的代码不被执行<br><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(num1，num2)&#123;<br>    //函数体<br>    <span class="hljs-keyword">return</span> <span class="hljs-type">num1</span> + num2; // 注意：<span class="hljs-keyword">return</span> 后的代码不执行<br>    alert(&#x27;我不会被执行，因为前面有 <span class="hljs-keyword">return</span>&#x27;);<br>&#125;<br>var resNum = add(<span class="hljs-number">21</span>,<span class="hljs-number">6</span>); // 调用函数，传入 两个实参，并通过 resNum 接收函数返回值<br>alert(resNum);// <span class="hljs-number">27</span><br></code></pre></td></tr></table></figure><h2 id="定义函数有两种方式"><a href="#定义函数有两种方式" class="headerlink" title="定义函数有两种方式"></a>定义函数有两种方式</h2><p>函数声明方式</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// 命名函数   有函数名 为  fn </span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>) </span>&#123; ....&#125;<br><span class="hljs-comment">// 调用  那个地方调用都可以</span><br><span class="hljs-function"><span class="hljs-keyword">fn</span>(<span class="hljs-params"></span>)  </span><br></code></pre></td></tr></table></figure><p>函数表达式方式</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs delphi"><span class="hljs-comment">// 这是 函数表达式 写法   匿名函数后面跟分号结束</span><br><span class="hljs-keyword">var</span>  fn =  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> <span class="hljs-comment">&#123; ....  &#125;</span>；</span><br><span class="hljs-function"><span class="hljs-comment">// 调用的方式  但是这个方式，函数调用必须写到函数体下面</span></span><br><span class="hljs-function"><span class="hljs-title">fn</span><span class="hljs-params">()</span>;</span><br><br><span class="hljs-number">1</span>. 函数没有名字，我们称为匿名函数<br><span class="hljs-number">1</span>. 这个fn 里面存储的是一个函数  <br><span class="hljs-number">3</span> 这个执行的原理 跟我们 学的 变量使用一致的。<br><br><br>有些函数没必要一定给名字， 比如我们 点击某个按钮，就执行一个代码 <br><br>    <span class="hljs-comment">// 点击按钮  就执行一段代码， 没必要给这个函数再命名了。直接跟一个匿名函数就好了</span><br>    btn.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> <span class="hljs-comment">&#123; ...&#125;</span>;</span> <br></code></pre></td></tr></table></figure><p>自执行函数</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs scss">匿名函数除了作为参数传递外，也可以作为启动函数，定义后立即自执行<br>(function () &#123;<br>  <span class="hljs-built_in">alert</span>(&#x27;我是匿名函数，被自执行啦~~！&#x27;);<br>&#125;)();<br></code></pre></td></tr></table></figure><p>函数也是一种数据类型</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;11&#x27;</span>);<br> &#125;<br> <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">typeof</span> fn) <span class="hljs-comment">// function</span><br></code></pre></td></tr></table></figure><p>函数可以作为参数</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> fn = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>     <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;我是一个函数&#x27;</span>);<br>&#125;;<br> <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(fn);<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getFn</span>(<span class="hljs-params"></span>) &#123;<br>       <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;我也是一个函数&#x27;</span>)<br>&#125;<br> <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(getFn);<br></code></pre></td></tr></table></figure><p>函数可以作为返回值</p><figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs zephir"> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> </span>&#123;<br>                console.log(<span class="hljs-string">&#x27;返回函数&#x27;</span>)<br>            &#125;;<br> &#125;<br> <span class="hljs-comment">//fn() 里面保存的是 返回的 匿名函数function() &#123;&#125;</span><br>console.log(<span class="hljs-function"><span class="hljs-keyword">fn</span><span class="hljs-params">()</span>)</span>;<br><span class="hljs-comment">// 函数调用          </span><br><span class="hljs-function"><span class="hljs-keyword">fn</span><span class="hljs-params">()</span><span class="hljs-params">()</span></span>;<br></code></pre></td></tr></table></figure><p>案例</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><code class="hljs arcade">求一个数组 [<span class="hljs-number">5</span>,<span class="hljs-number">2</span>,<span class="hljs-number">99</span>,<span class="hljs-number">101</span>,<span class="hljs-number">67</span>,<span class="hljs-number">77</span>] 中的最大数值<br><span class="hljs-comment">//定义一个 获取数组中 最大数 的函数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getMaxFromArr</span>(<span class="hljs-params">numArray</span>)&#123;<br>    <span class="hljs-keyword">var</span> maxNum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i =<span class="hljs-number">0</span>;i &lt; numArray.<span class="hljs-built_in">length</span>;i++)&#123;<br>        <span class="hljs-keyword">if</span>(numArray[i] &gt; maxNum)&#123;<br>            maxNum = numArray[i];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> maxNum;<br>&#125;<br><span class="hljs-comment">//定义一个数值数组</span><br><span class="hljs-keyword">var</span> arrNum = [<span class="hljs-number">5</span>,<span class="hljs-number">2</span>,<span class="hljs-number">99</span>,<span class="hljs-number">101</span>,<span class="hljs-number">67</span>,<span class="hljs-number">77</span>];<br><span class="hljs-comment">//调用函数获取最大值</span><br><span class="hljs-keyword">var</span> maxN = getMaxFromArr(arrNum);<br><span class="hljs-comment">//打印最大值</span><br>alert(<span class="hljs-string">&#x27;最大值为：&#x27;</span>+ maxN);<br><br><br><br><br>翻转数组，返回一个新数组<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">reverseFun</span>(<span class="hljs-params">arr</span>) &#123;<br>   <span class="hljs-keyword">var</span> newArr = [];<br>     <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; arr.<span class="hljs-built_in">length</span>; i++) &#123;<br>         newArr[i] = arr[arr.<span class="hljs-built_in">length</span> - i - <span class="hljs-number">1</span>];<br>       &#125;<br>      <span class="hljs-keyword">return</span> newArr;<br>&#125;<br><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">8</span>];<br><span class="hljs-keyword">var</span> arr1 = [<span class="hljs-string">&#x27;pink&#x27;</span>, <span class="hljs-string">&#x27;hotpink&#x27;</span>, <span class="hljs-string">&#x27;deeppink&#x27;</span>];<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(reverseFun(arr));<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(reverseFun(arr1));<br><br><br>对数组排序，从小到大 <br><span class="hljs-keyword">function</span> <span class="hljs-title function_">sort</span>(<span class="hljs-params">array</span>) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">array</span>.<span class="hljs-built_in">length</span> - <span class="hljs-number">1</span>; i++) &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-built_in">array</span>.<span class="hljs-built_in">length</span> - i - <span class="hljs-number">1</span>; j++) &#123;<br>                    <span class="hljs-keyword">if</span> (arr[j] &gt; arr[j + <span class="hljs-number">1</span>]) &#123;<br>                        <span class="hljs-keyword">var</span> temp = arr[j];<br>                        arr[j] = arr[j + <span class="hljs-number">1</span>];<br>                        arr[j + <span class="hljs-number">1</span>] = temp;<br>                    &#125;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">array</span>;<br>        &#125;<br><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">2</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">9</span>];<br><span class="hljs-keyword">var</span> arr1 = [<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">8</span>];<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">sort</span>(arr));<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">sort</span>(arr1));<br><br><br><br>输入一个年份，判断是否是闰年[闰年：能被<span class="hljs-number">4</span>整数并且不能被<span class="hljs-number">100</span>整数，或者能被<span class="hljs-number">400</span>整数]<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">isRun</span>(<span class="hljs-params">year</span>) &#123;<br>            <span class="hljs-keyword">var</span> flag = <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">year</span> % <span class="hljs-number">4</span> === <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-built_in">year</span> % <span class="hljs-number">100</span> !== <span class="hljs-number">0</span> || <span class="hljs-built_in">year</span> % <span class="hljs-number">400</span> === <span class="hljs-number">0</span>) &#123;<br>                flag = <span class="hljs-literal">true</span>;<br>            &#125;<br>            <span class="hljs-keyword">return</span> flag;<br>        &#125;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(isRun(<span class="hljs-number">2010</span>));<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(isRun(<span class="hljs-number">2012</span>));<br><br><br><br><br>输入某年某月某日，判断这一天是这一年的第几天？<br><span class="hljs-number">1.</span> 先计算 输入的当前 月份的天数   <br><span class="hljs-number">2.</span> 计算加上 前面几个月的总天数<br><span class="hljs-number">3.</span> 月份不同 <span class="hljs-number">1.3</span> <span class="hljs-number">.5</span> <span class="hljs-number">.7</span> <span class="hljs-number">.8</span> <span class="hljs-number">.10</span> <span class="hljs-number">.12</span> 月是 <span class="hljs-number">31</span> 天     <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">9</span>, <span class="hljs-number">11</span> 是 <span class="hljs-number">30</span> 天       <span class="hljs-number">2</span> 月份 闰年是 <span class="hljs-number">29</span> 天 否则 <span class="hljs-number">28</span><br><span class="hljs-number">4.</span> 这个函数 需要 三个参数 分别是 年 月  日<br><br>      <span class="hljs-keyword">function</span> <span class="hljs-title function_">isRun</span>(<span class="hljs-params">year</span>) &#123;<br>                <span class="hljs-keyword">var</span> flag = <span class="hljs-literal">false</span>;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-built_in">year</span> % <span class="hljs-number">4</span> === <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-built_in">year</span> % <span class="hljs-number">100</span> !== <span class="hljs-number">0</span> || <span class="hljs-built_in">year</span> % <span class="hljs-number">400</span> === <span class="hljs-number">0</span>) &#123;<br>                    flag = <span class="hljs-literal">true</span>;<br>                &#125;<br>                <span class="hljs-keyword">return</span> flag;<br>            &#125;<br>            <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(isRun(<span class="hljs-number">1998</span>));<br>    <br>            <span class="hljs-keyword">function</span> <span class="hljs-title function_">getDays</span>(<span class="hljs-params">year, month, day</span>) &#123;<br>                <span class="hljs-comment">// 先计算当前月的 天数</span><br>                <span class="hljs-keyword">var</span> days = <span class="hljs-built_in">day</span>;<br>                <span class="hljs-comment">// 下面开始 累加 前面几个月的 总天数 </span><br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-built_in">month</span>; i++) &#123;<br>                    <span class="hljs-comment">// 月份不同  天数不同 我们用 switch</span><br>                    switch (i) &#123;<br>                        case <span class="hljs-number">1</span>:<br>                        case <span class="hljs-number">3</span>:<br>                        case <span class="hljs-number">5</span>:<br>                        case <span class="hljs-number">7</span>:<br>                        case <span class="hljs-number">8</span>:<br>                        case <span class="hljs-number">10</span>:<br>                        case <span class="hljs-number">12</span>:<br>                            days += <span class="hljs-number">31</span>;<br>                            <span class="hljs-keyword">break</span>;<br>                        case <span class="hljs-number">4</span>:<br>                        case <span class="hljs-number">6</span>:<br>                        case <span class="hljs-number">9</span>:<br>                        case <span class="hljs-number">11</span>:<br>                            days += <span class="hljs-number">30</span>;<br>                            <span class="hljs-keyword">break</span>;<br>                        case <span class="hljs-number">2</span>:<br>                            <span class="hljs-keyword">if</span> (isRun(<span class="hljs-built_in">year</span>)) &#123;<br>                                days += <span class="hljs-number">29</span>;<br>                            &#125; <span class="hljs-keyword">else</span> &#123;<br>                                days += <span class="hljs-number">28</span>;<br>                            &#125;<br>                            <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">return</span> days;<br>            &#125;<br>    <br>            <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(getDays(<span class="hljs-number">1998</span>, <span class="hljs-number">5</span>, <span class="hljs-number">2</span>));<br><br><br><br></code></pre></td></tr></table></figure><h2 id="arguments的使用"><a href="#arguments的使用" class="headerlink" title="arguments的使用"></a>arguments的使用</h2><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs arcade">JavaScript中，arguments对象是比较特别的一个对象，实际上是当前函数的一个内置属性。也就是说所有函数都内置了一个arguments对象，arguments对象中存储了传递的所有的实参。arguments是一个伪数组，因此及可以进行遍历<br>当我们不确定有多少个参数传递的时候，可以用arguments 来获取<br><br>求任意个数的最大值<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">maxValue</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-keyword">var</span> <span class="hljs-built_in">max</span> = arguments[<span class="hljs-number">0</span>];<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; arguments.<span class="hljs-built_in">length</span>; i++) &#123;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-built_in">max</span> &lt; arguments[i]) &#123;<br>                    <span class="hljs-built_in">max</span> = arguments[i];<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>;<br>        &#125;<br> <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(maxValue(<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">9</span>));<br> <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(maxValue(<span class="hljs-number">12</span>, <span class="hljs-number">4</span>, <span class="hljs-number">9</span>));<br><br><br>求任意个数的和<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">sumFun</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-keyword">var</span> <span class="hljs-built_in">sum</span> = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; arguments.<span class="hljs-built_in">length</span>; i++) &#123;<br>                <span class="hljs-built_in">sum</span> += arguments[i];<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">sum</span>;<br>        &#125;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(sumFun(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>));<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(sumFun(<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>));<br></code></pre></td></tr></table></figure><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs arcade">作用域：变量可以起作用的范围 （区域）<br><span class="hljs-number">3.1</span>全局变量和局部变量<br><br>- 全局作用域<br>  供所有代码执行的环境(整个script标签内部)<br>- 局部作用域（私有作用域）<br>  在调用函数的时候，会形成一个执行函数内代码的新环境。<br>- 全局变量<br>  - 在全局作用域下声明的变量叫做全局变量（在函数外部定义的变量）<br>  - 全局变量在代码的任何位置都可以使用<br>  - 特殊情况， 再函数内 不<span class="hljs-keyword">var</span> 声明 的 变量  也是全局变量 （不建议使用）<br>- 局部变量<br>  - 在局部作用域下声明的变量叫做局部变量（在函数内部定义的变量）<br>  - 局部变量只能在该函数内部使用<br><br><br><span class="hljs-keyword">var</span> scope = <span class="hljs-number">12</span>; <span class="hljs-comment">// 全局变量</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">demo</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> local = <span class="hljs-number">1</span>; <span class="hljs-comment">// 局部变量</span><br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(scope) <span class="hljs-comment">// 12</span><br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(local) <span class="hljs-comment">// 1</span><br>&#125;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(scope) <span class="hljs-comment">// 12</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(local) <span class="hljs-comment">// 报错 local is not defined</span><br></code></pre></td></tr></table></figure><h2 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h2><ul><li>如果函数中还有函数，那么在这个作用域中就又可以诞生一个作用域。</li><li>根据在内部函数可以访问外部函数变量的这种机制，用链式查找决定哪些数据能被内部函数访问。 就称作作用域链。</li></ul><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">f1</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">f2</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">var</span> num = <span class="hljs-number">456</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">f3</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">f4</span><span class="hljs-params">()</span> &#123;    <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="预解析"><a href="#预解析" class="headerlink" title="预解析"></a>预解析</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs markdown">JavaScript代码是由浏览器中的JavaScript解析器来执行的。JavaScript解析器在运行JavaScript代码的时候，分为两步：预解析和代码执行<br><br><span class="hljs-bullet">-</span> 预解析过程<br><span class="hljs-bullet">  -</span> JavaScript解析器会在全局环境下查找 var、function关键字，变量只声明不赋值，函数声明加赋值。<br><span class="hljs-bullet">  -</span> 预解析只发生在当前作用域下<br><span class="hljs-bullet">-</span> 预解析也叫做变量、函数提升<br><span class="hljs-bullet">  -</span> 变量提升<br><span class="hljs-code">    定义变量的时候，变量的声明会被提升到当前作用域的最上面，变量的赋值不会提升。</span><br><span class="hljs-code">  - 函数提升</span><br><span class="hljs-code">    JavaScript解析器首先会把当前作用域的函数声明提前到整个作用域的最前面</span><br><span class="hljs-code"></span><br><span class="hljs-bullet">-</span> 执行过程<br><span class="hljs-bullet">  -</span> 变量赋值、函数调用、表达式运算等等。<br></code></pre></td></tr></table></figure><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">// 案例1</span><br><span class="hljs-keyword">var</span> num = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(num);<br>    <span class="hljs-keyword">var</span> num = <span class="hljs-number">20</span>;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(num);<br>&#125; <br>fn();<br><br><span class="hljs-comment">// 案例2</span><br><span class="hljs-keyword">var</span> num = <span class="hljs-number">10</span>;<br>fun();<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fun</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(num);<br>  <span class="hljs-keyword">var</span> num = <span class="hljs-number">20</span>;<br>&#125;<br><br><br><span class="hljs-comment">// 案例3</span><br><span class="hljs-keyword">var</span> a = <span class="hljs-number">18</span>;<br>f1();<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">f1</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">var</span> b = <span class="hljs-number">9</span>;<br>  <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(a);<br>  <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(b);<br>  <span class="hljs-keyword">var</span> a = <span class="hljs-string">&#x27;123&#x27;</span>;<br>&#125;<br><br><br><span class="hljs-comment">// 案例4</span><br><span class="hljs-keyword">var</span> a = <span class="hljs-number">25</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">abc</span> (<span class="hljs-params"></span>)&#123;<br>  alert(a);<br>  <span class="hljs-keyword">var</span> a = <span class="hljs-number">10</span>;<br>&#125;<br>abc();<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(a);<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">a</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;aaaaa&#x27;</span>);<br>&#125;<br><span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(a);<br><br><br><span class="hljs-comment">// 案例5</span><br>f1();<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(c);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(b);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(a);<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">f1</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">var</span> a = b = c = <span class="hljs-number">9</span>;<br>  <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(a);<br>  <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(b);<br>  <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(c);<br>&#125;<br>解释:  <br><span class="hljs-keyword">function</span> <span class="hljs-title function_">f1</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">var</span> a =<span class="hljs-number">9</span>;<br>b=<span class="hljs-number">9</span>;<br>c=<span class="hljs-number">9</span>;<br>  <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(a);<br>  <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(b);<br>  <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(c);<br>&#125;<br>f1();<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(c);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(b);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(a);<br><br><br><br><span class="hljs-comment">// 练习 1</span><br>alert(a)<br>alert(fn)<br><br><span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>)&#123; <br>    <span class="hljs-keyword">return</span> falss;<br>&#125;;<br><br><span class="hljs-comment">// 练习2</span><br><span class="hljs-keyword">var</span> a; <br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;; <br><br>alert(a);<br>alert(fn);<br>a = <span class="hljs-number">1</span>; <br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>)&#123; <br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;;<br><br><span class="hljs-comment">// 练习3</span><br>alert(a);<br><span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>;<br>alert(a)<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">a</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><br><br><span class="hljs-keyword">var</span> a = <span class="hljs-number">123</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>( a + <span class="hljs-number">2</span>);  <span class="hljs-comment">//?</span><br>  <span class="hljs-keyword">var</span> a = <span class="hljs-number">2</span>;<br>   <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>( a + <span class="hljs-number">2</span>);  <span class="hljs-comment">//?</span><br>&#125;<br>test();<br><br><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span>(<span class="hljs-params">f</span>) &#123;<br>f(<span class="hljs-number">123</span>);<br>&#125;<br><br>test( <span class="hljs-keyword">function</span>(<span class="hljs-params">v</span>)&#123;<br>alert(v + <span class="hljs-number">3</span>);<span class="hljs-comment">//?</span><br>&#125; );<br></code></pre></td></tr></table></figure><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><h3 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h3><p>对象字面量 方式创建（重点  较为常用） {}<br>new Object 创建对象</p><h3 id="对象调用："><a href="#对象调用：" class="headerlink" title="对象调用："></a>对象调用：</h3><p>​对象.属性名<br>    对象[‘属性名’]<br>    对象.方法名() </p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs arcade">- 对象里面的属性调用 :   对象.属性名         这个小点 就理解为 的  <br>- 对象里面的属性另外调用方式 :   对象[<span class="hljs-string">&#x27;属性名&#x27;</span>]    注意  方括号里面的属性 必须加 引号   我们后面会用      <br>- 对象里面的方法调用： 对象.方法名()       注意这个方法名字后面一定加括号<br><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(star.name)  <span class="hljs-comment">// 调用 名字属性</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(star.age)  <span class="hljs-comment">// 调用 年龄属性</span><br>star.sayHi();  <span class="hljs-comment">// 调用 sayHi 方法   注意，一定不要忘记带后面的括号</span><br></code></pre></td></tr></table></figure><h3 id="自定义构造函数"><a href="#自定义构造函数" class="headerlink" title="自定义构造函数"></a>自定义构造函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-number">1.</span> 构造函数用于创建一类对象，首字母要大写。<br><span class="hljs-number">2.</span> 构造函数要和<span class="hljs-keyword">new</span>一起使用才有意义。<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params">name, age, sex</span>) &#123;<br>         <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>         <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;<br>         <span class="hljs-variable language_">this</span>.<span class="hljs-property">sex</span> = sex;<br>         <span class="hljs-variable language_">this</span>.<span class="hljs-property">sayHi</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>              <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;我的名字叫：&#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> + <span class="hljs-string">&#x27;，年龄：&#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> + <span class="hljs-string">&#x27;，性别：&#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">sex</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">var</span> bigbai = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&#x27;大白&#x27;</span>, <span class="hljs-number">100</span>, <span class="hljs-string">&#x27;男&#x27;</span>);<br>    <span class="hljs-keyword">var</span> smallbai = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&#x27;小白&#x27;</span>, <span class="hljs-number">21</span>, <span class="hljs-string">&#x27;男&#x27;</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(bigbai.<span class="hljs-property">name</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(smallbai.<span class="hljs-property">name</span>);<br><br></code></pre></td></tr></table></figure><h4 id="new关键字"><a href="#new关键字" class="headerlink" title="new关键字"></a>new关键字</h4><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-title function_"><span class="hljs-keyword">function</span> <span class="hljs-title">Student</span></span>(name, age) &#123;<br>    <span class="hljs-built_in">this</span>.name = name;<br>    <span class="hljs-built_in">this</span>.age = age;<br>    <span class="hljs-built_in">this</span>.sayHi = <span class="hljs-title function_"><span class="hljs-keyword">function</span></span>() &#123;<br>        alert(<span class="hljs-built_in">this</span>.name + <span class="hljs-string">&#x27;你好&#x27;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> lilei = <span class="hljs-keyword">new</span> <span class="hljs-type">Student</span>(<span class="hljs-string">&#x27;李雷&#x27;</span>, <span class="hljs-number">18</span>);<br><span class="hljs-keyword">var</span> hanmm = <span class="hljs-keyword">new</span> <span class="hljs-type">Student</span>(<span class="hljs-string">&#x27;韩梅梅&#x27;</span>, <span class="hljs-number">17</span>);<br>console.log(lilei.name);<br>lilei.sayHi();<br><br><span class="hljs-keyword">new</span><span class="hljs-type"></span>在执行时会做四件事情<br><br>    <span class="hljs-keyword">new</span><span class="hljs-type"></span>会在内存中创建一个新的空对象<br>    <span class="hljs-keyword">new</span> <span class="hljs-type"></span>会让<span class="hljs-built_in">this</span>指向这个新的对象<br>    执行构造函数里面的代码  目的：给这个新对象加属性和方法<br>    <span class="hljs-keyword">new</span><span class="hljs-type"></span>会返回这个新对象 （所以构造函数里面不需要<span class="hljs-keyword">return</span>）<br></code></pre></td></tr></table></figure><h4 id="this详解"><a href="#this详解" class="headerlink" title="this详解"></a>this详解</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">JavaScript中的<span class="hljs-keyword">this</span>指向问题，有时候会让人难以捉摸，随着学习的深入，我们可以逐渐了解<br>现在我们需要掌握函数内部的<span class="hljs-keyword">this</span>几个特点<br><span class="hljs-number">1.</span> 函数在定义的时候<span class="hljs-keyword">this</span>是不确定的，只有在调用的时候才可以确定<br><span class="hljs-number">2.</span> 一般函数直接执行，内部<span class="hljs-keyword">this</span>指向全局window<br><span class="hljs-number">3.</span> 函数作为一个对象的方法，被该对象所调用，那么<span class="hljs-keyword">this</span>指向的是该对象（谁调用指向谁）<br><span class="hljs-number">4.</span> 构造函数中的<span class="hljs-keyword">this</span>  对象的实例  <br><br><br><br><br><span class="hljs-comment">// 1. 普通函数</span><br>function fn() &#123;<br>    console.log(<span class="hljs-keyword">this</span>); <span class="hljs-comment">// this 指向 window</span><br> &#125;<br>fn();<br> <span class="hljs-comment">// 2 对象方法</span><br><span class="hljs-keyword">var</span> obj = &#123;<br>    name: <span class="hljs-string">&#x27;zs&#x27;</span>,<br>    dance: function() &#123;<br>         console.log(<span class="hljs-keyword">this</span>);<br>         that = <span class="hljs-keyword">this</span>;<br>&#125;<br>&#125;<br>obj.dance(); <span class="hljs-comment">//  this 指向 obj  </span><br>console.log(that === obj); <span class="hljs-comment">// true</span><br><span class="hljs-comment">// 3 构造函数</span><br>function Fn() &#123;<br>    <span class="hljs-keyword">this</span>.age = <span class="hljs-string">&#x27;18&#x27;</span>;<br>    console.log(<span class="hljs-keyword">this</span>)<br>    self = <span class="hljs-keyword">this</span>;<br>&#125;<br><span class="hljs-keyword">var</span> demo = new Fn(); <span class="hljs-comment">// this  指向 demo</span><br>console.log(self === demo); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h3 id="删除对象的属性和方法"><a href="#删除对象的属性和方法" class="headerlink" title="删除对象的属性和方法"></a>删除对象的属性和方法</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">我们使用 <span class="hljs-keyword">delete</span> 可以删除 某个 属性  <br>var obj = &#123;<br>            <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;andy&#x27;</span>,<br>            age: <span class="hljs-number">18</span>,<br>            sex: <span class="hljs-string">&#x27;男&#x27;</span><br>        &#125;<br>console.log(obj.name); // andy<br><span class="hljs-keyword">delete</span> obj.name;<br>console.log(obj.name); // undefined<br></code></pre></td></tr></table></figure><h3 id="高级技巧-对象覆盖写法"><a href="#高级技巧-对象覆盖写法" class="headerlink" title="高级技巧_对象覆盖写法"></a>高级技巧_对象覆盖写法</h3><p>Object.assign(Obj1,Obj2)   用第二个对象覆盖第一个对象</p><h3 id="高级技巧-判断是数组还是对象"><a href="#高级技巧-判断是数组还是对象" class="headerlink" title="高级技巧_判断是数组还是对象"></a>高级技巧_判断是数组还是对象</h3><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs delphi">  <span class="hljs-comment">// console.log(a.consturctor);</span><br>    <span class="hljs-comment">// function fn()&#123;</span><br>        <span class="hljs-keyword">var</span> a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>];<br>        <span class="hljs-keyword">var</span> c = <span class="hljs-comment">&#123;</span><br><span class="hljs-comment">            name:&#x27;zs&#x27;,</span><br><span class="hljs-comment">            age:18</span><br><span class="hljs-comment">        &#125;</span><br>        <span class="hljs-keyword">var</span> b = c.<span class="hljs-keyword">constructor</span><br>  <br>    console.log(b);<br><br><br> <span class="hljs-keyword">var</span> a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>];<br><span class="hljs-keyword">var</span> b = a.<span class="hljs-keyword">constructor</span> === <span class="hljs-keyword">Array</span> ? [] :<span class="hljs-comment">&#123;&#125;</span>;<br>console.log(b);<br><br>因为  数组  和   对象都属于函数  函数就有原型对象<br>利用原型对象里的<span class="hljs-function"><span class="hljs-keyword">constructor</span>  属性指向</span><br></code></pre></td></tr></table></figure><h3 id="for-in-遍历"><a href="#for-in-遍历" class="headerlink" title="for in 遍历"></a>for in 遍历</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><br><span class="hljs-keyword">for</span>...in 语句用于对数组或者对象的属性进行循环操作。<br><span class="hljs-keyword">for</span> (变量 in 对象名字) &#123;<br>    在此执行代码<br>&#125;<br>- 这个变量是自定义 符合命名规范  但是一般我们 都写为 k  或则  key<br>- 后面的是对象 可以  数组     因为 数组也属于对象 <br><br><br><br> <span class="hljs-keyword">for</span> in 遍历 数组<br><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&#x27;pink&#x27;</span>, <span class="hljs-string">&#x27;hotpink&#x27;</span>, <span class="hljs-string">&#x27;deeppink&#x27;</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> k in arr) &#123;<br>   <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(k); <span class="hljs-comment">// 这里的k 是 数组的索引号</span><br>   <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr[k]); <span class="hljs-comment">// 这里的arr[k] 是 数组的值</span><br>&#125;<br><br><span class="hljs-keyword">for</span> in 遍历 对象<br><span class="hljs-keyword">var</span> obj = &#123;<br>     <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;andy&#x27;</span>,<br>     <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>     <span class="hljs-attr">sex</span>: <span class="hljs-string">&#x27;男&#x27;</span><br>&#125;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(obj.<span class="hljs-built_in">length</span>); <span class="hljs-comment">// undefined</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> k in obj) &#123;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(k); <span class="hljs-comment">// 这里的k 是属性名</span><br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(obj[k]); <span class="hljs-comment">// 这里的 obj[k] 是属性值</span><br>&#125;<br>再对象里面， 这里的k  是 属性名<br></code></pre></td></tr></table></figure><h2 id="for-in-遍历-1"><a href="#for-in-遍历-1" class="headerlink" title="for in 遍历"></a>for in 遍历</h2><h3 id="for-in-遍历-数组"><a href="#for-in-遍历-数组" class="headerlink" title="for in 遍历 数组"></a>for in 遍历 数组</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&#x27;pink&#x27;</span>, <span class="hljs-string">&#x27;hotpink&#x27;</span>, <span class="hljs-string">&#x27;deeppink&#x27;</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> k in arr) &#123;<br>   <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(k); <span class="hljs-comment">// 这里的k 是 数组的索引号</span><br>   <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr[k]); <span class="hljs-comment">// 这里的arr[k] 是 数组的值</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="for-in-遍历-对象"><a href="#for-in-遍历-对象" class="headerlink" title="for in 遍历 对象"></a>for in 遍历 对象</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> obj = &#123;<br>     <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;andy&#x27;</span>,<br>     <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>     <span class="hljs-attr">sex</span>: <span class="hljs-string">&#x27;男&#x27;</span><br>&#125;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(obj.<span class="hljs-built_in">length</span>); <span class="hljs-comment">// undefined</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> k in obj) &#123;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(k); <span class="hljs-comment">// 这里的k 是属性名</span><br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(obj[k]); <span class="hljs-comment">// 这里的 obj[k] 是属性值</span><br>&#125;<br>再对象里面， 这里的k  是 属性名<br></code></pre></td></tr></table></figure><h3 id="遍历-JSON格式"><a href="#遍历-JSON格式" class="headerlink" title="遍历 JSON格式"></a>遍历 JSON格式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">JSON</span>(<span class="hljs-title class_">JavaScript</span> <span class="hljs-title class_">Object</span> <span class="hljs-title class_">Notation</span>) 是一种轻量级的数据交换格式。 易于人阅读和编写。<br><br><span class="hljs-number">1.</span> <span class="hljs-title class_">JSON</span> 数据的书写格式是：名称/值对。<br><span class="hljs-number">2.</span> 里面的属性和值都要用 双引号 括起来<br><br> <span class="hljs-keyword">var</span> json = &#123;<br>     <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-string">&quot;1&quot;</span>,<br>     <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;andy&quot;</span>,<br>      <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-string">&quot;18&quot;</span>,<br>      <span class="hljs-string">&quot;tel&quot;</span>: <span class="hljs-string">&quot;110120&quot;</span><br> &#125;<br> <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> k <span class="hljs-keyword">in</span> json) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(k); <span class="hljs-comment">// 这里的k 是属性名</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj[k]); <span class="hljs-comment">// 这里的 obj[k] 是属性值</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="栈-和-堆"><a href="#栈-和-堆" class="headerlink" title="栈 和 堆"></a>栈 和 堆</h2><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs abnf">堆栈空间分配区别：<br><br>　　<span class="hljs-number">1</span>、栈（操作系统）：由操作系统自动分配释放 ，存放函数的参数值，局部变量的值等。其操作方式类似于数据结构中的栈；<br><br>　　<span class="hljs-number">2</span>、堆（操作系统）： 存储复杂类型(对象)，一般由程序员分配释放， 若程序员不释放，由垃圾回收机制回收。<br><br>简单类型又叫做   基本数据类型  或者  值类型，<br>复杂类型又叫做   引用类型<br>值类型：简单数据类型/基本数据类型，在存储时，变量中存储的是值本身，因此叫做值类型。<br>引用类型：复杂数据类型，在存储是，变量中存储的仅仅是地址（引用），因此叫做引用数据类型。<br><br>值类型变量 的 数据 直接存放在变量（栈空间）中<br>var  n1 <span class="hljs-operator">=</span> <span class="hljs-number">10</span><span class="hljs-comment">; </span><br>var n2 <span class="hljs-operator">=</span> <span class="hljs-number">20</span><span class="hljs-comment">;</span><br><span class="hljs-attribute">n1</span> <span class="hljs-operator">=</span> n2<span class="hljs-comment">; </span><br>此时   n1  结果为  <span class="hljs-number">20</span>     n2  的值 还是  <span class="hljs-number">20</span>  <br><br><br>引用类型<br>引用类型（复杂数据类型）：通过 new 关键字创建的对象（系统对象、自定义对象）<br></code></pre></td></tr></table></figure><h2 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h2><h3 id="Math对象"><a href="#Math对象" class="headerlink" title="Math对象"></a>Math对象</h3><p>Math.PI&#x2F;&#x2F; 圆周率<br>Math.floor()&#x2F;             &#x2F;&#x2F; 向下取整<br>Math.ceil()                   &#x2F;&#x2F; 向上取整<br>Math.round()&#x2F;&#x2F; 四舍五入版 就近取整   注意 -3.5   结果是  -3<br>Math.abs()&#x2F;&#x2F; 绝对值<br>Math.max()&#x2F;Math.min() &#x2F;&#x2F; 求最大和最小值<br>Math.sin()&#x2F;Math.cos() &#x2F;&#x2F; 正弦&#x2F;余弦<br>Math.power()&#x2F;Math.sqrt() &#x2F;&#x2F; 求指数次幂&#x2F;求平方根</p><p>Math.random 生成随机数</p><p>随机返回一个小数 ，  取值范围 是  范围[0，1)        左闭右开     0  &lt;&#x3D; x  &lt; 1   </p><p>案例</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arcade">求<span class="hljs-number">10</span><span class="hljs-number">-20</span>（包含<span class="hljs-number">10</span>和<span class="hljs-number">20</span>）之间的随机整数<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getRandom</span>(<span class="hljs-params">min, max</span>) &#123;<br>   <span class="hljs-keyword">return</span> Math.<span class="hljs-built_in">floor</span>(Math.<span class="hljs-built_in">random</span>() * (<span class="hljs-built_in">max</span> - <span class="hljs-built_in">min</span> + <span class="hljs-number">1</span>) + <span class="hljs-built_in">min</span>);<br>&#125;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(getRandom(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>))<br><span class="hljs-keyword">var</span> a = Math.<span class="hljs-built_in">floor</span>(Math.<span class="hljs-built_in">random</span>() * <span class="hljs-number">11</span>) + <span class="hljs-number">10</span>;<br></code></pre></td></tr></table></figure><p>随机生成颜色RGB</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getRandom</span>(<span class="hljs-params">min, max</span>) &#123;<br>    <span class="hljs-keyword">return</span> Math.<span class="hljs-built_in">floor</span>(Math.<span class="hljs-built_in">random</span>() * (<span class="hljs-built_in">max</span> - <span class="hljs-built_in">min</span> + <span class="hljs-number">1</span>) + <span class="hljs-built_in">min</span>);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getRGB</span>(<span class="hljs-params">min, max</span>) &#123;<br>    <span class="hljs-keyword">var</span> c1 = getRandom(<span class="hljs-built_in">min</span>, <span class="hljs-built_in">max</span>);<br>    <span class="hljs-keyword">var</span> c2 = getRandom(<span class="hljs-built_in">min</span>, <span class="hljs-built_in">max</span>);<br>    <span class="hljs-keyword">var</span> c3 = getRandom(<span class="hljs-built_in">min</span>, <span class="hljs-built_in">max</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;rgb(&#x27;</span> + c1 + <span class="hljs-string">&#x27;, &#x27;</span> + c2 + <span class="hljs-string">&#x27;, &#x27;</span> + c3 + <span class="hljs-string">&#x27;)&#x27;</span>;<br>&#125;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(getRGB(<span class="hljs-number">0</span>, <span class="hljs-number">255</span>));<br></code></pre></td></tr></table></figure><h3 id="Date对象"><a href="#Date对象" class="headerlink" title="Date对象"></a>Date对象</h3><p>&#x2F; 获取当前时间，UTC世界时间，距1970年1月1日（世界标准时间）起的毫秒数<br>var now &#x3D; new Date();     ()里可以写2018-5-30 17:30  日期数    可以写毫秒数<br>console.log(now.valueOf());&#x2F;&#x2F; 获取距1970年1月1日（世界标准时间）起的毫秒数</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs stylus">Date构造函数的参数<br><span class="hljs-number">1</span>. 毫秒数 <span class="hljs-number">1498099000356</span>new <span class="hljs-built_in">Date</span>(<span class="hljs-number">1498099000356</span>)<br><span class="hljs-number">2</span>. 日期格式字符串  <span class="hljs-string">&#x27;2015-5-1&#x27;</span> new <span class="hljs-built_in">Date</span>(<span class="hljs-string">&#x27;2015-5-1&#x27;</span>)  或者  new <span class="hljs-built_in">Date</span>(<span class="hljs-string">&#x27;2015/5/1&#x27;</span>) <br><span class="hljs-number">3</span>. 年、月、日……  new <span class="hljs-built_in">Date</span>(<span class="hljs-number">2015</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>)   <span class="hljs-comment">// 月份从0开始</span><br><br>我们想要 <span class="hljs-number">2018</span>-<span class="hljs-number">8</span>-<span class="hljs-number">8</span>  <span class="hljs-number">8</span>:<span class="hljs-number">8</span>:<span class="hljs-number">8</span>    格式怎么办？ <br><span class="hljs-function"><span class="hljs-title">toString</span><span class="hljs-params">()</span></span><span class="hljs-comment">// 转换成字符串</span><br><span class="hljs-function"><span class="hljs-title">valueOf</span><span class="hljs-params">()</span></span><span class="hljs-comment">// 获取毫秒值</span><br><span class="hljs-comment">// 下面格式化日期的方法，在不同浏览器可能表现不一致，一般不用</span><br><span class="hljs-function"><span class="hljs-title">toDateString</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">toTimeString</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">toLocaleDateString</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">toLocaleTimeString</span><span class="hljs-params">()</span></span><br><br><span class="hljs-function"><span class="hljs-title">getFullYear</span><span class="hljs-params">()</span></span>获取当年dObj<span class="hljs-selector-class">.getFullYear</span>()<br><br><span class="hljs-function"><span class="hljs-title">getMonth</span><span class="hljs-params">()</span></span>获取当月（<span class="hljs-number">0</span>-<span class="hljs-number">11</span>）dObj<span class="hljs-selector-class">.getMonth</span>()<br><br><span class="hljs-function"><span class="hljs-title">getDate</span><span class="hljs-params">()</span></span>获取当天日期dObj<span class="hljs-selector-class">.getDate</span>()<br><br><span class="hljs-function"><span class="hljs-title">getDay</span><span class="hljs-params">()</span></span>获取当天的天（星期几）dObj<span class="hljs-selector-class">.getDay</span>()<br><br><span class="hljs-function"><span class="hljs-title">getHours</span><span class="hljs-params">()</span></span>获取当前小时dObj<span class="hljs-selector-class">.getHours</span>()<br><br><span class="hljs-function"><span class="hljs-title">getMinutes</span><span class="hljs-params">()</span></span>获取当前分钟dObj<span class="hljs-selector-class">.getMinutes</span>()<br><br><span class="hljs-function"><span class="hljs-title">getSeconds</span><span class="hljs-params">()</span></span>获取当前秒钟dObj<span class="hljs-selector-class">.getSeconds</span>()<br><br><br></code></pre></td></tr></table></figure><h3 id="如何学习一个方法？"><a href="#如何学习一个方法？" class="headerlink" title="如何学习一个方法？"></a>如何学习一个方法？</h3><p>Mozilla 开发者网络（MDN）提供有关开放网络技术（Open Web）的信息，包括 HTML、CSS 和万维网及 HTML5 应用的 API。</p><ul><li>MDN</li><li>通过查询MDN学习Math对象的random()方法的使用</li></ul><ol><li>方法的功能</li><li>参数的意义和类型</li><li>返回值意义和类型</li><li>demo进行测试</li></ol><h3 id="对象的静态成员和实例成员"><a href="#对象的静态成员和实例成员" class="headerlink" title="对象的静态成员和实例成员"></a>对象的静态成员和实例成员</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs arcade">实例成员：需要通过 <span class="hljs-keyword">new</span> 出对象实例，然后通过 对象实例.成员 来调用<br><span class="hljs-keyword">var</span> dObj = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();<br><span class="hljs-keyword">var</span> hStr = dObj.getHours(); <span class="hljs-comment">// 此处通过 对象实例.成员方法() 调用</span><br><br>静态成员：直接通过 对象.成员 来调用<br><span class="hljs-comment">// 比如 Math 这个我们不需要 new 来使用  就是一个对象</span><br><span class="hljs-keyword">var</span> strPi = Math.<span class="hljs-literal">PI</span>; <span class="hljs-comment">// 此处通过 对象.成员方法() 调用</span><br><span class="hljs-keyword">var</span> numRandom = Math.<span class="hljs-built_in">random</span>(); <span class="hljs-comment">// 获取 0-1 之间的 随机小数</span><br></code></pre></td></tr></table></figure><h3 id="格式换日期案例"><a href="#格式换日期案例" class="headerlink" title="格式换日期案例"></a>格式换日期案例</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs arcade">写一个函数，格式化日期对象，返回yyyy-MM-dd HH:mm:ss的形式<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">formatDate</span>(<span class="hljs-params">d</span>) &#123;<br>            <span class="hljs-comment">//如果date不是日期对象，返回</span><br>            <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">date</span> instanceof <span class="hljs-built_in">Date</span>) &#123;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-keyword">var</span> <span class="hljs-built_in">year</span> = d.getFullYear(),<br>                <span class="hljs-built_in">month</span> = d.getMonth() + <span class="hljs-number">1</span>,<br>                <span class="hljs-built_in">date</span> = d.getDate(),<br>                <span class="hljs-built_in">hour</span> = d.getHours(),<br>                <span class="hljs-built_in">minute</span> = d.getMinutes(),<br>                <span class="hljs-built_in">second</span> = d.getSeconds();<br>            <span class="hljs-built_in">month</span> = <span class="hljs-built_in">month</span> &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">&#x27;0&#x27;</span> + <span class="hljs-built_in">month</span> : <span class="hljs-built_in">month</span>;<br>            <span class="hljs-built_in">date</span> = <span class="hljs-built_in">date</span> &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">&#x27;0&#x27;</span> + <span class="hljs-built_in">date</span> : <span class="hljs-built_in">date</span>;<br>            <span class="hljs-built_in">hour</span> = <span class="hljs-built_in">hour</span> &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">&#x27;0&#x27;</span> + <span class="hljs-built_in">hour</span> : <span class="hljs-built_in">hour</span>;<br>            <span class="hljs-built_in">minute</span> = <span class="hljs-built_in">minute</span> &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">&#x27;0&#x27;</span> + <span class="hljs-built_in">minute</span> : <span class="hljs-built_in">minute</span>;<br>            <span class="hljs-built_in">second</span> = <span class="hljs-built_in">second</span> &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">&#x27;0&#x27;</span> + <span class="hljs-built_in">second</span> : <span class="hljs-built_in">second</span>;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">year</span> + <span class="hljs-string">&#x27;-&#x27;</span> + <span class="hljs-built_in">month</span> + <span class="hljs-string">&#x27;-&#x27;</span> + <span class="hljs-built_in">date</span> + <span class="hljs-string">&#x27; &#x27;</span> + <span class="hljs-built_in">hour</span> + <span class="hljs-string">&#x27;:&#x27;</span> + <span class="hljs-built_in">minute</span> + <span class="hljs-string">&#x27;:&#x27;</span> + <span class="hljs-built_in">second</span>;<br>        &#125;<br>        <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(formatDate(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>()));<br><br><br>计算时间差，返回相差的天/时/分/秒<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getInterval</span>(<span class="hljs-params">start, end</span>) &#123;<br>  <span class="hljs-keyword">var</span> <span class="hljs-built_in">day</span>, <span class="hljs-built_in">hour</span>, <span class="hljs-built_in">minute</span>, <span class="hljs-built_in">second</span>, interval;<br>  interval = end - start;<br>  interval /= <span class="hljs-number">1000</span>;<br>  <span class="hljs-built_in">day</span> = Math.<span class="hljs-built_in">round</span>(interval / <span class="hljs-number">60</span> /<span class="hljs-number">60</span> / <span class="hljs-number">24</span>);<br>  <span class="hljs-built_in">hour</span> = Math.<span class="hljs-built_in">round</span>(interval / <span class="hljs-number">60</span> /<span class="hljs-number">60</span> % <span class="hljs-number">24</span>);<br>  <span class="hljs-built_in">minute</span> = Math.<span class="hljs-built_in">round</span>(interval / <span class="hljs-number">60</span> % <span class="hljs-number">60</span>);<br>  <span class="hljs-built_in">second</span> = Math.<span class="hljs-built_in">round</span>(interval % <span class="hljs-number">60</span>);<br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">day</span>: <span class="hljs-built_in">day</span>,<br>    <span class="hljs-attr">hour</span>: <span class="hljs-built_in">hour</span>,<br>    <span class="hljs-attr">minute</span>: <span class="hljs-built_in">minute</span>,<br>    <span class="hljs-attr">second</span>: <span class="hljs-built_in">second</span><br>  &#125;<br>&#125;<br><br><br><br>做一个倒计时效果<br>计算公式：<br> d = parseInt(总秒数/ <span class="hljs-number">60</span>/<span class="hljs-number">60</span> /<span class="hljs-number">24</span>); <span class="hljs-comment">// 计算天数</span><br> h = parseInt(总秒数/ <span class="hljs-number">60</span>/<span class="hljs-number">60</span> %<span class="hljs-number">24</span>) <span class="hljs-comment">// 计算小时</span><br> m = parseInt(总秒数 /<span class="hljs-number">60</span> %<span class="hljs-number">60</span> ); <span class="hljs-comment">// 计算分数</span><br> s = parseInt(总秒数%<span class="hljs-number">60</span>);  <span class="hljs-comment">// 计算当前秒数 </span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getCountTime</span>(<span class="hljs-params">endTime</span>) &#123;<br>    <span class="hljs-keyword">var</span> d, h, m, s;<br>    <span class="hljs-comment">//1. 用用户输入的时间 减去 开始的时间就是 倒计时 </span><br>    <span class="hljs-comment">//2. 但是要注意，我们得到是 毫秒数  然后 把这个毫秒数转换为 相应的 天数 时分秒 就好了</span><br>    <span class="hljs-keyword">var</span> countTime = parseInt((<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(endTime) - <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>()) / <span class="hljs-number">1000</span>);<br>    <span class="hljs-comment">// console.log(countTime);</span><br>    <span class="hljs-comment">// 3. 把得到的毫秒数 转换 当前的天数 时分秒</span><br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(countTime);<br><br>    d = parseInt(countTime / <span class="hljs-number">60</span> / <span class="hljs-number">60</span> / <span class="hljs-number">24</span>); <span class="hljs-comment">// 计算天数</span><br><br>    h = parseInt(countTime / <span class="hljs-number">60</span> / <span class="hljs-number">60</span> % <span class="hljs-number">24</span>); <span class="hljs-comment">// 计算小时</span><br><br>    m = parseInt(countTime / <span class="hljs-number">60</span> % <span class="hljs-number">60</span>); <span class="hljs-comment">// 计算分数</span><br><br>    s = parseInt(countTime % <span class="hljs-number">60</span>); <span class="hljs-comment">// 计算当前秒数 </span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;还剩下&#x27;</span> + d + <span class="hljs-string">&#x27;天&#x27;</span> + h + <span class="hljs-string">&#x27;时&#x27;</span> + m + <span class="hljs-string">&#x27;分&#x27;</span> + s + <span class="hljs-string">&#x27;秒 &#x27;</span>;<br>&#125;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(getCountTime(<span class="hljs-string">&#x27;2018-5-30 17:30&#x27;</span>));<br><br><br><br><br><span class="hljs-keyword">var</span> hours = Math.<span class="hljs-built_in">floor</span>(times%<span class="hljs-number">86400</span>/<span class="hljs-number">3600</span>);<br><span class="hljs-keyword">var</span> minutes = Math.<span class="hljs-built_in">floor</span>(times%<span class="hljs-number">86400</span>%<span class="hljs-number">3600</span>/<span class="hljs-number">60</span>);<br><span class="hljs-keyword">var</span> seconds = Math.<span class="hljs-built_in">floor</span>(times%<span class="hljs-number">60</span>);<br><br>- 百以内取十位 Math.<span class="hljs-built_in">floor</span>(num/<span class="hljs-number">10</span>)<br>- 百以内取个位 num%<span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><h3 id="Array对象"><a href="#Array对象" class="headerlink" title="Array对象"></a>Array对象</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-built_in">sort</span>  如果调用该方法时没有使用参数，按照字符编码的顺序进行排序。 <br><br>    <span class="hljs-comment">// 1 栈操作(先进后出)</span><br>    <span class="hljs-built_in">push</span>()<br>    <span class="hljs-built_in">pop</span>() <span class="hljs-comment">//取出数组中的最后一项，修改length属性</span><br>    <span class="hljs-comment">// 2 队列操作(先进先出)</span><br>    <span class="hljs-built_in">push</span>()<br>    shift()<span class="hljs-comment">//取出数组中的第一个元素，修改length属性</span><br>    unshift() <span class="hljs-comment">//在数组最前面插入项，返回数组的长度</span><br>    <span class="hljs-comment">// 3 排序方法</span><br>    <span class="hljs-built_in">reverse</span>()<span class="hljs-comment">//翻转数组</span><br>    <span class="hljs-built_in">sort</span>(); <span class="hljs-comment">//即使是数组sort也是根据字符，从小到大排序</span><br>    <span class="hljs-comment">// 带参数的sort是如何实现的？</span><br>    <span class="hljs-comment">// 4 操作方法</span><br>    concat()  <span class="hljs-comment">//把参数拼接到当前数组</span><br>    <span class="hljs-built_in">slice</span>() <span class="hljs-comment">//从当前数组中截取一个新的数组，不影响原来的数组，参数start从0开始,end从1开始</span><br>    <span class="hljs-built_in">splice</span>()<span class="hljs-comment">//删除或替换当前数组的某些项目，参数start, deleteCount, options(要替换的项目)</span><br>    <span class="hljs-comment">// 5 位置方法</span><br>    <span class="hljs-built_in">indexOf</span>()、lastIndexOf()   <span class="hljs-comment">//如果没找到返回-1</span><br>    <span class="hljs-comment">// 6 迭代方法 不会修改原数组(可选)</span><br>    every()、<span class="hljs-built_in">filter</span>()、forEach()、<span class="hljs-built_in">map</span>()、some()<br>    <span class="hljs-comment">// 7 方法将数组的所有元素连接到一个字符串中。</span><br>    join()<br><br>- <br> <br><br><br><span class="hljs-comment">// 1. 使用构造函数创建数组对象</span><br>  <span class="hljs-comment">// 创建了一个空数组</span><br>  <span class="hljs-keyword">var</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>();<br>  <span class="hljs-comment">// 创建了一个数组，里面存放了3个字符串</span><br>  <span class="hljs-keyword">var</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(<span class="hljs-string">&#x27;zs&#x27;</span>, <span class="hljs-string">&#x27;ls&#x27;</span>, <span class="hljs-string">&#x27;ww&#x27;</span>);<br>  <span class="hljs-comment">// 创建了一个数组，里面存放了4个数字</span><br>  <span class="hljs-keyword">var</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>);<br><br><br>  <span class="hljs-comment">// 2. 使用字面量创建数组对象</span><br>  <span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><br>  <span class="hljs-comment">// 获取数组中元素的个数</span><br>  <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr.<span class="hljs-built_in">length</span>);<br><br>- 检测一个对象是否是数组<br>  - instanceof<br>  - <span class="hljs-built_in">Array</span>.isArray()     HTML5中提供的方法，有兼容性问题<br>  函数的参数，如果要求是一个数组的话，可以用这种方式来进行判断<br>- toString()/valueOf()<br>  - toString() 把数组转换成字符串，逗号分隔每一项<br>  - valueOf()         返回数组对象本身<br>- 数组常用方法<br>  演示：<span class="hljs-built_in">push</span>()、shift()、unshift()、<span class="hljs-built_in">reverse</span>()、<span class="hljs-built_in">sort</span>()、<span class="hljs-built_in">splice</span>()、<span class="hljs-built_in">indexOf</span>()<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>javascript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>javascripts知识点梳理3_数组和字符串处理</title>
    <link href="/2019/03/03/javascripts%E7%9F%A5%E8%AF%86%E7%82%B9%E6%A2%B3%E7%90%863/"/>
    <url>/2019/03/03/javascripts%E7%9F%A5%E8%AF%86%E7%82%B9%E6%A2%B3%E7%90%863/</url>
    
    <content type="html"><![CDATA[<h1 id="javascripts知识点梳理3-数组和字符串处理"><a href="#javascripts知识点梳理3-数组和字符串处理" class="headerlink" title="javascripts知识点梳理3_数组和字符串处理"></a>javascripts知识点梳理3_数组和字符串处理</h1><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h3><p>通过new 方式 创建var  数组名  &#x3D;   new Array() ；<br>通过字面量的形式   var  数组名 &#x3D;     [  ]</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">// 创建了一个空数组</span><br><span class="hljs-keyword">var</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>();<br><span class="hljs-comment">// 创建了一个数组，里面存放了3个字符串</span><br><span class="hljs-keyword">var</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(<span class="hljs-string">&#x27;zs&#x27;</span>, <span class="hljs-string">&#x27;ls&#x27;</span>, <span class="hljs-string">&#x27;ww&#x27;</span>);<br><span class="hljs-comment">// 创建了一个数组，里面存放了4个数字</span><br><span class="hljs-keyword">var</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>);<br><br></code></pre></td></tr></table></figure><p>设置和访问数组元素</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs prolog">- 元素：数组中每个空间里存放的数据<br>- 下标 (索引) ：用来访问数组空间的 序号 （数组下标从 <span class="hljs-number">0</span> 开始）<br>- 数组可以通过 下标 来 访问、设置、修改 对应下标空间 里的元素。<br><br>    var arrStus = [];<br>    //<span class="hljs-number">1.</span>通过下标 为对应空间 赋值<br>    arrStus[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;大白很暖&#x27;</span>;<br>    arrStus[<span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;有点儿意思&#x27;</span>;<br>    arrStus[<span class="hljs-number">2</span>] = <span class="hljs-string">&#x27;记得打call~！&#x27;</span>;<br>    //<span class="hljs-number">2.</span>通过下标 访问对应空间 里的值<br>    alert(arrStus[<span class="hljs-number">1</span>]); // <span class="hljs-string">&#x27;有点儿意思&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="数组的length属性"><a href="#数组的length属性" class="headerlink" title="数组的length属性"></a>数组的length属性</h3><p>数组.length   用来访问数组里空间的数量（数组长度）</p><h3 id="数组的操作"><a href="#数组的操作" class="headerlink" title="数组的操作"></a>数组的操作</h3><p>push()、shift()、unshift()、reverse()、sort()、splice()、indexOf()</p><h4 id="1-栈操作-先进后出"><a href="#1-栈操作-先进后出" class="headerlink" title="&#x2F;&#x2F; 1 栈操作(先进后出)"></a>&#x2F;&#x2F; 1 栈操作(先进后出)</h4><p>push()<br>pop() &#x2F;&#x2F;取出数组中的最后一项，修改length属性</p><h4 id="2-队列操作-先进先出"><a href="#2-队列操作-先进先出" class="headerlink" title="&#x2F;&#x2F; 2 队列操作(先进先出)"></a>&#x2F;&#x2F; 2 队列操作(先进先出)</h4><p>shift()&#x2F;&#x2F;取出数组中的第一个元素，修改length属性<br>unshift() &#x2F;&#x2F;在数组最前面插入项，返回数组的长度</p><h4 id="3-排序方法"><a href="#3-排序方法" class="headerlink" title="&#x2F;&#x2F; 3 排序方法"></a>&#x2F;&#x2F; 3 排序方法</h4><p>reverse()&#x2F;&#x2F;翻转数组<br>sort(); &#x2F;&#x2F;即使是数组sort也是根据字符，从小到大排序<br>&#x2F;&#x2F; 带参数的sort是如何实现的？</p><h4 id="4-操作方法"><a href="#4-操作方法" class="headerlink" title="&#x2F;&#x2F; 4 操作方法"></a>&#x2F;&#x2F; 4 操作方法</h4><p>concat()  &#x2F;&#x2F;把参数拼接到当前数组<br>slice() &#x2F;&#x2F;从当前数组中截取一个新的数组，不影响原来的数组，参数start从0开始,end从1开始<br>splice()&#x2F;&#x2F;删除或替换当前数组的某些项目，参数start, deleteCount, options(要替换的项目)</p><h4 id="5-位置方法"><a href="#5-位置方法" class="headerlink" title="&#x2F;&#x2F; 5 位置方法"></a>&#x2F;&#x2F; 5 位置方法</h4><p>indexOf()、lastIndexOf()   &#x2F;&#x2F;如果没找到返回-1</p><h4 id="6-迭代方法-不会修改原数组-可选"><a href="#6-迭代方法-不会修改原数组-可选" class="headerlink" title="&#x2F;&#x2F; 6 迭代方法 不会修改原数组(可选)"></a>&#x2F;&#x2F; 6 迭代方法 不会修改原数组(可选)</h4><p>every()、filter()、forEach()、map()、some()</p><h4 id="7-方法将数组的所有元素连接到一个字符串中。"><a href="#7-方法将数组的所有元素连接到一个字符串中。" class="headerlink" title="&#x2F;&#x2F; 7 方法将数组的所有元素连接到一个字符串中。"></a>&#x2F;&#x2F; 7 方法将数组的所有元素连接到一个字符串中。</h4><p>join()</p><h4 id="查找数组中第一个符合条件的数组"><a href="#查找数组中第一个符合条件的数组" class="headerlink" title="查找数组中第一个符合条件的数组"></a>查找数组中第一个符合条件的数组</h4><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xquery">arr.find(<span class="hljs-keyword">function</span>(<span class="hljs-type">item</span>)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-type">item</span><span class="hljs-built_in">.id</span> =<span class="hljs-built_in"> id</span>;<br>&#125;)<br><span class="hljs-type">item</span>为循环的当前项<br><br>循环数组<br>数组.forEach(<span class="hljs-keyword">function</span>(<span class="hljs-type">item</span>)&#123;<br><span class="hljs-type">item</span>为数的每一项<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="遍历数组所有成员"><a href="#遍历数组所有成员" class="headerlink" title="遍历数组所有成员"></a>遍历数组所有成员</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs arcade">- 数组中的每一项我们怎么取出来<br><br>    arrStus = [<span class="hljs-string">&#x27;大白很暖&#x27;</span>,<span class="hljs-string">&#x27;有点儿意思&#x27;</span>,<span class="hljs-string">&#x27;记得打call~！&#x27;</span>];<br>    <br>    第<span class="hljs-number">0</span>项    arrStus[<span class="hljs-number">0</span>]    <span class="hljs-comment">// &#x27;大白很暖&#x27;   通过索引我们可以拿到数组中对应的值</span><br>    第<span class="hljs-number">1</span>项    arrStus[<span class="hljs-number">1</span>]    <span class="hljs-comment">// 有点儿意思</span><br>    第<span class="hljs-number">2</span>项    arrStus[<span class="hljs-number">2</span>]    <span class="hljs-comment">// 记得打call~！</span><br>    <br>    规律：<br>    我们发现 从数组中取出每一项  代码是重复的唯一不一样的就是 索引值在递增  <br><br>- 遍历就是把每个元素从头到尾都访问一次  （类似我们每天早上学生的点名）<br>- 通过<span class="hljs-keyword">for</span>循环下标遍历<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; arrStus.<span class="hljs-built_in">length</span>; i++)&#123;<br>        <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;arrStus[&#x27;</span>+ i +<span class="hljs-string">&#x27;] = &#x27;</span> + arrStus[i]);<br>    &#125;<br><br><br>求一组数值 [<span class="hljs-number">2</span>,<span class="hljs-number">6</span>,<span class="hljs-number">1</span>,<span class="hljs-number">7</span>, <span class="hljs-number">4</span>]    的  和 还有 平均值  <br><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">2</span>, <span class="hljs-number">6</span>, <span class="hljs-number">1</span>, <span class="hljs-number">7</span>, <span class="hljs-number">4</span>];<br><span class="hljs-keyword">var</span> <span class="hljs-built_in">sum</span> = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">var</span> <span class="hljs-built_in">average</span> = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; arr.<span class="hljs-built_in">length</span>; i++) &#123;<br>    <span class="hljs-built_in">sum</span> += arr[i];<br>&#125;<br><span class="hljs-built_in">average</span> = <span class="hljs-built_in">sum</span> / arr.<span class="hljs-built_in">length</span>;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;这组数的和是：&#x27;</span> + <span class="hljs-built_in">sum</span>);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;这组数的平均值是：&#x27;</span> + <span class="hljs-built_in">average</span>);<br></code></pre></td></tr></table></figure><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><h4 id="将数组内容追加到新数组"><a href="#将数组内容追加到新数组" class="headerlink" title="将数组内容追加到新数组"></a>将数组内容追加到新数组</h4><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&#x27;古丽扎娜&#x27;</span>, <span class="hljs-string">&#x27;迪丽热巴&#x27;</span>, <span class="hljs-string">&#x27;佟丽丫丫&#x27;</span>];<br><span class="hljs-comment">// 声明新的空数组</span><br><span class="hljs-keyword">var</span> <span class="hljs-keyword">new</span><span class="hljs-type">Arr</span> = [];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>    <span class="hljs-comment">// 找出 我的热巴</span><br>    <span class="hljs-keyword">if</span> (arr[i] == <span class="hljs-string">&#x27;迪丽热巴&#x27;</span>) &#123;<br>        <span class="hljs-comment">// 给新数组</span><br>        <span class="hljs-keyword">new</span><span class="hljs-type">Arr</span> = arr[i];<br>    &#125;<br>&#125;<br>console.log(<span class="hljs-keyword">new</span><span class="hljs-type">Arr</span>);<br></code></pre></td></tr></table></figure><h4 id="要求将数组-2-0-6-1-77-0-52-0-25-7-大于等于-10-的-元素选出来-，放入-新数组"><a href="#要求将数组-2-0-6-1-77-0-52-0-25-7-大于等于-10-的-元素选出来-，放入-新数组" class="headerlink" title="要求将数组  [2, 0, 6, 1, 77, 0, 52, 0, 25, 7]  大于等于 10 的 元素选出来 ，放入 新数组"></a>要求将数组  [2, 0, 6, 1, 77, 0, 52, 0, 25, 7]  大于等于 10 的 元素选出来 ，放入 新数组</h4><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">6</span>, <span class="hljs-number">1</span>, <span class="hljs-number">77</span>, <span class="hljs-number">0</span>, <span class="hljs-number">52</span>, <span class="hljs-number">0</span>, <span class="hljs-number">25</span>, <span class="hljs-number">7</span>];<br><span class="hljs-comment">// 声明新的空数组</span><br><span class="hljs-keyword">var</span> <span class="hljs-keyword">new</span><span class="hljs-type">Arr</span> = [];<br><span class="hljs-comment">// 定义一个变量 用来计算 新数组的索引号</span><br><span class="hljs-keyword">var</span> j = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>    <span class="hljs-comment">// 找出 大于 10 的数</span><br>    <span class="hljs-keyword">if</span> (arr[i] &gt;= <span class="hljs-number">10</span>) &#123;<br>        <span class="hljs-comment">// 给新数组</span><br>        <span class="hljs-keyword">new</span><span class="hljs-type">Arr</span>[j] = arr[i];<br>        <span class="hljs-comment">// 索引号 不断自加</span><br>        j++;<br>    &#125;<br>&#125;<br>console.log(<span class="hljs-keyword">new</span><span class="hljs-type">Arr</span>);<br></code></pre></td></tr></table></figure><h4 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h4><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs haxe">思路：<br><br><span class="hljs-number">1.</span> 需要一个新数组用于存放 筛选之后的数据。<br><span class="hljs-number">2.</span> 遍历原来的数组， 把不是<span class="hljs-number">0</span> 的数据，添加到新数组里面( 此时要注意采用 数组名+下标 格式 接受数据)<br><span class="hljs-number">3.</span> 否知有空数据，我们新数组里面的个数，不断累加的用自己的length<br><br>    <span class="hljs-keyword">var</span> arr = [<span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">6</span>, <span class="hljs-number">1</span>, <span class="hljs-number">77</span>, <span class="hljs-number">0</span>, <span class="hljs-number">52</span>, <span class="hljs-number">0</span>, <span class="hljs-number">25</span>, <span class="hljs-number">7</span>];<br>    <span class="hljs-comment">// 声明新的空数组</span><br>    <span class="hljs-keyword">var</span> <span class="hljs-keyword">new</span><span class="hljs-type">Arr</span> = [];<br>    <span class="hljs-comment">// 空数组的默认的长度为 0 </span><br>    console.log(<span class="hljs-keyword">new</span><span class="hljs-type">Arr</span>.length);<br>    <br>    <span class="hljs-comment">// 定义一个变量 用来计算 新数组的索引号</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>        <span class="hljs-comment">// 找出 大于 10 的数</span><br>        <span class="hljs-keyword">if</span> (arr[i] != <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">// 给新数组</span><br>            <span class="hljs-comment">// 每次存入一个值， newArr长度都会 +1  </span><br>            <span class="hljs-keyword">new</span><span class="hljs-type">Arr</span>[<span class="hljs-keyword">new</span><span class="hljs-type">Arr</span>.length] = arr[i];<br>        &#125;<br>    &#125;<br>    console.log(<span class="hljs-keyword">new</span><span class="hljs-type">Arr</span>);<br></code></pre></td></tr></table></figure><h4 id="翻转数组"><a href="#翻转数组" class="headerlink" title="翻转数组"></a>翻转数组</h4><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;green&#x27;</span>, <span class="hljs-string">&#x27;blue&#x27;</span>, <span class="hljs-string">&#x27;pink&#x27;</span>, <span class="hljs-string">&#x27;purple&#x27;</span>];<br><span class="hljs-keyword">var</span> <span class="hljs-keyword">new</span><span class="hljs-type">Arr</span> = [];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>    <span class="hljs-comment">// newArr 一定是接受方    arr 是 输送方</span><br>    <span class="hljs-keyword">new</span><span class="hljs-type">Arr</span>[i] = arr[arr.length - i - <span class="hljs-number">1</span>];<br>&#125;<br>console.log(<span class="hljs-keyword">new</span><span class="hljs-type">Arr</span>);<br></code></pre></td></tr></table></figure><h4 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h4><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs arcade">我们先复习下 如何把<span class="hljs-number">2</span>个变量 交换数据  <br><br>    <span class="hljs-comment">// 利用 第三个 变量</span><br>    <span class="hljs-keyword">var</span> num1 = <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">var</span> num2 = <span class="hljs-number">20</span>;<br>    <span class="hljs-keyword">var</span> temp = num1;<br>    num1 = num2;<br>    num2 = temp;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(num1, num2);<br><br>    <br>   <span class="hljs-keyword">var</span> arr = [<span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; arr.<span class="hljs-built_in">length</span> - <span class="hljs-number">1</span>; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> j = <span class="hljs-number">0</span>; j &lt; arr.<span class="hljs-built_in">length</span> - i - <span class="hljs-number">1</span>; j++) &#123;<br>                <span class="hljs-keyword">if</span> (arr[j] &gt; arr[j + <span class="hljs-number">1</span>]) &#123;<br>                    <span class="hljs-keyword">var</span> temp = arr[j];<br>                    arr[j] = arr[j + <span class="hljs-number">1</span>];<br>                    arr[j + <span class="hljs-number">1</span>] = temp;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr);<br></code></pre></td></tr></table></figure><p>数组操作练习</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    arr = [<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">2</span>, <span class="hljs-number">9</span>];</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> arr1 = [<span class="hljs-number">100</span>, <span class="hljs-number">101</span>]</span><br><span class="language-javascript">        <span class="hljs-comment">//  arr.push(100);</span></span><br><span class="language-javascript">        <span class="hljs-comment">// arr = arr.pop();</span></span><br><span class="language-javascript">        <span class="hljs-comment">// arr.shift()</span></span><br><span class="language-javascript">        <span class="hljs-comment">// arr.unshift(100)</span></span><br><span class="language-javascript">        <span class="hljs-comment">// arr.reverse();   数组翻转</span></span><br><span class="language-javascript">        <span class="hljs-comment">// var a = arr.indexOf(100)    </span></span><br><span class="language-javascript">        <span class="hljs-comment">// arr = arr.join(&#x27;,&#x27;);   数组转字符串</span></span><br><span class="language-javascript">        <span class="hljs-comment">// arr.splice(2, 2);  //数组删除    返回值去掉的部分var1 第几个开始,var2 截取几个</span></span><br><span class="language-javascript">        <span class="hljs-comment">// arr1 = arr.slice(2, 3)   数组截取</span></span><br><span class="language-javascript">        <span class="hljs-comment">// arr2 = arr.splice(2, 1)</span></span><br><span class="language-javascript">        <span class="hljs-comment">// arr1 = arr.sort(function(a, b) &#123;  数组排序</span></span><br><span class="language-javascript">        <span class="hljs-comment">//     return a - b;</span></span><br><span class="language-javascript">        <span class="hljs-comment">// &#125;)</span></span><br><span class="language-javascript">        <span class="hljs-comment">// arr2 = arr.sort(function(a, b) &#123;</span></span><br><span class="language-javascript">        <span class="hljs-comment">//     return b - a;</span></span><br><span class="language-javascript">        <span class="hljs-comment">// &#125;)</span></span><br><span class="language-javascript">        <span class="hljs-comment">// arr = arr.toString();  数组转字符串</span></span><br><span class="language-javascript">        <span class="hljs-comment">// var a = Array.isArray(arr);    判断是否为数组</span></span><br><span class="language-javascript">        <span class="hljs-comment">// var arr2 = arr.concat(arr1);    将数组拼接</span></span><br><span class="language-javascript">        <span class="hljs-comment">// var a = arr.indexOf(100)    判断有无</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="数组去重-1"><a href="#数组去重-1" class="headerlink" title="数组去重"></a>数组去重</h4><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs arcade">编写一个方法去掉一个数组的重复元素<br><span class="hljs-keyword">var</span> <span class="hljs-built_in">array</span> =  [<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;z&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;x&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>];<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">clear</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">var</span> o = &#123;&#125;;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">array</span>.<span class="hljs-built_in">length</span>; i++) &#123;<br>    <span class="hljs-keyword">var</span> item = <span class="hljs-built_in">array</span>[i];<br>    <span class="hljs-keyword">if</span> (o[item]) &#123;<br>      o[item]++;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>      o[item] = <span class="hljs-number">1</span>;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">var</span> tmpArray = [];<br>  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> key in o) &#123;<br>    <span class="hljs-keyword">if</span> (o[key] == <span class="hljs-number">1</span>) &#123;<br>      tmpArray.<span class="hljs-built_in">push</span>(key);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>      <span class="hljs-keyword">if</span>(tmpArray.<span class="hljs-built_in">indexOf</span>(key) == <span class="hljs-number">-1</span>)&#123;<br>        tmpArray.<span class="hljs-built_in">push</span>(key);<br>      &#125;<br>    &#125;<br>  &#125;<br>  returm tmpArray;<br>&#125;<br><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(clear(<span class="hljs-built_in">array</span>));<br></code></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><br><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;z&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;x&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;x&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>];<br>    <span class="hljs-keyword">var</span> arr1 = [];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; arr.<span class="hljs-built_in">length</span>; i++) &#123;<br>        <span class="hljs-keyword">var</span> tmp = arr[i];<br>        tmp = tmp.toString();<br>        <span class="hljs-keyword">if</span> (arr1.<span class="hljs-built_in">indexOf</span>(tmp) == <span class="hljs-number">-1</span>) &#123;<br>            arr1.<span class="hljs-built_in">push</span>(tmp);<br>        &#125;<br><br>    &#125;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr1);<br></code></pre></td></tr></table></figure><h2 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a>字符串操作</h2><p>字符串所有的方法，都不会修改字符串本身(字符串是不可变的)，操作完成会返回一个新的字符串</p><h3 id="1-字符方法"><a href="#1-字符方法" class="headerlink" title="1 字符方法"></a>1 字符方法</h3><p>charAt()    &#x2F;&#x2F;获取指定位置处字符<br>charCodeAt()  &#x2F;&#x2F;获取指定位置处字符的ASCII码<br>str[0]   &#x2F;&#x2F;HTML5，IE8+支持 和charAt()等效</p><h3 id="2-字符串操作方法"><a href="#2-字符串操作方法" class="headerlink" title="2 字符串操作方法"></a>2 字符串操作方法</h3><p>concat()   &#x2F;&#x2F;拼接字符串，等效于+，+更常用<br>slice()    &#x2F;&#x2F;从start位置开始，截取到end位置，end取不到<br>substring() &#x2F;&#x2F;从start位置开始，截取到end位置，end取不到<br>substr()   &#x2F;&#x2F;从start位置开始，截取length个字符</p><h3 id="3-位置方法"><a href="#3-位置方法" class="headerlink" title="3 位置方法"></a>3 位置方法</h3><p>indexOf()   &#x2F;&#x2F;返回指定内容在元字符串中的位置<br>lastIndexOf() &#x2F;&#x2F;从后往前找，只找第一个匹配的</p><h3 id="4-去除空白"><a href="#4-去除空白" class="headerlink" title="4 去除空白"></a>4 去除空白</h3><p>trim()  &#x2F;&#x2F;只能去除字符串前后的空白</p><h3 id="5-大小写转换方法"><a href="#5-大小写转换方法" class="headerlink" title="5 大小写转换方法"></a>5 大小写转换方法</h3><p>str.toLocaleUpperCase()&#x2F;&#x2F;转换大写<br>str.toLocaleLowerCase()&#x2F;&#x2F;转换小写</p><h3 id="6-其它"><a href="#6-其它" class="headerlink" title="6 其它"></a>6 其它</h3><p>search()<br>replace()<br>split()<br>fromCharCode()<br>&#x2F;&#x2F; String.fromCharCode(101, 102, 103); &#x2F;&#x2F;把ASCII码转换成字符串</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xquery"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">var</span> str = <span class="hljs-string">&#x27; 1,sdssda &#x27;</span>;</span></span><br><span class="language-javascript"><span class="language-xml">    str = str.<span class="hljs-title function_">trim</span>();</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 去两边空格</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// str = str.slice(1, 3);</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 第var1开始截到var2个</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// str1 = str.split(&#x27;,&#x27;)    </span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// str = str.substr(1, 2)       第var1开始截var2个</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// str = str.substring(1, 3)</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">//  第var1开始截到var2个   与slice 相同但不接受负值</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// str = str.toLocaleUpperCase()</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// str = str.toLocaleLowerCase()</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// </span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// for (var i = 0; i &lt; str.length; i++) </span></span></span><span class="language-xquery">&#123;</span><br><span class="language-xquery">    //     str = str<span class="hljs-built_in">.replace</span>(<span class="hljs-string">&#x27;s&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>)</span><br><span class="language-xquery">    // &#125;</span><span class="language-xml"><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// str = str.charAt(2)</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// str = str.indexOf(&#x27;s&#x27;)</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str);</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
    
    
    <categories>
      
      <category>javascript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>javascripts知识点梳理2</title>
    <link href="/2019/02/26/javascripts%E7%9F%A5%E8%AF%86%E7%82%B9%E6%A2%B3%E7%90%862/"/>
    <url>/2019/02/26/javascripts%E7%9F%A5%E8%AF%86%E7%82%B9%E6%A2%B3%E7%90%862/</url>
    
    <content type="html"><![CDATA[<h1 id="javascripts知识点梳理2"><a href="#javascripts知识点梳理2" class="headerlink" title="javascripts知识点梳理2"></a>javascripts知识点梳理2</h1><h2 id="load-事件"><a href="#load-事件" class="headerlink" title="load 事件"></a>load 事件</h2><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs scilab"><span class="hljs-built_in">load</span> 表示的是加载<br>表示数据加载完成就会被触发<br><br>如果我们需要将 js 代码放到 head 标签中, 那么就应该将 js 代码写在 <span class="hljs-built_in">load</span> 事件里面<br> window.onload = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> &#123;</span><br>       <span class="hljs-comment">// 页面中所有的 内容 全部加载完毕</span><br>       <span class="hljs-comment">// 那么就会触发, 而且只会触发一次</span><br>&#125;;<br>        <br></code></pre></td></tr></table></figure><h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><h3 id="顺序结构"><a href="#顺序结构" class="headerlink" title="顺序结构"></a>顺序结构</h3><p>概念： 由上至下的执行代码就是顺序结构。</p><h3 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h3><h4 id="三元表达式"><a href="#三元表达式" class="headerlink" title="三元表达式  ?  :"></a>三元表达式  ?  :</h4><p>表达式1 ? 表达式2 : 表达式3</p><h4 id="if-else"><a href="#if-else" class="headerlink" title="if else"></a>if else</h4><h4 id="switch-case-结构"><a href="#switch-case-结构" class="headerlink" title="switch case 结构"></a>switch case 结构</h4><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">switch</span>( 变量 )&#123; <br>    <span class="hljs-keyword">case</span> value1:<br>        <span class="hljs-comment">//表达式结果 等于 value1 时 要执行的代码</span><br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> value2:<br>        <span class="hljs-comment">//表达式结果 等于 value2 时 要执行的代码</span><br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">default</span>:<br>        <span class="hljs-comment">//表达式结果 不等于任何一个 value 时 要执行的代码</span><br>&#125;<br><br><br><br><span class="hljs-keyword">var</span> strResult = <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-keyword">var</span> usrNum = prompt(<span class="hljs-string">&#x27;请输入一个 1- 7 之间的数字：&#x27;</span>); <span class="hljs-comment">// 接收用户输入的一个数字字符串</span><br>usrNum = parseInt(usrNum);<span class="hljs-comment">// 将数字字符串 转成 整数数值</span><br><span class="hljs-keyword">switch</span>(usrNum)&#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>        strResult = <span class="hljs-string">&#x27;星期一&#x27;</span>;<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>        strResult = <span class="hljs-string">&#x27;星期二&#x27;</span>;<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">default</span>:<br>        strResult = <span class="hljs-string">&#x27;星期天&#x27;</span>;<br>&#125;<br>alert(<span class="hljs-string">&#x27;您输入的数字对应的是&#x27;</span> + strResult);<br></code></pre></td></tr></table></figure><h4 id="switch-与-if-对比"><a href="#switch-与-if-对比" class="headerlink" title="switch 与 if 对比"></a>switch 与 if 对比</h4><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">- <span class="hljs-keyword">switch</span>...<span class="hljs-keyword">case</span>通常处理<span class="hljs-keyword">case</span>为常量的情况，而<span class="hljs-keyword">if</span>…<span class="hljs-keyword">else</span>…更加灵活有范围<br>- 当只有分支比较少的时候，<span class="hljs-keyword">if</span>效率比   <span class="hljs-keyword">switch</span>高<br>- <span class="hljs-keyword">switch</span> 进行一次条件判断后直接执行到程序的条件语句。而<span class="hljs-keyword">if</span>…<span class="hljs-keyword">else</span> 有几种条件，就得判断多少次。<br>- 分支比较多，是<span class="hljs-keyword">switch</span>的效率比较高，而且结构更清晰 <br></code></pre></td></tr></table></figure><h3 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h3><h4 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h4><h5 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h5><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-comment">//for 循环一般 用来 根据次数 循环 </span><br><span class="hljs-built_in">for</span>(初始化; 条件表达式; 自增表达式 )&#123;<br>    <span class="hljs-comment">//循环体</span><br>&#125;<br><span class="hljs-comment">//如：</span><br><span class="hljs-built_in">for</span>(var i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)&#123;<br>    console<span class="hljs-selector-class">.log</span>(&#x27;i=&#x27;+i);<br>&#125;<br><br></code></pre></td></tr></table></figure><h5 id="例句"><a href="#例句" class="headerlink" title="例句"></a>例句</h5><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs arcade">求<span class="hljs-number">1</span><span class="hljs-number">-100</span>之间所有偶数的和<br><span class="hljs-keyword">var</span> sumNum = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>;i &lt;= <span class="hljs-number">100</span>; i++)&#123;<br>    <span class="hljs-keyword">if</span>(i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)&#123; <span class="hljs-comment">// 如果 i 取模2 等于0，则 i 为 偶数</span><br>        sumNum += i;<br>    &#125;<br>&#125;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;1-100之间所有偶数的和 = &#x27;</span> + sumNum);<br><br><br>求<span class="hljs-number">1</span> - <span class="hljs-number">100</span> 之间所有数的平均值<br><span class="hljs-comment">// var sum = 0;</span><br>        <span class="hljs-comment">// var average = 0;</span><br>        <span class="hljs-comment">// for (var i = 1; i &lt;= 100; i++) &#123;</span><br>        <span class="hljs-comment">//     sum += i;</span><br>        <span class="hljs-comment">// &#125;</span><br>        <span class="hljs-comment">// average = sum / 100;</span><br>        <span class="hljs-comment">// console.log(average);</span><br><br><br><br>同时求<span class="hljs-number">1</span> - <span class="hljs-number">100</span> 之间所有偶数和奇数的和<br><span class="hljs-keyword">var</span> evenSum = <span class="hljs-number">0</span>,<br>            oddSum = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">100</span>; i++) &#123;<br>            <span class="hljs-keyword">if</span> (i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) &#123;<br>                evenSum += i;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                oddSum += i;<br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;偶数的和:&#x27;</span> + evenSum);<br>        <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;奇数的和:&#x27;</span> + oddSum);<br><br><br><br>求<span class="hljs-number">1</span><span class="hljs-number">-100</span>之间所有能被<span class="hljs-number">3</span>整除的数字的和<br><span class="hljs-keyword">var</span> <span class="hljs-built_in">sum</span> = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">100</span>; i++) &#123;<br>            <span class="hljs-keyword">if</span> (i % <span class="hljs-number">3</span> === <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-built_in">sum</span> += i;<br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">sum</span>);<br></code></pre></td></tr></table></figure><h4 id="while-循环"><a href="#while-循环" class="headerlink" title="while 循环"></a>while 循环</h4><h5 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h5><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gcode"><span class="hljs-comment">//条件表达式为 true 时重复执行循环体代码</span><br><span class="hljs-comment">//条件表达式为 false 退出循环</span><br><span class="hljs-keyword">while</span> <span class="hljs-comment">(条件表达式)</span> &#123;<br>    <span class="hljs-comment">// 循环体代码 </span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="do…while-循环"><a href="#do…while-循环" class="headerlink" title="do…while 循环"></a>do…while 循环</h4><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">do</span>&#123;<br>    <span class="hljs-comment">// 循环体代码 - 条件表达式为 true 时重复执行循环体代码</span><br>&#125; <span class="hljs-keyword">while</span>(条件表达式);<br><br>执行顺序 先执行一次循环体代码，再判断 循环条件<br><br><span class="hljs-number">1.</span>先执行一次 循环体代码 <br><br><span class="hljs-number">2.</span>再执行 条件表达式 ，结果为 <span class="hljs-literal">true</span>，则 继续执行循环体代码<br><br>                                        如果为 <span class="hljs-literal">false</span>，则退出 循环，进入后面代码执行<br><br><br>课堂案例： 使用<span class="hljs-keyword">do</span>-<span class="hljs-keyword">while</span>循环：输出你喜欢我吗？(y/n):<span class="hljs-type"></span>&quot;，直到输入y退出，否则继续询问。（提示：使用 prompt ）<br><span class="hljs-keyword">do</span> &#123;<br>   <span class="hljs-keyword">var</span> ask = prompt(<span class="hljs-string">&#x27;你喜欢我吗？ y/n&#x27;</span>);<br>&#125; <span class="hljs-keyword">while</span> (ask !== <span class="hljs-string">&#x27;y&#x27;</span>);<br>alert(<span class="hljs-string">&#x27;我也喜欢你啊&#x27;</span>);<br><br><br>- <span class="hljs-keyword">do</span>..<span class="hljs-keyword">while</span> 循环和 <span class="hljs-keyword">while</span> 循环非常像，二者经常可以相互替代，但 <span class="hljs-keyword">do</span>..<span class="hljs-keyword">while</span> 的特点是不管条件成不成立，都会执行一次。<br>- <span class="hljs-keyword">do</span>...<span class="hljs-keyword">while</span> 语句就是先执行一遍，后面才根据 条件是否满足 决定执行次数；<br>- 和 <span class="hljs-keyword">while</span> 循环一样，在循环体内部，需要修改循环条件，否则会造成死循环。<br></code></pre></td></tr></table></figure><h4 id="双重-for-循环"><a href="#双重-for-循环" class="headerlink" title="双重 for 循环"></a>双重 for 循环</h4><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">for</span> (外循环的初始; 外循环的条件; 外循环的增量) &#123;<br>    <br>    <span class="hljs-keyword">for</span> (内循环的初始; 内循环的条件; 内循环的增量) &#123;  <br><br>       需执行的代码;<br>   &#125;<br><br>&#125;<br><br><span class="hljs-number">1.</span> 内层循环可以看做外出循环的语句。 <br><span class="hljs-number">2.</span> 内层循环执行的顺序也要遵循<span class="hljs-keyword">for</span>循环的执行书序。 <br><span class="hljs-number">3.</span> 外层循环执行一次，则内层循环要执行全部次数（跑完毕）。<br><br><br>课堂案例 <span class="hljs-number">4</span> 使用 <span class="hljs-keyword">for</span>循环 打印 九九乘法表<br><span class="hljs-built_in">var</span> <span class="hljs-built_in">str</span> = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">var</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">9</span>; i++) &#123; <span class="hljs-comment">//  外层for控制 行数  9行</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">var</span> j = <span class="hljs-number">1</span>; j &lt;= i; j++) &#123; <span class="hljs-comment">// j 控制列数    列数和行数是一样的  j &lt;= i </span><br>        <span class="hljs-comment">// 我们发现了一个非常好的规律   第一行有 一列   第二行有2列 第三行有3列  第9行有9列</span><br>        <span class="hljs-built_in">str</span> += j + <span class="hljs-string">&quot; × &quot;</span> + i + <span class="hljs-string">&quot; = &quot;</span> + i * j + <span class="hljs-string">&#x27;\t&#x27;</span>;<br>    &#125;<br>    <span class="hljs-built_in">str</span> += <span class="hljs-string">&#x27;\n&#x27;</span>;<br>&#125;<br>console.log(<span class="hljs-built_in">str</span>);<br></code></pre></td></tr></table></figure><p>continue 跳出本次循环</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs arcade">- 概念：立即跳出本次循环，继续下一次循环（本次循环体 continu 之后的 代码 就都少执行这一次）<br>- 通俗： 吃<span class="hljs-number">5</span>个包子，第<span class="hljs-number">3</span>个有虫子，就扔掉第<span class="hljs-number">3</span>个，继续吃第<span class="hljs-number">4</span>个第<span class="hljs-number">5</span>个包子。<br><br><br>要求：模拟 吃<span class="hljs-number">5</span>个包子，第<span class="hljs-number">3</span>个有虫子，就扔掉第<span class="hljs-number">3</span>个，继续吃第<span class="hljs-number">4</span>个第<span class="hljs-number">5</span>个包子。<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++)&#123;<br>    <span class="hljs-keyword">if</span>(i==<span class="hljs-number">2</span>)&#123;<br>        <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;f~! 第 &#x27;</span>+(i+<span class="hljs-number">1</span>)+<span class="hljs-string">&#x27; 个里面有虫子！扔掉！&#x27;</span>);<br>        continue;<span class="hljs-comment">//跳出 i == 2 这次循环，进入 i == 3 的循环</span><br>    &#125;<br>   <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;哈哈哈，吃完了第 &#x27;</span>+ (i+<span class="hljs-number">1</span>) +<span class="hljs-string">&#x27; 个大包子~~！&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>break 退出整个循环</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-bullet">- </span>概念：理解跳出整个循环（循环结束），开始执行 循环后面的代码<br><span class="hljs-bullet">- </span>通俗： 吃5个包子，吃到第3个吃饱了，就不再吃后面的包子。<br><br></code></pre></td></tr></table></figure><h2 id="调试JavaScript的方式"><a href="#调试JavaScript的方式" class="headerlink" title="调试JavaScript的方式"></a>调试JavaScript的方式</h2><h3 id="断点调试"><a href="#断点调试" class="headerlink" title="断点调试"></a>断点调试</h3><ul><li>alert()</li><li>console.log()<br>断点调试是指自己在程序的某一行设置一个断点，调试时，程序运行到这一行就会停住，然后你可以一步一步往下调试，调试过程中可以看各个变量当前的值，出错的话，调试到出错的代码行即显示错误，停下。</li></ul><p>浏览器中按F12–&gt;sources–&gt;找到需要调试的文件–&gt;在程序的某一行设置断点<br>Watch: 监视，通过watch可以监视变量的值的变化，非常的常用。<br>F11: 程序单步执行，让程序一行一行的执行，这个时候，观察watch中变量的值的变化。<br>F8：跳到下一个断点处，如果后面没有断点了，则程序执行结束。</p><h3 id="调试错误的-步骤："><a href="#调试错误的-步骤：" class="headerlink" title="调试错误的 步骤："></a>调试错误的 步骤：</h3><ul><li>1.先到 console 控制台 tab 页 去看 是不是 有 报错！（JS语法错误）</li><li>2.如果 没有语法错误，就应该 resource  资源 tab页 去页面js代码中设置断点，并 f11 逐句调试。</li></ul>]]></content>
    
    
    <categories>
      
      <category>javascript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>javascripts知识点梳理1</title>
    <link href="/2019/02/23/javascripts%E7%9F%A5%E8%AF%86%E7%82%B9%E6%A2%B3%E7%90%861/"/>
    <url>/2019/02/23/javascripts%E7%9F%A5%E8%AF%86%E7%82%B9%E6%A2%B3%E7%90%861/</url>
    
    <content type="html"><![CDATA[<h1 id="1-JavaScript-概念"><a href="#1-JavaScript-概念" class="headerlink" title="1-JavaScript 概念"></a>1-JavaScript 概念</h1><h2 id="JavaScript-是什么"><a href="#JavaScript-是什么" class="headerlink" title="JavaScript 是什么"></a>JavaScript 是什么</h2><ul><li>JavaScript 是世界上最流行的语言。</li><li>JavaScript是一种运行在客户端 的*脚本语言 script</li><li>脚本语言：  不需要编译，-运行过程中由解释器逐行来行进行解释   php  </li><li>现在也可以基于Node.js技术进行服务器端编程。</li></ul><h2 id="JavaScript-的组成"><a href="#JavaScript-的组成" class="headerlink" title="JavaScript 的组成"></a>JavaScript 的组成</h2><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-number">1</span>.ECMAScript  （ECMA 欧洲计算机制造联合会） 是 <span class="hljs-keyword">javascript </span>的核心  也是我们后面学习的重点<br>ECMAScript是一套<span class="hljs-keyword">JS语言设计标准，描述 </span><span class="hljs-keyword">JavaScript </span>语言基本语法和数据类型，以及其它实现标准。<br>可以理解为是<span class="hljs-keyword">javascript的一个标准,但实际上后两者是ECMA-262标准的实现和扩展。</span><br><span class="hljs-keyword"></span><span class="hljs-number">2</span>.<span class="hljs-keyword">BOM </span>- 浏览器对象模型<br>一套提供给程序员 操作浏览器功能 的API<br>通过<span class="hljs-keyword">BOM可以操作浏览器窗口，比如：弹出框、控制浏览器跳转、获取分辨率等</span><br><span class="hljs-keyword"></span><span class="hljs-number">3</span>.DOM - 文档对象模型<br>一套提供给程序员 操作页面元素 的API<br>通过DOM提供的API可以对页面上的各种元素进行操作（大小、位置、颜色等）<br></code></pre></td></tr></table></figure><p>2-JS代码书写位置</p><p>三种JS书写位置：行内、内嵌标签、外部引入</p><p> 行内 JS</p><figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs hsp">- 可以将 单行或少量JS代码 写在HTML标签的事件属性（以 <span class="hljs-keyword">on</span> 开头的属性），如：<span class="hljs-keyword">onclick</span><br>- 注意单双引号的使用：在HTML中我们推荐适应双引号<br><br>    &lt;<span class="hljs-keyword">input</span> type=<span class="hljs-string">&quot;button&quot;</span> value=<span class="hljs-string">&quot;点我试试&quot;</span> <span class="hljs-keyword">onclick</span>=<span class="hljs-string">&quot;alert(&#x27;Hello World&#x27;)&quot;</span> /&gt;<br><br>缺点：<br><br>- 可读性差， 在html中编写JS大量代码时，不方便阅读；<br>- 引号易错，引号多层嵌套匹配时，非常容易弄混；<br><br></code></pre></td></tr></table></figure><p>内嵌 JS</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;Hello  World~!&#x27;</span>);</span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure><p>外部 JS 文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;outdoor.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注意：引用外部 js 文件的 script 标签中不可以写代码</p><h1 id="2数据类型及检测"><a href="#2数据类型及检测" class="headerlink" title="2数据类型及检测"></a>2数据类型及检测</h1><h2 id="简单数据类型"><a href="#简单数据类型" class="headerlink" title="简单数据类型"></a>简单数据类型</h2><h3 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h3><p>数值类型，包含 整型值和浮点型值，如 21、0.21</p><h3 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean"></a>Boolean</h3><p>布尔值类型，如 true 、false，等价于 1 和 0</p><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><p>字符串类型，如 “张三”   注意咱们js 里面，字符串都带引号</p><h3 id="Undefined"><a href="#Undefined" class="headerlink" title="Undefined"></a>Undefined</h3><p>var a;   声明了变量a 但是没有给值，此时 a &#x3D; undefined</p><h3 id="Null"><a href="#Null" class="headerlink" title="Null"></a>Null</h3><p>表示空的对象</p><h3 id="获取变量的数据类型"><a href="#获取变量的数据类型" class="headerlink" title="获取变量的数据类型"></a>获取变量的数据类型</h3><p>typeof 可用来获取变量的数据类型</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">var</span> <span class="hljs-built_in">num</span> = <span class="hljs-number">3747</span>;<br><span class="hljs-keyword">var</span> isNum = typeof <span class="hljs-built_in">num</span>; <span class="hljs-comment">// 也可以 写成 typeof(num)</span><br>alert(isNum); <span class="hljs-comment">// &quot;number&quot;</span><br></code></pre></td></tr></table></figure><h2 id="数据类型检测typeof"><a href="#数据类型检测typeof" class="headerlink" title="数据类型检测typeof"></a>数据类型检测typeof</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">var</span> <span class="hljs-built_in">num</span> = <span class="hljs-number">3747</span>;<br><span class="hljs-keyword">var</span> isNum = typeof <span class="hljs-built_in">num</span>; <span class="hljs-comment">// 也可以 写成 typeof(num)</span><br>alert(isNum); <span class="hljs-comment">// &quot;number&quot;</span><br></code></pre></td></tr></table></figure><h1 id="3-变量var"><a href="#3-变量var" class="headerlink" title="3-变量var"></a>3-变量var</h1><p>我们CSS 中，.red { color : red;}    一次声明， 多次调用     非常方便</p><p>同样，我们页面中，有很多的数据，我们需要多次使用， 我们可以把这个数据保存起来，多次调用就好了。</p><p>这就可以用到变量了。</p><blockquote><p>总结目的：  一次存储，多次使用</p></blockquote><h2 id="变量使用注意点"><a href="#变量使用注意点" class="headerlink" title="变量使用注意点"></a>变量使用注意点</h2><p>只声明 不赋值<br>var  age ;        console.log (age);     &#x2F;&#x2F; undefined<br>不声明 不赋值  直接使用<br>console.log(age) ;   &#x2F;&#x2F;  报错<br>不声明 只赋值<br>age   &#x3D; 10;  console.log(age);   &#x2F;&#x2F; 10  不推荐这样写</p><h2 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h2><p>var 变量名 &#x3D; 变量值;</p><h2 id="同时声明多个变量"><a href="#同时声明多个变量" class="headerlink" title="同时声明多个变量"></a>同时声明多个变量</h2><p>var age, name, sex;  &#x2F;&#x2F; 等价于   var  age;  var name; vae sex;<br>age &#x3D; 10;<br>name &#x3D; ‘zs’;<br>sex &#x3D; 2;</p><h2 id="变量命名规则和规范"><a href="#变量命名规则和规范" class="headerlink" title="变量命名规则和规范"></a>变量命名规则和规范</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> 规则 必须遵守的，不遵守的话 JS引擎 发现并报错<br>  规则 相当于人类社会的法律，犯法就坐牢<br><span class="hljs-bullet">  -</span> 由字母(A-Za-z)、数字(0-9)、下划线(<span class="hljs-emphasis">_)、美元符号( $ )组成，如：var usrAge, num01, _</span>name<br><span class="hljs-bullet">  -</span> 区分大小写 强调：JS 严格区分大小写 ，var app; 和 var App; 是两个变量<br><span class="hljs-bullet">  -</span> 不能 以数字开头<br><span class="hljs-bullet">  -</span> 不能 是关键字、保留字 和 代码符号，例如：var、for、while、&amp;<br><span class="hljs-code">      // JS 区分大小写，所以当 大小写 不一样时，JS引擎 会认为是两个变量</span><br><span class="hljs-code">      var age = 1;</span><br><span class="hljs-code">      var Age = 2;</span><br><span class="hljs-code">      alert(age + Age);</span><br><span class="hljs-code"></span><br><span class="hljs-bullet">-</span> 规范  建议遵守的，不遵守的话 JS引擎 也不会报错<br>  规范 相当于 人类社会的 道德，违反了不会有警察找你，但任何人都可能指责你  <br><span class="hljs-bullet">  -</span> 变量名必须有意义<br><span class="hljs-bullet">  -</span> 遵守驼峰命名法。首字母小写，后面单词的首字母需要大写。<br><span class="hljs-code">    如：usrName 和 usrPassword      和    xian   和 xiAn</span><br><span class="hljs-code"></span><br></code></pre></td></tr></table></figure><h2 id="变量属于那种数据类型？"><a href="#变量属于那种数据类型？" class="headerlink" title="变量属于那种数据类型？"></a>变量属于那种数据类型？</h2><p>你给变量一个什么值，它就是什么数据类型的变量。</p><h1 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h1><p>5.1.2  数值的进制</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-comment">//1.十进制</span><br><span class="hljs-keyword">var</span> <span class="hljs-built_in">num</span> = <span class="hljs-number">9</span>;<br>    <span class="hljs-comment">// 进行算数计算时，八进制和十六进制表示的数值最终都将被转换成十进制数值。</span><br><br><span class="hljs-comment">//2.八进制 数字序列范围：0~7</span><br>    <span class="hljs-keyword">var</span> num1 = <span class="hljs-number">07</span>;   <span class="hljs-comment">// 对应十进制的7</span><br>    <span class="hljs-keyword">var</span> num2 = <span class="hljs-number">019</span>;  <span class="hljs-comment">// 对应十进制的19</span><br>    <span class="hljs-keyword">var</span> num3 = <span class="hljs-number">08</span>;   <span class="hljs-comment">// 对应十进制的8</span><br><br><span class="hljs-comment">//3.十六进制 数字序列范围：0~9以及A~F</span><br><span class="hljs-keyword">var</span> <span class="hljs-built_in">num</span> = <span class="hljs-number">0xA</span>;<br>    <span class="hljs-comment">//如果字面值中的数值超出了范围，那么前导零将被忽略，后面的数值将被当作十进制数值解析</span><br></code></pre></td></tr></table></figure><p>浮点数的精度问题</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> result = <span class="hljs-number">0.1</span> + <span class="hljs-number">0.2</span>;    <span class="hljs-comment">// 结果不是 0.3，而是：0.30000000000000004</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-number">0.07</span> * <span class="hljs-number">100</span>);   <span class="hljs-comment">// 结果不是 7，  而是：7.000000000000001</span><br><span class="hljs-comment">// 所以：不要直接判断两个浮点数是否相等 !</span><br></code></pre></td></tr></table></figure><p>数值范围</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade">- 最大值：<span class="hljs-built_in">Number</span>.MAX_VALUE，这个值为： <span class="hljs-number">1.7976931348623157e+308</span><br>- 最小值：<span class="hljs-built_in">Number</span>.MIN_VALUE，这个值为：<span class="hljs-number">5e-324</span><br><br></code></pre></td></tr></table></figure><h1 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h1><h2 id="转换为字符串"><a href="#转换为字符串" class="headerlink" title="转换为字符串"></a>转换为字符串</h2><p>toString()</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> num01 = <span class="hljs-number">27</span>; <span class="hljs-comment">// alert(num01)输出&quot;27&quot;</span><br><span class="hljs-keyword">var</span> num02 = <span class="hljs-number">27.37</span>; <span class="hljs-comment">// alert(num02)输出&quot;27.37&quot;</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(num01.toString())<br><br><span class="hljs-keyword">var</span> isFound = <span class="hljs-literal">false</span>;<br>alert(isFound.toString()); <span class="hljs-comment">// 输出&quot;false&quot;</span><br></code></pre></td></tr></table></figure><p>String() 方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">String</span>()函数存在的意义：有些值没有<span class="hljs-title function_">toString</span>()，这个时候可以使用<span class="hljs-title class_">String</span>()。<br><br>比如：<span class="hljs-literal">undefined</span> 和 <span class="hljs-literal">null</span><br><span class="hljs-keyword">var</span>  timer = <span class="hljs-literal">null</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">String</span>(timer));<br></code></pre></td></tr></table></figure><p>加号拼接字符串</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ruby">alert(<span class="hljs-number">21</span> + <span class="hljs-string">&quot;小白&quot;</span>); <span class="hljs-regexp">//</span> 输出<span class="hljs-string">&quot;21小白&quot;</span><br>alert(<span class="hljs-literal">false</span> + <span class="hljs-string">&quot;小白&quot;</span>); <span class="hljs-regexp">//</span> 输出<span class="hljs-string">&quot;false小白&quot;</span><br></code></pre></td></tr></table></figure><h2 id="转换为数值"><a href="#转换为数值" class="headerlink" title="转换为数值"></a>转换为数值</h2><h3 id="parseInt-string-函数"><a href="#parseInt-string-函数" class="headerlink" title="parseInt(string) 函数"></a>parseInt(string) 函数</h3><p>将string类型参数转成整数</p><h3 id="parseFloat-string-函数"><a href="#parseFloat-string-函数" class="headerlink" title="parseFloat(string) 函数"></a>parseFloat(string) 函数</h3><p>将string类型参数转成浮点数</p><h3 id="Number-强制转换函数"><a href="#Number-强制转换函数" class="headerlink" title="Number() 强制转换函数"></a>Number() 强制转换函数</h3><ul><li>里面如果只要出现非数字字符或者undefined， 则就返回 NaN</li><li>如果该值是空字符串、数字0、或null、false   则返回 0     如果是 true  则返回 1</li></ul><h2 id="转换为Boolean值"><a href="#转换为Boolean值" class="headerlink" title="转换为Boolean值"></a>转换为Boolean值</h2><p>代表 空、否定的值 会被转换为 false 有五种  “ ‘’、0、NaN、null、undefined  </p><p>Boolean()函数<br>Boolean(‘true’);</p><h1 id="字符串转义符"><a href="#字符串转义符" class="headerlink" title="字符串转义符"></a>字符串转义符</h1><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs 1c">不能在字符串中包含相同的引号   (单引号中不能再嵌套单引号 双引号中不能再嵌套双引号)<br><span class="hljs-comment">// 请注意 i&#x27;m 中的 单引号</span><br>var badQuotes02 = &#x27;I&#x27;m the GOD of my world <span class="hljs-symbol">~!&#x27;</span>; <span class="hljs-comment">// 报错！</span><br><br>- 使用 转义字符 可以让单引号中嵌套单引号。   （也可以让双引号中嵌套双引号）<br>- 定义： 可以将某些具有特殊功能的字符转换为没有特殊功能的字符<br><br>         在JavaScript中，我们通过在 不需要特殊功能的字符之前 放一个 反斜杠 来实现这一点。看看这个：<br><br>    var strMsg = &#x27;I\&#x27;m the GOD of my world <span class="hljs-symbol">~!&#x27;</span>; <span class="hljs-comment">//输出：I&#x27;m the GOD of my world ~!</span><br>    var strMsg2 = <span class="hljs-string">&quot;I\&quot;</span>m the GOD of my world <span class="hljs-symbol">~!&quot;</span>; <span class="hljs-comment">//输出：I&quot;m the GOD of my world ~!</span><br>    var strMsg3 = &#x27;反斜杠是这个 \\，神奇！&#x27;;  <span class="hljs-comment">//输出：反斜杠是这个 \，神奇！</span><br><br></code></pre></td></tr></table></figure><h1 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a>字符串操作</h1><p>字符串所有的方法，都不会修改字符串本身(字符串是不可变的)，操作完成会返回一个新的字符串</p><h2 id="1-字符方法"><a href="#1-字符方法" class="headerlink" title="1 字符方法"></a>1 字符方法</h2><p>charAt()    &#x2F;&#x2F;获取指定位置处字符<br>charCodeAt()  &#x2F;&#x2F;获取指定位置处字符的ASCII码<br>str[0]   &#x2F;&#x2F;HTML5，IE8+支持 和charAt()等效</p><h2 id="2-字符串操作方法"><a href="#2-字符串操作方法" class="headerlink" title="2 字符串操作方法"></a>2 字符串操作方法</h2><p>concat()   &#x2F;&#x2F;拼接字符串，等效于+，+更常用<br>slice()    &#x2F;&#x2F;从start位置开始，截取到end位置，end取不到<br>substring() &#x2F;&#x2F;从start位置开始，截取到end位置，end取不到<br>substr()   &#x2F;&#x2F;从start位置开始，截取length个字符</p><h2 id="3-位置方法"><a href="#3-位置方法" class="headerlink" title="3 位置方法"></a>3 位置方法</h2><p>indexOf()   &#x2F;&#x2F;返回指定内容在元字符串中的位置<br>lastIndexOf() &#x2F;&#x2F;从后往前找，只找第一个匹配的</p><h2 id="4-去除空白"><a href="#4-去除空白" class="headerlink" title="4 去除空白"></a>4 去除空白</h2><p>trim()  &#x2F;&#x2F;只能去除字符串前后的空白</p><h2 id="5-大小写转换方法"><a href="#5-大小写转换方法" class="headerlink" title="5 大小写转换方法"></a>5 大小写转换方法</h2><p>str.toLocaleUpperCase()&#x2F;&#x2F;转换大写<br>str.toLocaleLowerCase()&#x2F;&#x2F;转换小写</p><h2 id="6-其它"><a href="#6-其它" class="headerlink" title="6 其它"></a>6 其它</h2><p>search()<br>replace()<br>split()<br>fromCharCode()<br>&#x2F;&#x2F; String.fromCharCode(101, 102, 103); &#x2F;&#x2F;把ASCII码转换成字符串</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xquery"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">var</span> str = <span class="hljs-string">&#x27; 1,sdssda &#x27;</span>;</span></span><br><span class="language-javascript"><span class="language-xml">    str = str.<span class="hljs-title function_">trim</span>();</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 去两边空格</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// str = str.slice(1, 3);</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 第var1开始截到var2个</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// str1 = str.split(&#x27;,&#x27;)    </span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// str = str.substr(1, 2)       第var1开始截var2个</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// str = str.substring(1, 3)</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">//  第var1开始截到var2个   与slice 相同但不接受负值</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// str = str.toLocaleUpperCase()</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// str = str.toLocaleLowerCase()</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// </span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// for (var i = 0; i &lt; str.length; i++) </span></span></span><span class="language-xquery">&#123;</span><br><span class="language-xquery">    //     str = str<span class="hljs-built_in">.replace</span>(<span class="hljs-string">&#x27;s&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>)</span><br><span class="language-xquery">    // &#125;</span><span class="language-xml"><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// str = str.charAt(2)</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// str = str.indexOf(&#x27;s&#x27;)</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str);</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h1 id="基础输入输出"><a href="#基础输入输出" class="headerlink" title="基础输入输出"></a>基础输入输出</h1><p>alert(msg)</p><ul><li><p>消息弹出窗：在 JS 中可以使用浏览器提供的 alert 函数 显示消息</p></li><li><p>语法如下：</p><p>  var usrMsg &#x3D; “请问有空吗？”<br>  alert(usrMsg);</p>  <figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs abnf">- 消息弹出窗：在 JS 中可以使用浏览器提供的 alert 函数 显示消息<br>- 语法如下：<br><br>    var usrMsg <span class="hljs-operator">=</span> <span class="hljs-string">&quot;请问有空吗？&quot;</span><br>    alert(usrMsg)<span class="hljs-comment">;</span><br><br></code></pre></td></tr></table></figure></li></ul><p>prompt(info)</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">- 消息输入窗：在 JS 中可以使用浏览器提供的 prompt 函数从键盘接收用户的输入<br>  - 括号中的参数 info 是用来显示在输入窗给用户看的提示信息<br>- 用户输入的 任何内容 都是一个 字符串<br>- 语法如下：<br><br>    <span class="hljs-keyword">var</span> usrMsg = prompt();<br>    <span class="hljs-keyword">var</span> usrName = prompt(<span class="hljs-string">&#x27;请输入您的名字&#x27;</span>); <span class="hljs-comment">//会在输入窗显示给用户看的提示信息</span><br>    alert(usrName); <span class="hljs-comment">// 打印用户名字</span><br></code></pre></td></tr></table></figure><p>console.log() 控制台输出</p><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><h2 id="一元运算符"><a href="#一元运算符" class="headerlink" title="一元运算符"></a>一元运算符</h2><p>前置运算(理解)<br>++num 前置自增 ：先自加  后运算<br>后置运算(重点)<br>num++&#96; 后置自增：先 原值运算    后 自加<br>案例</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">var a = 1; var b =</span> <span class="hljs-literal">++</span><span class="hljs-comment">a</span> <span class="hljs-literal">+</span> <span class="hljs-literal">++</span><span class="hljs-comment">a; console</span><span class="hljs-string">.</span><span class="hljs-comment">log(b);  5    2</span>  <span class="hljs-literal">+</span>  <span class="hljs-literal">++</span><span class="hljs-comment">2</span><br><span class="hljs-comment">var a = 1; var b = a</span><span class="hljs-literal">++</span> <span class="hljs-literal">+</span> <span class="hljs-literal">++</span><span class="hljs-comment">a; console</span><span class="hljs-string">.</span><span class="hljs-comment">log(b);   4    1</span> <span class="hljs-literal">+</span> <span class="hljs-literal">++</span><span class="hljs-comment">2</span><br><span class="hljs-comment">var a = 1; var b = a</span><span class="hljs-literal">++</span> <span class="hljs-literal">+</span> <span class="hljs-comment">a</span><span class="hljs-literal">++</span><span class="hljs-comment">; console</span><span class="hljs-string">.</span><span class="hljs-comment">log(b);   3    1</span> <span class="hljs-literal">+</span> <span class="hljs-comment">2</span><span class="hljs-literal">++</span><br><span class="hljs-comment">var a = 1; var b =</span> <span class="hljs-literal">++</span><span class="hljs-comment">a</span> <span class="hljs-literal">+</span> <span class="hljs-comment">a</span><span class="hljs-literal">++</span><span class="hljs-comment">; console</span><span class="hljs-string">.</span><span class="hljs-comment">log(b);  4    2</span> <span class="hljs-literal">+</span> <span class="hljs-comment">2</span><span class="hljs-literal">++</span><br><br><br><span class="hljs-comment">8</span><span class="hljs-string">.</span><span class="hljs-comment">2</span><span class="hljs-string">.</span><span class="hljs-comment">3 自增自减运算符 小结</span><br><br><span class="hljs-literal">-</span> <span class="hljs-literal">++</span> <span class="hljs-comment">和</span> <span class="hljs-literal">--</span> <span class="hljs-comment">运算符目的可以简化代码的编写，让变量的值</span> <span class="hljs-literal">+</span> <span class="hljs-comment">1 或者</span> <span class="hljs-literal">-</span> <span class="hljs-comment">1；</span><br><br><span class="hljs-literal">-</span> <span class="hljs-comment">单独使用时，运行结果相同；</span><br><span class="hljs-literal">-</span> <span class="hljs-comment">与其他代码联用时，执行结果会不同</span> <br><span class="hljs-literal">-</span> <span class="hljs-comment">后置：先  原值运算    后 自加</span>     <span class="hljs-literal">---</span><span class="hljs-comment">先人后己</span> <br><span class="hljs-literal">-</span> <span class="hljs-comment">前置：先自加  后运算</span>  <br><span class="hljs-literal">-</span> <span class="hljs-comment">开发时，大多使用后置自增/减，并且代码独占一行，例如：num</span><span class="hljs-literal">++</span><span class="hljs-comment">; 或者 num</span><span class="hljs-literal">--</span><span class="hljs-comment">;。</span><br><span class="hljs-literal">-</span> <span class="hljs-comment">开发时，不要和其他代码联用 —— 会降低代码的可读性</span><br><br><br><span class="hljs-comment">var b =</span> <span class="hljs-literal">++</span><span class="hljs-comment">a</span> <span class="hljs-literal">+</span> <span class="hljs-literal">++</span><span class="hljs-comment">a; // 此处 和</span> <span class="hljs-literal">+</span><span class="hljs-comment">号 同时使用，会影响 到 后面</span> <span class="hljs-literal">++</span><span class="hljs-comment">a 的执行过程</span><br></code></pre></td></tr></table></figure><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p>逻辑与 &amp;&amp;： 两边都是 true才返回 true，否则返回 false。<br>逻辑或 ||： 两边都为 false才返回 false     否则都为true<br>赋值运算符<br>运算符的优先级<br>&#x3D;&#x3D; 与 &#x3D;&#x3D;&#x3D; 的区别</p><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">var</span> age = <span class="hljs-number">10</span>;<br><span class="hljs-attribute">age</span> += <span class="hljs-number">5</span>;  // 相当于 age = age + <span class="hljs-number">5</span>;<br><span class="hljs-attribute">age</span> -= <span class="hljs-number">5</span>;  // 相当于 age = age - <span class="hljs-number">5</span>;<br><span class="hljs-attribute">age</span> *= <span class="hljs-number">10</span>; // 相当于 age = age * <span class="hljs-number">10</span>;<br></code></pre></td></tr></table></figure><h2 id="运算符的优先级"><a href="#运算符的优先级" class="headerlink" title="运算符的优先级"></a>运算符的优先级</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> ()  优先级最高<br><span class="hljs-bullet">2.</span> 一元运算符  ++   --   !<br><span class="hljs-bullet">3.</span> 算数运算符  先*  /  %   后 +   -<br><span class="hljs-bullet">4.</span> 关系运算符  &gt;   &gt;=   &lt;   &lt;=<br><span class="hljs-bullet">5.</span> 相等运算符   ==   !=    ===    !==<br><span class="hljs-bullet">6.</span> 逻辑运算符 先&amp;&amp;   后||<br><span class="hljs-bullet">7.</span> 赋值运算符<br><br>规律：<br>先一元   后  二元 <br>先 算数  后 关系<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D; 与 &#x3D;&#x3D;&#x3D; 的区别</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-section">== 相等，两边值类型不同的时候，忽略类型比较，直接比较 值，只要值相等 就返回 true。</span><br><br><span class="hljs-section">=== 全等，先判断类型是否相等，如果相等才去判断值是否相等，只有类型 和 值 都相等，才返回 true</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>javascript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS3随笔2进阶</title>
    <link href="/2018/10/29/CSS3%E9%9A%8F%E7%AC%942/"/>
    <url>/2018/10/29/CSS3%E9%9A%8F%E7%AC%942/</url>
    
    <content type="html"><![CDATA[<h2 id="CSS高级技巧"><a href="#CSS高级技巧" class="headerlink" title="CSS高级技巧"></a>CSS高级技巧</h2><h3 id="元素的显示与隐藏"><a href="#元素的显示与隐藏" class="headerlink" title="元素的显示与隐藏"></a>元素的显示与隐藏</h3><h4 id="display-显示"><a href="#display-显示" class="headerlink" title="display 显示"></a>display 显示</h4><p>display:block 除了转换为块级元素之外，同时还有显示元素的意思。<br>display : none 隐藏对象<br>特点： 隐藏之后，不再保留位置。<br>悬停显示</p><p>opacity和display：none区别<br>    什么时候使用 display:none<br>        在不涉及到js情况下，想让一个元素做显示或者隐藏要实现动画，使用display：none<br>    什么时候使用opacity<br>        在涉及js中，要让元素显示和隐藏，做动画，opacity:0，对应，两个都可以，不做动画对应的是show和hide</p><h4 id="visibility-可见性"><a href="#visibility-可见性" class="headerlink" title="visibility 可见性"></a>visibility 可见性</h4><p>visible : 　对象可视<br>hidden : 　对象隐藏<br>特点： 隐藏之后，继续保留原有位置。</p><h4 id="overflow-溢出"><a href="#overflow-溢出" class="headerlink" title="overflow 溢出"></a>overflow 溢出</h4><p>visible : 　不剪切内容也不添加滚动条。<br>auto : 　 超出自动显示滚动条，不超出不显示滚动条<br>hidden : 　不显示超过对象尺寸的内容，超出的部分隐藏掉<br>scroll : 　不管超出内容否，总是显示滚动条</p><h3 id="鼠标样式curso"><a href="#鼠标样式curso" class="headerlink" title="鼠标样式curso"></a>鼠标样式curso</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">cursor :  <span class="hljs-keyword">default</span>  小白 | pointer  小手  | move  移动  |  text  文本<br></code></pre></td></tr></table></figure><h3 id="轮廓-outline"><a href="#轮廓-outline" class="headerlink" title="轮廓 outline"></a>轮廓 outline</h3><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">outline : outline-<span class="hljs-built_in">color</span> ||outline-<span class="hljs-built_in">style</span> || outline-<span class="hljs-built_in">width</span> <br></code></pre></td></tr></table></figure><p>但是我们都不关心可以设置多少，我们平时都是去掉的<br>最直接的写法是 ：  outline: 0;   或者  outline: none;</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;input  <span class="hljs-attribute">type</span>=<span class="hljs-string">&quot;text&quot;</span>  <span class="hljs-attribute">style</span>=<span class="hljs-string">&quot;outline: 0;&quot;</span>/&gt;<br></code></pre></td></tr></table></figure><h3 id="防止拖拽文本域resize"><a href="#防止拖拽文本域resize" class="headerlink" title="防止拖拽文本域resize"></a>防止拖拽文本域resize</h3><p>resize：none    这个单词可以防止 火狐 谷歌等浏览器随意的拖动 文本域。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">textarea</span>  <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;resize: none;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="vertical-align-垂直对齐3"><a href="#vertical-align-垂直对齐3" class="headerlink" title="vertical-align 垂直对齐3"></a>vertical-align 垂直对齐3</h3><p>vertical-align : baseline |top |middle |bottom<br>vertical-align 不影响块级元素中的内容对齐，它只针对于 行内元素或者行内块元素，特别是行内块元素， 通常用来控制图片&#x2F;表单与文字的对齐。</p><h3 id="去除图片底侧空白缝隙"><a href="#去除图片底侧空白缝隙" class="headerlink" title="去除图片底侧空白缝隙"></a>去除图片底侧空白缝隙</h3><p>解决方法<br>给img vertical-align:middle | top等等。  让图片不要和基线对齐<br>给img 添加 display：block; 转换为块级元素就不会存在问题了。</p><h3 id="溢出的文字隐藏"><a href="#溢出的文字隐藏" class="headerlink" title="溢出的文字隐藏"></a>溢出的文字隐藏</h3><p>white-space<br>normal : 　默认处理方式<br>nowrap : 　强制在同一行内显示所有文本，直到文本结束或者遭遇br标签对象才换行。</p><p>可以处理中文</p><p>text-overflow 文字溢出</p><p>clip : 　<br>不显示省略标记（…），而是简单的裁切<br>ellipsis :<br>当对象内文本溢出时显示省略标记（…）</p><h3 id="CSS精灵技术（sprite）-小妖精-雪碧"><a href="#CSS精灵技术（sprite）-小妖精-雪碧" class="headerlink" title="CSS精灵技术（sprite） 小妖精   雪碧"></a>CSS精灵技术（sprite） 小妖精   雪碧</h3><pre><code class="hljs">&lt;style&gt;    div &#123;        width: 25px;        height: 26px;        border: 1px solid red;        background: url(images/sprite1.png) no-repeat 0 -351px;        background-position: 0 50px;    &#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h2 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h2><blockquote><p>​::before 在被选元素的内容前面插入内容<br>        attr(属性名) 将元素某一个属性的内容作为插入的内容<br>    ::after 在被选元素的内容后面插入内容<br>        attr(属性名) 将元素某一个属性的内容作为插入的内容<br>    :empty 选择内容为空的元素<br>    :not 排除选择器<br>    :last-child 选择某一个元素父级下的最后一个子元素<br>    :first-child 选择某一个元素父级下的第一的子元素<br>    :nth-child(length) 选择某个元素父级下面的第length个子元素</p></blockquote><h2 id="背景设置"><a href="#背景设置" class="headerlink" title="背景设置"></a>背景设置</h2><h3 id="背景尺寸"><a href="#背景尺寸" class="headerlink" title="背景尺寸"></a>背景尺寸</h3><blockquote><p>background-size 设置背景图片尺寸<br>auto： 背景图像的真实大小。<br>cover： 背景图片等比例缩放到铺满盒子子主题 3<br>contain： 背景图片拉伸以适应盒子大小直接设置大小 background-size: 100px 100px; 或者backgound-size: 10% 10%;</p></blockquote><h3 id="背景重复"><a href="#背景重复" class="headerlink" title="背景重复"></a>背景重复</h3><p>round</p><p>如果背景图片在平铺的时候 有部分区域被截取 round会将图片本身缩小 以达到完全显示图片的目的</p><p>space</p><p>在水平方向上和竖直方向上 能平铺多少张图片就平铺多少张图片 剩余的空隙平均分配</p><h3 id="多背景"><a href="#多背景" class="headerlink" title="多背景"></a>多背景</h3><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs coq">.el &#123;<br>    background: <br>        url(img/bg1.png) no-<span class="hljs-built_in">repeat</span> <span class="hljs-built_in">left</span> <span class="hljs-built_in">top</span>,<br>        url(img/bg2.png) no-<span class="hljs-built_in">repeat</span> <span class="hljs-built_in">right</span> <span class="hljs-built_in">top</span>,<br>        url(img/bg3.png) no-<span class="hljs-built_in">repeat</span> <span class="hljs-built_in">left</span> <span class="hljs-built_in">bottom</span>,<br>        url(img/bg4.png) no-<span class="hljs-built_in">repeat</span> <span class="hljs-built_in">right</span> <span class="hljs-built_in">bottom</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="background-origin-定义背景显示区域"><a href="#background-origin-定义背景显示区域" class="headerlink" title="background-origin  定义背景显示区域"></a>background-origin  定义背景显示区域</h3><blockquote><p>参数<br>border-box背景从边框开始，也就是压在边框上<br>padding-box背景从内边距开始（相当于默认值）<br>content-box背景从内容区开始（比如内边距是20px那就会在盒子内20px的位置开始渲染背景）</p></blockquote><h3 id="background-clip"><a href="#background-clip" class="headerlink" title="background-clip"></a>background-clip</h3><blockquote><p>参数<br>border-box默认值，从边框向外裁剪</p><p>padding-box向内填充向外裁剪<br>content-box从内容区域外裁剪背景<br>no-clip不裁切</p></blockquote><h3 id="background-size"><a href="#background-size" class="headerlink" title="background-size"></a>background-size</h3><blockquote><p>auto</p><p>自适应</p><p>长度值px</p><p>可以设置宽高值，当只有一个值时默认为宽度高度等比缩放</p><p>百分比</p><p>将背景图标的宽高变成容器宽高的百分比</p><p>cover</p><p>背景缩放到覆盖整个容器</p><p>contain</p><p>背景缩放到覆盖容器的一边为止</p></blockquote><h2 id="内减盒模型"><a href="#内减盒模型" class="headerlink" title="内减盒模型"></a>内减盒模型</h2><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-built_in">box</span>-sizing： <span class="hljs-built_in">content</span>-<span class="hljs-built_in">box</span> / <span class="hljs-built_in">border</span>-<span class="hljs-built_in">box</span>;<br></code></pre></td></tr></table></figure><h2 id="过渡"><a href="#过渡" class="headerlink" title="过渡"></a>过渡</h2><h3 id="过渡属性"><a href="#过渡属性" class="headerlink" title="过渡属性"></a>过渡属性</h3><p>transition-property: 过渡属性;<br>transition-duration: 动画时间;<br>transition-timing-function: 动画执行的速度效果;<br>transition-delay: 延迟</p><h3 id="复合属性"><a href="#复合属性" class="headerlink" title="复合属性"></a>复合属性</h3><p>transition: all 1s linear 1s;</p><h3 id="动画速度效果"><a href="#动画速度效果" class="headerlink" title="动画速度效果"></a>动画速度效果</h3><p>linear：匀速运动<br>ease： 慢快慢（默认值）<br>ease-in： 由慢到快<br>ease-out： 由快到慢<br>steps(integer)： 分多少步完成</p><h2 id="2D转换"><a href="#2D转换" class="headerlink" title="2D转换"></a>2D转换</h2><p>​缩放 scale()<br>    平移translate(x, y)<br>    旋转rotate(0deg)<br>    变形- skew(x, y)<br>    中心点transform-origin</p><p>缩放 scale()</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs scss">- <span class="hljs-built_in">scale</span>(x, y) ：在x、y轴上对元素进行缩放，如果第二个参数未提供，取第一个参数的值。 <br>- <span class="hljs-built_in">scaleX</span>() ：指定元素在X轴的缩放（水平方向） <br>- <span class="hljs-built_in">scaleY</span>() ：指定元素在Y轴的缩放（垂直方向） <br>- 以自己的中心点进行缩放<br></code></pre></td></tr></table></figure><p>平移translate(x, y)</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs scss">- <span class="hljs-built_in">translate</span>(x, y)： 在x、y轴上对元素进行移动，如果第二个参数未提供，则默认值为<span class="hljs-number">0</span>。<br>- <span class="hljs-built_in">translateX</span>()： 指定元素在X轴的移动 （水平方向）<br>- <span class="hljs-built_in">translateY</span>()： 指定元素在Y轴的移动 （垂直方向）<br>- 中心点水平或垂直移动<br><br></code></pre></td></tr></table></figure><p>旋转rotate(0deg)</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">rotate</span><span class="hljs-params">(<span class="hljs-number">0deg</span>)</span></span>： 指定元素的旋转角度。<br></code></pre></td></tr></table></figure><p>变形- skew(x, y)</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs scss">- <span class="hljs-built_in">skew</span>(x, y)： 在x、y轴上对元素进行扭曲（斜切）操作。如果第二个参数未提供，则默认值为<span class="hljs-number">0</span>。<br>- <span class="hljs-built_in">skewX</span>()： 指定元素在X轴的扭曲（水平方向） <br>- <span class="hljs-built_in">skewY</span>()： 指定元素在Y轴的扭曲（垂直方向） <br><br></code></pre></td></tr></table></figure><p>中心点transform-origin</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">transform-origin</span>： 指定元素在<span class="hljs-number">2</span>D转换中的中心点。<br><br>- 语法： <span class="hljs-attribute">transform-origin</span>: x y;<br>- 值可以是关键字 <span class="hljs-attribute">left</span> <span class="hljs-attribute">right</span> <span class="hljs-attribute">top</span> <span class="hljs-attribute">bottom</span> 也可以是具体的像素值<br><br></code></pre></td></tr></table></figure><h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><h3 id="定义动画"><a href="#定义动画" class="headerlink" title="定义动画"></a>定义动画</h3><p>用@keyframes 动画名 {}定义一个动画</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@keyframes</span> Hello &#123;<br><span class="hljs-selector-tag">from</span> &#123;<br><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(<span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-selector-tag">to</span> &#123;<br><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(<span class="hljs-number">500px</span>);<br>&#125;<br>&#125;<br><span class="hljs-selector-tag">from</span>  <span class="hljs-selector-tag">to</span>   也可写成 <span class="hljs-number">0%</span> <span class="hljs-number">10%</span>  <span class="hljs-number">100%</span><br>可以被多个元素重复使用<br></code></pre></td></tr></table></figure><h3 id="调用动画"><a href="#调用动画" class="headerlink" title="调用动画"></a>调用动画</h3><p>animation: 动画名称 执行时间 运动形式 延迟时间 执行次数 是否反向运动;</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs css">元素 &#123;<br><span class="hljs-attribute">animation</span>: 动画名称 执行时间 运动形式 延迟时间 执行次数 是否反向运动;<br>&#125;<br><br><br><br><span class="hljs-selector-class">.box</span> &#123;<br><span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br><span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br><span class="hljs-attribute">background</span>: green;<br><span class="hljs-comment">/*animation: Hello 2s;*/</span><br><span class="hljs-attribute">animation</span>: world <span class="hljs-number">5000ms</span> linear infinite alternate;<br>&#125;<br><br><br>毫秒,秒都行<br></code></pre></td></tr></table></figure><h3 id="动画属性介绍"><a href="#动画属性介绍" class="headerlink" title="动画属性介绍"></a>动画属性介绍</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> animation-name：动画名称 <br><span class="hljs-bullet">-</span> animation-duration：动画的持续时间<br><span class="hljs-bullet">-</span> animation-timing-function： 动画的过渡类型 <br><span class="hljs-bullet">  -</span> linear： 线性过渡。等同于贝塞尔曲线(0.0, 0.0, 1.0, 1.0) <br><span class="hljs-bullet">  -</span> ease： 平滑过渡。等同于贝塞尔曲线(0.25, 0.1, 0.25, 1.0) <br><span class="hljs-bullet">  -</span> ease-in： 由慢到快。等同于贝塞尔曲线(0.42, 0, 1.0, 1.0) <br><span class="hljs-bullet">  -</span> ease-out： 由快到慢。等同于贝塞尔曲线(0, 0, 0.58, 1.0) <br><span class="hljs-bullet">  -</span> ease-in-out： 由慢到快再到慢。等同于贝塞尔曲线(0.42, 0, 0.58, 1.0) <br><span class="hljs-bullet">-</span> animation-delay： 动画延迟的时间 <br><span class="hljs-bullet">-</span> animation-iteration-count： 动画的循环次数 默认1次  infinite永久<br><span class="hljs-bullet">-</span> animation-direction： 动画是否反向运动 <br><span class="hljs-bullet">  -</span> normal： 正常方向 <br><span class="hljs-bullet">  -</span> reverse： 反方向运行, 从动画结束状态运行到动画开始状态 <br><span class="hljs-bullet">  -</span> alternate： 动画先正常运行再反方向运行，并持续交替运行 <br><span class="hljs-bullet">  -</span> alternate-reverse： 动画先反运行再正方向运行，并持续交替运行<br><span class="hljs-bullet">-</span> animation-fill-mode： 动画结束状态<br><span class="hljs-bullet">  -</span> forwards： 保存结束时状态<br><span class="hljs-bullet">  -</span> backwards：结束还原<br><span class="hljs-bullet">-</span> animation-play-state 设置动画的运行状态<br><span class="hljs-bullet">  -</span> paused 暂停<br><span class="hljs-bullet">  -</span> running 播放<br><span class="hljs-bullet">-</span> animation: 复合写法<br><span class="hljs-bullet">  -</span> anmatiton： boxAnimation 1s linear 2s 10 reverse forwards;<br><span class="hljs-bullet">  -</span> 解释： 延迟两秒(2s)， 匀速(linerar) 反方向(reverse) 执行 boxAnimation 动画， 时长为1秒(1s)， 重复10次(10)。<br><br></code></pre></td></tr></table></figure><h2 id="CSS中的渐变"><a href="#CSS中的渐变" class="headerlink" title="CSS中的渐变"></a>CSS中的渐变</h2><h3 id="形状"><a href="#形状" class="headerlink" title="形状"></a>形状</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs scss">circle  圆形，中心点保持圆形<br>ellipse(默认值)渐变颜色形状会随着容器而变化<br></code></pre></td></tr></table></figure><h3 id="位置"><a href="#位置" class="headerlink" title="位置"></a>位置</h3><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs coq"><span class="hljs-built_in">left</span><br><span class="hljs-built_in">right</span><br><span class="hljs-built_in">top</span><br><span class="hljs-built_in">bottom</span><br>可以直接写像素值<br></code></pre></td></tr></table></figure><h3 id="大小"><a href="#大小" class="headerlink" title="大小"></a>大小</h3><p>定义：从起点到终点过渡，一个颜色过渡到另一个颜色<br>closest-side：最近边，从中心点网最近的地方去拉<br>farthest-side: 最远边，从中心往最远的地方去拉<br>closest-corner: 最近角<br>farthest-corner : 最远角（默认值）<br>background-image: radial-gradient()–&gt;方向<br>background-image: linear-gradient(to top, red, blue, green);*&#x2F;<br>&#x2F;<em>background-image: linear-gradient(45deg, red 0%, red 50%, blue 50%, blue 100%);</em>&#x2F;<br>&#x2F;<em>background-image: linear-gradient(to right, red 0%, blue 30%, yellow 80%, pink 100%);</em>&#x2F;<br>&#x2F;<em>background-image: radial-gradient(ellipse at 100px 100px, red 0%, blue 50%, pink 100%);</em>&#x2F;<br>background-image: radial-gradient(circle farthest-corner at 100px 100px, red, blue);</p><h3 id="阴影"><a href="#阴影" class="headerlink" title="阴影"></a>阴影</h3><h4 id="文字阴影"><a href="#文字阴影" class="headerlink" title="文字阴影"></a>文字阴影</h4><p>text-shadow<br>text-shadow: offsetX offsetY blur color;<br>阴影x轴位置偏移 阴影y轴位置偏移 阴影的模糊程度 阴影颜色</p><h4 id="盒子阴影"><a href="#盒子阴影" class="headerlink" title="盒子阴影"></a>盒子阴影</h4><p>box-shadow</p>]]></content>
    
    
    <categories>
      
      <category>H5C3</category>
      
    </categories>
    
    
    <tags>
      
      <tag>H5C3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS3随笔3过渡和动画</title>
    <link href="/2018/10/20/CSS3%E9%9A%8F%E7%AC%943%E8%BF%87%E6%B8%A1%E5%92%8C%E5%8A%A8%E7%94%BB/"/>
    <url>/2018/10/20/CSS3%E9%9A%8F%E7%AC%943%E8%BF%87%E6%B8%A1%E5%92%8C%E5%8A%A8%E7%94%BB/</url>
    
    <content type="html"><![CDATA[<h2 id="CSS高级技巧"><a href="#CSS高级技巧" class="headerlink" title="CSS高级技巧"></a>CSS高级技巧</h2><h2 id="过渡"><a href="#过渡" class="headerlink" title="过渡"></a>过渡</h2><h3 id="过渡属性"><a href="#过渡属性" class="headerlink" title="过渡属性"></a>过渡属性</h3><p>transition-property: 过渡属性;<br>transition-duration: 动画时间;<br>transition-timing-function: 动画执行的速度效果;<br>transition-delay: 延迟</p><h3 id="复合属性"><a href="#复合属性" class="headerlink" title="复合属性"></a>复合属性</h3><p>transition: all 1s linear 1s;</p><h3 id="动画速度效果"><a href="#动画速度效果" class="headerlink" title="动画速度效果"></a>动画速度效果</h3><p>linear：匀速运动<br>ease： 慢快慢（默认值）<br>ease-in： 由慢到快<br>ease-out： 由快到慢<br>steps(integer)： 分多少步完成</p><h2 id="2D转换"><a href="#2D转换" class="headerlink" title="2D转换"></a>2D转换</h2><p>​缩放 scale()<br>    平移translate(x, y)<br>    旋转rotate(0deg)<br>    变形- skew(x, y)<br>    中心点transform-origin</p><p>缩放 scale()</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs scss">- <span class="hljs-built_in">scale</span>(x, y) ：在x、y轴上对元素进行缩放，如果第二个参数未提供，取第一个参数的值。 <br>- <span class="hljs-built_in">scaleX</span>() ：指定元素在X轴的缩放（水平方向） <br>- <span class="hljs-built_in">scaleY</span>() ：指定元素在Y轴的缩放（垂直方向） <br>- 以自己的中心点进行缩放<br></code></pre></td></tr></table></figure><p>平移translate(x, y)</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs scss">- <span class="hljs-built_in">translate</span>(x, y)： 在x、y轴上对元素进行移动，如果第二个参数未提供，则默认值为<span class="hljs-number">0</span>。<br>- <span class="hljs-built_in">translateX</span>()： 指定元素在X轴的移动 （水平方向）<br>- <span class="hljs-built_in">translateY</span>()： 指定元素在Y轴的移动 （垂直方向）<br>- 中心点水平或垂直移动<br><br></code></pre></td></tr></table></figure><p>旋转rotate(0deg)</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">rotate</span><span class="hljs-params">(<span class="hljs-number">0deg</span>)</span></span>： 指定元素的旋转角度。<br></code></pre></td></tr></table></figure><p>变形- skew(x, y)</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs scss">- <span class="hljs-built_in">skew</span>(x, y)： 在x、y轴上对元素进行扭曲（斜切）操作。如果第二个参数未提供，则默认值为<span class="hljs-number">0</span>。<br>- <span class="hljs-built_in">skewX</span>()： 指定元素在X轴的扭曲（水平方向） <br>- <span class="hljs-built_in">skewY</span>()： 指定元素在Y轴的扭曲（垂直方向） <br><br></code></pre></td></tr></table></figure><p>中心点transform-origin</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">transform-origin</span>： 指定元素在<span class="hljs-number">2</span>D转换中的中心点。<br><br>- 语法： <span class="hljs-attribute">transform-origin</span>: x y;<br>- 值可以是关键字 <span class="hljs-attribute">left</span> <span class="hljs-attribute">right</span> <span class="hljs-attribute">top</span> <span class="hljs-attribute">bottom</span> 也可以是具体的像素值<br><br></code></pre></td></tr></table></figure><h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><h3 id="定义动画"><a href="#定义动画" class="headerlink" title="定义动画"></a>定义动画</h3><p>用@keyframes 动画名 {}定义一个动画</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@keyframes</span> Hello &#123;<br><span class="hljs-selector-tag">from</span> &#123;<br><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(<span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-selector-tag">to</span> &#123;<br><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(<span class="hljs-number">500px</span>);<br>&#125;<br>&#125;<br><span class="hljs-selector-tag">from</span>  <span class="hljs-selector-tag">to</span>   也可写成 <span class="hljs-number">0%</span> <span class="hljs-number">10%</span>  <span class="hljs-number">100%</span><br>可以被多个元素重复使用<br></code></pre></td></tr></table></figure><h3 id="调用动画"><a href="#调用动画" class="headerlink" title="调用动画"></a>调用动画</h3><p>animation: 动画名称 执行时间 运动形式 延迟时间 执行次数 是否反向运动;</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs css">元素 &#123;<br><span class="hljs-attribute">animation</span>: 动画名称 执行时间 运动形式 延迟时间 执行次数 是否反向运动;<br>&#125;<br><br><br><br><span class="hljs-selector-class">.box</span> &#123;<br><span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br><span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br><span class="hljs-attribute">background</span>: green;<br><span class="hljs-comment">/*animation: Hello 2s;*/</span><br><span class="hljs-attribute">animation</span>: world <span class="hljs-number">5000ms</span> linear infinite alternate;<br>&#125;<br><br><br>毫秒,秒都行<br></code></pre></td></tr></table></figure><h3 id="动画属性介绍"><a href="#动画属性介绍" class="headerlink" title="动画属性介绍"></a>动画属性介绍</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> animation-name：动画名称 <br><span class="hljs-bullet">-</span> animation-duration：动画的持续时间<br><span class="hljs-bullet">-</span> animation-timing-function： 动画的过渡类型 <br><span class="hljs-bullet">  -</span> linear： 线性过渡。等同于贝塞尔曲线(0.0, 0.0, 1.0, 1.0) <br><span class="hljs-bullet">  -</span> ease： 平滑过渡。等同于贝塞尔曲线(0.25, 0.1, 0.25, 1.0) <br><span class="hljs-bullet">  -</span> ease-in： 由慢到快。等同于贝塞尔曲线(0.42, 0, 1.0, 1.0) <br><span class="hljs-bullet">  -</span> ease-out： 由快到慢。等同于贝塞尔曲线(0, 0, 0.58, 1.0) <br><span class="hljs-bullet">  -</span> ease-in-out： 由慢到快再到慢。等同于贝塞尔曲线(0.42, 0, 0.58, 1.0) <br><span class="hljs-bullet">-</span> animation-delay： 动画延迟的时间 <br><span class="hljs-bullet">-</span> animation-iteration-count： 动画的循环次数 默认1次  infinite永久<br><span class="hljs-bullet">-</span> animation-direction： 动画是否反向运动 <br><span class="hljs-bullet">  -</span> normal： 正常方向 <br><span class="hljs-bullet">  -</span> reverse： 反方向运行, 从动画结束状态运行到动画开始状态 <br><span class="hljs-bullet">  -</span> alternate： 动画先正常运行再反方向运行，并持续交替运行 <br><span class="hljs-bullet">  -</span> alternate-reverse： 动画先反运行再正方向运行，并持续交替运行<br><span class="hljs-bullet">-</span> animation-fill-mode： 动画结束状态<br><span class="hljs-bullet">  -</span> forwards： 保存结束时状态<br><span class="hljs-bullet">  -</span> backwards：结束还原<br><span class="hljs-bullet">-</span> animation-play-state 设置动画的运行状态<br><span class="hljs-bullet">  -</span> paused 暂停<br><span class="hljs-bullet">  -</span> running 播放<br><span class="hljs-bullet">-</span> animation: 复合写法<br><span class="hljs-bullet">  -</span> anmatiton： boxAnimation 1s linear 2s 10 reverse forwards;<br><span class="hljs-bullet">  -</span> 解释： 延迟两秒(2s)， 匀速(linerar) 反方向(reverse) 执行 boxAnimation 动画， 时长为1秒(1s)， 重复10次(10)。<br><br></code></pre></td></tr></table></figure><h2 id="立方体"><a href="#立方体" class="headerlink" title="立方体"></a>立方体</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">transform</span>-style:preserve-<span class="hljs-number">3</span>D --&gt;使其子元素在<span class="hljs-number">3</span>D空间中呈现，使<span class="hljs-number">2</span>D元素变成<span class="hljs-number">3</span>D<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>H5C3</category>
      
    </categories>
    
    
    <tags>
      
      <tag>H5C3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VSCode设置默认打开的浏览器</title>
    <link href="/2018/10/18/VSCode%E8%AE%BE%E7%BD%AE%E9%BB%98%E8%AE%A4%E6%89%93%E5%BC%80%E7%9A%84%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    <url>/2018/10/18/VSCode%E8%AE%BE%E7%BD%AE%E9%BB%98%E8%AE%A4%E6%89%93%E5%BC%80%E7%9A%84%E6%B5%8F%E8%A7%88%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<p><a href="https://so.csdn.net/so/search?q=vscode&spm=1001.2101.3001.7020">vscode</a>怎么浏览器打开html文件？可以通过安装open in browser插件解决。 1、安装open in browser插件 </p><p>安装完点击重新加载 </p><p>2、vscode怎么修改默认浏览器</p><p>在安装完open in browser插件后，在打开的html文件代码中点击鼠标右键可以看到多了两个打开选择，点击选项即可打开浏览器进行预览。</p><p>Open in Default Browsers：使用默认浏览器打开 快捷键：alt+b</p><p>Open in Other Browsers：使用其他浏览器打开 快捷键：alt+shift+b</p><p>修改默认浏览器：选择文件—首选项—设置，在搜索栏输入open-in-browser.default，出现以下在编辑框中编辑<br>原文链接：<a href="https://blog.csdn.net/qq_33964336/article/details/86570449">https://blog.csdn.net/qq_33964336/article/details/86570449</a></p>]]></content>
    
    
    <categories>
      
      <category>VSCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>VSCode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2018/10/10/hello-world/"/>
    <url>/2018/10/10/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><head>    <script src='//unpkg.com/valine/dist/Valine.min.js'></script></head><body>    <div id="vcomments"></div>    <script>        new Valine({            el: '#vcomments',            appId: 'nErl1Uq9dQ7faY3Z92mPOmPP-gzGzoHsz',            appKey: 'KB2EqmUb8axAHLTi8UJ7qxjp'        })    </script></body>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World3</title>
    <link href="/2018/10/10/hello-world2/"/>
    <url>/2018/10/10/hello-world2/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="章节1"><a href="#章节1" class="headerlink" title="章节1"></a>章节1</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h2 id="章节2"><a href="#章节2" class="headerlink" title="章节2"></a>章节2</h2><h3 id="2-1"><a href="#2-1" class="headerlink" title="2-1"></a>2-1</h3><p>中英混合可自行调节中英混合可自行调节中英混合可自行调节中英混合可自行调节中英混合可自行调节中英混合可自行调节中英混合可自行调节中英混合可自行调节中英混合可自行调节中英混合可自行调节中英混合可自行调节中英混合可自行调节中英混合可自行调节中英混合可自行调节中英混合可自行调节中英混合可自行调节中英混合可自行调节中英混合可自行调节</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><h3 id="2-2"><a href="#2-2" class="headerlink" title="2-2"></a>2-2</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PS3</tag>
      
      <tag>Games</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS3随笔1</title>
    <link href="/2018/08/19/CSS3%E9%9A%8F%E7%AC%941/"/>
    <url>/2018/08/19/CSS3%E9%9A%8F%E7%AC%941/</url>
    
    <content type="html"><![CDATA[<h2 id="css书写方式"><a href="#css书写方式" class="headerlink" title="css书写方式"></a>css书写方式</h2><p>行内式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">标签名</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;属性1:属性值1; 属性2:属性值2; 属性3:属性值3;&quot;</span>&gt;</span> 内容 <span class="hljs-tag">&lt;/<span class="hljs-name">标签名</span>&gt;</span><br></code></pre></td></tr></table></figure><p>内嵌样式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css"> <span class="hljs-selector-tag">div</span> &#123;</span><br><span class="language-css"> <span class="hljs-attribute">color</span>: red;</span><br><span class="language-css"> <span class="hljs-attribute">font-size</span>: <span class="hljs-number">12px</span>;</span><br><span class="language-css"> &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p>外链式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;<span class="hljs-built_in">head</span>&gt;<br>  &lt;<span class="hljs-built_in">link</span> <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;stylesheet&quot;</span>  rel=<span class="hljs-string">&quot;stylesheet&quot;</span> href=<span class="hljs-string">&quot;CSS文件的路径&quot;</span>/&gt;<br>&lt;/head&gt;<br></code></pre></td></tr></table></figure><h2 id="CSS字体样式属性"><a href="#CSS字体样式属性" class="headerlink" title="CSS字体样式属性"></a>CSS字体样式属性</h2><p>font-size:字号大小</p><p>推荐使用像素单位px</p><p>font-family:字体</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span>&#123; <span class="hljs-attribute">font-family</span>:<span class="hljs-string">&quot;微软雅黑&quot;</span>;&#125;<br><span class="hljs-attribute">font-family</span>:<span class="hljs-string">&quot;Microsoft Yahei&quot;</span><br>font-family: <span class="hljs-string">&quot;\5FAE\8F6F\96C5\9ED1&quot;</span><br>F12-console-输入<span class="hljs-built_in">escape</span>(<span class="hljs-string">&quot;字体&quot;</span>)-回车文字转码-%u变\-调用<br></code></pre></td></tr></table></figure><p>font-weight:字体粗细</p><p>font-style:字体风格</p><blockquote><p>normal：默认值，浏览器会显示标准的字体样式。</p><p>italic：浏览器会显示斜体的字体样式。</p><p>oblique：浏览器会显示倾斜的字体样式。</p></blockquote><p>font:综合设置字体样式 (重点)</p><p>选择器{font: font-style  font-weight  font-size&#x2F;line-height  font-family;}使用font属性时，必须按上面语法格式中的顺序书写，不能更换顺序，各个属性以空格隔开</p><h2 id="CSS-三大特性"><a href="#CSS-三大特性" class="headerlink" title="CSS 三大特性"></a>CSS 三大特性</h2><h3 id="CSS层叠性"><a href="#CSS层叠性" class="headerlink" title="CSS层叠性"></a>CSS层叠性</h3><p>一般情况下，如果出现样式冲突，则会按照CSS书写的顺序，以最后的样式为准。</p><h3 id="CSS继承性"><a href="#CSS继承性" class="headerlink" title="CSS继承性"></a>CSS继承性</h3><p>子元素可以继承父元素的样式（text-，font-，line-这些元素开头的都可以继承，以及color属性）</p><h3 id="CSS优先级"><a href="#CSS优先级" class="headerlink" title="CSS优先级"></a>CSS优先级</h3><p>继承样式的权重为0。即在嵌套结构中，不管父元素样式的权重多大，被子元素继承时，他的权重都为0，也就是说子元素定义的样式会覆盖继承来的样式。</p><h3 id="CSS特殊性（Specificity）"><a href="#CSS特殊性（Specificity）" class="headerlink" title="CSS特殊性（Specificity）"></a>CSS特殊性（Specificity）</h3><p>继承或者*  0,0,0,0<br>每个元素（标签选择器）0,0,0,1<br>每个类，伪类  0,0,1,0<br>每个ID  0,1,0,0<br>每个行内样式 style&#x3D;””    1,0,0,0<br>每个!important  重要的   ∞ 无穷大<br>    注意： </p><ol><li>数位之间没有进制 比如说： 0,0,0,5 + 0,0,0,5 &#x3D;0,0,0,10 而不是 0,0, 1, 0， 所以不会存在10个div能赶上一个类选择器的情况。</li><li>继承的 权重是 0</li></ol><p>注意： </p><ol><li>数位之间没有进制 比如说： 0,0,0,5 + 0,0,0,5 &#x3D;0,0,0,10 而不是 0,0, 1, 0， 所以不会存在10个div能赶上一个类选择器的情况。</li><li>继承的 权重是 0</li></ol><h2 id="CSS-布局的三种机制"><a href="#CSS-布局的三种机制" class="headerlink" title="CSS 布局的三种机制"></a>CSS 布局的三种机制</h2><p>网页布局的核心——就是用 CSS 来摆放盒子位置。</p><p>CSS 提供了 3 种机制来设置盒子的摆放位置，分别是普通流、浮动和定位</p><h2 id="浮动-float"><a href="#浮动-float" class="headerlink" title="浮动(float)"></a>浮动(float)</h2><p>概念：元素的浮动是指设置了浮动属性的元素会脱离标准普通流的控制，移动到其父元素中指定位置的过程。</p><p>浮动——漂，漂浮在普通流的上面，不占位置，只有左右浮动。  脱标—脱离标准流</p><p>left  rigth  none</p><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><h4 id="案例2——浮动不占位置"><a href="#案例2——浮动不占位置" class="headerlink" title="案例2——浮动不占位置"></a>案例2——浮动不占位置</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs css"><br><span class="hljs-selector-class">.box1</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.5</span>);<br>    <span class="hljs-comment">/* 让第 1 个盒子漂浮起来，不占位置 */</span><br>    <span class="hljs-attribute">float</span>: left;<br>&#125;<br><br><span class="hljs-selector-class">.box2</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">150px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;<br>    <span class="hljs-attribute">background-color</span>: skyblue;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>​float 属性会让盒子漂浮在普通流的上面，不占位置。</p><h4 id="案例-1-——-文字环绕效果"><a href="#案例-1-——-文字环绕效果" class="headerlink" title="案例 1 —— 文字环绕效果"></a>案例 1 —— 文字环绕效果</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">500px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">500px</span>;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid hotpink;<br>    <span class="hljs-comment">/* 让盒子居中显示 */</span><br>    <span class="hljs-attribute">margin</span>: auto;<br>&#125;<br><br><span class="hljs-selector-tag">img</span> &#123;<br>    <span class="hljs-comment">/* 让图片浮动在盒子的右侧，div 中的文字环绕在图片周围 */</span><br>    <span class="hljs-attribute">float</span>: right;<br>&#125;<br></code></pre></td></tr></table></figure><p>​div 中的文字环绕在图片周围 *&#x2F;</p><h4 id="案例-3——div-水平排列"><a href="#案例-3——div-水平排列" class="headerlink" title="案例 3——div 水平排列"></a>案例 3——div 水平排列</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">background-color</span>: pink;<br>    <span class="hljs-comment">/* 转换为行内块元素，可以水平显示，不过 div 之间有间隙，不方便处理 */</span><br>    <span class="hljs-comment">/* display: inline-block; */</span><br>    <span class="hljs-comment">/* 设置浮动属性，可以让 div 水平排列，并且没有间隙 */</span><br>    <span class="hljs-attribute">float</span>: left;<br>&#125;<br><br><span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:nth-child</span>(even) &#123;<br>    <span class="hljs-attribute">background-color</span>: hotpink;<br>&#125;<br></code></pre></td></tr></table></figure><p>​- 设置浮动属性 float: left;，可以让 div 水平排列，并且没有间隙；</p><ul><li>转换为行内块元素 display: inline-block;，可以水平显示，不过 div 之间有间隙，不方便处理。</li></ul><p>注意：案例中 float 属性是设置给所有 div 的。</p><h3 id="浮动-float-的应用（重要）"><a href="#浮动-float-的应用（重要）" class="headerlink" title="浮动(float)的应用（重要）"></a>浮动(float)的应用（重要）</h3><p>在实际布局中浮动的应用方法</p><ol><li>用普通流的大盒子（父级）定义上下顺序——占住位置；</li><li>使用浮动在大盒子内部设置小盒子的位置——水平排列。</li><li>注意：一个父盒子里面的子盒子，如果其中一个子盒子浮动，则其他子盒子都需要浮动，才能在一行显示。</li></ol><h3 id="浮动后与盒子的关系"><a href="#浮动后与盒子的关系" class="headerlink" title="浮动后与盒子的关系"></a>浮动后与盒子的关系</h3><h4 id="与父盒子的关系"><a href="#与父盒子的关系" class="headerlink" title="与父盒子的关系"></a>与父盒子的关系</h4><p>子盒子的浮动参照父盒子对齐</p><p>不会与父盒子的边框重叠，也不会超过父盒子的内边距</p><h4 id="与兄弟盒子的关系"><a href="#与兄弟盒子的关系" class="headerlink" title="与兄弟盒子的关系"></a>与兄弟盒子的关系</h4><p>在一个父级盒子中，如果前一个兄弟盒子是：</p><p>浮动的，那么当前盒子会与前一个盒子的顶部对齐；</p><p>普通流的，那么当前盒子会显示在前一个兄弟盒子的下方。 </p><p>浮动只会影响当前的或者是后面的盒子，不会影响前面的标准流的块元素。</p><h3 id="行内块元素特性（重要）"><a href="#行内块元素特性（重要）" class="headerlink" title="行内块元素特性（重要）"></a>行内块元素特性（重要）</h3><p>元素添加浮动后，会具有行内块元素的特性——元素的大小取决于：</p><p>定义的大小（优先级高）</p><p>元素内部的内容</p><p>特别注意：1. 浮动的盒子需要和标准流的父级搭配使用；2. 浮动可以使元素具有行内块特性。</p><p>浮动 float默认转换为行内块</p><h2 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h2><p>为什么要清除浮动<br>准确地说，并不是清除浮动，而是清除浮动后造成的影响<br>    方法1<br>        浮动元素末尾添加</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">&lt;<span class="hljs-keyword">div</span> style=”<span class="hljs-built_in">clear</span>:both”&gt;&lt;/<span class="hljs-keyword">div</span>&gt;<br>left<br><span class="hljs-literal">right</span><br>both<br><br></code></pre></td></tr></table></figure><p>​<br>父级添加overflow属性方法<br>可以给父级添加： overflow为 hidden| auto| scroll  都可以实现。<br>    单伪元素清除浮动  给浮动元素的父元素使用</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.clearfix</span><span class="hljs-selector-pseudo">:after</span> &#123;  <br><br><span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;&quot;</span>;<br><br><span class="hljs-attribute">display</span>: block;<br><br><span class="hljs-attribute">height</span>:<span class="hljs-number">0</span>;<br><br><span class="hljs-attribute">visibility</span>: hidden;<br><br><span class="hljs-attribute">clear</span>: both;<br><br>&#125; <br><br>/兼容ie6、ie7清除浮动/<br><br><span class="hljs-selector-class">.cleafix</span> &#123;<br><br>*zoom: <span class="hljs-number">1</span>;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>​双伪元素清除浮动  给浮动的元素的父元素</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.clearfix</span><span class="hljs-selector-pseudo">:before</span>, <span class="hljs-selector-class">.clearfix</span><span class="hljs-selector-pseudo">:after</span> &#123;<br><br><span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;&quot;</span>;<br><br><span class="hljs-attribute">display</span>: table;<br><br>&#125;<br><br><span class="hljs-selector-class">.clearfix</span><span class="hljs-selector-pseudo">:after</span> &#123;<br><br><span class="hljs-attribute">clear</span>: both;<br><br>&#125;<br><br>/兼容ie6、ie7清除浮动/<br><br><span class="hljs-selector-class">.clearfix</span> &#123;<br><br>*zoom: <span class="hljs-number">1</span>;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="CSS-背景-background"><a href="#CSS-背景-background" class="headerlink" title="CSS 背景(background)"></a>CSS 背景(background)</h2><p>background-color  背景颜色</p><p>background-image   背景图片地址 </p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-attribute">none </span>:   <span class="hljs-attribute">url </span>:<br></code></pre></td></tr></table></figure><p>background-repeat    是否平铺</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq">background-<span class="hljs-built_in">repeat</span> : <span class="hljs-built_in">repeat</span> | <span class="hljs-type">no</span>-<span class="hljs-built_in">repeat</span> | <span class="hljs-type">repeat</span>-x | <span class="hljs-type">repeat</span>-y <br></code></pre></td></tr></table></figure><p>background-position  背景位置</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs coq">position : 　<span class="hljs-built_in">top</span> | <span class="hljs-type">center</span> | <span class="hljs-type">bottom</span> | <span class="hljs-type">left</span> | <span class="hljs-type">center</span> | <span class="hljs-type">right</span>   方位名词   relative相对  absoluter绝对<br>center  屏幕缩放背景依然居中<br></code></pre></td></tr></table></figure><p>background-attachment  背景固定还是滚动</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">background-attachment </span>: <span class="hljs-keyword">scroll </span><span class="hljs-title">| fixed </span><br></code></pre></td></tr></table></figure><p>scroll : 　背景图像是随对象内容滚动</p><p>fixed : 　背景图像固定</p><p>背景的合写（复合属性）</p><p>background:背景颜色 背景图片地址 背景平铺 背景滚动 背景位置</p><p>background-size  背景图片大小</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css">宽高属性<span class="hljs-attribute">width</span>,<span class="hljs-attribute">height</span><br><br>cover覆盖<br><br><span class="hljs-attribute">contain</span>  等比占满<br></code></pre></td></tr></table></figure><p>background-origin  设置背景显示的原点位置</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs maxima">默认值padding-<span class="hljs-built_in">box</span><br><span class="hljs-built_in">content</span>-<span class="hljs-built_in">box</span><br><span class="hljs-built_in">border</span>-<span class="hljs-built_in">box</span><br></code></pre></td></tr></table></figure><p>background-clip 背景图修改</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs maxima">默认值 <span class="hljs-built_in">border</span>-<span class="hljs-built_in">box</span><br>padding-<span class="hljs-built_in">box</span><br><span class="hljs-built_in">content</span>-<span class="hljs-built_in">box</span><br></code></pre></td></tr></table></figure><p>盒子背景透明度</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">background</span>: rgba( <span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>.<span class="hljs-number">2</span>);<br></code></pre></td></tr></table></figure><p>连写</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">background</span>: url(glass.png) #fff no-repeat <span class="hljs-number">10</span>px/<span class="hljs-number">12</span>px <span class="hljs-number">12</span>px;<br><span class="hljs-attribute">10px</span>  背景图距左边的距离  一个值后面默认跟了一个Top=center,  /后面跟  背景图大小<br></code></pre></td></tr></table></figure><p>图片绝对路径</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&quot;~@/assets/images/jsptsummarize.png&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="文本属性"><a href="#文本属性" class="headerlink" title="文本属性"></a>文本属性</h2><p>color:文本颜色</p><p>line-height:行间距<br>line-height: 25px;</p><p>text-align:文本水平对齐方式<br>left：左对齐（默认值）<br>right：右对齐<br>center：居中对齐</p><p>text-indent:首行缩进<br>     &#x2F;<em>首行缩进2个字  em  1个em 就是1个字的大小</em>&#x2F;<br>      text-indent: 2em;  </p><p>text-decoration 文本的装饰<br>    none<br>    underline<br>    overline<br>    line-through</p><p>间距<br>    letter-spacing 字间距<br>    word-spacing 词间距</p><p>文本溢出隐藏  overflow:hidden</p><p>添加缩略标记 text-overflow:ellipsis   …</p><p>强制一行显示 white-space:nowrap  </p><h2 id="伪链接a"><a href="#伪链接a" class="headerlink" title="伪链接a"></a>伪链接a</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"> <span class="hljs-comment">/* 未访问的链接 */</span>  <span class="hljs-selector-pseudo">:link</span>    <br><span class="hljs-comment">/* 已访问的链接 */</span>   <span class="hljs-selector-pseudo">:visited</span> <br> <span class="hljs-comment">/* 鼠标移动到链接上 */</span>   <span class="hljs-selector-pseudo">:hover</span> <br><span class="hljs-comment">/* 选定的链接 */</span>   <span class="hljs-selector-pseudo">:active</span> <br>按照  lvha 的顺序  lv 包包 非常 hao <br></code></pre></td></tr></table></figure><h2 id="标签显示模式（display）"><a href="#标签显示模式（display）" class="headerlink" title="标签显示模式（display）"></a>标签显示模式（display）</h2><h3 id="块级元素-block-level"><a href="#块级元素-block-level" class="headerlink" title="块级元素(block-level)"></a>块级元素(block-level)</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">常见的块元素有<span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>~<span class="hljs-tag">&lt;<span class="hljs-name">h6</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>等，其中<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>标签是最典型的块元素。<br></code></pre></td></tr></table></figure><h3 id="行内元素-inline-level"><a href="#行内元素-inline-level" class="headerlink" title="行内元素(inline-level)"></a>行内元素(inline-level)</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">常见的行内元素有<span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">del</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">s</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">ins</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">u</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>等，其中<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>标签最典型的行内元素。<br></code></pre></td></tr></table></figure><h3 id="行内块元素（inline-block）"><a href="#行内块元素（inline-block）" class="headerlink" title="行内块元素（inline-block）"></a>行内块元素（inline-block）</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">在行内元素中有几个特殊的标签——<span class="hljs-tag">&lt;<span class="hljs-name">img</span> /&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">input</span> /&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>，可以对它们设置宽高和对齐属性，有些资料可能会称它们为行内块元素。<br></code></pre></td></tr></table></figure><h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><h3 id="css选择器"><a href="#css选择器" class="headerlink" title="css选择器"></a>css选择器</h3><p>标签选择器（元素选择器）<br>标签名{属性1:属性值1; 属性2:属性值2; 属性3:属性值3; }  或者<br>元素名{属性1:属性值1; 属性2:属性值2; 属性3:属性值3; }</p><h3 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h3><p>(可以使用多次)  .类名  {   属性1:属性值1; 属性2:属性值2; 属性3:属性值3; }   </p><h3 id="多类名选择器"><a href="#多类名选择器" class="headerlink" title="多类名选择器"></a>多类名选择器</h3><p>我们可以给标签指定多个类名，从而达到更多的选择目的。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">&lt;div <span class="hljs-keyword">class</span>=&quot;<span class="hljs-symbol">pink</span> <span class="hljs-symbol">fontWeight</span> <span class="hljs-symbol">font20</span>&quot;&gt;亚瑟&lt;/<span class="hljs-symbol">div</span>&gt;<br>&lt;<span class="hljs-symbol">div</span> <span class="hljs-symbol">class</span>=&quot;<span class="hljs-symbol">font20</span>&quot;&gt;刘备&lt;/<span class="hljs-symbol">div</span>&gt;<br>&lt;<span class="hljs-symbol">div</span> <span class="hljs-symbol">class</span>=&quot;<span class="hljs-symbol">font14</span> <span class="hljs-symbol">pink</span>&quot;&gt;安其拉&lt;/<span class="hljs-symbol">div</span>&gt;<br>&lt;<span class="hljs-symbol">div</span> <span class="hljs-symbol">class</span>=&quot;<span class="hljs-symbol">font14</span>&quot;&gt;貂蝉&lt;/<span class="hljs-symbol">div</span>&gt;<br></code></pre></td></tr></table></figure><h3 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h3><p>( 只能使用一次)     #id名 {属性1:属性值1; 属性2:属性值2; 属性3:属性值3; }  尽量不使用 ID 选择器</p><h3 id="通配符选择器"><a href="#通配符选择器" class="headerlink" title="通配符选择器"></a>通配符选择器</h3><ul><li><p>{ 属性1:属性值1; 属性2:属性值2; 属性3:属性值3; }  尽量少用通用选择器 </p><pre><code class="hljs">  符合选择器</code></pre></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css">* &#123;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;                    <span class="hljs-comment">/* 定义外边距*/</span><br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;                   <span class="hljs-comment">/* 定义内边距*/</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="后代选择器"><a href="#后代选择器" class="headerlink" title="后代选择器"></a>后代选择器</h3><p>写法就是把外层标签写在前面，内层标签写在后面，中间用空格分隔。当标签发生嵌套时，内层标签就成为外层标签的后代。</p><h3 id="子元素选择器"><a href="#子元素选择器" class="headerlink" title="子元素选择器"></a>子元素选择器</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">比如：  <span class="hljs-selector-class">.demo</span> &gt; <span class="hljs-selector-tag">h3</span> &#123;<span class="hljs-attribute">color</span>: red;&#125;   说明  <span class="hljs-selector-tag">h3</span> 一定是demo 亲儿子。  demo 元素包含着<span class="hljs-selector-tag">h3</span>。<br></code></pre></td></tr></table></figure><h3 id="交集选择器"><a href="#交集选择器" class="headerlink" title="交集选择器"></a>交集选择器</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">比如：   <span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.one</span>   选择的是： 类名为 <span class="hljs-selector-class">.one</span>  的 段落标签。<br></code></pre></td></tr></table></figure><h3 id="并集选择器"><a href="#并集选择器" class="headerlink" title="并集选择器"></a>并集选择器</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-class">.one</span>, <span class="hljs-selector-tag">p</span> , <span class="hljs-selector-id">#test</span> &#123;<span class="hljs-attribute">color</span>: <span class="hljs-number">#F00</span>;&#125;  表示   <span class="hljs-selector-class">.one</span> 和 <span class="hljs-selector-tag">p</span>  和 <span class="hljs-selector-id">#test</span> 这三个选择器都会执行颜色为红色。  通常用于集体声明。<br></code></pre></td></tr></table></figure><h3 id="并集选择器-1"><a href="#并集选择器-1" class="headerlink" title="并集选择器"></a>并集选择器</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">并集选择器  和 的意思，  就是说，只要逗号隔开的，所有选择器都会执行后面样式。比如  <span class="hljs-selector-class">.one</span>, <span class="hljs-selector-tag">p</span> , <span class="hljs-selector-id">#test</span> &#123;<span class="hljs-attribute">color</span>: <span class="hljs-number">#F00</span>;&#125;<br></code></pre></td></tr></table></figure><h3 id="后代选择器-1"><a href="#后代选择器-1" class="headerlink" title="后代选择器"></a>后代选择器</h3><p>后代选择器又称为包含选择器，用来选择元素或元素组的后代，其写法就是把外层标签写在前面，内层标签写在后面，中间用空格分隔。当标签发生嵌套时，内层标签就成为外层标签的后代。</p><h3 id="子元素选择器-1"><a href="#子元素选择器-1" class="headerlink" title="子元素选择器"></a>子元素选择器</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">比如：  <span class="hljs-selector-class">.demo</span> &gt; <span class="hljs-selector-tag">h3</span> &#123;<span class="hljs-attribute">color</span>: red;&#125;   说明  <span class="hljs-selector-tag">h3</span> 一定是demo 亲儿子。  demo 元素包含着<span class="hljs-selector-tag">h3</span>。<br></code></pre></td></tr></table></figure><h2 id="清除元素的默认内外边距"><a href="#清除元素的默认内外边距" class="headerlink" title="清除元素的默认内外边距"></a>清除元素的默认内外边距</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css">&#123;<br><br><span class="hljs-attribute">padding</span>:<span class="hljs-number">0</span>;         <span class="hljs-comment">/* 清除内边距 */</span><br><br><span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span>;          <span class="hljs-comment">/* 清除外边距 */</span><br><br>  &#125;<br><br></code></pre></td></tr></table></figure><h2 id="盒子模型（CSS重点）"><a href="#盒子模型（CSS重点）" class="headerlink" title="盒子模型（CSS重点）"></a>盒子模型（CSS重点）</h2><h3 id="盒子边框（border）"><a href="#盒子边框（border）" class="headerlink" title="盒子边框（border）"></a>盒子边框（border）</h3><p>border : border-width || border-style || border-color </p><h4 id="border-style"><a href="#border-style" class="headerlink" title="border-style"></a>border-style</h4><p>none 无<br>solid 实线<br>dashed 虚线<br>dotted 点线<br>double 双实线</p><h3 id="内边距（padding）"><a href="#内边距（padding）" class="headerlink" title="内边距（padding）"></a>内边距（padding）</h3><p>padding-top:上内边距<br>padding-right:右内边距<br>padding-bottom:下内边距<br>padding-left:左内边距</p><pre><code class="hljs">padding 会撑开盒子 padding不影响盒子大小情况如果没有给一个盒子指定宽度， 此时，如果给这个盒子指定padding， 则不会撑宽盒子。</code></pre><h3 id="外边距（margin）"><a href="#外边距（margin）" class="headerlink" title="外边距（margin）"></a>外边距（margin）</h3><p>margin-top:上外边距</p><p>margin-right:右外边距</p><p>margin-bottom:下外边距</p><p>margin-left:上外边距</p><h4 id="外边距实现块元素居中"><a href="#外边距实现块元素居中" class="headerlink" title="外边距实现块元素居中"></a>外边距实现块元素居中</h4><p>1.必须是块级元素。<br>2.盒子必须指定了宽度（width）<br>3.然后就给左右的外边距都设置为auto<br>例:.header{ width:960px; margin:0 auto;}</p><h4 id="文字盒子居中图片和背景区别"><a href="#文字盒子居中图片和背景区别" class="headerlink" title="文字盒子居中图片和背景区别"></a>文字盒子居中图片和背景区别</h4><p>1.文字水平居中<br>text-align: center<br>2.盒子水平居中<br>margin: 0  auto;<br>3.插入图片定位<br>我们用的最多 比如产品展示类  移动位置只能靠盒模型 padding margin(通过盒模型的挤压定位,改变的是盒子的居中,并不是作用于img图片的居中,可以改变盒子居中后,在调整img的大小.)<br>4.背景图片定位<br>我们一般用于小图标背景 或者 超大背景图片  背景图片 只能通过  background-position</p><h2 id="盒子模型布局稳定性"><a href="#盒子模型布局稳定性" class="headerlink" title="盒子模型布局稳定性"></a>盒子模型布局稳定性</h2><p>按照 优先使用  宽度 （width）  其次 使用内边距（padding）    再次  外边距（margin）。<br>原因：</p><ol><li>margin 会有外边距合并 还有 ie6下面margin 加倍的bug（讨厌）所以最后使用。</li><li>padding  会影响盒子大小， 需要进行加减计算（麻烦） 其次使用。</li><li>width   没有问题（嗨皮）我们经常使用宽度剩余法 高度剩余法来做。</li></ol><h2 id="外边距合并"><a href="#外边距合并" class="headerlink" title="外边距合并"></a>外边距合并</h2><blockquote><p>相邻块元素垂直外边距的合并<br>当上下相邻的两个块元素相遇时，如果上面的元素有下外边距margin-bottom，下面的元素有上外边距margin-top，则他们之间的垂直间距不是margin-bottom与margin-top之和，而是两者中的较大者。这种现象被称为相邻块元素垂直外边距的合并（也称外边距塌陷）。<br>解决方案：  避免就好了。</p></blockquote><blockquote><p>嵌套块元素垂直外边距的合并<br>对于两个嵌套关系的块元素，如果父元素没有上内边距及边框，则父元素的上外边距会与子元素的上外边距发生合并，合并后的外边距为两者中的较大者，即使父元素的上外边距为0，也会发生合并。<br>解决方案：</p><ol><li>可以为父元素定义1像素的上边框或上内边距。</li><li>可以为父元素添加overflow:hidden。</li></ol><p>待续。。。。</p></blockquote><h2 id="定位-position"><a href="#定位-position" class="headerlink" title="定位(position)"></a>定位(position)</h2><h3 id="2-3-1-静态定位-static"><a href="#2-3-1-静态定位-static" class="headerlink" title="2.3.1 静态定位(static)"></a>2.3.1 静态定位(static)</h3><p>静态模式下边偏移属性无效。</p><h3 id="2-3-2-相对定位-relative-（自恋型）"><a href="#2-3-2-相对定位-relative-（自恋型）" class="headerlink" title="2.3.2 相对定位(relative)（自恋型）"></a>2.3.2 相对定位(relative)（自恋型）</h3><p>在标准流中的位置 + 边偏移属性 来设置元素的位置。</p><ol><li>以 自己在标准流位置的左上角为基点 + 边偏移属性 定位元素新的位置；</li><li>原来在标准流的区域继续占有，后面的盒子仍然以标准流的方式对待它。</li><li>与浮动的对比<br>- 浮动 —— 让多个块级元素在一行显示，脱离标准流；<ul><li>相对定位 —— 让盒子移动到我们想要的位置，不脱标。</li></ul></li></ol><h3 id="2-3-3-绝对定位-absolute-（拼爹型）"><a href="#2-3-3-绝对定位-absolute-（拼爹型）" class="headerlink" title="2.3.3 绝对定位(absolute)（拼爹型）"></a>2.3.3 绝对定位(absolute)（拼爹型）</h3><p>完全脱标 —— 完全不占位置；<br>父元素要有定位 —— 父元素在标准流中的位置 + 边偏移属性 来设置元素的位置；</p><ul><li><p>如果当前父元素没有定位（相对、绝对或固定），则寻找上一级有定位的父元素；</p></li><li><p>如果所有父元素都没有定位，则以浏览器为准定位（Document 文档）。</p></li><li><p>如果父亲有定位，则以父亲为准。</p><p> 定位口诀 —— 子绝父相<br> 绝对定位默认转块元素</p></li></ul><h3 id="2-3-4-固定定位-fixed"><a href="#2-3-4-固定定位-fixed" class="headerlink" title="2.3.4 固定定位(fixed)"></a>2.3.4 固定定位(fixed)</h3><p>固定定位是绝对定位的一种特殊形式： （认死理型）<br>完全脱标 —— 完全不占位置；<br>只认浏览器的可视窗口 —— 浏览器可视窗口 + 边偏移属性 来设置元素的位置；</p><ul><li><p>跟父元素没有任何关系；</p></li><li><p>不随滚动条滚动。(固定窗口)</p></li></ul><h3 id="定位-position-的扩展"><a href="#定位-position-的扩展" class="headerlink" title="定位(position)的扩展"></a>定位(position)的扩展</h3><p>绝对定位的盒子居中<br>注意：绝对定位不能通过设置 margin: auto 设置水平居中。</p><ol><li><p>left: 50%;：让盒子的左侧移动到父级元素的水平中心位置；</p></li><li><p>margin-left: -100px;：让盒子向左移动自身宽度的一半。</p></li></ol><h2 id="堆叠顺序（z-index）"><a href="#堆叠顺序（z-index）" class="headerlink" title="堆叠顺序（z-index）"></a>堆叠顺序（z-index）</h2><p>注意：z-index 只能应用于相对定位、绝对定位和固定定位的元素，其他标准流、浮动和静态定位无效</p><h2 id="盒子外观属性"><a href="#盒子外观属性" class="headerlink" title="盒子外观属性"></a>盒子外观属性</h2><p> 盒子阴影(CSS3)<br>box-shadow:0px 0px 0px 0px #ccc;</p><p>圆角边框(CSS3)<br>border-radius: 50%;( %  px)</p>]]></content>
    
    
    <categories>
      
      <category>H5C3</category>
      
    </categories>
    
    
    <tags>
      
      <tag>H5C3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS3基础</title>
    <link href="/2018/08/15/CSS3/"/>
    <url>/2018/08/15/CSS3/</url>
    
    <content type="html"><![CDATA[<h2 id="css书写方式"><a href="#css书写方式" class="headerlink" title="css书写方式"></a>css书写方式</h2><p>行内式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">标签名</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;属性1:属性值1; 属性2:属性值2; 属性3:属性值3;&quot;</span>&gt;</span> 内容 <span class="hljs-tag">&lt;/<span class="hljs-name">标签名</span>&gt;</span><br></code></pre></td></tr></table></figure><p>内嵌样式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css"> <span class="hljs-selector-tag">div</span> &#123;</span><br><span class="language-css"> <span class="hljs-attribute">color</span>: red;</span><br><span class="language-css"> <span class="hljs-attribute">font-size</span>: <span class="hljs-number">12px</span>;</span><br><span class="language-css"> &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p>外链式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;<span class="hljs-built_in">head</span>&gt;<br>  &lt;<span class="hljs-built_in">link</span> <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;stylesheet&quot;</span>  rel=<span class="hljs-string">&quot;stylesheet&quot;</span> href=<span class="hljs-string">&quot;CSS文件的路径&quot;</span>/&gt;<br>&lt;/head&gt;<br></code></pre></td></tr></table></figure><h2 id="CSS字体样式属性"><a href="#CSS字体样式属性" class="headerlink" title="CSS字体样式属性"></a>CSS字体样式属性</h2><p>font-size:字号大小</p><p>推荐使用像素单位px</p><p>font-family:字体</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span>&#123; <span class="hljs-attribute">font-family</span>:<span class="hljs-string">&quot;微软雅黑&quot;</span>;&#125;<br><span class="hljs-attribute">font-family</span>:<span class="hljs-string">&quot;Microsoft Yahei&quot;</span><br>font-family: <span class="hljs-string">&quot;\5FAE\8F6F\96C5\9ED1&quot;</span><br>F12-console-输入<span class="hljs-built_in">escape</span>(<span class="hljs-string">&quot;字体&quot;</span>)-回车文字转码-%u变\-调用<br></code></pre></td></tr></table></figure><p>font-weight:字体粗细</p><p>font-style:字体风格</p><blockquote><p>normal：默认值，浏览器会显示标准的字体样式。</p><p>italic：浏览器会显示斜体的字体样式。</p><p>oblique：浏览器会显示倾斜的字体样式。</p></blockquote><p>font:综合设置字体样式 (重点)</p><p>选择器{font: font-style  font-weight  font-size&#x2F;line-height  font-family;}使用font属性时，必须按上面语法格式中的顺序书写，不能更换顺序，各个属性以空格隔开</p><h2 id="CSS-三大特性"><a href="#CSS-三大特性" class="headerlink" title="CSS 三大特性"></a>CSS 三大特性</h2><h3 id="CSS层叠性"><a href="#CSS层叠性" class="headerlink" title="CSS层叠性"></a>CSS层叠性</h3><p>一般情况下，如果出现样式冲突，则会按照CSS书写的顺序，以最后的样式为准。</p><h3 id="CSS继承性"><a href="#CSS继承性" class="headerlink" title="CSS继承性"></a>CSS继承性</h3><p>子元素可以继承父元素的样式（text-，font-，line-这些元素开头的都可以继承，以及color属性）</p><h3 id="CSS优先级"><a href="#CSS优先级" class="headerlink" title="CSS优先级"></a>CSS优先级</h3><p>继承样式的权重为0。即在嵌套结构中，不管父元素样式的权重多大，被子元素继承时，他的权重都为0，也就是说子元素定义的样式会覆盖继承来的样式。</p><h3 id="CSS特殊性（Specificity）"><a href="#CSS特殊性（Specificity）" class="headerlink" title="CSS特殊性（Specificity）"></a>CSS特殊性（Specificity）</h3><p>继承或者*  0,0,0,0<br>每个元素（标签选择器）0,0,0,1<br>每个类，伪类  0,0,1,0<br>每个ID  0,1,0,0<br>每个行内样式 style&#x3D;””    1,0,0,0<br>每个!important  重要的   ∞ 无穷大<br>    注意： </p><ol><li>数位之间没有进制 比如说： 0,0,0,5 + 0,0,0,5 &#x3D;0,0,0,10 而不是 0,0, 1, 0， 所以不会存在10个div能赶上一个类选择器的情况。</li><li>继承的 权重是 0</li></ol><p>注意： </p><ol><li>数位之间没有进制 比如说： 0,0,0,5 + 0,0,0,5 &#x3D;0,0,0,10 而不是 0,0, 1, 0， 所以不会存在10个div能赶上一个类选择器的情况。</li><li>继承的 权重是 0</li></ol><h2 id="CSS-布局的三种机制"><a href="#CSS-布局的三种机制" class="headerlink" title="CSS 布局的三种机制"></a>CSS 布局的三种机制</h2><p>网页布局的核心——就是用 CSS 来摆放盒子位置。</p><p>CSS 提供了 3 种机制来设置盒子的摆放位置，分别是普通流、浮动和定位</p><h2 id="浮动-float"><a href="#浮动-float" class="headerlink" title="浮动(float)"></a>浮动(float)</h2><p>概念：元素的浮动是指设置了浮动属性的元素会脱离标准普通流的控制，移动到其父元素中指定位置的过程。</p><p>浮动——漂，漂浮在普通流的上面，不占位置，只有左右浮动。  脱标—脱离标准流</p><p>left  rigth  none</p><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><h4 id="案例2——浮动不占位置"><a href="#案例2——浮动不占位置" class="headerlink" title="案例2——浮动不占位置"></a>案例2——浮动不占位置</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs css"><br><span class="hljs-selector-class">.box1</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.5</span>);<br>    <span class="hljs-comment">/* 让第 1 个盒子漂浮起来，不占位置 */</span><br>    <span class="hljs-attribute">float</span>: left;<br>&#125;<br><br><span class="hljs-selector-class">.box2</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">150px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;<br>    <span class="hljs-attribute">background-color</span>: skyblue;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>​float 属性会让盒子漂浮在普通流的上面，不占位置。</p><h4 id="案例-1-——-文字环绕效果"><a href="#案例-1-——-文字环绕效果" class="headerlink" title="案例 1 —— 文字环绕效果"></a>案例 1 —— 文字环绕效果</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">500px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">500px</span>;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid hotpink;<br>    <span class="hljs-comment">/* 让盒子居中显示 */</span><br>    <span class="hljs-attribute">margin</span>: auto;<br>&#125;<br><br><span class="hljs-selector-tag">img</span> &#123;<br>    <span class="hljs-comment">/* 让图片浮动在盒子的右侧，div 中的文字环绕在图片周围 */</span><br>    <span class="hljs-attribute">float</span>: right;<br>&#125;<br></code></pre></td></tr></table></figure><p>​div 中的文字环绕在图片周围 *&#x2F;</p><h4 id="案例-3——div-水平排列"><a href="#案例-3——div-水平排列" class="headerlink" title="案例 3——div 水平排列"></a>案例 3——div 水平排列</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">background-color</span>: pink;<br>    <span class="hljs-comment">/* 转换为行内块元素，可以水平显示，不过 div 之间有间隙，不方便处理 */</span><br>    <span class="hljs-comment">/* display: inline-block; */</span><br>    <span class="hljs-comment">/* 设置浮动属性，可以让 div 水平排列，并且没有间隙 */</span><br>    <span class="hljs-attribute">float</span>: left;<br>&#125;<br><br><span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:nth-child</span>(even) &#123;<br>    <span class="hljs-attribute">background-color</span>: hotpink;<br>&#125;<br></code></pre></td></tr></table></figure><p>​- 设置浮动属性 float: left;，可以让 div 水平排列，并且没有间隙；</p><ul><li>转换为行内块元素 display: inline-block;，可以水平显示，不过 div 之间有间隙，不方便处理。</li></ul><p>注意：案例中 float 属性是设置给所有 div 的。</p><h3 id="浮动-float-的应用（重要）"><a href="#浮动-float-的应用（重要）" class="headerlink" title="浮动(float)的应用（重要）"></a>浮动(float)的应用（重要）</h3><p>在实际布局中浮动的应用方法</p><ol><li>用普通流的大盒子（父级）定义上下顺序——占住位置；</li><li>使用浮动在大盒子内部设置小盒子的位置——水平排列。</li><li>注意：一个父盒子里面的子盒子，如果其中一个子盒子浮动，则其他子盒子都需要浮动，才能在一行显示。</li></ol><h3 id="浮动后与盒子的关系"><a href="#浮动后与盒子的关系" class="headerlink" title="浮动后与盒子的关系"></a>浮动后与盒子的关系</h3><h4 id="与父盒子的关系"><a href="#与父盒子的关系" class="headerlink" title="与父盒子的关系"></a>与父盒子的关系</h4><p>子盒子的浮动参照父盒子对齐</p><p>不会与父盒子的边框重叠，也不会超过父盒子的内边距</p><h4 id="与兄弟盒子的关系"><a href="#与兄弟盒子的关系" class="headerlink" title="与兄弟盒子的关系"></a>与兄弟盒子的关系</h4><p>在一个父级盒子中，如果前一个兄弟盒子是：</p><p>浮动的，那么当前盒子会与前一个盒子的顶部对齐；</p><p>普通流的，那么当前盒子会显示在前一个兄弟盒子的下方。 </p><p>浮动只会影响当前的或者是后面的盒子，不会影响前面的标准流的块元素。</p><h3 id="行内块元素特性（重要）"><a href="#行内块元素特性（重要）" class="headerlink" title="行内块元素特性（重要）"></a>行内块元素特性（重要）</h3><p>元素添加浮动后，会具有行内块元素的特性——元素的大小取决于：</p><p>定义的大小（优先级高）</p><p>元素内部的内容</p><p>特别注意：1. 浮动的盒子需要和标准流的父级搭配使用；2. 浮动可以使元素具有行内块特性。</p><p>浮动 float默认转换为行内块</p><h2 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h2><p>为什么要清除浮动<br>准确地说，并不是清除浮动，而是清除浮动后造成的影响<br>    方法1<br>        浮动元素末尾添加</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">&lt;<span class="hljs-keyword">div</span> style=”<span class="hljs-built_in">clear</span>:both”&gt;&lt;/<span class="hljs-keyword">div</span>&gt;<br>left<br><span class="hljs-literal">right</span><br>both<br><br></code></pre></td></tr></table></figure><p>​<br>父级添加overflow属性方法<br>可以给父级添加： overflow为 hidden| auto| scroll  都可以实现。<br>    单伪元素清除浮动  给浮动元素的父元素使用</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.clearfix</span><span class="hljs-selector-pseudo">:after</span> &#123;  <br><br><span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;&quot;</span>;<br><br><span class="hljs-attribute">display</span>: block;<br><br><span class="hljs-attribute">height</span>:<span class="hljs-number">0</span>;<br><br><span class="hljs-attribute">visibility</span>: hidden;<br><br><span class="hljs-attribute">clear</span>: both;<br><br>&#125; <br><br>/兼容ie6、ie7清除浮动/<br><br><span class="hljs-selector-class">.cleafix</span> &#123;<br><br>*zoom: <span class="hljs-number">1</span>;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>​双伪元素清除浮动  给浮动的元素的父元素</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.clearfix</span><span class="hljs-selector-pseudo">:before</span>, <span class="hljs-selector-class">.clearfix</span><span class="hljs-selector-pseudo">:after</span> &#123;<br><br><span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;&quot;</span>;<br><br><span class="hljs-attribute">display</span>: table;<br><br>&#125;<br><br><span class="hljs-selector-class">.clearfix</span><span class="hljs-selector-pseudo">:after</span> &#123;<br><br><span class="hljs-attribute">clear</span>: both;<br><br>&#125;<br><br>/兼容ie6、ie7清除浮动/<br><br><span class="hljs-selector-class">.clearfix</span> &#123;<br><br>*zoom: <span class="hljs-number">1</span>;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="CSS-背景-background"><a href="#CSS-背景-background" class="headerlink" title="CSS 背景(background)"></a>CSS 背景(background)</h2><p>background-color  背景颜色</p><p>background-image   背景图片地址 </p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-attribute">none </span>:   <span class="hljs-attribute">url </span>:<br></code></pre></td></tr></table></figure><p>background-repeat    是否平铺</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq">background-<span class="hljs-built_in">repeat</span> : <span class="hljs-built_in">repeat</span> | <span class="hljs-type">no</span>-<span class="hljs-built_in">repeat</span> | <span class="hljs-type">repeat</span>-x | <span class="hljs-type">repeat</span>-y <br></code></pre></td></tr></table></figure><p>background-position  背景位置</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs coq">position : 　<span class="hljs-built_in">top</span> | <span class="hljs-type">center</span> | <span class="hljs-type">bottom</span> | <span class="hljs-type">left</span> | <span class="hljs-type">center</span> | <span class="hljs-type">right</span>   方位名词   relative相对  absoluter绝对<br>center  屏幕缩放背景依然居中<br></code></pre></td></tr></table></figure><p>background-attachment  背景固定还是滚动</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">background-attachment </span>: <span class="hljs-keyword">scroll </span><span class="hljs-title">| fixed </span><br></code></pre></td></tr></table></figure><p>scroll : 　背景图像是随对象内容滚动</p><p>fixed : 　背景图像固定</p><p>背景的合写（复合属性）</p><p>background:背景颜色 背景图片地址 背景平铺 背景滚动 背景位置</p><p>background-size  背景图片大小</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css">宽高属性<span class="hljs-attribute">width</span>,<span class="hljs-attribute">height</span><br><br>cover覆盖<br><br><span class="hljs-attribute">contain</span>  等比占满<br></code></pre></td></tr></table></figure><p>background-origin  设置背景显示的原点位置</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs maxima">默认值padding-<span class="hljs-built_in">box</span><br><span class="hljs-built_in">content</span>-<span class="hljs-built_in">box</span><br><span class="hljs-built_in">border</span>-<span class="hljs-built_in">box</span><br></code></pre></td></tr></table></figure><p>background-clip 背景图修改</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs maxima">默认值 <span class="hljs-built_in">border</span>-<span class="hljs-built_in">box</span><br>padding-<span class="hljs-built_in">box</span><br><span class="hljs-built_in">content</span>-<span class="hljs-built_in">box</span><br></code></pre></td></tr></table></figure><p>盒子背景透明度</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">background</span>: rgba( <span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>.<span class="hljs-number">2</span>);<br></code></pre></td></tr></table></figure><p>连写</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">background</span>: url(glass.png) #fff no-repeat <span class="hljs-number">10</span>px/<span class="hljs-number">12</span>px <span class="hljs-number">12</span>px;<br><span class="hljs-attribute">10px</span>  背景图距左边的距离  一个值后面默认跟了一个Top=center,  /后面跟  背景图大小<br></code></pre></td></tr></table></figure><p>图片绝对路径</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&quot;~@/assets/images/jsptsummarize.png&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="文本属性"><a href="#文本属性" class="headerlink" title="文本属性"></a>文本属性</h2><p>color:文本颜色</p><p>line-height:行间距<br>line-height: 25px;</p><p>text-align:文本水平对齐方式<br>left：左对齐（默认值）<br>right：右对齐<br>center：居中对齐</p><p>text-indent:首行缩进<br>     &#x2F;<em>首行缩进2个字  em  1个em 就是1个字的大小</em>&#x2F;<br>      text-indent: 2em;  </p><p>text-decoration 文本的装饰<br>    none<br>    underline<br>    overline<br>    line-through</p><p>间距<br>    letter-spacing 字间距<br>    word-spacing 词间距</p><p>文本溢出隐藏  overflow:hidden</p><p>添加缩略标记 text-overflow:ellipsis   …</p><p>强制一行显示 white-space:nowrap  </p><h2 id="伪链接a"><a href="#伪链接a" class="headerlink" title="伪链接a"></a>伪链接a</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"> <span class="hljs-comment">/* 未访问的链接 */</span>  <span class="hljs-selector-pseudo">:link</span>    <br><span class="hljs-comment">/* 已访问的链接 */</span>   <span class="hljs-selector-pseudo">:visited</span> <br> <span class="hljs-comment">/* 鼠标移动到链接上 */</span>   <span class="hljs-selector-pseudo">:hover</span> <br><span class="hljs-comment">/* 选定的链接 */</span>   <span class="hljs-selector-pseudo">:active</span> <br>按照  lvha 的顺序  lv 包包 非常 hao <br></code></pre></td></tr></table></figure><h2 id="标签显示模式（display）"><a href="#标签显示模式（display）" class="headerlink" title="标签显示模式（display）"></a>标签显示模式（display）</h2><h3 id="块级元素-block-level"><a href="#块级元素-block-level" class="headerlink" title="块级元素(block-level)"></a>块级元素(block-level)</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">常见的块元素有<span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>~<span class="hljs-tag">&lt;<span class="hljs-name">h6</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>等，其中<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>标签是最典型的块元素。<br></code></pre></td></tr></table></figure><h3 id="行内元素-inline-level"><a href="#行内元素-inline-level" class="headerlink" title="行内元素(inline-level)"></a>行内元素(inline-level)</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">常见的行内元素有<span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">del</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">s</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">ins</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">u</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>等，其中<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>标签最典型的行内元素。<br></code></pre></td></tr></table></figure><h3 id="行内块元素（inline-block）"><a href="#行内块元素（inline-block）" class="headerlink" title="行内块元素（inline-block）"></a>行内块元素（inline-block）</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">在行内元素中有几个特殊的标签——<span class="hljs-tag">&lt;<span class="hljs-name">img</span> /&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">input</span> /&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>，可以对它们设置宽高和对齐属性，有些资料可能会称它们为行内块元素。<br></code></pre></td></tr></table></figure><h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><h3 id="css选择器"><a href="#css选择器" class="headerlink" title="css选择器"></a>css选择器</h3><p>标签选择器（元素选择器）<br>标签名{属性1:属性值1; 属性2:属性值2; 属性3:属性值3; }  或者<br>元素名{属性1:属性值1; 属性2:属性值2; 属性3:属性值3; }</p><h3 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h3><p>(可以使用多次)  .类名  {   属性1:属性值1; 属性2:属性值2; 属性3:属性值3; }   </p><h3 id="多类名选择器"><a href="#多类名选择器" class="headerlink" title="多类名选择器"></a>多类名选择器</h3><p>我们可以给标签指定多个类名，从而达到更多的选择目的。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">&lt;div <span class="hljs-keyword">class</span>=&quot;<span class="hljs-symbol">pink</span> <span class="hljs-symbol">fontWeight</span> <span class="hljs-symbol">font20</span>&quot;&gt;亚瑟&lt;/<span class="hljs-symbol">div</span>&gt;<br>&lt;<span class="hljs-symbol">div</span> <span class="hljs-symbol">class</span>=&quot;<span class="hljs-symbol">font20</span>&quot;&gt;刘备&lt;/<span class="hljs-symbol">div</span>&gt;<br>&lt;<span class="hljs-symbol">div</span> <span class="hljs-symbol">class</span>=&quot;<span class="hljs-symbol">font14</span> <span class="hljs-symbol">pink</span>&quot;&gt;安其拉&lt;/<span class="hljs-symbol">div</span>&gt;<br>&lt;<span class="hljs-symbol">div</span> <span class="hljs-symbol">class</span>=&quot;<span class="hljs-symbol">font14</span>&quot;&gt;貂蝉&lt;/<span class="hljs-symbol">div</span>&gt;<br></code></pre></td></tr></table></figure><h3 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h3><p>( 只能使用一次)     #id名 {属性1:属性值1; 属性2:属性值2; 属性3:属性值3; }  尽量不使用 ID 选择器</p><h3 id="通配符选择器"><a href="#通配符选择器" class="headerlink" title="通配符选择器"></a>通配符选择器</h3><ul><li><p>{ 属性1:属性值1; 属性2:属性值2; 属性3:属性值3; }  尽量少用通用选择器 </p><pre><code class="hljs">  符合选择器</code></pre></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css">* &#123;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;                    <span class="hljs-comment">/* 定义外边距*/</span><br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;                   <span class="hljs-comment">/* 定义内边距*/</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="后代选择器"><a href="#后代选择器" class="headerlink" title="后代选择器"></a>后代选择器</h3><p>写法就是把外层标签写在前面，内层标签写在后面，中间用空格分隔。当标签发生嵌套时，内层标签就成为外层标签的后代。</p><h3 id="子元素选择器"><a href="#子元素选择器" class="headerlink" title="子元素选择器"></a>子元素选择器</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">比如：  <span class="hljs-selector-class">.demo</span> &gt; <span class="hljs-selector-tag">h3</span> &#123;<span class="hljs-attribute">color</span>: red;&#125;   说明  <span class="hljs-selector-tag">h3</span> 一定是demo 亲儿子。  demo 元素包含着<span class="hljs-selector-tag">h3</span>。<br></code></pre></td></tr></table></figure><h3 id="交集选择器"><a href="#交集选择器" class="headerlink" title="交集选择器"></a>交集选择器</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">比如：   <span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.one</span>   选择的是： 类名为 <span class="hljs-selector-class">.one</span>  的 段落标签。<br></code></pre></td></tr></table></figure><h3 id="并集选择器"><a href="#并集选择器" class="headerlink" title="并集选择器"></a>并集选择器</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-class">.one</span>, <span class="hljs-selector-tag">p</span> , <span class="hljs-selector-id">#test</span> &#123;<span class="hljs-attribute">color</span>: <span class="hljs-number">#F00</span>;&#125;  表示   <span class="hljs-selector-class">.one</span> 和 <span class="hljs-selector-tag">p</span>  和 <span class="hljs-selector-id">#test</span> 这三个选择器都会执行颜色为红色。  通常用于集体声明。<br></code></pre></td></tr></table></figure><h3 id="并集选择器-1"><a href="#并集选择器-1" class="headerlink" title="并集选择器"></a>并集选择器</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">并集选择器  和 的意思，  就是说，只要逗号隔开的，所有选择器都会执行后面样式。比如  <span class="hljs-selector-class">.one</span>, <span class="hljs-selector-tag">p</span> , <span class="hljs-selector-id">#test</span> &#123;<span class="hljs-attribute">color</span>: <span class="hljs-number">#F00</span>;&#125;<br></code></pre></td></tr></table></figure><h3 id="后代选择器-1"><a href="#后代选择器-1" class="headerlink" title="后代选择器"></a>后代选择器</h3><p>后代选择器又称为包含选择器，用来选择元素或元素组的后代，其写法就是把外层标签写在前面，内层标签写在后面，中间用空格分隔。当标签发生嵌套时，内层标签就成为外层标签的后代。</p><h3 id="子元素选择器-1"><a href="#子元素选择器-1" class="headerlink" title="子元素选择器"></a>子元素选择器</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">比如：  <span class="hljs-selector-class">.demo</span> &gt; <span class="hljs-selector-tag">h3</span> &#123;<span class="hljs-attribute">color</span>: red;&#125;   说明  <span class="hljs-selector-tag">h3</span> 一定是demo 亲儿子。  demo 元素包含着<span class="hljs-selector-tag">h3</span>。<br></code></pre></td></tr></table></figure><h2 id="清除元素的默认内外边距"><a href="#清除元素的默认内外边距" class="headerlink" title="清除元素的默认内外边距"></a>清除元素的默认内外边距</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css">&#123;<br><br><span class="hljs-attribute">padding</span>:<span class="hljs-number">0</span>;         <span class="hljs-comment">/* 清除内边距 */</span><br><br><span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span>;          <span class="hljs-comment">/* 清除外边距 */</span><br><br>  &#125;<br><br></code></pre></td></tr></table></figure><h2 id="盒子模型（CSS重点）"><a href="#盒子模型（CSS重点）" class="headerlink" title="盒子模型（CSS重点）"></a>盒子模型（CSS重点）</h2><h3 id="盒子边框（border）"><a href="#盒子边框（border）" class="headerlink" title="盒子边框（border）"></a>盒子边框（border）</h3><p>border : border-width || border-style || border-color </p><h4 id="border-style"><a href="#border-style" class="headerlink" title="border-style"></a>border-style</h4><p>none 无<br>solid 实线<br>dashed 虚线<br>dotted 点线<br>double 双实线</p><h3 id="内边距（padding）"><a href="#内边距（padding）" class="headerlink" title="内边距（padding）"></a>内边距（padding）</h3><p>padding-top:上内边距<br>padding-right:右内边距<br>padding-bottom:下内边距<br>padding-left:左内边距</p><pre><code class="hljs">padding 会撑开盒子 padding不影响盒子大小情况如果没有给一个盒子指定宽度， 此时，如果给这个盒子指定padding， 则不会撑宽盒子。</code></pre><h3 id="外边距（margin）"><a href="#外边距（margin）" class="headerlink" title="外边距（margin）"></a>外边距（margin）</h3><p>margin-top:上外边距</p><p>margin-right:右外边距</p><p>margin-bottom:下外边距</p><p>margin-left:上外边距</p><h4 id="外边距实现块元素居中"><a href="#外边距实现块元素居中" class="headerlink" title="外边距实现块元素居中"></a>外边距实现块元素居中</h4><p>1.必须是块级元素。<br>2.盒子必须指定了宽度（width）<br>3.然后就给左右的外边距都设置为auto<br>例:.header{ width:960px; margin:0 auto;}</p><h4 id="文字盒子居中图片和背景区别"><a href="#文字盒子居中图片和背景区别" class="headerlink" title="文字盒子居中图片和背景区别"></a>文字盒子居中图片和背景区别</h4><p>1.文字水平居中<br>text-align: center<br>2.盒子水平居中<br>margin: 0  auto;<br>3.插入图片定位<br>我们用的最多 比如产品展示类  移动位置只能靠盒模型 padding margin(通过盒模型的挤压定位,改变的是盒子的居中,并不是作用于img图片的居中,可以改变盒子居中后,在调整img的大小.)<br>4.背景图片定位<br>我们一般用于小图标背景 或者 超大背景图片  背景图片 只能通过  background-position</p><h2 id="盒子模型布局稳定性"><a href="#盒子模型布局稳定性" class="headerlink" title="盒子模型布局稳定性"></a>盒子模型布局稳定性</h2><p>按照 优先使用  宽度 （width）  其次 使用内边距（padding）    再次  外边距（margin）。<br>原因：</p><ol><li>margin 会有外边距合并 还有 ie6下面margin 加倍的bug（讨厌）所以最后使用。</li><li>padding  会影响盒子大小， 需要进行加减计算（麻烦） 其次使用。</li><li>width   没有问题（嗨皮）我们经常使用宽度剩余法 高度剩余法来做。</li></ol><h2 id="外边距合并"><a href="#外边距合并" class="headerlink" title="外边距合并"></a>外边距合并</h2><blockquote><p>相邻块元素垂直外边距的合并<br>当上下相邻的两个块元素相遇时，如果上面的元素有下外边距margin-bottom，下面的元素有上外边距margin-top，则他们之间的垂直间距不是margin-bottom与margin-top之和，而是两者中的较大者。这种现象被称为相邻块元素垂直外边距的合并（也称外边距塌陷）。<br>解决方案：  避免就好了。</p></blockquote><blockquote><p>嵌套块元素垂直外边距的合并<br>对于两个嵌套关系的块元素，如果父元素没有上内边距及边框，则父元素的上外边距会与子元素的上外边距发生合并，合并后的外边距为两者中的较大者，即使父元素的上外边距为0，也会发生合并。<br>解决方案：</p><ol><li>可以为父元素定义1像素的上边框或上内边距。</li><li>可以为父元素添加overflow:hidden。</li></ol><p>待续。。。。</p></blockquote><h2 id="定位-position"><a href="#定位-position" class="headerlink" title="定位(position)"></a>定位(position)</h2><h3 id="2-3-1-静态定位-static"><a href="#2-3-1-静态定位-static" class="headerlink" title="2.3.1 静态定位(static)"></a>2.3.1 静态定位(static)</h3><p>静态模式下边偏移属性无效。</p><h3 id="2-3-2-相对定位-relative-（自恋型）"><a href="#2-3-2-相对定位-relative-（自恋型）" class="headerlink" title="2.3.2 相对定位(relative)（自恋型）"></a>2.3.2 相对定位(relative)（自恋型）</h3><p>在标准流中的位置 + 边偏移属性 来设置元素的位置。</p><ol><li>以 自己在标准流位置的左上角为基点 + 边偏移属性 定位元素新的位置；</li><li>原来在标准流的区域继续占有，后面的盒子仍然以标准流的方式对待它。</li><li>与浮动的对比<br>- 浮动 —— 让多个块级元素在一行显示，脱离标准流；<ul><li>相对定位 —— 让盒子移动到我们想要的位置，不脱标。</li></ul></li></ol><h3 id="2-3-3-绝对定位-absolute-（拼爹型）"><a href="#2-3-3-绝对定位-absolute-（拼爹型）" class="headerlink" title="2.3.3 绝对定位(absolute)（拼爹型）"></a>2.3.3 绝对定位(absolute)（拼爹型）</h3><p>完全脱标 —— 完全不占位置；<br>父元素要有定位 —— 父元素在标准流中的位置 + 边偏移属性 来设置元素的位置；</p><ul><li><p>如果当前父元素没有定位（相对、绝对或固定），则寻找上一级有定位的父元素；</p></li><li><p>如果所有父元素都没有定位，则以浏览器为准定位（Document 文档）。</p></li><li><p>如果父亲有定位，则以父亲为准。</p><p> 定位口诀 —— 子绝父相<br> 绝对定位默认转块元素</p></li></ul><h3 id="2-3-4-固定定位-fixed"><a href="#2-3-4-固定定位-fixed" class="headerlink" title="2.3.4 固定定位(fixed)"></a>2.3.4 固定定位(fixed)</h3><p>固定定位是绝对定位的一种特殊形式： （认死理型）<br>完全脱标 —— 完全不占位置；<br>只认浏览器的可视窗口 —— 浏览器可视窗口 + 边偏移属性 来设置元素的位置；</p><ul><li><p>跟父元素没有任何关系；</p></li><li><p>不随滚动条滚动。(固定窗口)</p></li></ul><h3 id="定位-position-的扩展"><a href="#定位-position-的扩展" class="headerlink" title="定位(position)的扩展"></a>定位(position)的扩展</h3><p>绝对定位的盒子居中<br>注意：绝对定位不能通过设置 margin: auto 设置水平居中。</p><ol><li><p>left: 50%;：让盒子的左侧移动到父级元素的水平中心位置；</p></li><li><p>margin-left: -100px;：让盒子向左移动自身宽度的一半。</p></li></ol><h2 id="堆叠顺序（z-index）"><a href="#堆叠顺序（z-index）" class="headerlink" title="堆叠顺序（z-index）"></a>堆叠顺序（z-index）</h2><p>注意：z-index 只能应用于相对定位、绝对定位和固定定位的元素，其他标准流、浮动和静态定位无效</p><h2 id="盒子外观属性"><a href="#盒子外观属性" class="headerlink" title="盒子外观属性"></a>盒子外观属性</h2><p> 盒子阴影(CSS3)<br>box-shadow:0px 0px 0px 0px #ccc;</p><p>圆角边框(CSS3)<br>border-radius: 50%;( %  px)</p>]]></content>
    
    
    <categories>
      
      <category>H5C3</category>
      
    </categories>
    
    
    <tags>
      
      <tag>H5C3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo 编写文章并部署</title>
    <link href="/2018/07/08/Hexo_%E7%BC%96%E5%86%99%E6%96%87%E7%AB%A0/"/>
    <url>/2018/07/08/Hexo_%E7%BC%96%E5%86%99%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="typora-软件-md文件编辑器"><a href="#typora-软件-md文件编辑器" class="headerlink" title="typora 软件  .md文件编辑器"></a>typora 软件  .md文件编辑器</h2><h3 id="文章文件位置"><a href="#文章文件位置" class="headerlink" title="文章文件位置"></a>文章文件位置</h3><p>将写好的md文件放到 Hexo\hexodemo\source_posts  目录下</p><h3 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h3><p>ctrl + alt + z   插入代码<br>ctrl + shift + i 插入图片<br>ctrl + alt  +u 插入点<br>ctrl + shift + q插入文字详情块<br>ctrl + 1,2,,3,4,5 标题</p><p>编辑好后<br>Hexo\hexodemo  目录下<br>shift + 鼠标邮件  打开 git bash</p><p>常用命令</p><h3 id="Typora设置插入代码块快捷键方法"><a href="#Typora设置插入代码块快捷键方法" class="headerlink" title="Typora设置插入代码块快捷键方法"></a>Typora设置插入代码块快捷键方法</h3><p>文件-偏好设置-打开高级设置-conf.user.json</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs 1c">  <span class="hljs-string">&quot;keyBinding&quot;</span>: &#123;<br>    <span class="hljs-comment">// for example:</span><br>    <span class="hljs-string">&quot;Always On Top&quot;</span>: <span class="hljs-string">&quot;Ctrl+Shift+P&quot;</span>,<br>    <span class="hljs-string">&quot;Code Fences&quot;</span>: <span class="hljs-string">&quot;Ctrl+Alt+Z&quot;</span>,<br>    <span class="hljs-string">&quot;Oedered List&quot;</span>: <span class="hljs-string">&quot;Ctrl+Alt+o&quot;</span>,<br>    <span class="hljs-string">&quot;Unordered List&quot;</span>: <span class="hljs-string">&quot;Ctrl+Alt+u&quot;</span><br><br>  &#125;,<br>————————————————<br>                        <br><br></code></pre></td></tr></table></figure><p>原文链接：<a href="https://blog.csdn.net/weixin_44874806/article/details/97155001">https://blog.csdn.net/weixin_44874806/article/details/97155001</a></p><h3 id="更新本地服务"><a href="#更新本地服务" class="headerlink" title="更新本地服务"></a>更新本地服务</h3><p>hexo clean<br>hexo generate<br>hexo server -p 4000<br>本地服务   <a href="http://localhost:4000/">http://localhost:4000/</a></p><h3 id="上传文章部署代码到线上"><a href="#上传文章部署代码到线上" class="headerlink" title="上传文章部署代码到线上"></a>上传文章部署代码到线上</h3><p>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</p><h3 id="线上地址"><a href="#线上地址" class="headerlink" title="线上地址"></a>线上地址</h3><p>luckyangyang.github.io </p>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo 搭建个人博客</title>
    <link href="/2018/06/10/Hexo%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2018/06/10/Hexo%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p> </p><h4 id="什么是-Hexo？"><a href="#什么是-Hexo？" class="headerlink" title="什么是 Hexo？"></a>什么是 Hexo？</h4><p><a href="https://hexo.io/zh-cn/docs/">Hexo</a> 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><p> </p><h4 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h4><p> </p><h5 id="NodeJs安装"><a href="#NodeJs安装" class="headerlink" title="NodeJs安装"></a>NodeJs安装</h5><p>从官网<a href="https://nodejs.org/en/">https://nodejs.org/en/</a> 下载，直接安装即可，测试一下</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-keyword">node</span> <span class="hljs-title">-v</span><br><span class="hljs-comment"># v11.15.0</span><br>npm -v<br><span class="hljs-comment"># 6.7.0Copy</span><br></code></pre></td></tr></table></figure><p> </p><h5 id="npm修改源"><a href="#npm修改源" class="headerlink" title="npm修改源"></a>npm修改源</h5><p>获取npm源</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">npm <span class="hljs-built_in">get</span> registryCopy<br></code></pre></td></tr></table></figure><p> </p><p>修改npm源</p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tcl">npm config <span class="hljs-keyword">set</span> <span class="hljs-keyword">registry</span> <span class="hljs-keyword">http</span>://<span class="hljs-keyword">registry</span>.npm.taobao.org<br></code></pre></td></tr></table></figure><p> </p><p>如果想重置回去</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">npm config set registry https:<span class="hljs-comment">//registry.npmjs.org</span><br></code></pre></td></tr></table></figure><p> </p><h5 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h5><p>从官网<a href="https://git-scm.com/download/win">https://git-scm.com/download/win</a> 下载，直接安装即可</p><p>设置邮箱和用户名</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">git config <span class="hljs-params">--global</span> user.name  ****<span class="hljs-comment"># 设置用户名（gitee的注册昵称）</span><br>git config <span class="hljs-params">--global</span> user.email *****@**<span class="hljs-string">.com</span> <span class="hljs-comment"># 设置gitee邮箱（gitee的注册邮箱）Copy</span><br></code></pre></td></tr></table></figure><p>查看用户名</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">git config <span class="hljs-keyword">user</span>.name<br>git config <span class="hljs-keyword">user</span>.email<br></code></pre></td></tr></table></figure><p>生成 ssh</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-symbol">$</span> ssh-keygen -t rsa -C <span class="hljs-string">&quot;youremail&quot;</span>   <span class="hljs-comment">//你的邮箱</span><br></code></pre></td></tr></table></figure><p>连按三次回车  才能成功  下面是秘钥位置</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gradle">Generating <span class="hljs-keyword">public</span>/<span class="hljs-keyword">private</span> rsa key pair.<br>Enter <span class="hljs-keyword">file</span> in which to save the key (<span class="hljs-regexp">/c/U</span>sers<span class="hljs-regexp">/dwy/</span>.ssh/id_rsa):<br></code></pre></td></tr></table></figure><p>找到id_rsa.pub 文件</p><p>ssh，简单来讲，就是一个秘钥，其中，id_rsa是你这台电脑的私人秘钥，不能给别人看的，id_rsa.pub是公共秘钥，可以随便给别人看。把这个公钥放在GitHub上，这样当你链接GitHub自己的账户时，它就会根据公钥匹配你的私钥，当能够相互匹配时，才能够顺利的通过git上传你的文件到GitHub上。</p><p>而后在GitHub的setting中，找到SSH keys的设置选项，点击New SSH key<br>把你的id_rsa.pub里面的信息复制进去。</p><p>原文链接：<a href="https://blog.csdn.net/sinat_37781304/article/details/82729029">https://blog.csdn.net/sinat_37781304/article/details/82729029</a></p><p><img src="https://img-blog.csdnimg.cn/img_convert/3194ad0a9d04d94c09485122932968f3.png" alt="img"></p><h5 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h5><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span> -g hexo-cliCopy<br></code></pre></td></tr></table></figure><h3 id="建站部署"><a href="#建站部署" class="headerlink" title="建站部署"></a>建站部署</h3><p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs gherkin"><span class="hljs-comment"># 初始化博客文件夹</span><br>hexo init <span class="hljs-variable">&lt;folder&gt;</span><br><span class="hljs-variable">&lt;folder&gt;</span> 为任意文件名称  例如 hexo init hexodome<br><span class="hljs-comment"># 进入博客目录</span><br>cd <span class="hljs-variable">&lt;folder&gt;</span><br><span class="hljs-comment"># 安装</span><br>npm installCopy<br></code></pre></td></tr></table></figure><p>新建完成后，指定文件夹的目录如下：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs 1c">.<br>├── _config.yml 博客配置文件<br>├── package.json<br>├── scaffolds   文章生成模板<br>├── source  文章<br><span class="hljs-string">|   ├── _drafts</span><br><span class="hljs-string">|   └── _posts  文章都放这里了</span><br>└── themes 主题<br></code></pre></td></tr></table></figure><p>这样hexo就安装完成了，接下来就可以启动<code>hexo</code>了</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs verilog">hexo clean    # 清除所有记录<br>hexo <span class="hljs-keyword">generate</span># 生成静态网页<br>hexo server -p <span class="hljs-number">4000</span># 启动服务Copy<br></code></pre></td></tr></table></figure><p> </p><h4 id="本地预览"><a href="#本地预览" class="headerlink" title="本地预览"></a>本地预览</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment"># 清除所有记录</span><br><span class="hljs-attribute">hexo</span> clean<br><span class="hljs-comment"># 编译项目，输入命令：</span><br>hexo g<br><span class="hljs-comment"># 运行项目，输入命令：</span><br>hexo sCopy<br></code></pre></td></tr></table></figure><p>在浏览器地址栏输入 <a href="http://localhost:4000/">http://localhost:4000/</a> 就能看到效果啦</p><p> </p><h4 id="部署到Gitee"><a href="#部署到Gitee" class="headerlink" title="部署到Gitee"></a>部署到Gitee</h4><h5 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h5><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install hexo-deployer-git <span class="hljs-comment">--saveCopy</span><br></code></pre></td></tr></table></figure><p> </p><h5 id="修改站点配置文件"><a href="#修改站点配置文件" class="headerlink" title="修改站点配置文件"></a>修改站点配置文件</h5><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-meta"># URL</span><br><span class="hljs-symbol">url:</span> https:<span class="hljs-comment">//gitee.com/valten/blog</span><br><span class="hljs-symbol">root:</span> <span class="hljs-keyword">/blog/</span><br><br><span class="hljs-meta"># Deployment</span><br><span class="hljs-meta">## Docs: https:<span class="hljs-comment">//hexo.io/docs/deployment.html</span></span><br><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">  type:</span> git<br><span class="hljs-symbol">  repo:</span> git@gitee.com:valten/blog.git<br><span class="hljs-symbol">  branch:</span> developCopy<br></code></pre></td></tr></table></figure><p> </p><h5 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h5><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sas">hexo clean <span class="hljs-variable">&amp;&amp;</span> hexo g <span class="hljs-variable">&amp;&amp;</span> hexo dCopy<br></code></pre></td></tr></table></figure><p>进入gitee仓库，找到服务，选择Gitee Pages</p><p><a href="https://jsd.cdn.zzko.cn/gh/valtenhyl/filebed@master/filebed/giteepage.png"><img src="https://jsd.cdn.zzko.cn/gh/valtenhyl/filebed@master/filebed/giteepage.png" alt="https://jsd.cdn.zzko.cn/gh/valtenhyl/filebed@master/filebed/giteepage.png"></a></p><p>选择部署分支，我这里是develop分支，然后点击更新即可</p><p><a href="https://jsd.cdn.zzko.cn/gh/valtenhyl/filebed@master/filebed/giteepagedeploy.png"><img src="https://jsd.cdn.zzko.cn/gh/valtenhyl/filebed@master/filebed/giteepagedeploy.png" alt="img"></a></p><h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5><p>浏览器地址输入 <a href="https://gitee.com/valten/blog">https://gitee.com/valten/blog</a></p><p> </p><h4 id="部署到Github"><a href="#部署到Github" class="headerlink" title="部署到Github"></a>部署到Github</h4><h5 id="安装插件-1"><a href="#安装插件-1" class="headerlink" title="安装插件"></a>安装插件</h5><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install hexo-deployer-git <span class="hljs-comment">--saveCopy</span><br></code></pre></td></tr></table></figure><p> </p><h5 id="修改站点配置文件-1"><a href="#修改站点配置文件-1" class="headerlink" title="修改站点配置文件"></a>修改站点配置文件</h5><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-meta"># URL</span><br><span class="hljs-symbol">url:</span> https:<span class="hljs-comment">//valtenhyl.github.io</span><br><span class="hljs-symbol">root:</span> /<br><br><span class="hljs-meta"># Deployment</span><br><span class="hljs-meta">## Docs: https:<span class="hljs-comment">//hexo.io/docs/deployment.html</span></span><br><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">  type:</span> git<br><span class="hljs-symbol">  repo:</span> git@github.com:valten-hyl/valtenhyl.github.io.git<br><span class="hljs-symbol">  branch:</span> deployCopy<br></code></pre></td></tr></table></figure><p> </p><h5 id="部署-1"><a href="#部署-1" class="headerlink" title="部署"></a>部署</h5><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sas">hexo clean <span class="hljs-variable">&amp;&amp;</span> hexo g <span class="hljs-variable">&amp;&amp;</span> hexo dCopy<br></code></pre></td></tr></table></figure><p>进入github仓库，找到项目，选择Settings，选择Pages，Source选择部署的时候的分支，点击Save按钮保存即可</p><p><a href="https://jsd.cdn.zzko.cn/gh/valtenhyl/filebed@master/filebed/githubpagedeploy.png"><img src="https://jsd.cdn.zzko.cn/gh/valtenhyl/filebed@master/filebed/githubpagedeploy.png" alt="img"></a></p><p> </p><h5 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h5><p>浏览器地址输入 <a href="https://valtenhyl.github.io/">https://valtenhyl.github.io</a></p><p>最后我还是选择了Gitee。</p><p><strong>为什么使用Gitee而不使用GitHub</strong></p><blockquote><p>1、GitHub Pages访问龟速不稳定；</p><p>2、GitHub私有仓库收费，而Gitee私有仓库免费；</p></blockquote><p> </p><h3 id="配置优化"><a href="#配置优化" class="headerlink" title="配置优化"></a>配置优化</h3><p> </p><h4 id="分类和标签"><a href="#分类和标签" class="headerlink" title="分类和标签"></a>分类和标签</h4><h5 id="定义分类页"><a href="#定义分类页" class="headerlink" title="定义分类页"></a>定义分类页</h5><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe">hexo <span class="hljs-keyword">new</span> <span class="hljs-type">page</span> categoriesCopy<br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">分类</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2019-12-14 10:56:27</span><br><span class="hljs-attr">type:</span> <span class="hljs-string">&quot;categories&quot;</span><br><span class="hljs-string">---Copy</span><br></code></pre></td></tr></table></figure><p> </p><h5 id="定义分类页-1"><a href="#定义分类页-1" class="headerlink" title="定义分类页"></a>定义分类页</h5><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe">hexo <span class="hljs-keyword">new</span> <span class="hljs-type">page</span> tagsCopy<br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">标签</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2019-12-14 10:56:27</span><br><span class="hljs-attr">type:</span> <span class="hljs-string">&quot;tags&quot;</span><br><span class="hljs-string">---Copy</span><br></code></pre></td></tr></table></figure><p> </p><h5 id="文章添加分类和标签属性"><a href="#文章添加分类和标签属性" class="headerlink" title="文章添加分类和标签属性"></a>文章添加分类和标签属性</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">SpringBoot+Mybatis</span> <span class="hljs-string">通过databaseIdProvider支持多数据库</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2019-12-14 16:42:51</span><br><span class="hljs-attr">tags:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">Spring</span> <span class="hljs-string">Boot</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">Mybatis</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">databaseIdProvider</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">多数据库</span><br><span class="hljs-attr">categories:</span><br>  <span class="hljs-bullet">-</span> [<span class="hljs-string">Java</span>,<span class="hljs-string">Spring</span> <span class="hljs-string">Boot</span>]  <span class="hljs-comment"># 多级标签</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">Mybatis</span><br><span class="hljs-string">---Copy</span><br></code></pre></td></tr></table></figure><p> </p><p>修改主题配置文件，显示分类和标签菜单</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-meta"># External url should start with http:<span class="hljs-comment">// or https://</span></span><br><span class="hljs-symbol">menu:</span><br><span class="hljs-symbol">  home:</span> / || home<br><span class="hljs-symbol">  categories:</span> <span class="hljs-keyword">/categories/</span> || th<br><span class="hljs-symbol">  tags:</span> <span class="hljs-keyword">/tags/</span> || tags<br><span class="hljs-symbol">  archives:</span> <span class="hljs-keyword">/archives/</span> || archive<br>  <span class="hljs-meta">#about: /about/ || user</span><br>  <span class="hljs-meta">#schedule: /schedule/ || calendar</span><br>  <span class="hljs-meta">#sitemap: /sitemap.xml || sitemap</span><br>  <span class="hljs-meta">#commonweal: /404/ || heartbeatCopy</span><br></code></pre></td></tr></table></figure><p> </p><h4 id="关于"><a href="#关于" class="headerlink" title="关于"></a>关于</h4><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe">hexo <span class="hljs-keyword">new</span> <span class="hljs-type">page</span> aboutCopy<br></code></pre></td></tr></table></figure><p>修改主题配置文件，显示关于</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-meta"># External url should start with http:<span class="hljs-comment">// or https://</span></span><br><span class="hljs-symbol">menu:</span><br><span class="hljs-symbol">  home:</span> / || home<br><span class="hljs-symbol">  categories:</span> <span class="hljs-keyword">/categories/</span> || th<br><span class="hljs-symbol">  tags:</span> <span class="hljs-keyword">/tags/</span> || tags<br><span class="hljs-symbol">  archives:</span> <span class="hljs-keyword">/archives/</span> || archive<br><span class="hljs-symbol">  about:</span> <span class="hljs-keyword">/about/</span> || user<br>  <span class="hljs-meta">#schedule: /schedule/ || calendar</span><br>  <span class="hljs-meta">#sitemap: /sitemap.xml || sitemap</span><br>  <span class="hljs-meta">#commonweal: /404/ || heartbeatCopy</span><br></code></pre></td></tr></table></figure><p>编辑about目录下的index.md。</p><p> </p><h4 id="公益404"><a href="#公益404" class="headerlink" title="公益404"></a>公益404</h4><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe">hexo <span class="hljs-keyword">new</span> <span class="hljs-type">page</span> commonwealCopy<br></code></pre></td></tr></table></figure><p>修改主题配置文件，<code>#commonweal: /404/ || heartbeat</code>改成<code>commonweal: /404.html || heartbeat</code>。</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-meta"># External url should start with http:<span class="hljs-comment">// or https://</span></span><br><span class="hljs-symbol">menu:</span><br><span class="hljs-symbol">  home:</span> / || home<br><span class="hljs-symbol">  categories:</span> <span class="hljs-keyword">/categories/</span> || th<br><span class="hljs-symbol">  tags:</span> <span class="hljs-keyword">/tags/</span> || tags<br><span class="hljs-symbol">  archives:</span> <span class="hljs-keyword">/archives/</span> || archive<br><span class="hljs-symbol">  about:</span> <span class="hljs-keyword">/about/</span> || user<br>  <span class="hljs-meta">#schedule: /schedule/ || calendar</span><br>  <span class="hljs-meta">#sitemap: /sitemap.xml || sitemap</span><br><span class="hljs-symbol">  commonweal:</span> /<span class="hljs-number">404.</span>html || heartbeatCopy<br></code></pre></td></tr></table></figure><p>附上index.md</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml">---<br>title: 404 Not Found：该页无法显示<br>date: 2019-12-14 17:40:17<br>permalink: /404<br>---<br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh-cn&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>404<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> </span><br><span class="hljs-tag">        <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js&quot;</span> </span><br><span class="hljs-tag">    <span class="hljs-attr">homePageName</span>=<span class="hljs-string">&quot;返回宝贝回家&quot;</span> <span class="hljs-attr">homePageUrl</span>=<span class="hljs-string">&quot;https://valten.gitee.io/blog&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span>Copy<br></code></pre></td></tr></table></figure><p> </p><h4 id="阅读全文按钮"><a href="#阅读全文按钮" class="headerlink" title="阅读全文按钮"></a>阅读全文按钮</h4><p>在文章中想要预览的文字后加<code>&lt;!--more--&gt;</code>，这在之后的内容就会隐藏起来，点击<strong>Read More</strong>就会显示全文。</p><p> </p><h4 id="添加图片"><a href="#添加图片" class="headerlink" title="添加图片"></a>添加图片</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">Hello</span> <span class="hljs-string">World</span><br><span class="hljs-attr">tags:</span><br> <span class="hljs-bullet">-</span> <span class="hljs-string">Hello</span> <br> <span class="hljs-bullet">-</span> <span class="hljs-string">World</span><br><span class="hljs-attr">categories:</span><br> <span class="hljs-bullet">-</span> <span class="hljs-string">Hello</span> <br><span class="hljs-attr">photos:</span> <br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;http://q2gep6iwb.bkt.clouddn.com/blog/20191213/7Jk7p7nSUWpC.jpg&quot;</span> <br><span class="hljs-string">---Copy</span><br></code></pre></td></tr></table></figure><p> </p><h4 id="文章置顶"><a href="#文章置顶" class="headerlink" title="文章置顶"></a>文章置顶</h4><p>移除默认安装的插件：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">npm uninstall hexo-generator-<span class="hljs-keyword">index</span> <span class="hljs-comment">--saveCopy</span><br></code></pre></td></tr></table></figure><p>安装新插件:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">npm install hexo-generator-index-pin-<span class="hljs-attribute">top</span> <span class="hljs-attr">--saveCopy</span><br></code></pre></td></tr></table></figure><p>最后编辑有这需求的相关文章时，在Front-matter（文件最上方以—分隔的区域）加上一行：<code>top: true</code><br>如果你置顶了多篇，怎么控制顺序呢？设置top的值（大的在前面），比如：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-meta"># Post a.md</span><br><span class="hljs-symbol">title:</span> a<br><span class="hljs-symbol">top:</span> <span class="hljs-number">1</span><br><br><span class="hljs-meta"># Post b.md</span><br><span class="hljs-symbol">title:</span> b<br><span class="hljs-symbol">top:</span> <span class="hljs-number">10</span>Copy<br></code></pre></td></tr></table></figure><p>文章 b 便会显示在文章 a 的前面。</p><p> </p><h4 id="添加萌宠看板娘"><a href="#添加萌宠看板娘" class="headerlink" title="添加萌宠看板娘"></a>添加萌宠看板娘</h4><p>安装插件</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install hexo-helper-live2d <span class="hljs-comment">--saveCopy</span><br></code></pre></td></tr></table></figure><p>安装想要的模型</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">npm <span class="hljs-keyword">install </span>live2d-widget-model-<span class="hljs-keyword">shizuku </span>--saveCopy<br></code></pre></td></tr></table></figure><p>站点配置文件添加以下配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Live2D</span><br><span class="hljs-comment">## https://github.com/EYHN/hexo-helper-live2d</span><br><span class="hljs-attr">live2d:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 开启live2d</span><br>  <span class="hljs-attr">scriptFrom:</span> <span class="hljs-string">local</span> <span class="hljs-comment"># 默认</span><br>  <span class="hljs-attr">pluginRootPath:</span> <span class="hljs-string">live2dw/</span> <span class="hljs-comment"># 插件在站点上的根目录(相对路径)</span><br>  <span class="hljs-attr">pluginJsPath:</span> <span class="hljs-string">lib/</span> <span class="hljs-comment"># 脚本文件相对与插件根目录路径</span><br>  <span class="hljs-attr">pluginModelPath:</span> <span class="hljs-string">assets/</span> <span class="hljs-comment"># 模型文件相对与插件根目录路径</span><br>  <span class="hljs-attr">tagMode:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># 标签模式, 是否仅替换 live2d tag标签而非插入到所有页面中</span><br>  <span class="hljs-attr">debug:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># 调试, 是否在控制台输出日志</span><br>  <span class="hljs-attr">model:</span><br>    <span class="hljs-comment"># 选择哪种模型 https://huaji8.top/post/live2d-plugin-2.0/</span><br>    <span class="hljs-comment"># shizuku、wanko、hibiki、z16、haru、Epsilon2.1、koharu、haruto、   </span><br>    <span class="hljs-comment"># npm install live2d-widget-model-wanko --save</span><br>    <span class="hljs-attr">use:</span> <span class="hljs-string">live2d-widget-model-shizuku</span><br>  <span class="hljs-attr">display:</span> <span class="hljs-comment">#放置位置和大小</span><br>    <span class="hljs-attr">position:</span> <span class="hljs-string">left</span><br>    <span class="hljs-attr">width:</span> <span class="hljs-number">150</span><br>    <span class="hljs-attr">height:</span> <span class="hljs-number">300</span><br>  <span class="hljs-attr">mobile:</span><br>    <span class="hljs-attr">show:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># 是否在手机端显示Copy</span><br></code></pre></td></tr></table></figure><p> </p><h4 id="修改站点基本信息"><a href="#修改站点基本信息" class="headerlink" title="修改站点基本信息"></a>修改站点基本信息</h4><figure class="highlight ldif"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ldif"><span class="hljs-comment"># Site</span><br><span class="hljs-attribute">title</span>: 青衫不改  <span class="hljs-comment"># 标题</span><br><span class="hljs-attribute">subtitle</span>: 小白の博客  <span class="hljs-comment"># 副标题</span><br><span class="hljs-attribute">description</span>: 浮生若梦，为欢几何  <span class="hljs-comment"># 描述</span><br><span class="hljs-attribute">keywords</span>: &#x27;Hexo, NexT&#x27;  <span class="hljs-comment"># 网站默认关键词</span><br><span class="hljs-attribute">author</span>: valten<br><span class="hljs-attribute">language</span>: en<br><span class="hljs-attribute">timezone</span>: &#x27;&#x27;Copy<br></code></pre></td></tr></table></figure><p> </p><h4 id="文章永久链接"><a href="#文章永久链接" class="headerlink" title="文章永久链接"></a>文章永久链接</h4><p>修改站点配置文件</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-comment">#permalink: :year/:month/:day/:title/</span><br><span class="hljs-symbol">permalink:</span> <span class="hljs-symbol">:category/</span><span class="hljs-symbol">:title</span><br></code></pre></td></tr></table></figure><p> </p><h4 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h4><p><a href="https://zhuanlan.zhihu.com/p/491537945">主题推荐</a></p><p>hexo-theme-butterfly  主题</p><p><img src="https://pic1.zhimg.com/80/v2-65af3fa9e2435ff9079d717555dcea94_720w.webp" alt="图片"></p><p><img src="C:\Users\dwy\AppData\Local\Temp\1709193686628.png" alt="1709193686628"></p><p><a href="https://github.com/jerryc127/hexo-theme-butterfly">githup地址</a></p><p>下载地址     <a href="mailto:&#103;&#105;&#x74;&#64;&#x67;&#105;&#x74;&#x68;&#117;&#98;&#46;&#99;&#111;&#109;">&#103;&#105;&#x74;&#64;&#x67;&#105;&#x74;&#x68;&#117;&#98;&#46;&#99;&#111;&#109;</a>:jerryc127&#x2F;hexo-theme-butterfly.git</p><p>项目名\themes  文件下  git  clone <a href="mailto:&#103;&#x69;&#x74;&#64;&#103;&#x69;&#116;&#x68;&#117;&#x62;&#x2e;&#99;&#111;&#109;">&#103;&#x69;&#x74;&#64;&#103;&#x69;&#116;&#x68;&#117;&#x62;&#x2e;&#99;&#111;&#109;</a>:jerryc127&#x2F;hexo-theme-butterfly.git</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 下载主题</span><br>git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/theme-next/</span>hexo-theme-<span class="hljs-keyword">next</span>.git themes/nextCopy<br></code></pre></td></tr></table></figure><p>注意有坑：这个主题有个缺失文件  </p><p>npm install hexo-renderer-pug hexo-renderer-stylus   补齐  可以看下githup文档</p><p>下载好的主题文件</p><p><img src="C:\Users\dwy\AppData\Local\Temp\1709193171170.png" alt="1709193171170"></p><p>修改站点配置文件  _config.yml   theme: 文件名称  这里用的红框里的</p><p><img src="C:\Users\dwy\AppData\Local\Temp\1709193222437.png" alt="1709193222437"></p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs clean"># Extensions<br>## Plugins: https:<span class="hljs-comment">//hexo.io/plugins/</span><br>## Themes: https:<span class="hljs-comment">//hexo.io/themes/</span><br>theme: next # 值为themes目录下主题文件夹的名称Copy<br></code></pre></td></tr></table></figure><p><a href="https://github.com/fluid-dev/hexo-theme-fluid">hexo-theme-fluid</a> 主题</p><p><img src="C:\Users\dwy\AppData\Local\Temp\1709193708452.png" alt="1709193708452"></p><p><a href="https://github.com/fluid-dev/hexo-theme-fluid">下载地址</a></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">clone</span> <span class="hljs-title">git</span>@github.com:fluid-dev/hexo-theme-fluid.git<br></code></pre></td></tr></table></figure><p>配置文件 _config.yml</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xl"><span class="hljs-built_in">theme</span>: hexo-<span class="hljs-built_in">theme</span>-fluid<br></code></pre></td></tr></table></figure><p>查看效果</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sas">hexo clean <span class="hljs-variable">&amp;&amp;</span> hexo g <span class="hljs-variable">&amp;&amp;</span> hexo sCopy<br></code></pre></td></tr></table></figure><p> </p><h4 id="社交链接"><a href="#社交链接" class="headerlink" title="社交链接"></a>社交链接</h4><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">social:</span><br><span class="hljs-symbol">  GitHub:</span> https:<span class="hljs-comment">//github.com/valtenhyl || github</span><br>  E-Mail: mailto:valtenhyl@<span class="hljs-number">163.</span>com || envelope<br><span class="hljs-symbol">  Weibo:</span> https:<span class="hljs-comment">//weibo.com/3114281855 || weibo</span><br>  简书: https:<span class="hljs-comment">//www.jianshu.com/u/9f816d1869d4 || book</span><br>  掘金: https:<span class="hljs-comment">//juejin.im/user/5baa5f9d5188255c5d569951 || ils</span><br>  <span class="hljs-meta">#Google: https:<span class="hljs-comment">//plus.google.com/yourname || google</span></span><br>  <span class="hljs-meta">#Twitter: https:<span class="hljs-comment">//twitter.com/yourname || twitter</span></span><br>  <span class="hljs-meta">#FB Page: https:<span class="hljs-comment">//www.facebook.com/yourname || facebook</span></span><br>  <span class="hljs-meta">#StackOverflow: https:<span class="hljs-comment">//stackoverflow.com/yourname || stack-overflow</span></span><br>  <span class="hljs-meta">#YouTube: https:<span class="hljs-comment">//youtube.com/yourname || youtube</span></span><br>  <span class="hljs-meta">#Instagram: https:<span class="hljs-comment">//instagram.com/yourname || instagram</span></span><br>  <span class="hljs-meta">#Skype: skype:yourname?call|chat || skype</span><br>  <span class="hljs-meta">#RSS: /atom.xml || rss</span><br><span class="hljs-symbol">  </span><br><span class="hljs-symbol">social_icons:</span><br><span class="hljs-symbol">  enable:</span> true       <span class="hljs-meta"># 是否在社交链接标签上显示图标</span><br><span class="hljs-symbol">  icons_only:</span> true   <span class="hljs-meta"># 只显示图标</span><br><span class="hljs-symbol">  transition:</span> false  <span class="hljs-meta"># 是否显示过渡效果  Copy</span><br></code></pre></td></tr></table></figure><p> </p><h4 id="友情链接"><a href="#友情链接" class="headerlink" title="友情链接"></a>友情链接</h4><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-meta"># Blog rolls</span><br><span class="hljs-symbol">links_settings:</span><br><span class="hljs-symbol">  icon:</span> link                           <span class="hljs-meta"># 链接图标</span><br><span class="hljs-symbol">  title:</span> 友情链接                       <span class="hljs-meta"># 链接文字</span><br>  <span class="hljs-meta"># Available values: block | inline</span><br><span class="hljs-symbol">  layout:</span> inline                       <span class="hljs-meta"># 链接样式</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">links:</span><br>  圣豪Boy: https:<span class="hljs-comment">//xshcloudy.gitee.io/blog/</span><br><span class="hljs-symbol">  BootCDN:</span> https:<span class="hljs-comment">//www.bootcdn.cn/</span><br>  易百教程: https:<span class="hljs-comment">//www.yiibai.com</span><br></code></pre></td></tr></table></figure><p> </p><h4 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">codeblock:</span><br>  <span class="hljs-comment"># Code Highlight theme</span><br>  <span class="hljs-comment"># Available values: normal | night | night eighties | night blue | night bright | solarized | solarized dark | galactic</span><br>  <span class="hljs-comment"># See: https://github.com/chriskempson/tomorrow-theme</span><br>  <span class="hljs-attr">highlight_theme:</span> <span class="hljs-string">night</span><br>  <span class="hljs-comment"># Add copy button on codeblock</span><br>  <span class="hljs-attr">copy_button:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-comment"># Show text copy result.</span><br>    <span class="hljs-attr">show_result:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-comment"># Available values: default | flat | mac</span><br>    <span class="hljs-attr">style:</span> <span class="hljs-string">defaultCopy</span><br></code></pre></td></tr></table></figure><p> </p><h4 id="图片浏览放大"><a href="#图片浏览放大" class="headerlink" title="图片浏览放大"></a>图片浏览放大</h4><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">cd</span> themes/<span class="hljs-keyword">next</span>/<span class="hljs-keyword">source</span>/lib<br>git clone https://github.<span class="hljs-keyword">com</span>/theme-<span class="hljs-keyword">next</span>/theme-<span class="hljs-keyword">next</span>-fancybox3 fancyboxCopy<br></code></pre></td></tr></table></figure><p>修改主题配置文件</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-comment"># FancyBox is a tool that offers a nice and elegant way to add zooming functionality for images.</span><br><span class="hljs-comment"># For more information: https://fancyapps.com/fancybox</span><br>fancybox: <span class="hljs-literal">true</span>Copy<br></code></pre></td></tr></table></figure><p> </p><h4 id="站点访问统计"><a href="#站点访问统计" class="headerlink" title="站点访问统计"></a>站点访问统计</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Show Views / Visitors of the website / page with busuanzi.</span><br><span class="hljs-comment"># Get more information on http://ibruce.info/2015/04/04/busuanzi</span><br><span class="hljs-attr">busuanzi_count:</span> <span class="hljs-comment"># 不蒜子统计，用于在页脚显示总访客数和总浏览量</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">total_visitors:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">total_visitors_icon:</span> <span class="hljs-string">user</span><br>  <span class="hljs-attr">total_views:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">total_views_icon:</span> <span class="hljs-string">eye</span><br>  <span class="hljs-attr">post_views:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">post_views_icon:</span> <span class="hljs-string">eyeCopy</span><br></code></pre></td></tr></table></figure><p> </p><h4 id="评论系统"><a href="#评论系统" class="headerlink" title="评论系统"></a>评论系统</h4><p><a href="https://valine.js.org/">Valine</a> 诞生于2017年8月7日，是一款基于Leancloud的快速、简洁且高效的无后端评论系统。</p><p>登录 <a href="https://leancloud.cn/">Leancloud</a> 官网，注册之后创建一个应用 ，【设置】-&gt;【应用Keys】，根据显示的内容修改主题配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Valine</span><br><span class="hljs-comment"># For more information: https://valine.js.org, https://github.com/xCss/Valine</span><br><span class="hljs-attr">valine:</span> <span class="hljs-comment"># 评论</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">appid:</span> <span class="hljs-string">jflkasjdklfjlajsdlkfklsd-sdfasdf</span> <span class="hljs-comment"># Your leancloud application appid</span><br>  <span class="hljs-attr">appkey:</span> <span class="hljs-string">ahskfdhlkasdkfjkalsdflasdf</span> <span class="hljs-comment"># Your leancloud application appkey</span><br>  <span class="hljs-attr">notify:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 评论回复邮件提醒, See: https://github.com/xCss/Valine/wiki</span><br>  <span class="hljs-attr">verify:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># 验证码服务 Verification code</span><br>  <span class="hljs-attr">placeholder:</span> <span class="hljs-string">留言区</span> <span class="hljs-comment"># 留言区 Comment box placeholder</span><br>  <span class="hljs-attr">avatar:</span> <span class="hljs-string">mm</span> <span class="hljs-comment"># 头像配置 Gravatar style</span><br>  <span class="hljs-attr">guest_info:</span> <span class="hljs-string">nick,mail,link</span> <span class="hljs-comment"># 回复填写的信息 Custom comment header</span><br>  <span class="hljs-attr">pageSize:</span> <span class="hljs-number">10</span> <span class="hljs-comment"># Pagination size</span><br>  <span class="hljs-attr">language:</span> <span class="hljs-comment"># Language, available values: en, zh-cn</span><br>  <span class="hljs-attr">visitor:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># Article reading statistic</span><br>  <span class="hljs-attr">comment_count:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># If false, comment count will only be displayed in post page, not in home page</span><br>  <span class="hljs-attr">recordIP:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># Whether to record the commenter IP</span><br>  <span class="hljs-attr">serverURLs:</span> <span class="hljs-comment"># When the custom domain name is enabled, fill it in here (it will be detected automatically by default, no need to fill in)</span><br>  <span class="hljs-comment">#post_meta_order: 0Copy</span><br></code></pre></td></tr></table></figure><p> </p><h4 id="本地搜索"><a href="#本地搜索" class="headerlink" title="本地搜索"></a>本地搜索</h4><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install hexo-generator-searchdb <span class="hljs-comment">--saveCopy</span><br></code></pre></td></tr></table></figure><p>修改站点配置文件</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-meta"># 本地搜索</span><br><span class="hljs-symbol">search:</span><br><span class="hljs-symbol">  path:</span> search.xml<br><span class="hljs-symbol">  field:</span> post<br><span class="hljs-symbol">  format:</span> html<br><span class="hljs-symbol">  limit:</span> <span class="hljs-number">10000</span>Copy<br></code></pre></td></tr></table></figure><p>修改主题配置文件，开启本地搜索</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-meta"># Local Search</span><br><span class="hljs-meta"># Dependencies: https:<span class="hljs-comment">//github.com/theme-next/hexo-generator-searchdb</span></span><br><span class="hljs-symbol">local_search:</span><br><span class="hljs-symbol">  enable:</span> trueCopy<br></code></pre></td></tr></table></figure><p> </p><h4 id="文字数量和阅读时长"><a href="#文字数量和阅读时长" class="headerlink" title="文字数量和阅读时长"></a>文字数量和阅读时长</h4><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">npm install hexo-symbols-<span class="hljs-built_in">count</span>-<span class="hljs-built_in">time</span> <span class="hljs-comment">--saveCopy</span><br></code></pre></td></tr></table></figure><p>修改主题配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Post wordcount display settings</span><br><span class="hljs-comment"># Dependencies: https://github.com/theme-next/hexo-symbols-count-time</span><br><span class="hljs-attr">symbols_count_time:</span><br>  <span class="hljs-attr">separated_meta:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">item_text_post:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">item_text_total:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">awl:</span> <span class="hljs-number">4</span><br>  <span class="hljs-attr">wpm:</span> <span class="hljs-string">275Copy</span><br></code></pre></td></tr></table></figure><p> </p><h4 id="开启RRS订阅"><a href="#开启RRS订阅" class="headerlink" title="开启RRS订阅"></a>开启RRS订阅</h4><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install hexo-generator-feed <span class="hljs-comment">--saveCopy</span><br></code></pre></td></tr></table></figure><p>站点配置文件添加以下配置</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-meta"># RSS订阅</span><br><span class="hljs-symbol">feed:</span><br><span class="hljs-symbol">  type:</span> atom<br><span class="hljs-symbol">  path:</span> atom.xml<br><span class="hljs-symbol">  limit:</span> <span class="hljs-number">20</span><br><span class="hljs-symbol">  hub:</span><br><span class="hljs-symbol">  content:</span><br><span class="hljs-symbol">  content_limit:</span> <span class="hljs-number">140</span><br><span class="hljs-symbol">  content_limit_delim:</span> <span class="hljs-string">&#x27; &#x27;</span>Copy<br></code></pre></td></tr></table></figure><p>主题配置文件</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-meta"># Social Links</span><br><span class="hljs-meta"># Usage: `Key: permalink || icon`</span><br><span class="hljs-meta"># Key is the link label showing to end users.</span><br><span class="hljs-meta"># Value before `||` delimiter is the target permalink, value after `||` delimiter is the name of Font Awesome icon.</span><br><span class="hljs-symbol">social:</span><br><span class="hljs-symbol">  GitHub:</span> https:<span class="hljs-comment">//github.com/valten-hyl || github</span><br>  E-Mail: mailto:valtenhyl@<span class="hljs-number">163.</span>com || envelope<br><span class="hljs-symbol">  Weibo:</span> https:<span class="hljs-comment">//weibo.com/3114281855 || weibo</span><br>  简书: https:<span class="hljs-comment">//www.jianshu.com/u/9f816d1869d4 || book</span><br>  掘金: https:<span class="hljs-comment">//juejin.im/user/5baa5f9d5188255c5d569951 || ils</span><br>  <span class="hljs-meta">#Google: https:<span class="hljs-comment">//plus.google.com/yourname || google</span></span><br>  <span class="hljs-meta">#Twitter: https:<span class="hljs-comment">//twitter.com/yourname || twitter</span></span><br>  <span class="hljs-meta">#FB Page: https:<span class="hljs-comment">//www.facebook.com/yourname || facebook</span></span><br>  <span class="hljs-meta">#StackOverflow: https:<span class="hljs-comment">//stackoverflow.com/yourname || stack-overflow</span></span><br>  <span class="hljs-meta">#YouTube: https:<span class="hljs-comment">//youtube.com/yourname || youtube</span></span><br>  <span class="hljs-meta">#Instagram: https:<span class="hljs-comment">//instagram.com/yourname || instagram</span></span><br>  <span class="hljs-meta">#Skype: skype:yourname?call|chat || skype</span><br><span class="hljs-symbol">  RSS:</span> /atom.xml || rssCopy<br></code></pre></td></tr></table></figure><p> </p><h4 id="标签云配色"><a href="#标签云配色" class="headerlink" title="标签云配色"></a>标签云配色</h4><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-comment"># TagCloud settings for tags page.</span><br>tagcloud:<br>  <span class="hljs-comment"># All values below are same as default, change them by yourself.</span><br>  <span class="hljs-built_in">min</span>: <span class="hljs-number">12</span> <span class="hljs-comment"># Minimun font size in px</span><br>  <span class="hljs-built_in">max</span>: <span class="hljs-number">31</span> <span class="hljs-comment"># Maxium font size in px</span><br>  <span class="hljs-built_in">start</span>: <span class="hljs-string">&quot;#381096&quot;</span> <span class="hljs-comment"># Start color (hex, rgba, hsla or color keywords)</span><br>  <span class="hljs-keyword">end</span>: <span class="hljs-string">&quot;#922a4b&quot;</span> <span class="hljs-comment"># End color (hex, rgba, hsla or color keywords)</span><br>  amount: <span class="hljs-number">200</span> <span class="hljs-comment"># Amount of tags, change it if you have more than 200 tagsCopy</span><br></code></pre></td></tr></table></figure><p> </p><h4 id="禁止页面评论"><a href="#禁止页面评论" class="headerlink" title="禁止页面评论"></a>禁止页面评论</h4><p>在不需要评论的页面或者文章Front-matter（文件最上方以—分隔的区域）加上<code>comments: false</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">categories</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2019-12-14 17:22:21</span><br><span class="hljs-attr">type:</span> <span class="hljs-string">&quot;categories&quot;</span><br><span class="hljs-attr">comments:</span> <span class="hljs-literal">false</span><br><span class="hljs-string">---Copy</span><br></code></pre></td></tr></table></figure><p> </p><h4 id="AddThis分享"><a href="#AddThis分享" class="headerlink" title="AddThis分享"></a>AddThis分享</h4><p>首先在<a href="https://www.addthis.com/"><strong>AddThis</strong></a>官网注册账号，选择并配置分享按钮，激活，获取<code>pubid</code>，修改主题配置文件</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-meta"># AddThis Share. See: https:<span class="hljs-comment">//www.addthis.com</span></span><br><span class="hljs-meta"># Go to https:<span class="hljs-comment">//www.addthis.com/dashboard to customize your tools.</span></span><br><span class="hljs-symbol">add_this_id:</span> ra<span class="hljs-number">-2341234445555</span>Copy<br></code></pre></td></tr></table></figure><p> </p><h4 id="Fork-me-on-GitHub"><a href="#Fork-me-on-GitHub" class="headerlink" title="Fork me on GitHub"></a>Fork me on GitHub</h4><p>修改主题配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># `Follow me on GitHub` banner in the top-right corner.</span><br><span class="hljs-attr">github_banner:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">permalink:</span> <span class="hljs-string">https://github.com/valten-hyl</span><br>  <span class="hljs-attr">title:</span> <span class="hljs-string">Follow</span> <span class="hljs-string">me</span> <span class="hljs-string">on</span> <span class="hljs-string">GitHubCopy</span><br></code></pre></td></tr></table></figure><p> </p><h4 id="隐藏强力驱动和主题信息"><a href="#隐藏强力驱动和主题信息" class="headerlink" title="隐藏强力驱动和主题信息"></a>隐藏强力驱动和主题信息</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">powered:</span><br>  <span class="hljs-comment"># Hexo link (Powered by Hexo).</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-comment"># Version info of Hexo after Hexo link (vX.X.X).</span><br>  <span class="hljs-attr">version:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-attr">theme:</span><br>  <span class="hljs-comment"># Theme &amp; scheme info link (Theme - NexT.scheme).</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-comment"># Version info of NexT after scheme info (vX.X.X).</span><br>  <span class="hljs-attr">version:</span> <span class="hljs-string">falseCopy</span><br></code></pre></td></tr></table></figure><p> </p><h4 id="在线聊天"><a href="#在线聊天" class="headerlink" title="在线聊天"></a>在线聊天</h4><p>首先到<a href="http://www.daovoice.io/">DaoVoice</a>上注册一个账号,注册完成后会得到一个app_id，修改主题配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># DaoVoice</span><br><span class="hljs-comment"># Online contact</span><br><span class="hljs-attr">daovoice:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">daovoice_app_id:</span> <span class="hljs-string">123sfa</span> <span class="hljs-comment"># 这里填你刚才获得的 app_idCopy</span><br></code></pre></td></tr></table></figure><p>打开<code>themes/next/layout/_partials/head/head.swig</code>，在文件中添加</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">if</span></span> theme.daovoice %&#125;</span><span class="language-xml"></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">  (<span class="hljs-keyword">function</span>(<span class="hljs-params">i,s,o,g,r,a,m</span>)&#123;i[<span class="hljs-string">&quot;DaoVoiceObject&quot;</span>]=r;i[r]=i[r]||<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;(i[r].<span class="hljs-property">q</span>=i[r].<span class="hljs-property">q</span>||[]).<span class="hljs-title function_">push</span>(<span class="hljs-variable language_">arguments</span>)&#125;,i[r].<span class="hljs-property">l</span>=<span class="hljs-number">1</span>*<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();a=s.<span class="hljs-title function_">createElement</span>(o),m=s.<span class="hljs-title function_">getElementsByTagName</span>(o)[<span class="hljs-number">0</span>];a.<span class="hljs-property">async</span>=<span class="hljs-number">1</span>;a.<span class="hljs-property">src</span>=g;a.<span class="hljs-property">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>;m.<span class="hljs-property">parentNode</span>.<span class="hljs-title function_">insertBefore</span>(a,m)&#125;)(<span class="hljs-variable language_">window</span>,<span class="hljs-variable language_">document</span>,<span class="hljs-string">&quot;script&quot;</span>,(<span class="hljs-string">&#x27;https:&#x27;</span> == <span class="hljs-variable language_">document</span>.<span class="hljs-property">location</span>.<span class="hljs-property">protocol</span> ? <span class="hljs-string">&#x27;https:&#x27;</span> : <span class="hljs-string">&#x27;http:&#x27;</span>) + <span class="hljs-string">&quot;//widget.daovoice.io/widget/e30c3408.js&quot;</span>,<span class="hljs-string">&quot;daovoice&quot;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title function_">daovoice</span>(<span class="hljs-string">&#x27;init&#x27;</span>, &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">app_id</span>: <span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123;&#123; theme.daovoice_app_id &#125;&#125;</span><span class="language-xml">&quot;</span><br><span class="language-xml">    &#125;);</span><br><span class="language-xml">  daovoice(&#x27;update&#x27;);</span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endif</span></span> %&#125;</span><span class="language-xml">Copy</span><br></code></pre></td></tr></table></figure><p> </p><h4 id="嵌入歌单"><a href="#嵌入歌单" class="headerlink" title="嵌入歌单"></a>嵌入歌单</h4><p> </p><h5 id="新建歌单页面"><a href="#新建歌单页面" class="headerlink" title="新建歌单页面"></a>新建歌单页面</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">palylist</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2019-12-15 01:04:41</span><br><span class="hljs-attr">type:</span> <span class="hljs-string">&quot;playlist&quot;</span><br><span class="hljs-attr">comments:</span> <span class="hljs-literal">false</span><br><span class="hljs-string">---Copy</span><br></code></pre></td></tr></table></figure><p> </p><h5 id="安装播放器"><a href="#安装播放器" class="headerlink" title="安装播放器"></a>安装播放器</h5><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install hexo-tag-aplayer <span class="hljs-comment">--saveCopy</span><br></code></pre></td></tr></table></figure><p> </p><h5 id="修改站点配置文件-2"><a href="#修改站点配置文件-2" class="headerlink" title="修改站点配置文件"></a>修改站点配置文件</h5><p>其中id是歌单生成的外链的id</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs maxima"># metingjs<br>metingjs:<br>  server: netease<br>  id: <span class="hljs-number">3111577471</span> # 歌单id <span class="hljs-number">8537501</span><br>  type: playlist<br>  theme: &#x27;#<span class="hljs-number">2980b9</span>&#x27;<br>  loop: all<br>  autoplay: <span class="hljs-literal">false</span><br>  order: randomCopy<br></code></pre></td></tr></table></figure><p> </p><h5 id="修改模板"><a href="#修改模板" class="headerlink" title="修改模板"></a>修改模板</h5><p>打开<code>themes/next/layout/page.swig</code>，在文件中加入以下代码</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">&#123;% elif page.type === &#x27;playlist&#x27; %&#125;</span><br><span class="language-xml">          </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">page.content</span> &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">           <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css&quot;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-comment">&lt;!-- require MetingJS --&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/meting@2/dist/Meting.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">meting-js</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin-top: 1.5rem; width: auto; height: auto;&quot;</span> <span class="hljs-attr">server</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">config.metingjs.server</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">config.metingjs.type</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">config.metingjs.id</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span> <span class="hljs-attr">theme</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">config.metingjs.theme</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span> <span class="hljs-attr">loop</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">config.metingjs.loop</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span> <span class="hljs-attr">autoplay</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">config.metingjs.autoplay</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span> <span class="hljs-attr">order</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">config.metingjs.order</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span> <span class="hljs-attr">storageName</span>=<span class="hljs-string">&quot;aplayer-setting&quot;</span> <span class="hljs-attr">lrctype</span>=<span class="hljs-string">0</span> /&gt;</span></span><br><span class="language-xml">&#123;% elif page.type === &#x27;schedule&#x27; %&#125;Copy</span><br></code></pre></td></tr></table></figure><p> </p><h4 id="动态标签云"><a href="#动态标签云" class="headerlink" title="动态标签云"></a>动态标签云</h4><p> </p><h5 id="安装插件-2"><a href="#安装插件-2" class="headerlink" title="安装插件"></a>安装插件</h5><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">npm <span class="hljs-keyword">install </span>hexo-tag-<span class="hljs-keyword">cloud </span>--saveCopy<br></code></pre></td></tr></table></figure><p> </p><h5 id="修改站点配置文件-3"><a href="#修改站点配置文件-3" class="headerlink" title="修改站点配置文件"></a>修改站点配置文件</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># hexo-tag-cloud</span><br><span class="hljs-attr">tag_cloud:</span><br>  <span class="hljs-attr">textFont:</span> <span class="hljs-string">Trebuchet</span> <span class="hljs-string">MS,</span> <span class="hljs-string">Helvetica</span><br>  <span class="hljs-attr">textColor:</span> <span class="hljs-string">&#x27;#192e4d&#x27;</span><br>  <span class="hljs-attr">textHeight:</span> <span class="hljs-number">25</span><br>  <span class="hljs-attr">outlineColor:</span> <span class="hljs-string">&#x27;#5f7a74&#x27;</span><br>  <span class="hljs-attr">maxSpeed:</span> <span class="hljs-number">0.5</span> <span class="hljs-comment"># [0.01, 1]   Copy</span><br></code></pre></td></tr></table></figure><p> </p><h5 id="修改页面模板"><a href="#修改页面模板" class="headerlink" title="修改页面模板"></a>修改页面模板</h5><p>打开<code>themes/next/layout/page.swig</code>，找到<code>class=&quot;tag-cloud&quot;</code>，在里面添加以下代码</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># hexo-tag-cloud</span><br><span class="hljs-attr">tag_cloud:</span><br>  <span class="hljs-attr">textFont:</span> <span class="hljs-string">Trebuchet</span> <span class="hljs-string">MS,</span> <span class="hljs-string">Helvetica</span><br>  <span class="hljs-attr">textColor:</span> <span class="hljs-string">&#x27;#192e4d&#x27;</span><br>  <span class="hljs-attr">textHeight:</span> <span class="hljs-number">25</span><br>  <span class="hljs-attr">outlineColor:</span> <span class="hljs-string">&#x27;#5f7a74&#x27;</span><br>  <span class="hljs-attr">maxSpeed:</span> <span class="hljs-number">0.5</span> <span class="hljs-comment"># [0.01, 1]   Copy</span><br></code></pre></td></tr></table></figure><p> </p><h4 id="添加背景图片"><a href="#添加背景图片" class="headerlink" title="添加背景图片"></a>添加背景图片</h4><p>打开<code>themes/next/source/css/_common/scaffolding/base.styl</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">body</span> &#123;<br>  <span class="hljs-attribute">background</span>: $body-bg-color;<br>  <span class="hljs-attribute">color</span>: $text-color;<br>  <span class="hljs-attribute">font-family</span>: $font-family-base;<br>  <span class="hljs-attribute">font-size</span>: $font-size-base;<br>  <span class="hljs-attribute">line-height</span>: $line-height-base;<br><br>  // 背景图片<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">http://q2gep6iwb.bkt.clouddn.com/blog/20191215/s6j9RkCgHaW4.jpg</span>);<br>  <span class="hljs-attribute">background-size</span>: cover;<br>  <span class="hljs-attribute">background-repeat</span>: no-repeat;<br>  <span class="hljs-attribute">background-attachment</span>: fixed;<br>  <span class="hljs-attribute">background-position</span>: <span class="hljs-number">50%</span> <span class="hljs-number">50%</span>;<br><br>  +tablet-mobile() &#123;<br>    // Remove the <span class="hljs-attribute">padding</span> of <span class="hljs-selector-tag">body</span> when the sidebar is open.<br>    <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">0</span> <span class="hljs-meta">!important</span>;<br>    <span class="hljs-attribute">padding-right</span>: <span class="hljs-number">0</span> <span class="hljs-meta">!important</span>;<br>  &#125;<br>&#125;<br><br>// 修改主体透明度<br><span class="hljs-selector-class">.main-inner</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-number">#0a1627</span>;<br>  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0.9</span>;<br>&#125;<br><br>// 修改菜单栏透明度<br><span class="hljs-selector-class">.header-inner</span> &#123;<br>  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0.8</span>;<br>&#125;Copy<br></code></pre></td></tr></table></figure><p> </p><h4 id="动态背景"><a href="#动态背景" class="headerlink" title="动态背景"></a>动态背景</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> themes/next<br><br>git <span class="hljs-built_in">clone</span> https://github.com/theme-next/theme-next-canvas-nest <span class="hljs-built_in">source</span>/lib/canvas-nestCopy<br></code></pre></td></tr></table></figure><p>修改主题配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Canvas-nest</span><br><span class="hljs-comment"># Dependencies: https://github.com/theme-next/theme-next-canvas-nest</span><br><span class="hljs-comment"># For more information: https://github.com/hustcc/canvas-nest.js</span><br><span class="hljs-attr">canvas_nest:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">onmobile:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># Display on mobile or not</span><br>  <span class="hljs-attr">color:</span> <span class="hljs-string">&quot;0,0,255&quot;</span> <span class="hljs-comment"># RGB values, use `,` to separate</span><br>  <span class="hljs-attr">opacity:</span> <span class="hljs-number">0.5</span> <span class="hljs-comment"># The opacity of line: 0~1</span><br>  <span class="hljs-attr">zIndex:</span> <span class="hljs-number">-1</span> <span class="hljs-comment"># z-index property of the background</span><br>  <span class="hljs-attr">count:</span> <span class="hljs-number">99</span> <span class="hljs-comment"># The number of linesCopy</span><br></code></pre></td></tr></table></figure><p> </p><h4 id="加载进度条"><a href="#加载进度条" class="headerlink" title="加载进度条"></a>加载进度条</h4><p>修改主题配置文件，开启进度条，选择进度条样式</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs coq"># Progress bar <span class="hljs-built_in">in</span> the <span class="hljs-built_in">top</span> during page loading.<br># <span class="hljs-keyword">Dependencies</span>: https://github.com/theme-next/theme-next-pace<br># For more information: https://github.com/HubSpot/pace<br>pace:<br>  enable: true<br>  # Themes list:<br>  # big-counter | <span class="hljs-type">bounce</span> | <span class="hljs-type">barber</span>-shop | <span class="hljs-type">center</span>-atom | <span class="hljs-type">center</span>-circle | <span class="hljs-type">center</span>-radar | <span class="hljs-type">center</span>-<span class="hljs-built_in">simple</span><br>  # corner-indicator | <span class="hljs-type">fill</span>-<span class="hljs-built_in">left</span> | <span class="hljs-type">flat</span>-<span class="hljs-built_in">top</span> | <span class="hljs-type">flash</span> | <span class="hljs-type">loading</span>-bar | <span class="hljs-type">mac</span>-osx | <span class="hljs-type">material</span> | <span class="hljs-type">minimal</span><br>  theme: pace-theme-bounce #选择进度条样式Copy<br></code></pre></td></tr></table></figure><p>修改主题配置文件，引入对应的js和css</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">vendors</span>:<br>  <span class="hljs-attribute">pace</span>: //cdn.bootcss.com/pace/<span class="hljs-number">1</span>.<span class="hljs-number">0</span>.<span class="hljs-number">2</span>/pace.min.js<br>  <span class="hljs-attribute">pace_css</span>: //cdn.bootcss.com/pace/<span class="hljs-number">1</span>.<span class="hljs-number">0</span>.<span class="hljs-number">2</span>/themes/black/pace-theme-bounce.min.cssCopy<br></code></pre></td></tr></table></figure><p> </p><h4 id="回到顶部样式"><a href="#回到顶部样式" class="headerlink" title="回到顶部样式"></a>回到顶部样式</h4><p>修改主题配置文件，开启回到顶部</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">back2top:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-comment"># Back to top in sidebar.</span><br>  <span class="hljs-attr">sidebar:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-comment"># Scroll percent label in b2t button.</span><br>  <span class="hljs-attr">scrollpercent:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-comment"># 钢铁侠</span><br>  <span class="hljs-attr">ironman:</span> <span class="hljs-string">trueCopy</span><br></code></pre></td></tr></table></figure><p>在<code>themes/next/source/js</code>下新建<code>totop.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-variable language_">window</span>).<span class="hljs-title function_">scroll</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    $(<span class="hljs-variable language_">window</span>).<span class="hljs-title function_">scrollTop</span>() &gt; $(<span class="hljs-variable language_">window</span>).<span class="hljs-title function_">height</span>()*<span class="hljs-number">0.5</span> ? $(<span class="hljs-string">&quot;#rocket&quot;</span>).<span class="hljs-title function_">addClass</span>(<span class="hljs-string">&quot;show&quot;</span>) : $(<span class="hljs-string">&quot;#rocket&quot;</span>).<span class="hljs-title function_">removeClass</span>(<span class="hljs-string">&quot;show&quot;</span>);<br>&#125;);<br><br>$(<span class="hljs-string">&quot;#rocket&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    $(<span class="hljs-string">&quot;#rocket&quot;</span>).<span class="hljs-title function_">addClass</span>(<span class="hljs-string">&quot;launch&quot;</span>);<br>    $(<span class="hljs-string">&quot;html, body&quot;</span>).<span class="hljs-title function_">animate</span>(&#123;<br>        <span class="hljs-attr">scrollTop</span>: <span class="hljs-number">0</span><br>    &#125;, <span class="hljs-number">1000</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        $(<span class="hljs-string">&quot;#rocket&quot;</span>).<span class="hljs-title function_">removeClass</span>(<span class="hljs-string">&quot;show launch&quot;</span>);<br>    &#125;);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;);<span class="hljs-title class_">Copy</span><br></code></pre></td></tr></table></figure><p>修改<code>themes/next/layout/_partials/wigets.swig</code></p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="hljs-template-tag">&#123;%- <span class="hljs-name"><span class="hljs-name">if</span></span> theme.back2top.enable and not theme.back2top.sidebar %&#125;</span><span class="language-xml"></span><br><span class="language-xml">   </span><span class="hljs-template-tag">&#123;%- <span class="hljs-name"><span class="hljs-name">if</span></span> theme.back2top.ironman %&#125;</span><span class="language-xml"></span><br><span class="language-xml">     <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;rocket&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#top&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">     <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcss.com/jquery/3.4.1/jquery.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml">     </span><span class="hljs-template-variable">&#123;&#123;- next_js(&#x27;totop.js&#x27;) &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">   </span><span class="hljs-template-tag">&#123;%- <span class="hljs-name"><span class="hljs-name">else</span></span> %&#125;</span><span class="language-xml"> </span><br><span class="language-xml">     <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;back-to-top motion-element&quot;</span>&gt;</span></span><br><span class="language-xml">       <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fa fa-arrow-up&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span></span><br><span class="language-xml">       <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>0%<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">     <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>   </span><br><span class="language-xml">   </span><span class="hljs-template-tag">&#123;%- <span class="hljs-name"><span class="hljs-name">endif</span></span> %&#125;</span><span class="language-xml"> </span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;%- <span class="hljs-name"><span class="hljs-name">endif</span></span> %&#125;</span><span class="language-xml">Copy</span><br></code></pre></td></tr></table></figure><p>修改<code>themes/next/source/css/common/scaffolding</code>下的<code>base.styl</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs css">// 钢铁侠<br><span class="hljs-selector-id">#rocket</span> &#123;<br>  <span class="hljs-attribute">position</span>: fixed;<br>  <span class="hljs-attribute">right</span>: <span class="hljs-number">50px</span>;<br>  <span class="hljs-attribute">bottom</span>: <span class="hljs-number">50px</span>;<br>  <span class="hljs-attribute">z-index</span>: <span class="hljs-number">3</span>;<br>  <span class="hljs-attribute">display</span>: block;<br>  <span class="hljs-attribute">visibility</span>: hidden;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">42px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">43px</span>;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&quot;https://s2.ax1x.com/2019/12/16/Q51U0O.png&quot;</span>) no-repeat <span class="hljs-number">50%</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">cursor</span>: pointer;<br>  -webkit-<span class="hljs-attribute">transition</span>: visibility <span class="hljs-number">0.6s</span> <span class="hljs-built_in">cubic-bezier</span>(<span class="hljs-number">0.6</span>, <span class="hljs-number">0.04</span>, <span class="hljs-number">0.98</span>, <span class="hljs-number">0.335</span>), opacity <span class="hljs-number">0.6s</span> <span class="hljs-built_in">cubic-bezier</span>(<span class="hljs-number">0.6</span>, <span class="hljs-number">0.04</span>, <span class="hljs-number">0.98</span>, <span class="hljs-number">0.335</span>), -webkit-transform <span class="hljs-number">0.6s</span> <span class="hljs-built_in">cubic-bezier</span>(<span class="hljs-number">0.6</span>, <span class="hljs-number">0.04</span>, <span class="hljs-number">0.98</span>, <span class="hljs-number">0.335</span>);<br>  -moz-<span class="hljs-attribute">transition</span>: visibility <span class="hljs-number">0.6s</span> <span class="hljs-built_in">cubic-bezier</span>(<span class="hljs-number">0.6</span>, <span class="hljs-number">0.04</span>, <span class="hljs-number">0.98</span>, <span class="hljs-number">0.335</span>), opacity <span class="hljs-number">0.6s</span> <span class="hljs-built_in">cubic-bezier</span>(<span class="hljs-number">0.6</span>, <span class="hljs-number">0.04</span>, <span class="hljs-number">0.98</span>, <span class="hljs-number">0.335</span>), -moz-transform <span class="hljs-number">0.6s</span> <span class="hljs-built_in">cubic-bezier</span>(<span class="hljs-number">0.6</span>, <span class="hljs-number">0.04</span>, <span class="hljs-number">0.98</span>, <span class="hljs-number">0.335</span>);<br>  <span class="hljs-attribute">transition</span>: visibility <span class="hljs-number">0.6s</span> <span class="hljs-built_in">cubic-bezier</span>(<span class="hljs-number">0.6</span>, <span class="hljs-number">0.04</span>, <span class="hljs-number">0.98</span>, <span class="hljs-number">0.335</span>), opacity <span class="hljs-number">0.6s</span> <span class="hljs-built_in">cubic-bezier</span>(<span class="hljs-number">0.6</span>, <span class="hljs-number">0.04</span>, <span class="hljs-number">0.98</span>, <span class="hljs-number">0.335</span>), transform <span class="hljs-number">0.6s</span> <span class="hljs-built_in">cubic-bezier</span>(<span class="hljs-number">0.6</span>, <span class="hljs-number">0.04</span>, <span class="hljs-number">0.98</span>, <span class="hljs-number">0.335</span>);<br>&#125;<br><span class="hljs-selector-id">#rocket</span> <span class="hljs-selector-tag">i</span> &#123;<br>  <span class="hljs-attribute">display</span>: block;<br>  <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">48px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">14px</span>;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&quot;https://s2.ax1x.com/2019/12/16/Q51U0O.png&quot;</span>) no-repeat <span class="hljs-number">50%</span> -<span class="hljs-number">20px</span>;<br>  <span class="hljs-attribute">opacity</span>: .<span class="hljs-number">5</span>;<br>  -webkit-<span class="hljs-attribute">transition</span>: -webkit-transform .<span class="hljs-number">2s</span>;<br>  -moz-<span class="hljs-attribute">transition</span>: -moz-transform .<span class="hljs-number">2s</span>;<br>  <span class="hljs-attribute">transition</span>: transform .<span class="hljs-number">2s</span>;<br>  -webkit-<span class="hljs-attribute">transform-origin</span>: <span class="hljs-number">50%</span> <span class="hljs-number">0</span>;<br>  -moz-<span class="hljs-attribute">transform-origin</span>: <span class="hljs-number">50%</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">transform-origin</span>: <span class="hljs-number">50%</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-selector-id">#rocket</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>  <span class="hljs-attribute">background-position</span>: <span class="hljs-number">50%</span> -<span class="hljs-number">44px</span>;<br>&#125;<br><span class="hljs-selector-id">#rocket</span><span class="hljs-selector-pseudo">:hover</span> <span class="hljs-selector-tag">i</span> &#123;<br>  <span class="hljs-attribute">background-position</span>: <span class="hljs-number">50%</span> <span class="hljs-number">100%</span>;<br>  -webkit-<span class="hljs-attribute">animation</span>: flaming .<span class="hljs-number">7s</span> infinite;<br>  -moz-<span class="hljs-attribute">animation</span>: flaming .<span class="hljs-number">7s</span> infinite;<br>  <span class="hljs-attribute">animation</span>: flaming .<span class="hljs-number">7s</span> infinite;<br>&#125;<br><span class="hljs-selector-id">#rocket</span><span class="hljs-selector-class">.show</span> &#123;<br>    <span class="hljs-attribute">visibility</span>: visible;<br>    <span class="hljs-attribute">opacity</span>: <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-selector-id">#rocket</span><span class="hljs-selector-class">.launch</span> &#123;<br>  <span class="hljs-attribute">background-position</span>: <span class="hljs-number">50%</span> -<span class="hljs-number">44px</span>;<br>  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;<br>  -webkit-<span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateY</span>(-<span class="hljs-number">500px</span>);<br>  -moz-<span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateY</span>(-<span class="hljs-number">500px</span>);<br>  -ms-<span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateY</span>(-<span class="hljs-number">500px</span>);<br>  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateY</span>(-<span class="hljs-number">500px</span>);<br>  <span class="hljs-attribute">pointer-events</span>: none;<br>&#125;<br><span class="hljs-selector-id">#rocket</span><span class="hljs-selector-class">.launch</span> <span class="hljs-selector-tag">i</span> &#123;<br>  <span class="hljs-attribute">background-position</span>: <span class="hljs-number">50%</span> <span class="hljs-number">100%</span>;<br>  -webkit-<span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scale</span>(<span class="hljs-number">1.4</span>, <span class="hljs-number">3.2</span>);<br>  -moz-<span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scale</span>(<span class="hljs-number">1.4</span>, <span class="hljs-number">3.2</span>);<br>  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scale</span>(<span class="hljs-number">1.4</span>, <span class="hljs-number">3.2</span>);<br>&#125;Copy<br></code></pre></td></tr></table></figure><p> </p><h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><p> </p><h4 id="常用命令："><a href="#常用命令：" class="headerlink" title="常用命令："></a>常用命令：</h4><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs axapta">hexo <span class="hljs-keyword">new</span> <span class="hljs-string">&quot;postName&quot;</span>      <span class="hljs-meta"># 新建文章</span><br>hexo <span class="hljs-keyword">new</span> page <span class="hljs-string">&quot;pageName&quot;</span> <span class="hljs-meta"># 新建页面</span><br>hexo generate            <span class="hljs-meta"># 生成静态页面至public目录</span><br>hexo <span class="hljs-keyword">server</span>              <span class="hljs-meta"># 开启预览访问端口（默认端口4000，&#x27;ctrl + c&#x27;关闭server）</span><br>hexo deploy              <span class="hljs-meta"># 将.deploy目录部署到GitHubCopy</span><br></code></pre></td></tr></table></figure><h4 id="常用复合命令："><a href="#常用复合命令：" class="headerlink" title="常用复合命令："></a>常用复合命令：</h4><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sas">hexo d -g<br>hexo s -g<br>hexo clean <span class="hljs-variable">&amp;&amp;</span> hexo g <span class="hljs-variable">&amp;&amp;</span> hexo s<br>hexo clean <span class="hljs-variable">&amp;&amp;</span> hexo g <span class="hljs-variable">&amp;&amp;</span> hexo dCopy<br></code></pre></td></tr></table></figure><p> </p><h4 id="简写："><a href="#简写：" class="headerlink" title="简写："></a>简写：</h4><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs abnf">hexo n <span class="hljs-operator">=</span><span class="hljs-operator">=</span> hexo new<br>hexo g <span class="hljs-operator">=</span><span class="hljs-operator">=</span> hexo generate<br>hexo s <span class="hljs-operator">=</span><span class="hljs-operator">=</span> hexo server<br>hexo d <span class="hljs-operator">=</span><span class="hljs-operator">=</span> hexo deployCopy<br></code></pre></td></tr></table></figure><p><strong>博客地址</strong>：<a href="http://valten.gitee.io/blog">http://valten.gitee.io/blog</a><br><strong>参考</strong>：</p><p><a href="https://www.jianshu.com/p/6f77c96b7eff">https://www.jianshu.com/p/6f77c96b7eff</a><br><a href="https://blog.csdn.net/u012294515/article/details/83094693">https://blog.csdn.net/u012294515/article/details/83094693</a><br><a href="https://blog.csdn.net/loze/article/details/94206726">https://blog.csdn.net/loze/article/details/94206726</a><br><a href="https://github.com/huweihuang/huweihuang.github.io">https://github.com/huweihuang/huweihuang.github.io</a></p><p>参考资料</p><p><a href="https://hexo.fluid-dev.com/docs/">Hexo Fluid 用户手册</a> </p><p>主题</p><p><a href="https://github.com/fluid-dev/hexo-theme-fluid">https://github.com/fluid-dev/hexo-theme-fluid</a></p><p>.md文件编辑器  推荐Typora</p><h5 id="写文章是用到Typora设置插入代码块快捷键方法"><a href="#写文章是用到Typora设置插入代码块快捷键方法" class="headerlink" title="写文章是用到Typora设置插入代码块快捷键方法"></a>写文章是用到Typora设置插入代码块快捷键方法</h5><p><a href="https://blog.csdn.net/weixin_44874806/article/details/97155001">https://blog.csdn.net/weixin_44874806/article/details/97155001</a></p><p>主题推荐</p><p><a href="https://zhuanlan.zhihu.com/p/491537945">https://zhuanlan.zhihu.com/p/491537945</a></p><p>文章推荐</p><p><a href="https://blog.csdn.net/weixin_42230956/article/details/132268144">https://blog.csdn.net/weixin_42230956/article/details/132268144</a></p>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
