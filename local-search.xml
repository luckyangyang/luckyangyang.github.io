<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>vue随笔_路由vue-router</title>
    <link href="/hexodemo/2024/03/12/vue%E9%9A%8F%E7%AC%94_%E8%B7%AF%E7%94%B1vue-router/"/>
    <url>/hexodemo/2024/03/12/vue%E9%9A%8F%E7%AC%94_%E8%B7%AF%E7%94%B1vue-router/</url>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Vue Router 是 <a href="https://cn.vuejs.org/">Vue.js</a> 的官方路由。它与 Vue.js 核心深度集成，让用 Vue.js 构建单页应用变得轻而易举。功能包括：</p><ul><li>嵌套路由映射</li><li>动态路由选择</li><li>模块化、基于组件的路由配置</li><li>路由参数、查询、通配符</li><li>展示由 Vue.js 的过渡系统提供的过渡效果</li><li>细致的导航控制</li><li>自动激活 CSS 类的链接</li><li>HTML5 history 模式或 hash 模式</li><li>可定制的滚动行为</li><li>URL 的正确编码</li></ul><p>官方文档地址</p><p><a href="https://router.vuejs.org/zh/introduction.html">https://router.vuejs.org/zh/introduction.html</a></p><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/vue@3&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/vue-router@4&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello App!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 使用 router-link 组件进行导航 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 通过传递 `to` 来指定链接 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- `&lt;router-link&gt;` 将呈现一个带有正确 `href` 属性的 `&lt;a&gt;` 标签 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/&quot;</span>&gt;</span>Go to Home<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/about&quot;</span>&gt;</span>Go to About<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 路由出口 --&gt;</span><br>  <span class="hljs-comment">&lt;!-- 路由匹配到的组件将渲染在这里 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="router-link"><a href="#router-link" class="headerlink" title="router-link"></a>router-link</h2><p>请注意，我们没有使用常规的 <code>a</code> 标签，而是使用一个自定义组件 <code>router-link</code> 来创建链接。这使得 Vue Router 可以在不重新加载页面的情况下更改 URL，处理 URL 的生成以及编码。我们将在后面看到如何从这些功能中获益。 </p><h2 id="router-view"><a href="#router-view" class="headerlink" title="router-view"></a>router-view</h2><p><code>router-view</code> 将显示与 URL 对应的组件。你可以把它放在任何地方，以适应你的布局。 </p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-comment">// 1. 定义路由组件.</span><br><span class="hljs-comment">// 也可以从其他文件导入</span><br><span class="hljs-keyword">const</span> Home = &#123; template: &#x27;&lt;div&gt;Home&lt;/div&gt;&#x27; &#125;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">About</span> = &#123; template: &#x27;&lt;div&gt;<span class="hljs-keyword">About</span>&lt;/div&gt;&#x27; &#125;<br><br><span class="hljs-comment">// 2. 定义一些路由</span><br><span class="hljs-comment">// 每个路由都需要映射到一个组件。</span><br><span class="hljs-comment">// 我们后面再讨论嵌套路由。</span><br><span class="hljs-keyword">const</span> routes = [<br>  &#123; path: &#x27;/&#x27;, component: Home &#125;,<br>  &#123; path: &#x27;/<span class="hljs-keyword">about</span>&#x27;, component: <span class="hljs-keyword">About</span> &#125;,<br>]<br><br><span class="hljs-comment">// 3. 创建路由实例并传递 `routes` 配置</span><br><span class="hljs-comment">// 你可以在这里输入更多的配置，但我们在这里</span><br><span class="hljs-comment">// 暂时保持简单</span><br><span class="hljs-keyword">const</span> router = VueRouter.createRouter(&#123;<br>  <span class="hljs-comment">// 4. 内部提供了 history 模式的实现。为了简单起见，我们在这里使用 hash 模式。</span><br>  history: VueRouter.createWebHashHistory(),<br>  routes, <span class="hljs-comment">// `routes: routes` 的缩写</span><br>&#125;)<br><br><span class="hljs-comment">// 5. 创建并挂载根实例</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">app</span> = Vue.createApp(&#123;&#125;)<br><span class="hljs-comment">// 确保 _use_ 路由实例使</span><br><span class="hljs-comment">// 整个应用支持路由。</span><br><span class="hljs-keyword">app</span>.<span class="hljs-keyword">use</span>(router)<br><br><span class="hljs-keyword">app</span>.mount(&#x27;#<span class="hljs-keyword">app</span>&#x27;)<br><br><span class="hljs-comment">// 现在，应用已经启动了！</span><br></code></pre></td></tr></table></figure><p>通过调用 <code>app.use(router)</code>，我们会触发第一次导航且可以在任意组件中以 <code>this.$router</code> 的形式访问它，并且以 <code>this.$route</code> 的形式访问当前路由： </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// Home.vue</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">computed</span>: &#123;<br>    <span class="hljs-title function_">username</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-comment">// 我们很快就会看到 `params` 是什么</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">$route</span>.<span class="hljs-property">params</span>.<span class="hljs-property">username</span><br>    &#125;,<br>  &#125;,<br>  <span class="hljs-attr">methods</span>: &#123;<br>    <span class="hljs-title function_">goToDashboard</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-keyword">if</span> (isAuthenticated) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span>.<span class="hljs-title function_">push</span>(<span class="hljs-string">&#x27;/dashboard&#x27;</span>)<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span>.<span class="hljs-title function_">push</span>(<span class="hljs-string">&#x27;/login&#x27;</span>)<br>      &#125;<br>    &#125;,<br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml">vue文件<br><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/demo&quot;</span>&gt;</span>demo<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br><br>要有<span class="hljs-tag">&lt;<span class="hljs-name">router-view</span> /&gt;</span> 作为容器<br><br>子路由页面必须有容器<span class="hljs-tag">&lt;<span class="hljs-name">router-view</span> /&gt;</span> <br></code></pre></td></tr></table></figure><h3 id="路由跳转"><a href="#路由跳转" class="headerlink" title="路由跳转"></a>路由跳转</h3><p>html跳转</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">跳转到index下的子路由news<br><span class="hljs-section">&lt;router-link to=&quot;/index/news&quot;&gt;demo&lt;/router-link&gt;</span><br><span class="hljs-section">===</span><br>&lt;router-link :to=&quot;&#123;name:<span class="hljs-emphasis">&#x27;news&#x27;</span>&#125;&quot; &gt;新闻列表&lt;/router-link&gt;<br>注意 坑    这里是单花括号<br></code></pre></td></tr></table></figure><p>方法跳转</p><p>方法this.$router.push(‘&#x2F;‘)</p><h2 id="路由传参"><a href="#路由传参" class="headerlink" title="路由传参"></a>路由传参</h2><p>注意：和name配对的是params，和path配对的是query</p><h3 id="params传参"><a href="#params传参" class="headerlink" title="params传参"></a>params传参</h3><p>命名路由传参params</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">this.<span class="hljs-variable">$router</span>.<span class="hljs-title function_ invoke__">push</span>(&#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;news&#x27;</span>, <span class="hljs-attr">params</span>: &#123; <span class="hljs-attr">userId</span>: <span class="hljs-number">123</span> &#125;&#125;)<br></code></pre></td></tr></table></figure><p>接受参数</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">this.<span class="hljs-variable">$route</span><span class="hljs-selector-class">.params</span><span class="hljs-selector-class">.userId</span><br><br></code></pre></td></tr></table></figure><h3 id="query传参"><a href="#query传参" class="headerlink" title="query传参"></a>query传参</h3><p>命名路由传参params</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">this.<span class="hljs-variable">$router</span>.<span class="hljs-title function_ invoke__">push</span>(&#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/news&#x27;</span>, <span class="hljs-attr">query</span>: &#123; <span class="hljs-attr">userId</span>: <span class="hljs-number">123</span> &#125;&#125;);接受参数<br></code></pre></td></tr></table></figure><p>接受参数</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-built_in">this</span>.<span class="hljs-variable">$route</span>.query.userId<br></code></pre></td></tr></table></figure><p>router-link写法</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">:to</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123; name: &#x27;news&#x27;, params: &#123; userId: 1111&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&#125;&quot;</span>&gt;</span>click to news page<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>1.命名路由搭配params，刷新页面参数会丢失<br>2.查询参数搭配query，刷新页面数据不会丢失<br>3.接受参数使用this.$router后面就是搭配路由的名称就能获取到参数的值</p><blockquote><p>传参跳转this.$router.push<br>接受参数this.$route</p></blockquote><h2 id="新打开页面跳转"><a href="#新打开页面跳转" class="headerlink" title="新打开页面跳转"></a>新打开页面跳转</h2><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs xquery"><span class="hljs-keyword">let</span> routeUrl = this.<span class="hljs-variable">$router</span>.resolve(&#123;<br><span class="hljs-built_in"></span><br><span class="hljs-built_in">path</span>: <span class="hljs-string">&quot;/share&quot;</span>,<br><br>query: <span class="hljs-built_in">&#123;id</span>:<span class="hljs-number">96</span>&#125;<br><br>&#125;);<br><br><span class="hljs-keyword">window</span>.open(routeUrl.href, <span class="hljs-string">&#x27;_blank&#x27;</span>);<br><br><br>案例<br>// this.<span class="hljs-variable">$router</span>.push(&#123;<br>      //  <span class="hljs-built_in"> path</span>: <span class="hljs-string">&quot;/postManagement/jobDetails&quot;</span>,<br>      //   query: &#123;<span class="hljs-built_in"> id</span>:<span class="hljs-built_in"> id</span> &#125;,<br>      // &#125;);<br>      <span class="hljs-keyword">let</span> routeData = this.<span class="hljs-variable">$router</span>.resolve(&#123;<br>       <span class="hljs-built_in"> path</span>: <span class="hljs-string">&quot;/postManagement/jobDetails&quot;</span>,<br>        query: &#123;<br>         <span class="hljs-built_in"> id</span>:<span class="hljs-built_in"> id</span><br>        &#125;,<br>      &#125;);<br>      <span class="hljs-keyword">window</span>.open(routeData.href, <span class="hljs-string">&#x27;_blank&#x27;</span>);<br><br><br></code></pre></td></tr></table></figure><p>this.$router.replace() (用法同上,push)</p><p>路由前进后退</p><p>this.$router.go(n) ()</p><h2 id="路由监听"><a href="#路由监听" class="headerlink" title="路由监听"></a>路由监听</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus">watch: &#123;<br>           <span class="hljs-variable">$route</span> (route) &#123;<br>               this<span class="hljs-selector-class">.activePath</span> = route<span class="hljs-selector-class">.path</span><br>               this<span class="hljs-selector-class">.activeClassAPath</span> = route<span class="hljs-selector-class">.path</span><br>           &#125;<br>       &#125;,<br></code></pre></td></tr></table></figure><h2 id="路由守卫"><a href="#路由守卫" class="headerlink" title="路由守卫"></a>路由守卫</h2><h3 id="全局前置守卫"><a href="#全局前置守卫" class="headerlink" title="全局前置守卫"></a>全局前置守卫</h3><p>你可以使用 <code>router.beforeEach</code> 注册一个全局前置守卫： </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> router = <span class="hljs-title function_">createRouter</span>(&#123; ... &#125;)<br><br>router.<span class="hljs-title function_">beforeEach</span>(<span class="hljs-function">(<span class="hljs-params">to, <span class="hljs-keyword">from</span></span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// ...</span><br>  <span class="hljs-comment">// 返回 false 以取消导航</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;)<br></code></pre></td></tr></table></figure><p>当一个导航触发时，全局前置守卫按照创建顺序调用。守卫是异步解析执行，此时导航在所有守卫 resolve 完之前一直处于<strong>等待中</strong>。</p><p>每个守卫方法接收两个参数：</p><ul><li><strong>to</strong>: 即将要进入的目标 <a href="https://router.vuejs.org/zh/api/#routelocationnormalized">用一种标准化的方式</a></li><li><strong>from</strong>: 当前导航正要离开的路由 <a href="https://router.vuejs.org/zh/api/#routelocationnormalized">用一种标准化的方式</a></li></ul><p>可以返回的值如下:</p><ul><li><code>false</code>: 取消当前的导航。如果浏览器的 URL 改变了(可能是用户手动或者浏览器后退按钮)，那么 URL 地址会重置到 <code>from</code> 路由对应的地址。</li><li>一个<a href="https://router.vuejs.org/zh/api/#routelocationraw">路由地址</a>: 通过一个路由地址重定向到一个不同的地址，如同调用 <code>router.push()</code>，且可以传入诸如 <code>replace: true</code> 或 <code>name: &#39;home&#39;</code> 之类的选项。它会中断当前的导航，同时用相同的 <code>from</code> 创建一个新导航。</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs csharp">router.beforeEach(<span class="hljs-keyword">async</span> (to, <span class="hljs-keyword">from</span>) =&gt; &#123;<br>  <span class="hljs-keyword">if</span> (<br>    <span class="hljs-comment">// 检查用户是否已登录</span><br>    !isAuthenticated &amp;&amp;<br>    <span class="hljs-comment">// ❗️ 避免无限重定向</span><br>    to.name !== <span class="hljs-string">&#x27;Login&#x27;</span><br>  ) &#123;<br>    <span class="hljs-comment">// 将用户重定向到登录页面</span><br>    <span class="hljs-keyword">return</span> &#123; name: <span class="hljs-string">&#x27;Login&#x27;</span> &#125;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>如果遇到了意料之外的情况，可能会抛出一个 <code>Error</code>。这会取消导航并且调用 <a href="https://router.vuejs.org/zh/api/interfaces/Router.html#onError"><code>router.onError()</code></a> 注册过的回调。</p><p>如果什么都没有，<code>undefined</code> 或返回 <code>true</code>，<strong>则导航是有效的</strong>，并调用下一个导航守卫</p><p>以上所有都同 <strong>async 函数</strong> 和 Promise 工作方式一样：</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs autoit">router.beforeEach(async (<span class="hljs-keyword">to</span>, from) =&gt; &#123;<br>  // canUserAccess() 返回 `<span class="hljs-literal">true</span>` 或 `<span class="hljs-literal">false</span>`<br>  <span class="hljs-keyword">const</span> canAccess = await canUserAccess(<span class="hljs-keyword">to</span>)<br>  <span class="hljs-keyword">if</span> (!canAccess) <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;/login&#x27;</span><br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="可选的第三个参数"><a href="#可选的第三个参数" class="headerlink" title="可选的第三个参数"></a>可选的第三个参数</h3><p>在之前的 Vue Router 版本中，还可以使用 <em>第三个参数</em> <code>next</code> 。这是一个常见的错误来源，我们经过 <a href="https://github.com/vuejs/rfcs/blob/master/active-rfcs/0037-router-return-guards.md#motivation">RFC</a> 讨论将其移除。然而，它仍然是被支持的，这意味着你可以向任何导航守卫传递第三个参数。在这种情况下，<strong>确保 next</strong> 在任何给定的导航守卫中都被<strong>严格调用一次</strong>。它可以出现多于一次，但是只能在所有的逻辑路径都不重叠的情况下，否则钩子永远都不会被解析或报错。这里有一个在用户未能验证身份时重定向到<code>/login</code>的<strong>错误用例</strong>： </p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">// BAD<br>router.beforeEach(<span class="hljs-function"><span class="hljs-params">(to, <span class="hljs-keyword">from</span>, <span class="hljs-built_in">next</span>)</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (to.name !== <span class="hljs-string">&#x27;Login&#x27;</span> &amp;&amp; !isAuthenticated) <span class="hljs-built_in">next</span>(&#123; <span class="hljs-name">name</span>: <span class="hljs-string">&#x27;Login&#x27;</span> &#125;)<br>  // 如果用户未能验证身份，则 `<span class="hljs-built_in">next</span>` 会被调用两次<br>  <span class="hljs-built_in">next</span>()<br>&#125;)<br></code></pre></td></tr></table></figure><p>下面是正确的版本: </p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">// GOOD<br>router.beforeEach(<span class="hljs-function"><span class="hljs-params">(to, <span class="hljs-keyword">from</span>, <span class="hljs-built_in">next</span>)</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (to.name !== <span class="hljs-string">&#x27;Login&#x27;</span> &amp;&amp; !isAuthenticated) <span class="hljs-built_in">next</span>(&#123; <span class="hljs-name">name</span>: <span class="hljs-string">&#x27;Login&#x27;</span> &#125;)<br>  <span class="hljs-keyword">else</span> <span class="hljs-built_in">next</span>()<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="全局解析守卫"><a href="#全局解析守卫" class="headerlink" title="全局解析守卫"></a>全局解析守卫</h3><p>你可以用 <code>router.beforeResolve</code> 注册一个全局守卫。这和 <code>router.beforeEach</code> 类似，因为它在<strong>每次导航</strong>时都会触发，不同的是，解析守卫刚好会在导航被确认之前、<strong>所有组件内守卫和异步路由组件被解析之后</strong>调用。这里有一个例子，确保用户可以访问<a href="https://router.vuejs.org/zh/guide/advanced/meta.html">自定义 meta</a> 属性 <code>requiresCamera</code> 的路由： </p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs aspectj">router.beforeResolve(async to =&gt; &#123;<br>  <span class="hljs-keyword">if</span> (to.meta.requiresCamera) &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      await askForCameraPermission()<br>    &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-keyword">error</span>) &#123;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">error</span> <span class="hljs-keyword">instanceof</span> NotAllowedError) &#123;<br>        <span class="hljs-comment">// ... 处理错误，然后取消导航</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span><br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 意料之外的错误，取消导航并把错误传给全局处理器</span><br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">error</span><br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p><code>router.beforeResolve</code> 是获取数据或执行任何其他操作（如果用户无法进入页面时你希望避免执行的操作）的理想位置。 </p><h3 id="全局后置钩子"><a href="#全局后置钩子" class="headerlink" title="全局后置钩子"></a>全局后置钩子</h3><p>你也可以注册全局后置钩子，然而和守卫不同的是，这些钩子不会接受 <code>next</code> 函数也不会改变导航本身： </p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">router.afterEach(<span class="hljs-function"><span class="hljs-params">(to, <span class="hljs-keyword">from</span>)</span> =&gt;</span> &#123;<br>  sendToAnalytics(to.fullPath)<br>&#125;)<br></code></pre></td></tr></table></figure><p>它们对于分析、更改页面标题、声明页面等辅助功能以及许多其他事情都很有用。</p><p>它们也反映了 <a href="https://router.vuejs.org/zh/guide/advanced/navigation-failures.html">navigation failures</a> 作为第三个参数：</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">router.afterEach(<span class="hljs-function"><span class="hljs-params">(to, <span class="hljs-keyword">from</span>, failure)</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (!failure) sendToAnalytics(to.fullPath)<br>&#125;)<br></code></pre></td></tr></table></figure><p>了解更多关于 navigation failures 的信息在<a href="https://router.vuejs.org/zh/guide/advanced/navigation-failures.html">它的指南</a>中。 </p>]]></content>
    
    
    <categories>
      
      <category>vue笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>chrome调试插件</title>
    <link href="/hexodemo/2024/03/12/chrome%E8%B0%83%E8%AF%95%E6%8F%92%E4%BB%B6/"/>
    <url>/hexodemo/2024/03/12/chrome%E8%B0%83%E8%AF%95%E6%8F%92%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="Vue-js-devtools"><a href="#Vue-js-devtools" class="headerlink" title="Vue.js devtools"></a>Vue.js devtools</h2><p>去google 更多工具  拓展程序 添加Vue.js devtools</p><h3 id="常用调试方法"><a href="#常用调试方法" class="headerlink" title="常用调试方法"></a>常用调试方法</h3><h4 id="console-log"><a href="#console-log" class="headerlink" title="console.log()"></a>console.log()</h4><h4 id="console-error"><a href="#console-error" class="headerlink" title="console.error()"></a>console.error()</h4><h4 id="alert"><a href="#alert" class="headerlink" title="alert()"></a>alert()</h4><h4 id="debugger"><a href="#debugger" class="headerlink" title="debugger"></a>debugger</h4><p>js中debugger 调试</p><p>debugger：停止JS的执行，相当于设置断点。 在JS代码编写的过程中，我们都会通过浏览器的调试模式（F12）来检查代码是否正确，大多数我们都是通过设置断点来进行调试。 打开浏览器按F12：</p><p><img src="http://img-blog.csdnimg.cn/2019120814473932.png"> </p><p>在12行设置断点（鼠标点击12）： </p><p><img src="https://img-blog.csdnimg.cn/2019120814473932.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dsbF93ZWI=,size_16,color_FFFFFF,t_70"></p><p>按F5刷新界面（当前浏览器会执行你设置断点的位置的时候）： </p><p><img src="https://img-blog.csdnimg.cn/20191208144948771.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dsbF93ZWI=,size_16,color_FFFFFF,t_70"></p><p>然后按F10一步一步执行下去，这是我们传统的JS调试方法，但是如果遇见JS代码过多并且杂乱的时候（比如上千行的时候），我们自己找位置设置断点的时候就会发现每次都要向下滑一会儿；要么就ctrl+F查找（可能出现相同的变量等等情况）；或者记住当前代码编写的行数位置，再在浏览器调试模式中滑到相应的位置设置断点，总感觉很烦。</p><p>这个时候我们就可以使用JS中提供的debugger语句：</p><p><img src="https://img-blog.csdnimg.cn/20191208150141359.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dsbF93ZWI=,size_16,color_FFFFFF,t_70"></p><p>按F5刷新： </p><p><img src="https://img-blog.csdnimg.cn/20191208150555983.gif"></p><p>————————————————</p><p>slow 3G</p><p>f12右上角，可以缓慢加载，查看状况</p><p>cdn  引用vue的时候 f12里app.某一项数据</p>]]></content>
    
    
    <categories>
      
      <category>Google</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Google</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue随笔_过度动画</title>
    <link href="/hexodemo/2024/03/12/vue%E9%9A%8F%E7%AC%94_%E8%BF%87%E5%BA%A6%E5%8A%A8%E7%94%BB/"/>
    <url>/hexodemo/2024/03/12/vue%E9%9A%8F%E7%AC%94_%E8%BF%87%E5%BA%A6%E5%8A%A8%E7%94%BB/</url>
    
    <content type="html"><![CDATA[<p>在 CSS 过渡和动画中自动应用 class<br>可以配合使用第三方 CSS 动画库，如 Animate.css<br>在过渡钩子函数中使用 JavaScript 直接操作 DOM<br>可以配合使用第三方 JavaScript 动画库，如 Velocity.js</p><h2 id="进入-离开-列表过渡"><a href="#进入-离开-列表过渡" class="headerlink" title="进入&#x2F;离开 &amp; 列表过渡"></a>进入&#x2F;离开 &amp; 列表过渡</h2><p>​条件渲染 (使用 v-if)<br>    条件展示 (使用 v-show)<br>    单元素&#x2F;组件的过渡</p><h3 id="过渡的类名"><a href="#过渡的类名" class="headerlink" title="过渡的类名"></a>过渡的类名</h3><p>v-enter：定义进入过渡的开始状态。在元素被插入之前生效，在元素被插入之后的下一帧移除。</p><p>v-enter-active：定义进入过渡生效时的状态。在整个进入过渡的阶段中应用，在元素被插入之前生效，在过渡&#x2F;动画完成之后移除。这个类可以被用来定义进入过渡的过程时间，延迟和曲线函数。</p><p>v-enter-to：2.1.8 版及以上定义进入过渡的结束状态。在元素被插入之后下一帧生效 (与此同时 v-enter 被移除)，在过渡&#x2F;动画完成之后移除。</p><p>v-leave：定义离开过渡的开始状态。在离开过渡被触发时立刻生效，下一帧被移除。</p><p>v-leave-active：定义离开过渡生效时的状态。在整个离开过渡的阶段中应用，在离开过渡被触发时立刻生效，在过渡&#x2F;动画完成之后移除。这个类可以被用来定义离开过渡的过程时间，延迟和曲线函数。</p><p>v-leave-to：2.1.8 版及以上定义离开过渡的结束状态。在离开过渡被触发之后下一帧生效 (与此同时 v-leave 被删除)，在过渡&#x2F;动画完成之后移除。</p><h3 id="CSS-过渡"><a href="#CSS-过渡" class="headerlink" title="CSS 过渡"></a>CSS 过渡</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.slide-fade-enter-active</span> &#123;<br>  <span class="hljs-attribute">transition</span>: all .<span class="hljs-number">3s</span> ease;<br>&#125;<br><span class="hljs-selector-class">.slide-fade-leave-active</span> &#123;<br>  <span class="hljs-attribute">transition</span>: all .<span class="hljs-number">8s</span> <span class="hljs-built_in">cubic-bezier</span>(<span class="hljs-number">1.0</span>, <span class="hljs-number">0.5</span>, <span class="hljs-number">0.8</span>, <span class="hljs-number">1.0</span>);<br>&#125;<br><span class="hljs-selector-class">.slide-fade-enter</span>, <span class="hljs-selector-class">.slide-fade-leave-to</span><br><span class="hljs-comment">/* .slide-fade-leave-active for below version 2.1.8 */</span> &#123;<br>  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(<span class="hljs-number">10px</span>);<br>  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="CSS-动画"><a href="#CSS-动画" class="headerlink" title="CSS 动画"></a>CSS 动画</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.bounce-enter-active</span> &#123;<br>  <span class="hljs-attribute">animation</span>: bounce-in .<span class="hljs-number">5s</span>;<br>&#125;<br><span class="hljs-selector-class">.bounce-leave-active</span> &#123;<br>  <span class="hljs-attribute">animation</span>: bounce-in .<span class="hljs-number">5s</span> reverse;<br>&#125;<br><span class="hljs-keyword">@keyframes</span> bounce-in &#123;<br>  <span class="hljs-number">0%</span> &#123;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scale</span>(<span class="hljs-number">0</span>);<br>  &#125;<br>  <span class="hljs-number">50%</span> &#123;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scale</span>(<span class="hljs-number">1.5</span>);<br>  &#125;<br>  <span class="hljs-number">100%</span> &#123;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scale</span>(<span class="hljs-number">1</span>);<br>  &#125;<br>&#125;<br><br> <span class="hljs-attribute">animation</span>: bounce-in .<span class="hljs-number">5s</span> forwards;<br>forwards;  动画结束停留下最后一帧<br>reverse;  反向播放<br></code></pre></td></tr></table></figure><p>自定义过渡的类名<br>JavaScript 钩子</p><h3 id="过渡模式"><a href="#过渡模式" class="headerlink" title="过渡模式"></a>过渡模式</h3><p>in-out：新元素先进行过渡，完成之后当前元素过渡离开。</p><p>out-in：当前元素先进行过渡，完成之后新元素过渡进入。</p><p>用 out-in 重写之前的开关按钮过渡：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml">列表的进入/离开过渡<span class="hljs-tag">&lt;<span class="hljs-name">transition-group</span>&gt;</span><br>列表的排序过渡<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>vue笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue_事件处理</title>
    <link href="/hexodemo/2024/03/12/vue_%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86/"/>
    <url>/hexodemo/2024/03/12/vue_%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h1><h2 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h2><p>可以用 <code>v-on</code> 指令监听 DOM 事件，并在触发时运行一些 JavaScript 代码。</p><p>示例：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;example-1&quot;</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;counter += 1&quot;</span>&gt;</span>Add 1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>The button above has been clicked </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">counter</span> &#125;&#125;</span><span class="language-xml"> times.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></code></pre></td></tr></table></figure><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">var</span> example1 = <span class="hljs-keyword">new</span> <span class="hljs-type">Vue</span>(&#123;<br>  el: <span class="hljs-type"></span>&#x27;<span class="hljs-meta">#example-1&#x27;,</span><br>  data: <span class="hljs-type"></span>&#123;<br>    counter: <span class="hljs-type">0</span><br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="事件处理方法"><a href="#事件处理方法" class="headerlink" title="事件处理方法"></a>事件处理方法</h2><p>然而许多事件处理逻辑会更为复杂，所以直接把 JavaScript 代码写在 <code>v-on</code> 指令中是不可行的。因此 <code>v-on</code> 还可以接收一个需要调用的方法名称。 </p><p>示例： </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;example-2&quot;</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- `greet` 是在下面定义的方法名 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;greet&quot;</span>&gt;</span>Greet<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-tag">var</span> example2 = new <span class="hljs-built_in">Vue</span>(&#123;<br>  el: <span class="hljs-string">&#x27;#example-2&#x27;</span>,<br>  data: &#123;<br>    name: <span class="hljs-string">&#x27;Vue.js&#x27;</span><br>  &#125;,<br>  <span class="hljs-comment">// 在 `methods` 对象中定义方法</span><br>  methods: &#123;<br>    greet: function (event) &#123;<br>      <span class="hljs-comment">// `this` 在方法里指向当前 Vue 实例</span><br>      <span class="hljs-built_in">alert</span>(<span class="hljs-string">&#x27;Hello &#x27;</span> + this<span class="hljs-selector-class">.name</span> + <span class="hljs-string">&#x27;!&#x27;</span>)<br>      <span class="hljs-comment">// `event` 是原生 DOM 事件</span><br>      <span class="hljs-keyword">if</span> (event) &#123;<br>        <span class="hljs-built_in">alert</span>(event<span class="hljs-selector-class">.target</span>.tagName)<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;)<br><br><span class="hljs-comment">// 也可以用 JavaScript 直接调用方法</span><br>example2<span class="hljs-selector-class">.greet</span>() <span class="hljs-comment">// =&gt; &#x27;Hello Vue.js!&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="内联处理器中的方法"><a href="#内联处理器中的方法" class="headerlink" title="内联处理器中的方法"></a>内联处理器中的方法</h2><p>除了直接绑定到一个方法，也可以在内联 JavaScript 语句中调用方法： </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;example-3&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;say(&#x27;hi&#x27;)&quot;</span>&gt;</span>Say hi<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;say(&#x27;what&#x27;)&quot;</span>&gt;</span>Say what<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">new</span> Vue(&#123;<br>  el: <span class="hljs-string">&#x27;#example-3&#x27;</span>,<br>  methods: &#123;<br>    say: <span class="hljs-keyword">function</span> <span class="hljs-params">(message)</span> &#123;<br>      alert(message)<br>    &#125;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>有时也需要在内联语句处理器中访问原始的 DOM 事件。可以用特殊变量 <code>$event</code> 把它传入方法 </p><figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs hsp">&lt;<span class="hljs-keyword">button</span> v-<span class="hljs-keyword">on</span>:click=<span class="hljs-string">&quot;warn(&#x27;Form cannot be submitted yet.&#x27;, $event)&quot;</span>&gt;<br>  Submit<br>&lt;/<span class="hljs-keyword">button</span>&gt;<br></code></pre></td></tr></table></figure><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-comment">// ...</span><br>methods: &#123;<br>  warn: function (message, event) &#123;<br>    <span class="hljs-comment">// 现在我们可以访问原生事件对象</span><br>    if (event) &#123;<br>      event<span class="hljs-selector-class">.preventDefault</span>()<br>    &#125;<br>    <span class="hljs-built_in">alert</span>(message)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h2><p>在事件处理程序中调用 <code>event.preventDefault()</code> 或 <code>event.stopPropagation()</code> 是非常常见的需求。尽管我们可以在方法中轻松实现这点，但更好的方式是：方法只有纯粹的数据逻辑，而不是去处理 DOM 事件细节。</p><p>为了解决这个问题，Vue.js 为 <code>v-on</code> 提供了<strong>事件修饰符</strong>。之前提过，修饰符是由点开头的指令后缀来表示的。</p><ul><li><code>.stop</code></li><li><code>.prevent</code></li><li><code>.capture</code></li><li><code>.self</code></li><li><code>.once</code></li><li><code>.passive</code></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 阻止单击事件继续传播 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">v-on:click.stop</span>=<span class="hljs-string">&quot;doThis&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 提交事件不再重载页面 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">v-on:submit.prevent</span>=<span class="hljs-string">&quot;onSubmit&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 修饰符可以串联 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">v-on:click.stop.prevent</span>=<span class="hljs-string">&quot;doThat&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 只有修饰符 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">v-on:submit.prevent</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 添加事件监听器时使用事件捕获模式 --&gt;</span><br><span class="hljs-comment">&lt;!-- 即内部元素触发的事件先在此处理，然后才交由内部元素进行处理 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-on:click.capture</span>=<span class="hljs-string">&quot;doThis&quot;</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 只当在 event.target 是当前元素自身时触发处理函数 --&gt;</span><br><span class="hljs-comment">&lt;!-- 即事件不是从内部元素触发的 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-on:click.self</span>=<span class="hljs-string">&quot;doThat&quot;</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 点击事件将只会触发一次 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">v-on:click.once</span>=<span class="hljs-string">&quot;doThis&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 滚动事件的默认行为 (即滚动行为) 将会立即触发 --&gt;</span><br><span class="hljs-comment">&lt;!-- 而不会等待 `onScroll` 完成  --&gt;</span><br><span class="hljs-comment">&lt;!-- 这其中包含 `event.preventDefault()` 的情况 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-on:scroll.passive</span>=<span class="hljs-string">&quot;onScroll&quot;</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>使用修饰符时，顺序很重要；相应的代码会以同样的顺序产生。因此，用 <code>v-on:click.prevent.self</code> 会阻止<strong>所有的点击</strong>，而 <code>v-on:click.self.prevent</code> 只会阻止对元素自身的点击。 </p><blockquote><p>不要把 <code>.passive</code> 和 <code>.prevent</code> 一起使用，因为 <code>.prevent</code> 将会被忽略，同时浏览器可能会向你展示一个警告。请记住，<code>.passive</code> 会告诉浏览器你<em>不</em>想阻止事件的默认行为。 </p></blockquote><h2 id="按键修饰符"><a href="#按键修饰符" class="headerlink" title="按键修饰符"></a>按键修饰符</h2><p>在监听键盘事件时，我们经常需要检查详细的按键。Vue 允许为 <code>v-on</code> 在监听键盘事件时添加按键修饰符： </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 只有在 `key` 是 `Enter` 时调用 `vm.submit()` --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-on:keyup.enter</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>你可以直接将 <a href="https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values"><code>KeyboardEvent.key</code></a> 暴露的任意有效按键名转换为 kebab-case 来作为修饰符。 </p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sas">&lt;<span class="hljs-keyword">input</span> v-<span class="hljs-keyword">on</span>:keyup.<span class="hljs-keyword">page</span>-down=<span class="hljs-string">&quot;onPageDown&quot;</span>&gt;<br></code></pre></td></tr></table></figure><p>在上述示例中，处理函数只会在 <code>$event.key</code> 等于 <code>PageDown</code> 时被调用。 </p><p>为了在必要的情况下支持旧浏览器，Vue 提供了绝大多数常用的按键码的别名：</p><ul><li><code>.enter</code></li><li><code>.tab</code></li><li><code>.delete</code> (捕获“删除”和“退格”键)</li><li><code>.esc</code></li><li><code>.space</code></li><li><code>.up</code></li><li><code>.down</code></li><li><code>.left</code></li><li><code>.right</code></li></ul><p>有一些按键 (<code>.esc</code> 以及所有的方向键) 在 IE9 中有不同的 <code>key</code> 值, 如果你想支持 IE9，这些内置的别名应该是首选。 </p><p>你还可以通过全局 <code>config.keyCodes</code> 对象<a href="https://v2.cn.vuejs.org/v2/api/#keyCodes">自定义按键修饰符别名</a>： </p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">// 可以使用 `v-on:keyup.f1`</span><br>Vue<span class="hljs-selector-class">.config</span><span class="hljs-selector-class">.keyCodes</span><span class="hljs-selector-class">.f1</span> = <span class="hljs-number">112</span><br></code></pre></td></tr></table></figure><h2 id="系统修饰键"><a href="#系统修饰键" class="headerlink" title="系统修饰键"></a>系统修饰键</h2><p>可以用如下修饰符来实现仅在按下相应按键时才触发鼠标或键盘事件的监听器。</p><ul><li><code>.ctrl</code></li><li><code>.alt</code></li><li><code>.shift</code></li><li><code>.meta</code></li></ul><p>注意：在 Mac 系统键盘上，meta 对应 command 键 (⌘)。在 Windows 系统键盘 meta 对应 Windows 徽标键 (⊞)。在 Sun 操作系统键盘上，meta 对应实心宝石键 (◆)。在其他特定键盘上，尤其在 MIT 和 Lisp 机器的键盘、以及其后继产品，比如 Knight 键盘、space-cadet 键盘，meta 被标记为“META”。在 Symbolics 键盘上，meta 被标记为“META”或者“Meta </p><p>例如： </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Alt + C --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-on:keyup.alt.67</span>=<span class="hljs-string">&quot;clear&quot;</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- Ctrl + Click --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-on:click.ctrl</span>=<span class="hljs-string">&quot;doSomething&quot;</span>&gt;</span>Do something<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>请注意修饰键与常规按键不同，在和 <code>keyup</code> 事件一起用时，事件触发时修饰键必须处于按下状态。换句话说，只有在按住 <code>ctrl</code> 的情况下释放其它按键，才能触发 <code>keyup.ctrl</code>。而单单释放 <code>ctrl</code> 也不会触发事件。如果你想要这样的行为，请为 <code>ctrl</code> 换用 <code>keyCode</code>：<code>keyup.17</code>。 </p><h2 id="exact修饰符"><a href="#exact修饰符" class="headerlink" title="exact修饰符"></a>exact修饰符</h2><p><code>.exact</code> 修饰符允许你控制由精确的系统修饰符组合触发的事件。 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 即使 Alt 或 Shift 被一同按下时也会触发 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click.ctrl</span>=<span class="hljs-string">&quot;onClick&quot;</span>&gt;</span>A<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 有且只有 Ctrl 被按下的时候才触发 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click.ctrl.exact</span>=<span class="hljs-string">&quot;onCtrlClick&quot;</span>&gt;</span>A<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 没有任何系统修饰符被按下的时候才触发 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click.exact</span>=<span class="hljs-string">&quot;onClick&quot;</span>&gt;</span>A<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="加事件对象加参数"><a href="#加事件对象加参数" class="headerlink" title="加事件对象加参数"></a>加事件对象加参数</h2><p>@click&#x3D;”tm($event,参数)”</p><p>methods:{<br>      tm:function(e,value){<br>        console.log(e);<br>        console.log(value);<br>    }</p>]]></content>
    
    
    <categories>
      
      <category>vue笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue_条件渲染</title>
    <link href="/hexodemo/2024/03/12/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_%E6%9D%A1%E4%BB%B6%E6%B8%B2%E6%9F%93/"/>
    <url>/hexodemo/2024/03/12/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_%E6%9D%A1%E4%BB%B6%E6%B8%B2%E6%9F%93/</url>
    
    <content type="html"><![CDATA[<h4 id=""><a href="#" class="headerlink" title=""></a></h4><h2 id="条件与循环"><a href="#条件与循环" class="headerlink" title="条件与循环"></a>条件与循环</h2><h3 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h3><h3 id="v-if和v-else和v-else-if"><a href="#v-if和v-else和v-else-if" class="headerlink" title="v-if和v-else和v-else-if"></a>v-if和v-else和v-else-if</h3><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs applescript">v-<span class="hljs-keyword">if</span> 指令用于条件性地渲染一块内容。这块内容只会在指令的表达式返回 truthy 值的时候被渲染。<br><br>&lt;h1 v-<span class="hljs-keyword">if</span>=<span class="hljs-string">&quot;awesome&quot;</span>&gt;Vue <span class="hljs-keyword">is</span> awesome!&lt;/h1&gt;<br>也可以用 v-<span class="hljs-keyword">else</span> 添加一个“<span class="hljs-keyword">else</span> 块”：<br><br>&lt;h1 v-<span class="hljs-keyword">if</span>=<span class="hljs-string">&quot;awesome&quot;</span>&gt;Vue <span class="hljs-keyword">is</span> awesome!&lt;/h1&gt;<br>&lt;h1 v-<span class="hljs-keyword">else</span>&gt;Oh no 😢&lt;/h1&gt;<br><br>&lt;<span class="hljs-keyword">div</span> v-<span class="hljs-keyword">if</span>=<span class="hljs-string">&quot;type === &#x27;A&#x27;&quot;</span>&gt;<br>  A<br>&lt;/<span class="hljs-keyword">div</span>&gt;<br>&lt;<span class="hljs-keyword">div</span> v-<span class="hljs-keyword">else</span>-<span class="hljs-keyword">if</span>=<span class="hljs-string">&quot;type === &#x27;B&#x27;&quot;</span>&gt;<br>  B<br>&lt;/<span class="hljs-keyword">div</span>&gt;<br>&lt;<span class="hljs-keyword">div</span> v-<span class="hljs-keyword">else</span>-<span class="hljs-keyword">if</span>=<span class="hljs-string">&quot;type === &#x27;C&#x27;&quot;</span>&gt;<br>  C<br>&lt;/<span class="hljs-keyword">div</span>&gt;<br>&lt;<span class="hljs-keyword">div</span> v-<span class="hljs-keyword">else</span>&gt;<br>  Not A/B/C<br>&lt;/<span class="hljs-keyword">div</span>&gt;<br></code></pre></td></tr></table></figure><h3 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h3><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs maxima">另一个用于根据条件展示元素的选项是 v-<span class="hljs-built_in">show</span> 指令。用法大致一样：<br><br>&lt;h1 v-<span class="hljs-built_in">show</span>=<span class="hljs-string">&quot;ok&quot;</span>&gt;Hello!&lt;/h1&gt;<br>不同的是带有 v-<span class="hljs-built_in">show</span> 的元素始终会被渲染并保留在 DOM 中。v-<span class="hljs-built_in">show</span> 只是简单地切换元素的 CSS property <span class="hljs-built_in">display</span>。<br><br>注意，v-<span class="hljs-built_in">show</span> 不支持 &lt;template&gt; 元素，也不支持 v-<span class="hljs-keyword">else</span>。<br></code></pre></td></tr></table></figure><h3 id="v-if-vs-v-show"><a href="#v-if-vs-v-show" class="headerlink" title="v-if vs v-show"></a>v-if vs v-show</h3><p>一个是否渲染，一个是否显示</p><h3 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h3><p>v-for的四种使用方法分别是： </p><p>1.使用v-for循环一个简单的数组</p><p> 2.使用v-for循环一个复杂的数组 </p><p>3.使用v-for循环对象 </p><p>4.v-for循环一个迭代的数字 </p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-comment">&lt;!--v-for循环一个简单的数组--&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in list&quot;</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">item</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">P</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item ,i) in list&quot;</span>&gt;</span>索引值：</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">i</span>&#125;&#125;</span><span class="language-xml">---每一项：</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">item</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">P</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-comment">&lt;!--v-for循环一个复杂的数组--&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item,i) in list1&quot;</span>&gt;</span>索引值：</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">i</span>&#125;&#125;</span><span class="language-xml">--id：</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">item.userid</span>&#125;&#125;</span><span class="language-xml">---姓名：</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">item.username</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-comment">&lt;!--v-for循环一个对象--&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(val,key,i) in list2&quot;</span>&gt;</span>id：</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">val</span>&#125;&#125;</span><span class="language-xml">,name:</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">key</span>&#125;&#125;</span><span class="language-xml">,index:</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">i</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-comment">&lt;!--v-for 循环一个迭代数字--&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;count in 10&quot;</span>&gt;</span>这是第</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">count</span>&#125;&#125;</span><span class="language-xml">次循环<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml"></span><br></code></pre></td></tr></table></figure><h3 id="不推荐v-if-与-v-for-一起使用"><a href="#不推荐v-if-与-v-for-一起使用" class="headerlink" title="不推荐v-if 与 v-for 一起使用"></a>不推荐v-if 与 v-for 一起使用</h3><p>当它们处于同一节点，v-for 的优先级比 v-if 更高，这意味着 v-if 将分别重复运行于每个 v-for 循环中。当你只想为部分项渲染节点时，这种优先级的机制会十分有用，如下：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;todo in todos&quot;</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;!todo.isComplete&quot;</span>&gt;</span></span><br><span class="language-xml">  </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">todo</span> &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>上面的代码将只渲染未完成的 todo。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">而如果你的目的是有条件地跳过循环的执行，那么可以将 v-<span class="hljs-keyword">if</span> 置于外层元素 (或 &lt;<span class="hljs-keyword">template</span>&gt;) 上。如：<br></code></pre></td></tr></table></figure><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;todos.length&quot;</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;todo in todos&quot;</span>&gt;</span></span><br><span class="language-xml">    </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">todo</span> &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-else</span>&gt;</span>No todos left!<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h2><p>官方文档<br><a href="https://vuejs.bootcss.com/guide/list.html">https://vuejs.bootcss.com/guide/list.html</a></p><h3 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h3><h4 id="基础用法"><a href="#基础用法" class="headerlink" title="基础用法"></a>基础用法</h4><p>用 v-for 把一个数组对应为一组元素</p><p>我们可以用 v-for 指令基于一个数组来渲染一个列表。v-for 指令需要使用 item in items 形式的特殊语法，其中 items 是源数据数组，而 item 则是被迭代的数组元素的别名。</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xquery"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;example-1&quot;</span>&gt;</span></span><br><span class="language-xml">  </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in items&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;item.message&quot;</span>&gt;</span></span><br><span class="language-xml">    </span><span class="language-xquery">&#123;&#123; <span class="hljs-type">item</span>.message &#125;</span><span class="language-xml">&#125;</span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br>var example1 = new Vue(&#123;<br>  el: <span class="hljs-string">&#x27;#example-1&#x27;</span>,<br>  data: &#123;<br>    items: [<br>      &#123; message: <span class="hljs-string">&#x27;Foo&#x27;</span> &#125;,<br>      &#123; message: <span class="hljs-string">&#x27;Bar&#x27;</span> &#125;<br>    ]<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="第二参数，索引"><a href="#第二参数，索引" class="headerlink" title="第二参数，索引"></a>第二参数，索引</h4><p>在 v-for 块中，我们可以访问所有父作用域的 property。v-for 还支持一个可选的第二个参数，即当前项的索引。</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;example-2&quot;</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item, index) in items&quot;</span>&gt;</span></span><br><span class="language-xml">    </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">parentMessage</span> &#125;&#125;</span><span class="language-xml"> - </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">index</span> &#125;&#125;</span><span class="language-xml"> - </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">item.message</span> &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">var example2 = new Vue(&#123;</span><br><span class="language-xml">  el: &#x27;#example-2&#x27;,</span><br><span class="language-xml">  data: &#123;</span><br><span class="language-xml">    parentMessage: &#x27;Parent&#x27;,</span><br><span class="language-xml">    items: [</span><br><span class="language-xml">      &#123; message: &#x27;Foo&#x27; &#125;,</span><br><span class="language-xml">      &#123; message: &#x27;Bar&#x27; &#125;</span><br><span class="language-xml">    ]</span><br><span class="language-xml">  &#125;</span><br><span class="language-xml">&#125;)</span><br></code></pre></td></tr></table></figure><p>你也可以用 of 替代 in 作为分隔符，因为它更接近 JavaScript 迭代器的语法：</p><h3 id="遍历对象"><a href="#遍历对象" class="headerlink" title="遍历对象"></a>遍历对象</h3><h4 id="在-v-for-里使用对象"><a href="#在-v-for-里使用对象" class="headerlink" title="在 v-for 里使用对象"></a>在 v-for 里使用对象</h4><p>你也可以用 v-for 来遍历一个对象的 property。</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs haskell">&lt;ul id=<span class="hljs-string">&quot;v-for-object&quot;</span> <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;<br>  &lt;li v-for=<span class="hljs-string">&quot;value in object&quot;</span>&gt;<br>    &#123;&#123; value &#125;&#125;<br>  &lt;/li&gt;<br>&lt;/ul&gt;<br><span class="hljs-title">new</span> <span class="hljs-type">Vue</span>(&#123;<br>  el: &#x27;#v-for-object&#x27;,<br>  <span class="hljs-class"><span class="hljs-keyword">data</span>: &#123;</span><br><span class="hljs-class">    <span class="hljs-title">object</span>: &#123;</span><br><span class="hljs-class">      <span class="hljs-title">title</span>: &#x27;<span class="hljs-type">How</span> <span class="hljs-title">to</span> <span class="hljs-title">do</span> <span class="hljs-title">lists</span> <span class="hljs-title">in</span> <span class="hljs-type">Vue</span>&#x27;,</span><br><span class="hljs-class">      <span class="hljs-title">author</span>: &#x27;<span class="hljs-type">Jane</span> <span class="hljs-type">Doe</span>&#x27;,</span><br><span class="hljs-class">      <span class="hljs-title">publishedAt</span>: &#x27;2016-04-10&#x27;</span><br><span class="hljs-class">    &#125;</span><br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="第二参数-键名，第三参数-索引"><a href="#第二参数-键名，第三参数-索引" class="headerlink" title="第二参数:键名，第三参数:索引"></a>第二参数:键名，第三参数:索引</h4><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(value, name, index) in object&quot;</span>&gt;</span></span><br><span class="language-xml">  </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">index</span> &#125;&#125;</span><span class="language-xml">. </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">name</span> &#125;&#125;</span><span class="language-xml">: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">value</span> &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="key"><a href="#key" class="headerlink" title=":key"></a>:key</h4><p>为了给 Vue 一个提示，以便它能跟踪每个节点的身份，从而重用和重新排序现有元素，你需要为每项提供一个唯一 key attribute：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in list&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">item</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item,index) in list&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;index&quot;</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">item</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>:key  可以用item(前提是唯一的值)  也可以用索引</p><p>有key可提渲染升速度，便于维护</p><h3 id="数组更新检测"><a href="#数组更新检测" class="headerlink" title="数组更新检测"></a>数组更新检测</h3><h4 id="变更方法"><a href="#变更方法" class="headerlink" title="变更方法"></a>变更方法</h4><p>Vue 将被侦听的数组的变更方法进行了包裹，所以它们也将会触发视图更新。这些被包裹过的方法包括：</p><blockquote><p>push()<br>pop()<br>shift()<br>unshift()<br>splice()<br>sort()<br>reverse()<br>你可以打开控制台，然后对前面例子的 items 数组尝试调用变更方法。比如 example1.items.push({ message: ‘Baz’ })。</p></blockquote><h4 id="替换数组"><a href="#替换数组" class="headerlink" title="替换数组"></a>替换数组</h4><p>filter()、concat() 和 slice()。</p><p>变更方法，顾名思义，会变更调用了这些方法的原始数组。相比之下，也有非变更方法，例如 filter()、concat() 和 slice()。它们不会变更原始数组，而总是返回一个新数组。当使用非变更方法时，可以用新数组替换旧数组：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">example1.<span class="hljs-keyword">items</span> = example1.<span class="hljs-keyword">items</span>.<span class="hljs-built_in">filter</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-title">item</span>) &#123;</span><br>  <span class="hljs-literal">return</span> <span class="hljs-keyword">item</span>.message.match(/Foo/)<br>&#125;)<br></code></pre></td></tr></table></figure><p>你可能认为这将导致 Vue 丢弃现有 DOM 并重新渲染整个列表。幸运的是，事实并非如此。Vue 为了使得 DOM 元素得到最大范围的重用而实现了一些智能的启发式方法，所以用一个含有相同元素的数组去替换原来的数组是非常高效的操作。</p><h3 id="显示过滤-排序后的结果"><a href="#显示过滤-排序后的结果" class="headerlink" title="显示过滤&#x2F;排序后的结果"></a>显示过滤&#x2F;排序后的结果</h3><p>循环，计算属性和方法处理后的数据</p><p>有时，我们想要显示一个数组经过过滤或排序后的版本，而不实际变更或重置原始数据。在这种情况下，可以创建一个计算属性，来返回过滤或排序后的数组。</p><p>例如：</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xquery"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;n in evenNumbers&quot;</span>&gt;</span></span><span class="language-xquery">&#123;&#123; n &#125;</span><span class="language-xml">&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>data: &#123;<br>  numbers: [ <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span> ]<br>&#125;,<br>computed: &#123;<br>  evenNumbers: <span class="hljs-keyword">function</span> () &#123;<br>    <span class="hljs-keyword">return</span> this.numbers<span class="hljs-built_in">.filter</span>(<span class="hljs-keyword">function</span> <span class="hljs-built_in">(number</span>) &#123;<br>      <span class="hljs-keyword">return</span><span class="hljs-built_in"> number</span> % <span class="hljs-number">2</span> === <span class="hljs-number">0</span><br>    &#125;)<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>在计算属性不适用的情况下 (例如，在嵌套 v-for 循环中) 你可以使用一个方法：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs lua">&lt;ul v-<span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;set in sets&quot;</span>&gt;<br>  &lt;li v-<span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;n in even(set)&quot;</span>&gt;&#123;&#123; n &#125;&#125;&lt;/li&gt;<br>&lt;/ul&gt;<br>data: &#123;<br>  sets: <span class="hljs-string">[[ 1, 2, 3, 4, 5 ], [6, 7, 8, 9, 10]]</span><br>&#125;,<br>methods: &#123;<br>  even: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(numbers)</span></span> &#123;<br>    <span class="hljs-keyword">return</span> numbers.filter(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(number)</span></span> &#123;<br>      <span class="hljs-keyword">return</span> number % <span class="hljs-number">2</span> === <span class="hljs-number">0</span><br>    &#125;)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="在组件上使用-v-for"><a href="#在组件上使用-v-for" class="headerlink" title="在组件上使用 v-for"></a>在组件上使用 v-for</h3><p>在自定义组件上，你可以像在任何普通元素上一样使用 v-for。</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir">&lt;my-component v-<span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;item in items&quot;</span> <span class="hljs-symbol">:key=<span class="hljs-string">&quot;item.id&quot;</span>&gt;&lt;/my-component&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>vue笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Lodash工具库</title>
    <link href="/hexodemo/2024/03/12/Lodash%E5%B7%A5%E5%85%B7%E5%BA%93/"/>
    <url>/hexodemo/2024/03/12/Lodash%E5%B7%A5%E5%85%B7%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<h2 id="官方地址"><a href="#官方地址" class="headerlink" title="官方地址"></a>官方地址</h2><p><a href="https://www.lodashjs.com/">https://www.lodashjs.com/</a></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Lodash 是一个一致性、模块化、高性能的 JavaScript 实用工具库。</p><blockquote><p>Lodash 遵循 MIT 开源协议发布，并且支持最新的运行环境。 查看各个构件版本的区别并选择一个适合你的版</p></blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>浏览器环境： </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;lodash.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>通过 npm： </p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">$ <span class="hljs-built_in">npm</span> i -g <span class="hljs-built_in">npm</span><br>$ <span class="hljs-built_in">npm</span> i --save lodash<br></code></pre></td></tr></table></figure><p>Node.js： </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// Load the full build.</span><br><span class="hljs-keyword">var</span> _ = <span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;lodash&#x27;</span>);<br><span class="hljs-comment">// Load the core build.</span><br><span class="hljs-keyword">var</span> _ = <span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;lodash/core&#x27;</span>);<br><span class="hljs-comment">// Load the FP build for immutable auto-curried iteratee-first data-last methods.</span><br><span class="hljs-keyword">var</span> fp = <span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;lodash/fp&#x27;</span>);<br> <br><span class="hljs-comment">// Load method categories.</span><br><span class="hljs-keyword">var</span> <span class="hljs-keyword">array</span> = <span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;lodash/array&#x27;</span>);<br><span class="hljs-keyword">var</span> <span class="hljs-keyword">object</span> = <span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;lodash/fp/object&#x27;</span>);<br> <br><span class="hljs-comment">// Cherry-pick methods for smaller browserify/rollup/webpack bundles.</span><br><span class="hljs-keyword">var</span> at = <span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;lodash/at&#x27;</span>);<br><span class="hljs-keyword">var</span> curryN = <span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;lodash/fp/curryN&#x27;</span>);<br></code></pre></td></tr></table></figure><blockquote><p>注意：</p><p>如需在 Node.js &lt; 6 的 REPL 环境中使用 Lodash，请安装 <a href="https://www.npmjs.com/package/n_">n_</a>。</p></blockquote><p>Lodash 通过降低 array、number、objects、string 等等的使用难度从而让 JavaScript 变得更简单。 Lodash 的模块化方法 非常适用于：</p><ul><li>遍历 array、object 和 string</li><li>对值进行操作和检测</li><li>创建符合功能的函数</li></ul><h2 id="好用的函数"><a href="#好用的函数" class="headerlink" title="好用的函数"></a>好用的函数</h2><h3 id="debounce-防抖动"><a href="#debounce-防抖动" class="headerlink" title="_.debounce  防抖动"></a>_.debounce  防抖动</h3><p>是一个通过 Lodash 限制操作频率的函数。     &#x2F;&#x2F; 在这个例子中，我们希望限制访问 yesno.wtf&#x2F;api 的频率     &#x2F;&#x2F; AJAX 请求直到用户输入完毕才会发出。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-comment">// 避免窗口在变动时出现昂贵的计算开销。</span><br>jQuery(<span class="hljs-built_in">window</span>).<span class="hljs-keyword">on</span>(<span class="hljs-string">&#x27;resize&#x27;</span>, _.debounce(calculateLayout, <span class="hljs-number">150</span>));<br> <br><span class="hljs-comment">// 当点击时 `sendMail` 随后就被调用。</span><br>jQuery(element).<span class="hljs-keyword">on</span>(<span class="hljs-string">&#x27;click&#x27;</span>, _.debounce(sendMail, <span class="hljs-number">300</span>, &#123;<br>  <span class="hljs-string">&#x27;leading&#x27;</span>: <span class="hljs-keyword">true</span>,<br>  <span class="hljs-string">&#x27;trailing&#x27;</span>: <span class="hljs-keyword">false</span><br>&#125;));<br> <br><span class="hljs-comment">// 确保 `batchLog` 调用1次之后，1秒内会被触发。</span><br><span class="hljs-keyword">var</span> debounced = _.debounce(batchLog, <span class="hljs-number">250</span>, &#123; <span class="hljs-string">&#x27;maxWait&#x27;</span>: <span class="hljs-number">1000</span> &#125;);<br><span class="hljs-keyword">var</span> source = <span class="hljs-keyword">new</span> EventSource(<span class="hljs-string">&#x27;/stream&#x27;</span>);<br>jQuery(source).<span class="hljs-keyword">on</span>(<span class="hljs-string">&#x27;message&#x27;</span>, debounced);<br> <br><span class="hljs-comment">// 取消一个 trailing 的防抖动调用</span><br>jQuery(<span class="hljs-built_in">window</span>).<span class="hljs-keyword">on</span>(<span class="hljs-string">&#x27;popstate&#x27;</span>, debounced.cancel);<br><br></code></pre></td></tr></table></figure><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;watch-example&quot;</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">    Ask a yes/no question:</span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;question&quot;</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">answer</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 因为 AJAX 库和通用工具的生态已经相当丰富，Vue 核心代码没有重复 --&gt;</span><br><span class="hljs-comment">&lt;!-- 提供这些功能以保持精简。这也可以让你自由选择自己更熟悉的工具。 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/axios@0.12.0/dist/axios.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/lodash@4.13.1/lodash.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> watchExampleVM = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">  <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#watch-example&#x27;</span>,</span><br><span class="language-javascript">  <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">    <span class="hljs-attr">question</span>: <span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="language-javascript">    <span class="hljs-attr">answer</span>: <span class="hljs-string">&#x27;I cannot give you an answer until you ask a question!&#x27;</span></span><br><span class="language-javascript">  &#125;,</span><br><span class="language-javascript">  <span class="hljs-attr">watch</span>: &#123;</span><br><span class="language-javascript">    <span class="hljs-comment">// 如果 `question` 发生改变，这个函数就会运行</span></span><br><span class="language-javascript">    <span class="hljs-attr">question</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">newQuestion, oldQuestion</span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-variable language_">this</span>.<span class="hljs-property">answer</span> = <span class="hljs-string">&#x27;Waiting for you to stop typing...&#x27;</span></span><br><span class="language-javascript">      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">debouncedGetAnswer</span>()</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;,</span><br><span class="language-javascript">  <span class="hljs-attr">created</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-comment">// `_.debounce` 是一个通过 Lodash 限制操作频率的函数。</span></span><br><span class="language-javascript">    <span class="hljs-comment">// 在这个例子中，我们希望限制访问 yesno.wtf/api 的频率</span></span><br><span class="language-javascript">    <span class="hljs-comment">// AJAX 请求直到用户输入完毕才会发出。想要了解更多关于</span></span><br><span class="language-javascript">    <span class="hljs-comment">// `_.debounce` 函数 (及其近亲 `_.throttle`) 的知识，</span></span><br><span class="language-javascript">    <span class="hljs-comment">// 请参考：https://lodash.com/docs#debounce</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">this</span>.<span class="hljs-property">debouncedGetAnswer</span> = _.<span class="hljs-title function_">debounce</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">getAnswer</span>, <span class="hljs-number">500</span>)</span><br><span class="language-javascript">  &#125;,</span><br><span class="language-javascript">  <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">    <span class="hljs-attr">getAnswer</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">question</span>.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;?&#x27;</span>) === -<span class="hljs-number">1</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">answer</span> = <span class="hljs-string">&#x27;Questions usually contain a question mark. ;-)&#x27;</span></span><br><span class="language-javascript">        <span class="hljs-keyword">return</span></span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">      <span class="hljs-variable language_">this</span>.<span class="hljs-property">answer</span> = <span class="hljs-string">&#x27;Thinking...&#x27;</span></span><br><span class="language-javascript">      <span class="hljs-keyword">var</span> vm = <span class="hljs-variable language_">this</span></span><br><span class="language-javascript">      axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;https://yesno.wtf/api&#x27;</span>)</span><br><span class="language-javascript">        .<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) &#123;</span><br><span class="language-javascript">          vm.<span class="hljs-property">answer</span> = _.<span class="hljs-title function_">capitalize</span>(response.<span class="hljs-property">data</span>.<span class="hljs-property">answer</span>)</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">        .<span class="hljs-title function_">catch</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) &#123;</span><br><span class="language-javascript">          vm.<span class="hljs-property">answer</span> = <span class="hljs-string">&#x27;Error! Could not reach the API. &#x27;</span> + error</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript">&#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="cloneDeep-value-深拷贝"><a href="#cloneDeep-value-深拷贝" class="headerlink" title="_.cloneDeep(value) 深拷贝"></a>_.cloneDeep(value) 深拷贝</h3><p>这个方法类似<a href="https://www.lodashjs.com/docs/lodash.cloneDeep#clone"><code>_.clone</code></a>，除了它会递归拷贝 <code>value</code>。（注：也叫深拷贝）。 </p><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><ol><li><code>value</code> <em>(*)</em>: 要深拷贝的值。</li></ol><h4 id="返回"><a href="#返回" class="headerlink" title="返回"></a>返回</h4><p><em>(*)</em>: 返回拷贝后的值。</p><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> objects = [&#123; <span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">1</span> &#125;, &#123; <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">2</span> &#125;];<br> <br><span class="hljs-keyword">var</span> deep = _.cloneDeep(objects);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(deep[<span class="hljs-number">0</span>] === objects[<span class="hljs-number">0</span>]);<br><span class="hljs-comment">// =&gt; false</span><br></code></pre></td></tr></table></figure><h3 id="日期"><a href="#日期" class="headerlink" title="日期"></a>日期</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">//y-m-d</span><br>getDate() &#123;<br>const <span class="hljs-built_in">date</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();<br>let <span class="hljs-built_in">year</span> = <span class="hljs-built_in">date</span>.getFullYear();<br>let <span class="hljs-built_in">month</span> = <span class="hljs-built_in">date</span>.getMonth() + <span class="hljs-number">1</span>;<br>let <span class="hljs-built_in">day</span> = <span class="hljs-built_in">date</span>.getDate();<br><span class="hljs-built_in">month</span> = <span class="hljs-built_in">month</span>.toString().padStart(<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;0&#x27;</span>)<br><span class="hljs-built_in">day</span> = <span class="hljs-built_in">day</span>.toString().padStart(<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;0&#x27;</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-built_in">year</span>&#125;</span>-<span class="hljs-subst">$&#123;<span class="hljs-built_in">month</span>&#125;</span>-<span class="hljs-subst">$&#123;<span class="hljs-built_in">day</span>&#125;</span>`</span>;<br>&#125;<br>  <span class="hljs-comment">//h-m-s</span><br>getTime() &#123;<br>const <span class="hljs-built_in">date</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();<br>let <span class="hljs-built_in">hour</span> = <span class="hljs-built_in">date</span>.getHours().toString().padStart(<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;0&#x27;</span>);<br>let <span class="hljs-built_in">minute</span> = <span class="hljs-built_in">date</span>.getMinutes().toString().padStart(<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;0&#x27;</span>);<br>let <span class="hljs-built_in">second</span> = <span class="hljs-built_in">date</span>.getSeconds().toString().padStart(<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;0&#x27;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-built_in">hour</span>&#125;</span>:<span class="hljs-subst">$&#123;<span class="hljs-built_in">minute</span>&#125;</span>:<span class="hljs-subst">$&#123;<span class="hljs-built_in">second</span>&#125;</span>`</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="判断是否是JSON字符串"><a href="#判断是否是JSON字符串" class="headerlink" title="判断是否是JSON字符串"></a>判断是否是JSON字符串</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">isJSONStr</span>(<span class="hljs-params">str</span>)&#123;<br><span class="hljs-keyword">try</span>&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(str) <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Object</span>)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">catch</span>(error)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(error)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="判断空类型"><a href="#判断空类型" class="headerlink" title="判断空类型"></a>判断空类型</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//判断是否是空对象&#123;&#125;</span><br><span class="hljs-title function_">isEmptyObj</span>(<span class="hljs-params">obj</span>) &#123;<br>    <span class="hljs-keyword">return</span> obj !== <span class="hljs-literal">null</span> &amp;&amp; <span class="hljs-keyword">typeof</span> obj === <span class="hljs-string">&#x27;object&#x27;</span> &amp;&amp; !<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(obj)&amp;&amp; (<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(obj).<span class="hljs-property">length</span> === <span class="hljs-number">0</span>)<br>  &#125;<br><span class="hljs-comment">//是否是空数组[]</span><br><span class="hljs-title function_">isEmptyArr</span>(<span class="hljs-params">Arr</span>)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(<span class="hljs-title class_">Arr</span>)&amp;&amp;<span class="hljs-title class_">Arr</span>.<span class="hljs-property">length</span>===<span class="hljs-number">0</span><br>&#125;<br><span class="hljs-comment">//是否是空，undefined,null,&quot;&quot;,&#123;&#125;,[]</span><br><span class="hljs-title function_">isEmpty</span>(<span class="hljs-params">value</span>)&#123;<br><span class="hljs-keyword">if</span>(!value&amp;&amp;value!==<span class="hljs-number">0</span>)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br>    <span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(value)===<span class="hljs-string">&quot;[object Array]&quot;</span>)&#123;<br><span class="hljs-keyword">return</span> value.<span class="hljs-property">length</span>===<span class="hljs-number">0</span><br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(value)===<span class="hljs-string">&quot;[object Object]&quot;</span>)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(value).<span class="hljs-property">length</span> === <span class="hljs-number">0</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Lodash</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Lodash</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue学习笔记</title>
    <link href="/hexodemo/2024/03/11/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/hexodemo/2024/03/11/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="1-vue是什么"><a href="#1-vue是什么" class="headerlink" title="1.vue是什么"></a>1.vue是什么</h2><p>Vue (读音 &#x2F;vjuː&#x2F;，类似于 view) 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。</p><p>1是一套用于构建用户界面的渐进式框架<br>2与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用<br>3Vue 的核心库只关注视图层，易于上手，还便于与第三方库或既有项目整合。<br>4Vue 也完全能够为复杂的单页应用提供驱动。</p><h2 id="2-数据交互"><a href="#2-数据交互" class="headerlink" title="2.数据交互"></a>2.数据交互</h2><h3 id="基础数据与属性交互"><a href="#基础数据与属性交互" class="headerlink" title="基础数据与属性交互"></a>基础数据与属性交互</h3><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs fortran">v-<span class="hljs-keyword">bind</span>:属性<br></code></pre></td></tr></table></figure><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><br>&lt;<span class="hljs-keyword">div</span> id=<span class="hljs-string">&quot;app&quot;</span> v-bind:title=<span class="hljs-string">&#x27;msg1&#x27;</span>&gt;<br>        &#123;&#123;message&#125;&#125;<br>    &lt;/<span class="hljs-keyword">div</span>&gt;<br><br><br><span class="hljs-built_in">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;<br>        el:<span class="hljs-string">&#x27;#app&#x27;</span>,<br>        data:&#123;<br>            message:<span class="hljs-string">&#x27;hellow Vue1&#x27;</span>,<br>            msg1:<span class="hljs-string">&#x27;这是一个标题&#x27;</span><br>        &#125;<br>    &#125;)<br><br><br>常规数据绑定加&#123;&#123;&#125;&#125;<br>元素属性绑定不加&#123;&#123;&#125;&#125;<br></code></pre></td></tr></table></figure><h3 id="条件与循环"><a href="#条件与循环" class="headerlink" title="条件与循环"></a>条件与循环</h3><p>​</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">v-if</span><br><span class="hljs-attribute">v-for</span><br></code></pre></td></tr></table></figure><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs axapta">&lt;<span class="hljs-keyword">div</span> id=<span class="hljs-string">&quot;app-3&quot;</span>&gt;<br>  &lt;p v-<span class="hljs-keyword">if</span>=<span class="hljs-string">&quot;seen&quot;</span>&gt;现在你看到我了&lt;/p&gt;<br>&lt;/<span class="hljs-keyword">div</span>&gt;<br><span class="hljs-built_in">var</span> app3 = <span class="hljs-keyword">new</span> Vue(&#123;<br>  el: <span class="hljs-string">&#x27;#app-3&#x27;</span>,<br>  data: &#123;<br>    seen: <span class="hljs-literal">true</span><br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="数据更改"><a href="#数据更改" class="headerlink" title="数据更改"></a>数据更改</h3><p>​更改data数据</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs applescript">&lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;app3&quot;</span>&gt;<br>       &lt;p v-<span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;everylast in boxs&quot;</span>&gt;<br>           &#123;&#123;everylast.<span class="hljs-built_in">text</span>&#125;&#125;<br>       &lt;/p&gt;<br>    &lt;/<span class="hljs-keyword">div</span>&gt;<br><br><br>var app3 = new Vue(&#123;<br>        el:&#x27;<span class="hljs-comment">#app3&#x27;,</span><br>        data:&#123;<br>            boxs:[<br>                &#123;<span class="hljs-built_in">text</span>:<span class="hljs-number">1</span>&#125;,<br>                &#123;<span class="hljs-built_in">text</span>:<span class="hljs-number">2</span>&#125;,<br>                &#123;<span class="hljs-built_in">text</span>:<span class="hljs-number">3</span>&#125;<br>            ]<br>        &#125;<br>    &#125;)<br><br><br>数据更改<br>app3.boxs.push(&#123;<span class="hljs-built_in">text</span>:<span class="hljs-number">4</span>&#125;)<br></code></pre></td></tr></table></figure><p>可以看vue实例-》数据与方法<br><a href="https://cn.vuejs.org/v2/guide/instance.html">https://cn.vuejs.org/v2/guide/instance.html</a></p><h3 id="添加事件监听"><a href="#添加事件监听" class="headerlink" title="添加事件监听"></a>添加事件监听</h3><p>​v-on</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;div id=<span class="hljs-string">&quot;app4&quot;</span>&gt;<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123;app4message&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;reversefn&quot;</span>&gt;</span>点击翻转<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>    &lt;/div&gt;<br><br><span class="hljs-keyword">var</span> app4 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>        <span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#app4&#x27;</span>,<br>        <span class="hljs-attr">data</span>:&#123;<br>            <span class="hljs-attr">app4message</span>:<span class="hljs-string">&#x27;这是一句话&#x27;</span><br>        &#125;,<br>        <span class="hljs-attr">methods</span>:&#123;<br>            <span class="hljs-attr">reversefn</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">app4message</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">app4message</span>.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;&#x27;</span>).<span class="hljs-title function_">reverse</span>().<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>)<br>            &#125;<br>        &#125;<br>    &#125;)<br></code></pre></td></tr></table></figure><h3 id="数据的双向绑定"><a href="#数据的双向绑定" class="headerlink" title="数据的双向绑定"></a>数据的双向绑定</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">v-model</span><br></code></pre></td></tr></table></figure><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-comment">&lt;!-- v-model的双向数据绑定 --&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app5&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">message</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;message&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">var app5 = new Vue(&#123;</span><br><span class="language-xml">        el:&#x27;#app5&#x27;,</span><br><span class="language-xml">        data:&#123;</span><br><span class="language-xml">            message:&#x27;实时数据的双向绑定&#x27;</span><br><span class="language-xml">        &#125;</span><br><span class="language-xml">    &#125;)</span><br></code></pre></td></tr></table></figure><h3 id="v-text-和-v-html"><a href="#v-text-和-v-html" class="headerlink" title="v-text  和 v-html"></a>v-text  和 v-html</h3><h3 id="可以代替差值表达式"><a href="#可以代替差值表达式" class="headerlink" title="可以代替差值表达式"></a>可以代替差值表达式</h3><h3 id="事件与方法"><a href="#事件与方法" class="headerlink" title="事件与方法"></a>事件与方法</h3><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&#x27;msgfn&#x27;</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">msg</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>​</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">简写v-on:click = @click<br></code></pre></td></tr></table></figure><h3 id="属性数据的双向绑定"><a href="#属性数据的双向绑定" class="headerlink" title="属性数据的双向绑定"></a>属性数据的双向绑定</h3><p>​</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs fortran">v-<span class="hljs-keyword">bind</span>  可缩写为   :<span class="hljs-keyword">bind</span><br></code></pre></td></tr></table></figure><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">html</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&#x27;msgfn&#x27;</span> <span class="hljs-attr">v-bind:title</span>=<span class="hljs-string">&#x27;title&#x27;</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">msg</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">js</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">data</span>:&#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">msg</span>:<span class="hljs-string">&#x27;hello word&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">title</span>:<span class="hljs-string">&#x27;这是个信息&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;)</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="3-模板语法"><a href="#3-模板语法" class="headerlink" title="3.模板语法"></a>3.模板语法</h2><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean">&lt;!-- ### 插值表达式&#123;&#123;&#125;&#125;<br></code></pre></td></tr></table></figure><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Message: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">msg</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">​``` --&gt;</span><br><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml"></span><br></code></pre></td></tr></table></figure><h3 id="v-once-指令"><a href="#v-once-指令" class="headerlink" title="v-once 指令"></a>v-once 指令</h3><p>通过使用 v-once 指令，你也能执行一次性地插值，当数据改变时，插值处的内容不会更新。但请留心这会影响到该节点上的其它数据绑定：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-once</span>&gt;</span>这个将不会改变: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">msg</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"> --&gt;<br><br>&lt;!-- <span class="hljs-comment">### 原始 HTML</span><br><br>双大括号会将数据解释为普通文本，而非 HTML 代码。为了输出真正的 HTML，你需要使用 [`v-html` 指令](https://v2.cn.vuejs.org/v2/api/<span class="hljs-comment">#v-html)： </span><br><br></code></pre></td></tr></table></figure><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Using mustaches: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">rawHtml</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Using v-html directive: <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-html</span>=<span class="hljs-string">&quot;rawHtml&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span> </span><br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs -->">&lt;!-- ### Attribute<br><br>一般用v-bind绑定使用 JavaScript 表达式<br><br>Mustache 语法不能作用在 HTML attribute 上，遇到这种情况应该使用 [`v-bind` 指令](https://v2.cn.vuejs.org/v2/api/#v-bind)：<br><br></code></pre></td></tr></table></figure><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">&lt;<span class="hljs-keyword">div</span> v-bind:<span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;dynamicId&quot;</span>&gt;&lt;/<span class="hljs-keyword">div</span>&gt;<br></code></pre></td></tr></table></figure><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">使用 <span class="hljs-keyword">JavaScript </span>表达式<br><br></code></pre></td></tr></table></figure><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">number</span> + <span class="hljs-number">1</span> &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">ok</span> ? <span class="hljs-string">&#x27;YES&#x27;</span> : <span class="hljs-string">&#x27;NO&#x27;</span> &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">message.split</span>(<span class="hljs-name">&#x27;&#x27;</span>).reverse().join(<span class="hljs-name">&#x27;&#x27;</span>) &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-bind:id</span>=<span class="hljs-string">&quot;&#x27;list-&#x27; + id&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs -->"><br><br>是带有 v- 前缀的特殊 attribute。<br><br></code></pre></td></tr></table></figure><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dart">v-bind:参数<br>v-<span class="hljs-keyword">if</span><br>v-<span class="hljs-keyword">for</span><br>v-<span class="hljs-keyword">on</span>:click<br>v-<span class="hljs-keyword">show</span><br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs"><br>​动态参数<br><br></code></pre></td></tr></table></figure><!--注意，参数表达式的写法存在一些约束，如之后的“对动态参数表达式的约束”章节所述。--><p>&lt;a v-bind:[attributeName]&#x3D;”url”&gt; … </a></p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><br>这里的 <span class="hljs-string">`attributeName`</span> 会被作为一个 JavaScript 表达式进行动态求值，求得的值将会作为最终的参数来使用。例如，如果你的 Vue 实例有一个 <span class="hljs-string">`data`</span> property <span class="hljs-string">`attributeName`</span>，其值为 <span class="hljs-string">`&quot;href&quot;`</span>，那么这个绑定将等价于 <span class="hljs-string">`v-bind:href`</span>。 <br><br></code></pre></td></tr></table></figure><p>&lt;a v-on:[eventName]&#x3D;”doSomething”&gt; … </a></p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><br>在这个示例中，当 <span class="hljs-string">`eventName`</span> 的值为 <span class="hljs-string">`&quot;focus&quot;`</span> 时，<span class="hljs-string">`v-on:[eventName]`</span> 将等价于 <span class="hljs-string">`v-on:focus`</span>。 <br><br><br><br><br><br><br></code></pre></td></tr></table></figure><h3 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h3><h4 id="缩写"><a href="#缩写" class="headerlink" title="缩写"></a>缩写</h4><p><code>v-</code> 前缀作为一种视觉提示，用来识别模板中 Vue 特定的 attribute。当你在使用 Vue.js 为现有标签添加动态行为 (dynamic behavior) 时，<code>v-</code> 前缀很有帮助，然而，对于一些频繁用到的指令来说，就会感到使用繁琐。同时，在构建由 Vue 管理所有模板的<a href="https://en.wikipedia.org/wiki/Single-page_application">单页面应用程序 (SPA - single page application)</a> 时，<code>v-</code> 前缀也变得没那么重要了。因此，Vue 为 <code>v-bind</code> 和 <code>v-on</code> 这两个最常用的指令，提供了特定简写： </p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mel">v-bind:href  可缩写   :href<br>v-on:click=<span class="hljs-string">&#x27;aa&#x27;</span>   可缩写   @click=<span class="hljs-string">&#x27;aa&#x27;</span><br>动态参数    缩写   @[<span class="hljs-keyword">event</span>]=<span class="hljs-string">&quot;doSomething&quot;</span><br></code></pre></td></tr></table></figure><h2 id="4计算属性和侦听器"><a href="#4计算属性和侦听器" class="headerlink" title="4计算属性和侦听器"></a>4计算属性和侦听器</h2><h3 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h3><p>模板内的表达式非常便利，但是设计它们的初衷是用于简单运算的。在模板中放入太多的逻辑会让模板过重且难以维护。例如： </p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;example&quot;</span>&gt;</span></span><br><span class="language-xml">  </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">message.split</span>(<span class="hljs-name">&#x27;&#x27;</span>).reverse().join(<span class="hljs-name">&#x27;&#x27;</span>) &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>在这个地方，模板不再是简单的声明式逻辑。你必须看一段时间才能意识到，这里是想要显示变量 <code>message</code> 的翻转字符串。当你想要在模板中的多处包含此翻转字符串时，就会更加难以处理。</p><p>所以，对于任何复杂逻辑，你都应当使用<strong>计算属性</strong>。</p><h4 id="基础例子"><a href="#基础例子" class="headerlink" title="基础例子"></a>基础例子</h4><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;example&quot;</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Original message: &quot;</span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">message</span> &#125;&#125;</span><span class="language-xml">&quot;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Computed reversed message: &quot;</span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">reversedMessage</span> &#125;&#125;</span><span class="language-xml">&quot;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></code></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;<br>  <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#example&#x27;</span>,<br>  <span class="hljs-attr">data</span>: &#123;<br>    <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;Hello&#x27;</span><br>  &#125;,<br>  <span class="hljs-attr">computed</span>: &#123;<br>    <span class="hljs-comment">// 计算属性的 getter</span><br>    reversedMessage: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-comment">// `this` 指向 vm 实例</span><br>      <span class="hljs-keyword">return</span> this.message.<span class="hljs-built_in">split</span>(<span class="hljs-string">&#x27;&#x27;</span>).<span class="hljs-built_in">reverse</span>().join(<span class="hljs-string">&#x27;&#x27;</span>)<br>    &#125;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>结果：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cmake">Original <span class="hljs-keyword">message</span>: <span class="hljs-string">&quot;Hello&quot;</span><br><br>Computed reversed <span class="hljs-keyword">message</span>: <span class="hljs-string">&quot;olleH&quot;</span><br></code></pre></td></tr></table></figure><p>这里我们声明了一个计算属性 <code>reversedMessage</code>。我们提供的函数将用作 property <code>vm.reversedMessage</code> 的 getter 函数：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim">console.<span class="hljs-built_in">log</span>(<span class="hljs-keyword">vm</span>.reversedMessage) // =&gt; <span class="hljs-string">&#x27;olleH&#x27;</span><br><span class="hljs-keyword">vm</span>.message = <span class="hljs-string">&#x27;Goodbye&#x27;</span><br>console.<span class="hljs-built_in">log</span>(<span class="hljs-keyword">vm</span>.reversedMessage) // =&gt; <span class="hljs-string">&#x27;eybdooG&#x27;</span><br></code></pre></td></tr></table></figure><p>你可以打开浏览器的控制台，自行修改例子中的 vm。<code>vm.reversedMessage</code> 的值始终取决于 <code>vm.message</code> 的值。</p><p>你可以像绑定普通 property 一样在模板中绑定计算属性。Vue 知道 <code>vm.reversedMessage</code> 依赖于 <code>vm.message</code>，因此当 <code>vm.message</code> 发生改变时，所有依赖 <code>vm.reversedMessage</code> 的绑定也会更新。而且最妙的是我们已经以声明的方式创建了这种依赖关系：计算属性的 getter 函数是没有副作用 (side effect) 的，这使它更易于测试和理解。</p><h4 id="计算属性缓存-vs-方法"><a href="#计算属性缓存-vs-方法" class="headerlink" title="计算属性缓存 vs 方法"></a>计算属性缓存 vs 方法</h4><p>你可能已经注意到我们可以通过在表达式中调用方法来达到同样的效果： </p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Reversed message: &quot;</span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">reversedMessage</span>() &#125;&#125;</span><span class="language-xml">&quot;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br></code></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">// 在组件中</span><br>methods: &#123;<br>  <span class="hljs-attr">reversedMessage</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> this.message.<span class="hljs-built_in">split</span>(<span class="hljs-string">&#x27;&#x27;</span>).<span class="hljs-built_in">reverse</span>().join(<span class="hljs-string">&#x27;&#x27;</span>)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们可以将同一函数定义为一个方法而不是一个计算属性。两种方式的最终结果确实是完全相同的。然而，不同的是<strong>计算属性是基于它们的响应式依赖进行缓存的</strong>。只在相关响应式依赖发生改变时它们才会重新求值。这就意味着只要 <code>message</code> 还没有发生改变，多次访问 <code>reversedMessage</code> 计算属性会立即返回之前的计算结果，而不必再次执行函数。</p><p>这也同样意味着下面的计算属性将不再更新，因为 <code>Date.now()</code> 不是响应式依赖：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ada">computed: &#123;<br>  now: <span class="hljs-keyword">function</span> <span class="hljs-title"></span>() &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-type">Date.now()</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>相比之下，每当触发重新渲染时，调用方法将<strong>总会</strong>再次执行函数。</p><p>我们为什么需要缓存？假设我们有一个性能开销比较大的计算属性 <strong>A</strong>，它需要遍历一个巨大的数组并做大量的计算。然后我们可能有其他的计算属性依赖于 <strong>A</strong>。如果没有缓存，我们将不可避免的多次执行 <strong>A</strong> 的 getter！如果你不希望有缓存，请用方法来替代。</p><h4 id="计算属性vs侦听属性"><a href="#计算属性vs侦听属性" class="headerlink" title="计算属性vs侦听属性"></a>计算属性vs侦听属性</h4><p>Vue 提供了一种更通用的方式来观察和响应 Vue 实例上的数据变动：<strong>侦听属性</strong>。当你有一些数据需要随着其它数据变动而变动时，你很容易滥用 <code>watch</code>——特别是如果你之前使用过 AngularJS。然而，通常更好的做法是使用计算属性而不是命令式的 <code>watch</code> 回调。细想一下这个例子： </p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">fullName</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></code></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">var</span> vm = new Vue(&#123;<br>  el: <span class="hljs-string">&#x27;#demo&#x27;</span>,<br>  <span class="hljs-keyword">data</span>: &#123;<br>    firstName: <span class="hljs-string">&#x27;Foo&#x27;</span>,<br>    lastName: <span class="hljs-string">&#x27;Bar&#x27;</span>,<br>    fullName: <span class="hljs-string">&#x27;Foo Bar&#x27;</span><br>  &#125;,<br>  watch: &#123;<br>    firstName: function (<span class="hljs-keyword">val</span>) &#123;<br>      <span class="hljs-keyword">this</span>.fullName = <span class="hljs-keyword">val</span> + <span class="hljs-string">&#x27; &#x27;</span> + <span class="hljs-keyword">this</span>.lastName<br>    &#125;,<br>    lastName: function (<span class="hljs-keyword">val</span>) &#123;<br>      <span class="hljs-keyword">this</span>.fullName = <span class="hljs-keyword">this</span>.firstName + <span class="hljs-string">&#x27; &#x27;</span> + <span class="hljs-keyword">val</span><br>    &#125;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>上面代码是命令式且重复的。将它与计算属性的版本进行比较： </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">var</span> vm = new Vue(&#123;<br>  el: <span class="hljs-string">&#x27;#demo&#x27;</span>,<br>  <span class="hljs-keyword">data</span>: &#123;<br>    firstName: <span class="hljs-string">&#x27;Foo&#x27;</span>,<br>    lastName: <span class="hljs-string">&#x27;Bar&#x27;</span><br>  &#125;,<br>  computed: &#123;<br>    fullName: function () &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.firstName + <span class="hljs-string">&#x27; &#x27;</span> + <span class="hljs-keyword">this</span>.lastName<br>    &#125;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>好得多了，不是吗？ </p><h4 id="计算属性的-setter"><a href="#计算属性的-setter" class="headerlink" title="计算属性的 setter"></a>计算属性的 setter</h4><p>计算属性默认只有 getter，不过在需要时你也可以提供一个 setter： </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">// ...</span><br>computed: &#123;<br>  fullName: &#123;<br>    <span class="hljs-comment">// getter</span><br>    <span class="hljs-keyword">get</span>: function () &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.firstName + <span class="hljs-string">&#x27; &#x27;</span> + <span class="hljs-keyword">this</span>.lastName<br>    &#125;,<br>    <span class="hljs-comment">// setter</span><br>    <span class="hljs-keyword">set</span>: function (newValue) &#123;<br>      <span class="hljs-keyword">var</span> names = newValue.split(<span class="hljs-string">&#x27; &#x27;</span>)<br>      <span class="hljs-keyword">this</span>.firstName = names[<span class="hljs-number">0</span>]<br>      <span class="hljs-keyword">this</span>.lastName = names[names.length - <span class="hljs-number">1</span>]<br>    &#125;<br>  &#125;<br>&#125;<br><span class="hljs-comment">// ...</span><br></code></pre></td></tr></table></figure><p>现在再运行 <code>vm.fullName = &#39;John Doe&#39;</code> 时，setter 会被调用，<code>vm.firstName</code> 和 <code>vm.lastName</code> 也会相应地被更新。 </p><h3 id="侦听器"><a href="#侦听器" class="headerlink" title="侦听器"></a>侦听器</h3><p>虽然计算属性在大多数情况下更合适，但有时也需要一个自定义的侦听器。这就是为什么 Vue 通过 <code>watch</code> 选项提供了一个更通用的方法，来响应数据的变化。当需要在数据变化时执行异步或开销较大的操作时，这个方式是最有用的。 </p><p>例如： </p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;watch-example&quot;</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">    Ask a yes/no question:</span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;question&quot;</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">answer</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 因为 AJAX 库和通用工具的生态已经相当丰富，Vue 核心代码没有重复 --&gt;</span><br><span class="hljs-comment">&lt;!-- 提供这些功能以保持精简。这也可以让你自由选择自己更熟悉的工具。 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/axios@0.12.0/dist/axios.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/lodash@4.13.1/lodash.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> watchExampleVM = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">  <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#watch-example&#x27;</span>,</span><br><span class="language-javascript">  <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">    <span class="hljs-attr">question</span>: <span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="language-javascript">    <span class="hljs-attr">answer</span>: <span class="hljs-string">&#x27;I cannot give you an answer until you ask a question!&#x27;</span></span><br><span class="language-javascript">  &#125;,</span><br><span class="language-javascript">  <span class="hljs-attr">watch</span>: &#123;</span><br><span class="language-javascript">    <span class="hljs-comment">// 如果 `question` 发生改变，这个函数就会运行</span></span><br><span class="language-javascript">    <span class="hljs-attr">question</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">newQuestion, oldQuestion</span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-variable language_">this</span>.<span class="hljs-property">answer</span> = <span class="hljs-string">&#x27;Waiting for you to stop typing...&#x27;</span></span><br><span class="language-javascript">      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">debouncedGetAnswer</span>()</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;,</span><br><span class="language-javascript">  <span class="hljs-attr">created</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-comment">// `_.debounce` 是一个通过 Lodash 限制操作频率的函数。</span></span><br><span class="language-javascript">    <span class="hljs-comment">// 在这个例子中，我们希望限制访问 yesno.wtf/api 的频率</span></span><br><span class="language-javascript">    <span class="hljs-comment">// AJAX 请求直到用户输入完毕才会发出。想要了解更多关于</span></span><br><span class="language-javascript">    <span class="hljs-comment">// `_.debounce` 函数 (及其近亲 `_.throttle`) 的知识，</span></span><br><span class="language-javascript">    <span class="hljs-comment">// 请参考：https://lodash.com/docs#debounce</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">this</span>.<span class="hljs-property">debouncedGetAnswer</span> = _.<span class="hljs-title function_">debounce</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">getAnswer</span>, <span class="hljs-number">500</span>)</span><br><span class="language-javascript">  &#125;,</span><br><span class="language-javascript">  <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">    <span class="hljs-attr">getAnswer</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">question</span>.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;?&#x27;</span>) === -<span class="hljs-number">1</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">answer</span> = <span class="hljs-string">&#x27;Questions usually contain a question mark. ;-)&#x27;</span></span><br><span class="language-javascript">        <span class="hljs-keyword">return</span></span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">      <span class="hljs-variable language_">this</span>.<span class="hljs-property">answer</span> = <span class="hljs-string">&#x27;Thinking...&#x27;</span></span><br><span class="language-javascript">      <span class="hljs-keyword">var</span> vm = <span class="hljs-variable language_">this</span></span><br><span class="language-javascript">      axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;https://yesno.wtf/api&#x27;</span>)</span><br><span class="language-javascript">        .<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) &#123;</span><br><span class="language-javascript">          vm.<span class="hljs-property">answer</span> = _.<span class="hljs-title function_">capitalize</span>(response.<span class="hljs-property">data</span>.<span class="hljs-property">answer</span>)</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">        .<span class="hljs-title function_">catch</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) &#123;</span><br><span class="language-javascript">          vm.<span class="hljs-property">answer</span> = <span class="hljs-string">&#x27;Error! Could not reach the API. &#x27;</span> + error</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript">&#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="5可复用性-组合"><a href="#5可复用性-组合" class="headerlink" title="5可复用性 &amp; 组合"></a>5可复用性 &amp; 组合</h2><h3 id="混入"><a href="#混入" class="headerlink" title="混入"></a>混入</h3><h4 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h4><p>混入 (mixin) 提供了一种非常灵活的方式，来分发 Vue 组件中的可复用功能。一个混入对象可以包含任意组件选项。当组件使用混入对象时，所有混入对象的选项将被“混合”进入该组件本身的选项。</p><p>例子：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">// 定义一个混入对象</span><br><span class="hljs-keyword">var</span> myMixin = &#123;<br>  <span class="hljs-attr">created</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    this.hello()<br>  &#125;,<br>  <span class="hljs-attr">methods</span>: &#123;<br>    <span class="hljs-attr">hello</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;hello from mixin!&#x27;</span>)<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 定义一个使用混入对象的组件</span><br><span class="hljs-keyword">var</span> Component = Vue.extend(&#123;<br>  <span class="hljs-attr">mixins</span>: [myMixin]<br>&#125;)<br><br><span class="hljs-keyword">var</span> component = <span class="hljs-keyword">new</span> Component() <span class="hljs-comment">// =&gt; &quot;hello from mixin!&quot;</span><br></code></pre></td></tr></table></figure><h4 id="选项合并"><a href="#选项合并" class="headerlink" title="选项合并"></a>选项合并</h4><p>当组件和混入对象含有同名选项时，这些选项将以恰当的方式进行“合并”。</p><p>比如，数据对象在内部会进行递归合并，并在发生冲突时以组件数据优先。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> mixin = &#123;<br>  <span class="hljs-attr">data</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;hello&#x27;</span>,<br>      <span class="hljs-attr">foo</span>: <span class="hljs-string">&#x27;abc&#x27;</span><br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">new</span> Vue(&#123;<br>  <span class="hljs-attr">mixins</span>: [mixin],<br>  <span class="hljs-attr">data</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;goodbye&#x27;</span>,<br>      <span class="hljs-attr">bar</span>: <span class="hljs-string">&#x27;def&#x27;</span><br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">created</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(this.<span class="hljs-symbol">$data</span>)<br>    <span class="hljs-comment">// =&gt; &#123; message: &quot;goodbye&quot;, foo: &quot;abc&quot;, bar: &quot;def&quot; &#125;</span><br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>同名钩子函数将合并为一个数组，因此都将被调用。另外，混入对象的钩子将在组件自身钩子<strong>之前</strong>调用。 </p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> mixin = &#123;<br>  <span class="hljs-attr">created</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;混入对象的钩子被调用&#x27;</span>)<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">new</span> Vue(&#123;<br>  <span class="hljs-attr">mixins</span>: [mixin],<br>  <span class="hljs-attr">created</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;组件钩子被调用&#x27;</span>)<br>  &#125;<br>&#125;)<br><br><span class="hljs-comment">// =&gt; &quot;混入对象的钩子被调用&quot;</span><br><span class="hljs-comment">// =&gt; &quot;组件钩子被调用&quot;</span><br></code></pre></td></tr></table></figure><p>值为对象的选项，例如 <code>methods</code>、<code>components</code> 和 <code>directives</code>，将被合并为同一个对象。两个对象键名冲突时，取组件对象的键值对。 </p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> mixin = &#123;<br>  <span class="hljs-attr">methods</span>: &#123;<br>    <span class="hljs-attr">foo</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;foo&#x27;</span>)<br>    &#125;,<br>    <span class="hljs-attr">conflicting</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;from mixin&#x27;</span>)<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;<br>  <span class="hljs-attr">mixins</span>: [mixin],<br>  <span class="hljs-attr">methods</span>: &#123;<br>    <span class="hljs-attr">bar</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;bar&#x27;</span>)<br>    &#125;,<br>    <span class="hljs-attr">conflicting</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;from self&#x27;</span>)<br>    &#125;<br>  &#125;<br>&#125;)<br><br>vm.foo() <span class="hljs-comment">// =&gt; &quot;foo&quot;</span><br>vm.bar() <span class="hljs-comment">// =&gt; &quot;bar&quot;</span><br>vm.conflicting() <span class="hljs-comment">// =&gt; &quot;from self&quot;</span><br></code></pre></td></tr></table></figure><p>注意：<code>Vue.extend()</code> 也使用同样的策略进行合并。 </p><h4 id="全局混入"><a href="#全局混入" class="headerlink" title="全局混入"></a>全局混入</h4><p>混入也可以进行全局注册。使用时格外小心！一旦使用全局混入，它将影响<strong>每一个</strong>之后创建的 Vue 实例。使用恰当时，这可以用来为自定义选项注入处理逻辑。 </p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">// 为自定义的选项 &#x27;myOption&#x27; 注入一个处理器。</span><br>Vue.mixin(&#123;<br>  <span class="hljs-attr">created</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> myOption = this.<span class="hljs-symbol">$optio</span>ns.myOption<br>    <span class="hljs-keyword">if</span> (myOption) &#123;<br>      <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(myOption)<br>    &#125;<br>  &#125;<br>&#125;)<br><br><span class="hljs-keyword">new</span> Vue(&#123;<br>  <span class="hljs-attr">myOption</span>: <span class="hljs-string">&#x27;hello!&#x27;</span><br>&#125;)<br><span class="hljs-comment">// =&gt; &quot;hello!&quot;</span><br></code></pre></td></tr></table></figure><blockquote><p>请谨慎使用全局混入，因为它会影响每个单独创建的 Vue 实例 (包括第三方组件)。大多数情况下，只应当应用于自定义选项，就像上面示例一样。推荐将其作为<a href="https://v2.cn.vuejs.org/v2/guide/plugins.html">插件</a>发布，以避免重复应用混入。 </p></blockquote><h4 id="自定义选项合并策略"><a href="#自定义选项合并策略" class="headerlink" title="自定义选项合并策略"></a>自定义选项合并策略</h4><p>自定义选项将使用默认策略，即简单地覆盖已有值。如果想让自定义选项以自定义逻辑合并，可以向 <code>Vue.config.optionMergeStrategies</code> 添加一个函数： </p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">Vue<span class="hljs-selector-class">.config</span><span class="hljs-selector-class">.optionMergeStrategies</span><span class="hljs-selector-class">.myOption</span> = function (toVal, fromVal) &#123;<br>  <span class="hljs-comment">// 返回合并后的值</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h3><p>除了核心功能默认内置的指令 (<code>v-model</code> 和 <code>v-show</code>)，Vue 也允许注册自定义指令。注意，在 Vue2.0 中，代码复用和抽象的主要形式是组件。然而，有的情况下，你仍然需要对普通 DOM 元素进行底层操作，这时候就会用到自定义指令。 </p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-comment">// 注册一个全局自定义指令 `v-focus`</span><br>Vue.directive(<span class="hljs-string">&#x27;focus&#x27;</span>, &#123;<br>  <span class="hljs-comment">// 当被绑定的元素插入到 DOM 中时……</span><br>  inserted: <span class="hljs-keyword">function</span> <span class="hljs-params">(el)</span> &#123;<br>    <span class="hljs-comment">// 聚焦元素</span><br>    el.focus()<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>如果想注册局部指令，组件中也接受一个 <code>directives</code> 的选项： </p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">directives:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-symbol">  focus:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-comment">// 指令的定义</span><br><span class="hljs-symbol">    inserted:</span> function (el) <span class="hljs-punctuation">&#123;</span><br>      el.focus()<br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>然后你可以在模板中任何元素上使用新的 <code>v-focus</code> property，如下： </p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;input v-focus&gt;</span><br></code></pre></td></tr></table></figure><h2 id="6插件"><a href="#6插件" class="headerlink" title="6插件"></a>6插件</h2><p>插件通常用来为 Vue 添加全局功能。插件的功能范围没有严格的限制——一般有下面几种：</p><ol><li>添加全局方法或者 property。如：<a href="https://github.com/karol-f/vue-custom-element">vue-custom-element</a></li><li>添加全局资源：指令&#x2F;过滤器&#x2F;过渡等。如 <a href="https://github.com/vuejs/vue-touch">vue-touch</a></li><li>通过全局混入来添加一些组件选项。如 <a href="https://github.com/vuejs/vue-router">vue-router</a></li><li>添加 Vue 实例方法，通过把它们添加到 <code>Vue.prototype</code> 上实现。</li><li>一个库，提供自己的 API，同时提供上面提到的一个或多个功能。如 <a href="https://github.com/vuejs/vue-router">vue-router</a></li></ol><h3 id="使用插件"><a href="#使用插件" class="headerlink" title="使用插件"></a>使用插件</h3><p>通过全局方法 <code>Vue.use()</code> 使用插件。它需要在你调用 <code>new Vue()</code> 启动应用之前完成： </p><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cos"><span class="hljs-comment">// 调用 `MyPlugin.install(Vue)`</span><br>Vue.<span class="hljs-keyword">use</span>(MyPlugin)<br><br><span class="hljs-keyword">new</span> Vue(&#123;<br>  <span class="hljs-comment">// ...组件选项</span><br>&#125;)<br></code></pre></td></tr></table></figure><p>也可以传入一个可选的选项对象： </p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">Vue.<span class="hljs-keyword">use</span>(MyPlugin, &#123; someOption: <span class="hljs-literal">true</span> &#125;)<br></code></pre></td></tr></table></figure><p><code>Vue.use</code> 会自动阻止多次注册相同插件，届时即使多次调用也只会注册一次该插件。</p><p>Vue.js 官方提供的一些插件 (例如 <code>vue-router</code>) 在检测到 <code>Vue</code> 是可访问的全局变量时会自动调用 <code>Vue.use()</code>。然而在像 CommonJS 这样的模块环境中，你应该始终显式地调用 <code>Vue.use()</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// 用 Browserify 或 webpack 提供的 CommonJS 模块环境时</span><br><span class="hljs-keyword">var</span> Vue = <span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;vue&#x27;</span>)<br><span class="hljs-keyword">var</span> VueRouter = <span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;vue-router&#x27;</span>)<br><br><span class="hljs-comment">// 不要忘了调用此方法</span><br>Vue.<span class="hljs-keyword">use</span>(VueRouter)<br></code></pre></td></tr></table></figure><h2 id="遇到个小bug"><a href="#遇到个小bug" class="headerlink" title="遇到个小bug"></a>遇到个小bug</h2><h3 id="vue闪屏问题"><a href="#vue闪屏问题" class="headerlink" title="vue闪屏问题"></a>vue闪屏问题</h3><p>解决方法 <a href="https://blog.csdn.net/anjiye7641/article/details/101255113">https://blog.csdn.net/anjiye7641/article/details/101255113</a></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs css"><br><br>css 内添加此属性<br><span class="hljs-selector-attr">[v-cloak]</span> &#123;<br><span class="hljs-attribute">display</span>: none;<br>&#125; <br><br><span class="hljs-selector-tag">html</span>中引入即可<br>&lt;<span class="hljs-selector-tag">div</span> v-cloak&gt;<br>&#123;&#123; message &#125;&#125;<br>&lt;/<span class="hljs-selector-tag">div</span>&gt;<br><br>成功<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>vue笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue随笔_生命周期</title>
    <link href="/hexodemo/2024/03/11/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <url>/hexodemo/2024/03/11/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
    
    <content type="html"><![CDATA[<h2 id="一、Vue的生命周期阶段"><a href="#一、Vue的生命周期阶段" class="headerlink" title="一、Vue的生命周期阶段"></a>一、Vue的生命周期阶段</h2><p>vue生命周期分为四个阶段<br>第一阶段（创建阶段）：beforeCreate，created<br>第二阶段（挂载阶段）：beforeMount（render），mounted<br>第三阶段（更新阶段）：beforeUpdate，updated<br>第四阶段（销毁阶段）：beforeDestroy，destroyed<br>————————————————</p><h2 id="二、生命周期钩子函数"><a href="#二、生命周期钩子函数" class="headerlink" title="二、生命周期钩子函数"></a>二、生命周期钩子函数</h2><ol><li><h3 id="beforeCreate"><a href="#beforeCreate" class="headerlink" title="beforeCreate"></a>beforeCreate</h3></li></ol><p>  官网：在实例初始化之后,进行数据侦听和事件&#x2F;侦听器的配置之前同步调用。</p><p>详细：在这个阶段，数据是获取不到的，并且真实dom元素也是没有渲染出来的</p><ol start="2"><li><h3 id="created"><a href="#created" class="headerlink" title="created"></a>created</h3></li></ol><p>  官网：在实例创建完成后被立即同步调用。在这一步中，实例已完成对选项的处理，意味着以下内容已被配置完毕：数据侦听、计算属性、方法、事件&#x2F;侦听器的回调函数。然而，挂载阶段还没开始，且 $el property 目前尚不可用。</p><p>详细：在这个阶段，可以访问到数据了，但是页面当中真实dom节点还是没有渲染出来，在这个钩子函数里面，可以进行相关初始化事件的绑定、发送请求操作</p><ol start="3"><li><h3 id="beforeMount"><a href="#beforeMount" class="headerlink" title="beforeMount"></a>beforeMount</h3></li></ol><p>  官网：在挂载开始之前被调用：相关的 render 函数首次被调用。</p><p>详细：代表dom马上就要被渲染出来了，但是却还没有真正的渲染出来，这个钩子函数与created钩子函数用法基本一致，可以进行相关初始化事件的绑定、发送ajax操作</p><ol start="4"><li><h3 id="mounted"><a href="#mounted" class="headerlink" title="mounted"></a>mounted</h3></li></ol><p>  官网：实例被挂载后调用，这时 el 被新创建的 vm.$el 替换了。如果根实例挂载到了一个文档内的元素上，当 mounted 被调用时 vm.$el 也在文档内。<br>  注意 mounted 不会保证所有的子组件也都被挂载完成。如果你希望等到整个视图都渲染完毕再执行某些操作，可以在 mounted 内部使用 vm.$nextTick：</p><p>详细：挂载阶段的最后一个钩子函数,数据挂载完毕，真实dom元素也已经渲染完成了,这个钩子函数内部可以做一些实例化相关的操作</p><ol start="5"><li><h3 id="beforeUpdate"><a href="#beforeUpdate" class="headerlink" title="beforeUpdate"></a>beforeUpdate</h3></li></ol><p>  官网：在数据发生改变后，DOM 被更新之前被调用。这里适合在现有 DOM 将要被更新之前访问它，比如移除手动添加的事件监听器。</p><p>详细：这个钩子函数初始化的不会执行,当组件挂载完毕的时候，并且当数据改变的时候，才会立马执行,这个钩子函数获取dom的内容是更新之前的内容</p><ol start="6"><li><h3 id="updated"><a href="#updated" class="headerlink" title="updated"></a>updated</h3></li></ol><p>  官网：在数据更改导致的虚拟 DOM 重新渲染和更新完毕之后被调用。<br>  当这个钩子被调用时，组件 DOM 已经更新，所以你现在可以执行依赖于 DOM 的操作。然而在大多数情况下，你应该避免在此期间更改状态。如果要相应状态改变，通常最好使用计算属性或 watcher 取而代之。</p><p>详细：这个钩子函数获取dom的内容是更新之后的内容生成新的虚拟dom，新的虚拟dom与之前的虚拟dom进行比对，差异之后，就会进行真实dom渲染。在updated钩子函数里面就可以获取到因diff算法比较差异得出来的真实dom渲染了。</p><ol start="7"><li><h3 id="beforeDestroy"><a href="#beforeDestroy" class="headerlink" title="beforeDestroy"></a>beforeDestroy</h3></li></ol><p>  官网：实例销毁之前调用。在这一步，实例仍然完全可用。</p><p>详细：当组件销毁的时候，就会触发这个钩子函数代表销毁之前，可以做一些善后操作,可以清除一些初始化事件、定时器相关的东西。</p><ol start="8"><li><h3 id="destroyed"><a href="#destroyed" class="headerlink" title="destroyed"></a>destroyed</h3></li></ol><p>  官网：实例销毁后调用。该钩子被调用后，对应 Vue 实例的所有指令都被解绑，所有的事件监听器被移除，所有的子实例也都被销毁。</p><p>详细：Vue实例失去活性，完全丧失功能</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">msg</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;change&quot;</span>&gt;</span>更新<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  data () &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;hello&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">methods</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    change () &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-variable language_">this</span>.<span class="hljs-property">msg</span> = <span class="hljs-string">&#x27;hello world&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  beforeCreate () &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;----------------&gt;beforeCreate&#x27;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">msg</span>, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;box&#x27;</span>))</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  created () &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;----------------&gt;created&#x27;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">msg</span>, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;box&#x27;</span>))</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  beforeMount () &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;----------------&gt;beforeMount&#x27;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">msg</span>, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;box&#x27;</span>))</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  mounted () &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;----------------&gt;mounted&#x27;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">msg</span>, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;box&#x27;</span>))</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  beforeUpdate () &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;----------------&gt;beforeUpdate&#x27;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$el</span>.<span class="hljs-property">innerHTML</span>)</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">msg</span>, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;box&#x27;</span>))</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  updated () &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;----------------&gt;updated&#x27;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$el</span>.<span class="hljs-property">innerHTML</span>)</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">msg</span>, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;box&#x27;</span>))</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>当页面初始化挂载完成之后，</p><p>当数据改变之后又会触发beforeUpdate，updated两个钩子函数</p><p><img src="https://v2.cn.vuejs.org/images/lifecycle.png"></p>]]></content>
    
    
    <categories>
      
      <category>vue笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue_组件</title>
    <link href="/hexodemo/2024/03/11/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_%E7%BB%84%E4%BB%B6/"/>
    <url>/hexodemo/2024/03/11/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_%E7%BB%84%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="组件化应用构建"><a href="#组件化应用构建" class="headerlink" title="组件化应用构建"></a>组件化应用构建</h2><h3 id="基础示例"><a href="#基础示例" class="headerlink" title="基础示例"></a>基础示例</h3><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">这里有一个 Vue 组件的示例：</span><br><span class="language-xml"></span><br><span class="language-xml">// 定义一个名为 button-counter 的新组件</span><br><span class="language-xml">Vue.component(&#x27;button-counter&#x27;, </span><span class="hljs-template-variable">&#123;</span><br><span class="hljs-template-variable">  data: function () &#123;</span><br><span class="hljs-template-variable">    return &#123;</span><br><span class="hljs-template-variable">      count: 0</span><br><span class="hljs-template-variable">    &#125;</span><span class="language-xml"></span><br><span class="language-xml">  &#125;,</span><br><span class="language-xml">  template: &#x27;<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;count++&quot;</span>&gt;</span>You clicked me </span><span class="hljs-template-variable">&#123;&#123; count &#125;</span><span class="language-xml">&#125; times.<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>&#x27;</span><br><span class="language-xml">&#125;)</span><br><span class="language-xml"></span><br><span class="language-xml">new Vue(</span><span class="hljs-template-variable">&#123; el: &#x27;#components-demo&#x27; &#125;</span><span class="language-xml">)</span><br><span class="language-xml">实例化要放后面</span><br><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">HTML</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;components-demo&quot;</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">button-counter</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button-counter</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="创建组件"><a href="#创建组件" class="headerlink" title="创建组件"></a>创建组件</h3><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xquery">Vue.component(<span class="hljs-string">&#x27;todo-item&#x27;</span>, &#123;<br>        template: <span class="hljs-string">&#x27;&lt;li&gt;123&lt;/li&gt;&#x27;</span><br>    &#125;)<br><br>var app6 = new Vue(&#123;<br>        el:<span class="hljs-string">&#x27;#app6&#x27;</span>,<br>        data:&#123;<br>            i<br>        &#125;<br>    &#125;);<br><br>HTML<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ol</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app6&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-comment">&lt;!-- 创建一个 todo-item 组件的实例 --&gt;</span></span><br><span class="language-xml">        </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">todo-item</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">todo-item</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="组件的复用"><a href="#组件的复用" class="headerlink" title="组件的复用"></a>组件的复用</h3><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xquery"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;components-demo&quot;</span>&gt;</span></span><br><span class="language-xml">  </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button-counter</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button-counter</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">  </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button-counter</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button-counter</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">  </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button-counter</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button-counter</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><br><br>注意当点击按钮时，每个组件都会各自独立维护它的<span class="hljs-built_in"> count</span>。因为你每用一次组件，就会有一个它的新实例被创建。<br></code></pre></td></tr></table></figure><h3 id="组件传值"><a href="#组件传值" class="headerlink" title="组件传值"></a>组件传值</h3><h4 id="父组件子组件互相传值"><a href="#父组件子组件互相传值" class="headerlink" title="父组件子组件互相传值"></a>父组件子组件互相传值</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs xml">html<br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;valuedata&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&#x27;sub_fn&#x27;</span>&gt;</span>提交<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">item-li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item,index) in lists&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;index&quot;</span> <span class="hljs-attr">:content</span>=<span class="hljs-string">&quot;item&quot;</span> <span class="hljs-attr">:index</span>=<span class="hljs-string">&quot;index&quot;</span> @<span class="hljs-attr">delete</span>=<span class="hljs-string">&quot;handledelete&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">item-li</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><br>js<br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;item-li&#x27;</span>,&#123;</span><br><span class="language-javascript">    <span class="hljs-attr">props</span>:[<span class="hljs-string">&#x27;content&#x27;</span>,<span class="hljs-string">&#x27;index&#x27;</span>],</span><br><span class="language-javascript">    <span class="hljs-attr">template</span>:<span class="hljs-string">&#x27;&lt;li @click=&quot;handleclick&quot;&gt;&#123;&#123;content&#125;&#125;&lt;/li&gt;&#x27;</span>,</span><br><span class="language-javascript">    <span class="hljs-attr">methods</span>:&#123;</span><br><span class="language-javascript">      <span class="hljs-attr">handleclick</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.$emit(<span class="hljs-string">&#x27;delete&#x27;</span>,<span class="hljs-variable language_">this</span>.<span class="hljs-property">index</span>)</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;)</span><br><span class="language-javascript">  <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">    <span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#demo&#x27;</span>,</span><br><span class="language-javascript">    <span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript">      <span class="hljs-attr">valuedata</span>:<span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">lists</span>:[]</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-attr">methods</span>:&#123;</span><br><span class="language-javascript">      <span class="hljs-attr">sub_fn</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">       <span class="hljs-variable language_">this</span>.<span class="hljs-property">lists</span>.<span class="hljs-title function_">push</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">valuedata</span>)</span><br><span class="language-javascript">      &#125;,</span><br><span class="language-javascript">      <span class="hljs-attr">handledelete</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">lists</span>.<span class="hljs-title function_">splice</span>(e,<span class="hljs-number">1</span>)</span><br><span class="language-javascript">        </span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="父向子组件传值"><a href="#父向子组件传值" class="headerlink" title="父向子组件传值"></a>父向子组件传值</h4><p> 1.父组件parent代码如下：</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xquery">template<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">son</span> <span class="hljs-attr">psMsg</span>=<span class="hljs-string">&quot;父传子的内容:叫爸爸&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">son</span>&gt;</span></span><br>如果传对象<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">son</span> ：<span class="hljs-attr">psMsg</span>=<span class="hljs-string">&quot;mydata&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">son</span>&gt;</span></span><br><br>script<br><span class="hljs-keyword">import</span> son from <span class="hljs-string">&#x27;./Son&#x27;</span> //引入子组件<br>components:&#123;son&#125;,<br></code></pre></td></tr></table></figure><p>2.子组件son代码如下：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">template</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>子组件接收到内容：</span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">psMsg</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">script</span><br><span class="language-xml">props:[&#x27;psMsg&#x27;],//接手psMsg值</span><br></code></pre></td></tr></table></figure><p>通过 Prop 向子组件传递数据</p><h4 id="子组件向父组件传值"><a href="#子组件向父组件传值" class="headerlink" title="子组件向父组件传值"></a>子组件向父组件传值</h4><p>子组件  this.$emit(‘func’,this.msg)传出</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">input</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;sendMsg&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;给父组件传递值&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript"> </span><br><span class="language-javascript">    data () &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">//将msg传递给父组件</span></span><br><span class="language-javascript">            <span class="hljs-attr">msg</span>: <span class="hljs-string">&quot;我是子组件的msg&quot;</span>,</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">     <span class="hljs-attr">methods</span>:&#123;</span><br><span class="language-javascript">         <span class="hljs-title function_">sendMsg</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">             <span class="hljs-comment">//func: 是父组件指定的传数据绑定的函数，this.msg:子组件给父组件传递的数据</span></span><br><span class="language-javascript">             <span class="hljs-variable language_">this</span>.$emit(<span class="hljs-string">&#x27;func&#x27;</span>,<span class="hljs-variable language_">this</span>.<span class="hljs-property">msg</span>)</span><br><span class="language-javascript">         &#125;</span><br><span class="language-javascript">     &#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>父组件   @func&#x3D;”getMsgFormSon”  接收并调用方法</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">child</span> @<span class="hljs-attr">func</span>=<span class="hljs-string">&quot;getMsgFormSon&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">child</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">import</span> child <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./child.vue&#x27;</span></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">    data () &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">msgFormSon</span>: <span class="hljs-string">&quot;this is msg&quot;</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-attr">components</span>:&#123;</span><br><span class="language-javascript">        child,</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-attr">methods</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">getMsgFormSon</span>(<span class="hljs-params">data</span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">msgFormSon</span> = data</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">msgFormSon</span>)</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="通过插槽分发内容"><a href="#通过插槽分发内容" class="headerlink" title="通过插槽分发内容"></a>通过插槽分发内容</h4><p>和 HTML 元素一样，我们经常需要向一个组件传递内容，像这样：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">alert-box</span>&gt;</span><br>  Something bad happened.<br><span class="hljs-tag">&lt;/<span class="hljs-name">alert-box</span>&gt;</span><br>可能会渲染出这样的东西：<br><br>幸好，Vue 自定义的 <span class="hljs-tag">&lt;<span class="hljs-name">slot</span>&gt;</span> 元素让这变得非常简单：<br><br>Vue.component(&#x27;alert-box&#x27;, &#123;<br>  template: `<br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo-alert-box&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>Error!<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">slot</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  `<br>&#125;)<br></code></pre></td></tr></table></figure><p>我们只要在需要的地方加入插槽就行了</p><h4 id="动态组件"><a href="#动态组件" class="headerlink" title="动态组件"></a>动态组件</h4><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vhdl">可以通过 Vue 的 &lt;<span class="hljs-keyword">component</span>&gt; 元素加一个特殊的 <span class="hljs-keyword">is</span> <span class="hljs-keyword">attribute</span> 来实现：<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml"><br><span class="hljs-comment">&lt;!-- 组件会在 `currentTabComponent` 改变时改变 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">component</span> <span class="hljs-attr">v-bind:is</span>=<span class="hljs-string">&quot;currentTabComponent&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">component</span>&gt;</span><br><br>在上述示例中，currentTabComponent 可以包括<br><br>已注册组件的名字，或<br>一个组件的选项对象<br><br>计算属性<br>computed: &#123;<br>          currentTabComponent: function () &#123;<br>            return &quot;tab-home&quot;;<br>          &#125;<br>        &#125;<br><br>则<br><span class="hljs-tag">&lt;<span class="hljs-name">component</span> &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">component</span>&gt;</span><br>变成<br><span class="hljs-tag">&lt;<span class="hljs-name">tab-home</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">tab-home</span>/&gt;</span><br>==<br><span class="hljs-tag">&lt;<span class="hljs-name">component</span> <span class="hljs-attr">is</span>=<span class="hljs-string">&quot;tab-home&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">component</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h2 id="深入了解组件"><a href="#深入了解组件" class="headerlink" title="深入了解组件"></a>深入了解组件</h2><h3 id="组件注册"><a href="#组件注册" class="headerlink" title="组件注册"></a>组件注册</h3><h4 id="组件名大小写"><a href="#组件名大小写" class="headerlink" title="组件名大小写"></a>组件名大小写</h4><p>kebab-case<br>PascalCase</p><h4 id="全局注册"><a href="#全局注册" class="headerlink" title="全局注册"></a>全局注册</h4><h5 id="Vue-component-注册"><a href="#Vue-component-注册" class="headerlink" title="Vue.component 注册"></a>Vue.component 注册</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;my-component-name&#x27;</span>, &#123;<br>  <span class="hljs-comment">// ... 选项 ...</span><br>&#125;)<br>这些组件是全局注册的。也就是说它们在注册之后可以用在任何新创建的 <span class="hljs-title class_">Vue</span> 根实例 (<span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>) 的模板中。比如：<br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;component-a&#x27;</span>, &#123; <span class="hljs-comment">/* ... */</span> &#125;)<br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;component-b&#x27;</span>, &#123; <span class="hljs-comment">/* ... */</span> &#125;)<br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;component-c&#x27;</span>, &#123; <span class="hljs-comment">/* ... */</span> &#125;)<br><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123; <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span> &#125;)<br>&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">component-a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">component-a</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">component-b</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">component-b</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">component-c</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">component-c</span>&gt;</span></span><br>&lt;/div&gt;<br><br></code></pre></td></tr></table></figure><p>全局注册例子</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs maxima">Vue.component(&#x27;item-<span class="hljs-built_in">li</span>&#x27;,&#123;<br>   <span class="hljs-built_in">props</span>:[&#x27;<span class="hljs-built_in">content</span>&#x27;],<br>   template:&#x27;&lt;<span class="hljs-built_in">li</span>&gt;&#123;&#123;<span class="hljs-built_in">content</span>&#125;&#125;&lt;/<span class="hljs-built_in">li</span>&gt;&#x27;<br> &#125;)<br><br><br></code></pre></td></tr></table></figure><p>vue-cli  使用</p><p>全局组件<br>main.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> hyyyTitle <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/mycomponents/hyyyTitle.vue&#x27;</span><br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;hyyyTitle&#x27;</span>,hyyyTitle)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br><br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Detail&#x27;</span>,<br><br>  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>)&#123;<br><br>    <span class="hljs-keyword">return</span> &#123;<br><br>    &#125;<br><br>  &#125;,<br><br>  <span class="hljs-attr">components</span>:&#123;<br><br>     hyyyTitle<br><br>   &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="局部注册"><a href="#局部注册" class="headerlink" title="局部注册"></a>局部注册</h4><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-comment">// var ItemLi = &#123;</span><br>  <span class="hljs-comment">//   template:&#x27;&lt;li&gt;1&lt;/li&gt;&#x27;</span><br>  <span class="hljs-comment">// &#125;</span><br><span class="hljs-keyword">new</span> Vue(&#123;<br>    el:<span class="hljs-string">&#x27;#demo&#x27;</span>,<br>    data:&#123;<br>      valuedata:<span class="hljs-string">&#x27;&#x27;</span>,<br>      lists:[]<br>    &#125;,<br>    <span class="hljs-comment">// components:&#123;</span><br>    <span class="hljs-comment">//   ItemLi:ItemLi</span><br>    <span class="hljs-comment">// &#125;,</span><br>    methods:&#123;<br>      sub_fn:<span class="hljs-keyword">function</span><span class="hljs-params">()</span>&#123;<br>       <span class="hljs-keyword">this</span>.lists.push(<span class="hljs-keyword">this</span>.valuedata)<br>      &#125;<br>    &#125;<br>  &#125;)<br><br></code></pre></td></tr></table></figure><h4 id="vue-cli-使用"><a href="#vue-cli-使用" class="headerlink" title="vue-cli  使用"></a>vue-cli  使用</h4><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-regexp">//</span> <span class="hljs-keyword">import</span> hyyyTitle <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/mycomponents/hyyyTitle.vue&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  name: <span class="hljs-string">&#x27;Detail&#x27;</span>,<br>  data()&#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>    &#125;<br>  &#125;,<br>  components:&#123;<br>     hyyyTitle<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="使用组件"><a href="#使用组件" class="headerlink" title="使用组件"></a>使用组件</h4><p>vue文件使用标签</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;hyyyTitle /&gt;</span><br></code></pre></td></tr></table></figure><h3 id="模块系统"><a href="#模块系统" class="headerlink" title="模块系统"></a>模块系统</h3><h4 id="在模块系统中局部注册"><a href="#在模块系统中局部注册" class="headerlink" title="在模块系统中局部注册"></a>在模块系统中局部注册</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript">如果你还在阅读，说明你使用了诸如 <span class="hljs-title class_">Babel</span> 和 webpack 的模块系统。在这些情况下，我们推荐创建一个 components 目录，并将每个组件放置在其各自的文件中。<br><br>然后你需要在局部注册之前导入每个你想使用的组件。例如，在一个假设的 <span class="hljs-title class_">ComponentB</span>.<span class="hljs-property">js</span> 或 <span class="hljs-title class_">ComponentB</span>.<span class="hljs-property">vue</span> 文件中：<br><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ComponentA</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./ComponentA&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ComponentC</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./ComponentC&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">components</span>: &#123;<br>    <span class="hljs-title class_">ComponentA</span>,<br>    <span class="hljs-title class_">ComponentC</span><br>  &#125;,<br>  <span class="hljs-comment">// ...</span><br>&#125;<br>现在 <span class="hljs-title class_">ComponentA</span> 和 <span class="hljs-title class_">ComponentC</span> 都可以在 <span class="hljs-title class_">ComponentB</span> 的模板中使用了。<br></code></pre></td></tr></table></figure><h4 id="基础组件的自动化全局注册"><a href="#基础组件的自动化全局注册" class="headerlink" title="基础组件的自动化全局注册"></a>基础组件的自动化全局注册</h4><p><a href="https://vuejs.bootcss.com/guide/components-registration.html#%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6%E7%9A%84%E8%87%AA%E5%8A%A8%E5%8C%96%E5%85%A8%E5%B1%80%E6%B3%A8%E5%86%8C">https://vuejs.bootcss.com/guide/components-registration.html#基础组件的自动化全局注册</a></p><h4 id="导入基础组件库到全局"><a href="#导入基础组件库到全局" class="headerlink" title="导入基础组件库到全局"></a>导入基础组件库到全局</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">https</span>:<span class="hljs-comment">//vuejs.bootcss.com/guide/components-registration.html#基础组件的自动化全局注册</span><br><br><br><br>如果你恰好使用了 webpack (或在内部使用了 webpack 的 <span class="hljs-title class_">Vue</span> <span class="hljs-variable constant_">CLI</span> <span class="hljs-number">3</span>+)，那么就可以使用 <span class="hljs-built_in">require</span>.<span class="hljs-property">context</span> 只全局注册这些非常通用的基础组件。这里有一份可以让你在应用入口文件 (比如 src/main.<span class="hljs-property">js</span>) 中全局导入基础组件的示例代码：<br><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> upperFirst <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;lodash/upperFirst&#x27;</span><br><span class="hljs-keyword">import</span> camelCase <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;lodash/camelCase&#x27;</span><br><br><span class="hljs-keyword">const</span> requireComponent = <span class="hljs-built_in">require</span>.<span class="hljs-title function_">context</span>(<br>  <span class="hljs-comment">// 其组件目录的相对路径</span><br>  <span class="hljs-string">&#x27;./components&#x27;</span>,<br>  <span class="hljs-comment">// 是否查询其子目录</span><br>  <span class="hljs-literal">false</span>,<br>  <span class="hljs-comment">// 匹配基础组件文件名的正则表达式</span><br>  <span class="hljs-regexp">/Base[A-Z]\w+\.(vue|js)$/</span><br>)<br><br>requireComponent.<span class="hljs-title function_">keys</span>().<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">fileName</span> =&gt;</span> &#123;<br>  <span class="hljs-comment">// 获取组件配置</span><br>  <span class="hljs-keyword">const</span> componentConfig = requireComponent(fileName)<br><br>  <span class="hljs-comment">// 获取组件的 PascalCase 命名</span><br>  <span class="hljs-keyword">const</span> componentName = <span class="hljs-title function_">upperFirst</span>(<br>    <span class="hljs-title function_">camelCase</span>(<br>      <span class="hljs-comment">// 获取和目录深度无关的文件名</span><br>      fileName<br>        .<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;/&#x27;</span>)<br>        .<span class="hljs-title function_">pop</span>()<br>        .<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/\.\w+$/</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>    )<br>  )<br><br>  <span class="hljs-comment">// 全局注册组件</span><br>  <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<br>    componentName,<br>    <span class="hljs-comment">// 如果这个组件选项是通过 `export default` 导出的，</span><br>    <span class="hljs-comment">// 那么就会优先使用 `.default`，</span><br>    <span class="hljs-comment">// 否则回退到使用模块的根。</span><br>    componentConfig.<span class="hljs-property">default</span> || componentConfig<br>  )<br>&#125;)<br>记住全局注册的行为必须在根 <span class="hljs-title class_">Vue</span> 实例 (通过 <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>) 创建之前发生。这里有一个真实项目情景下的示例。<br></code></pre></td></tr></table></figure><p>Prop<br>Prop 的大小写 (camelCase vs kebab-case)</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">HTML 中的 attribute 名是大小写不敏感的，所以浏览器会把所有大写字符解释为小写字符。这意味着当你使用 DOM 中的模板时，camelCase (驼峰命名法) 的 prop 名需要使用其等价的 kebab-case (短横线分隔命名) 命名：</span><br><span class="language-xml"></span><br><span class="language-xml">Vue.component(&#x27;blog-post&#x27;, &#123;</span><br><span class="language-xml">  // 在 JavaScript 中是 camelCase 的</span><br><span class="language-xml">  props: [&#x27;postTitle&#x27;],</span><br><span class="language-xml">  template: &#x27;<span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">postTitle</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span>&#x27;</span><br><span class="language-xml">&#125;)</span><br><span class="language-xml"><span class="hljs-comment">&lt;!-- 在 HTML 中是 kebab-case 的 --&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">blog-post</span> <span class="hljs-attr">post-title</span>=<span class="hljs-string">&quot;hello!&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">blog-post</span>&gt;</span></span><br><span class="language-xml">重申一次，如果你使用字符串模板，那么这个限制就不存在了。</span><br></code></pre></td></tr></table></figure><h3 id="Prop-类型"><a href="#Prop-类型" class="headerlink" title="Prop 类型"></a>Prop 类型</h3><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs qml"><span class="hljs-attribute">https</span>:<span class="hljs-comment">//vuejs.bootcss.com/guide/components-props.html#Prop-类型</span><br><br><br>到这里，我们只看到了以字符串数组形式列出的 prop：<br><br><span class="hljs-attribute">props</span>: [<span class="hljs-string">&#x27;title&#x27;</span>, <span class="hljs-string">&#x27;likes&#x27;</span>, <span class="hljs-string">&#x27;isPublished&#x27;</span>, <span class="hljs-string">&#x27;commentIds&#x27;</span>, <span class="hljs-string">&#x27;author&#x27;</span>]<br>但是，通常你希望每个 prop 都有指定的值类型。这时，你可以以对象形式列出 prop，这些 <span class="hljs-keyword">property</span><span class="hljs-string"> 的名称和值分别是 prop 各自的名称和类型：</span><br><br><span class="hljs-attribute">props</span>: &#123;<br>  <span class="hljs-attribute">title</span>: <span class="hljs-built_in">String</span>,<br>  <span class="hljs-attribute">likes</span>: <span class="hljs-built_in">Number</span>,<br>  <span class="hljs-attribute">isPublished</span>: <span class="hljs-built_in">Boolean</span>,<br>  <span class="hljs-attribute">commentIds</span>: <span class="hljs-built_in">Array</span>,<br>  <span class="hljs-attribute">author</span>: <span class="hljs-built_in">Object</span>,<br>  <span class="hljs-attribute">callback</span>: <span class="hljs-built_in">Function</span>,<br>  <span class="hljs-attribute">contactsPromise</span>: <span class="hljs-built_in">Promise</span> <span class="hljs-comment">// or any other constructor</span><br>&#125;<br>这不仅为你的组件提供了文档，还会在它们遇到错误的类型时从浏览器的 JavaScript 控制台提示用户。你会在这个页面接下来的部分看到类型检查和其它 prop 验证。<br><br><span class="hljs-attribute">https</span>:<span class="hljs-comment">//vuejs.bootcss.com/guide/components-props.html#Prop-验证</span><br></code></pre></td></tr></table></figure><h4 id="传递静态或动态-Prop"><a href="#传递静态或动态-Prop" class="headerlink" title="传递静态或动态 Prop"></a>传递静态或动态 Prop</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml">https://vuejs.bootcss.com/guide/components-props.html#传递静态或动态-Prop<br><br>像这样，你已经知道了可以像这样给 prop 传入一个静态的值：<br><br><span class="hljs-tag">&lt;<span class="hljs-name">blog-post</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;My journey with Vue&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">blog-post</span>&gt;</span><br>你也知道 prop 可以通过 v-bind 动态赋值，例如：<br><br><span class="hljs-comment">&lt;!-- 动态赋予一个变量的值 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">blog-post</span> <span class="hljs-attr">v-bind:title</span>=<span class="hljs-string">&quot;post.title&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">blog-post</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 动态赋予一个复杂表达式的值 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">blog-post</span></span><br><span class="hljs-tag">  <span class="hljs-attr">v-bind:title</span>=<span class="hljs-string">&quot;post.title + &#x27; by &#x27; + post.author.name&quot;</span></span><br><span class="hljs-tag">&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">blog-post</span>&gt;</span><br><br>在上述两个示例中，我们传入的值都是字符串类型的，但实际上任何类型的值都可以传给一个 prop。<br></code></pre></td></tr></table></figure><p>传入一个数字<br>传入一个布尔值<br>传入一个数组<br>传入一个对象<br>传入一个对象的所有 property</p><h4 id="单向数据流"><a href="#单向数据流" class="headerlink" title="单向数据流"></a>单向数据流</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">https:<span class="hljs-comment">//vuejs.bootcss.com/guide/components-props.html#单向数据流</span><br><br>所有的 prop 都使得其父子 prop 之间形成了一个单向下行绑定：父级 prop 的更新会向下流动到子组件中，但是反过来则不行。这样会防止从子组件意外变更父级组件的状态，从而导致你的应用的数据流向难以理解。<br><br>额外的，每次父级组件发生变更时，子组件中所有的 prop 都将会刷新为最新的值。这意味着你不应该在一个子组件内部改变 prop。如果你这样做了，Vue 会在浏览器的控制台中发出警告。<br><br>这里有两种常见的试图变更一个 prop 的情形：<br><br>这个 prop 用来传递一个初始值；这个子组件接下来希望将其作为一个本地的 prop 数据来使用。在这种情况下，最好定义一个本地的 <span class="hljs-keyword">data</span> property 并将这个 prop 用作其初始值：<br><br>props: [<span class="hljs-string">&#x27;initialCounter&#x27;</span>],<br><span class="hljs-keyword">data</span>: function () &#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    counter: <span class="hljs-keyword">this</span>.initialCounter<br>  &#125;<br>&#125;<br>这个 prop 以一种原始的值传入且需要进行转换。在这种情况下，最好使用这个 prop 的值来定义一个计算属性：<br><br>props: [<span class="hljs-string">&#x27;size&#x27;</span>],<br>computed: &#123;<br>  normalizedSize: function () &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.size.trim().toLowerCase()<br>  &#125;<br>&#125;<br>注意在 JavaScript 中对象和数组是通过引用传入的，所以对于一个数组或对象类型的 prop 来说，在子组件中改变变更这个对象或数组本身将会影响到父组件的状态。<br></code></pre></td></tr></table></figure><p>Prop 验证</p><blockquote><p><a href="https://vuejs.bootcss.com/guide/components-props.html#Prop-%E9%AA%8C%E8%AF%81">https://vuejs.bootcss.com/guide/components-props.html#Prop-验证</a></p><p>我们可以为组件的 prop 指定验证要求，例如你知道的这些类型。如果有一个需求没有被满足，则 Vue 会在浏览器控制台中警告你。这在开发一个会被别人用到的组件时尤其有帮助。</p><p>为了定制 prop 的验证方式，你可以为 props 中的值提供一个带有验证需求的对象，而不是一个字符串数组。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;my-component&#x27;</span>, &#123;<br>  <span class="hljs-attr">props</span>: &#123;<br>    <span class="hljs-comment">// 基础的类型检查 (`null` 和 `undefined` 会通过任何类型验证)</span><br>    <span class="hljs-attr">propA</span>: <span class="hljs-title class_">Number</span>,<br>    <span class="hljs-comment">// 多个可能的类型</span><br>    <span class="hljs-attr">propB</span>: [<span class="hljs-title class_">String</span>, <span class="hljs-title class_">Number</span>],<br>    <span class="hljs-comment">// 必填的字符串</span><br>    <span class="hljs-attr">propC</span>: &#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-title class_">String</span>,<br>      <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span><br>    &#125;,<br>    <span class="hljs-comment">// 带有默认值的数字</span><br>    <span class="hljs-attr">propD</span>: &#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-title class_">Number</span>,<br>      <span class="hljs-attr">default</span>: <span class="hljs-number">100</span><br>    &#125;,<br>    <span class="hljs-comment">// 带有默认值的对象</span><br>    <span class="hljs-attr">propE</span>: &#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-title class_">Object</span>,<br>      <span class="hljs-comment">// 对象或数组默认值必须从一个工厂函数获取</span><br>      <span class="hljs-attr">default</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;hello&#x27;</span> &#125;<br>      &#125;<br>    &#125;,<br>    <span class="hljs-comment">// 自定义验证函数</span><br>    <span class="hljs-attr">propF</span>: &#123;<br>      <span class="hljs-attr">validator</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">value</span>) &#123;<br>        <span class="hljs-comment">// 这个值必须匹配下列字符串中的一个</span><br>        <span class="hljs-keyword">return</span> [<span class="hljs-string">&#x27;success&#x27;</span>, <span class="hljs-string">&#x27;warning&#x27;</span>, <span class="hljs-string">&#x27;danger&#x27;</span>].<span class="hljs-title function_">indexOf</span>(value) !== -<span class="hljs-number">1</span><br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure></blockquote><p>当 prop 验证失败的时候，(开发环境构建版本的) Vue 将会产生一个控制台的警告。</p><p>注意那些 prop 会在一个组件实例创建之前进行验证，所以实例的 property (如 data、computed 等) 在 default 或 validator 函数中是不可用的。</p><h4 id="类型检查"><a href="#类型检查" class="headerlink" title="类型检查"></a>类型检查</h4><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs qml"><span class="hljs-attribute">https</span>:<span class="hljs-comment">//vuejs.bootcss.com/guide/components-props.html#类型检查</span><br><br>type 可以是下列原生构造函数中的一个：<br><br><span class="hljs-built_in">String</span><br><span class="hljs-built_in">Number</span><br><span class="hljs-built_in">Boolean</span><br><span class="hljs-built_in">Array</span><br><span class="hljs-built_in">Object</span><br><span class="hljs-built_in">Date</span><br><span class="hljs-built_in">Function</span><br><span class="hljs-built_in">Symbol</span><br>额外的，type 还可以是一个自定义的构造函数，并且通过 <span class="hljs-keyword">instanceof</span> 来进行检查确认。例如，给定下列现成的构造函数：<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span> (<span class="hljs-params">firstName, lastName</span>) </span>&#123;<br>  <span class="hljs-keyword">this</span>.firstName = firstName<br>  <span class="hljs-keyword">this</span>.lastName = lastName<br>&#125;<br>你可以使用：<br><br>Vue.component(<span class="hljs-string">&#x27;blog-post&#x27;</span>, &#123;<br>  <span class="hljs-attribute">props</span>: &#123;<br>    <span class="hljs-attribute">author</span>: Person<br>  &#125;<br>&#125;)<br>来验证 author prop 的值是否是通过 <span class="hljs-keyword">new</span> Person 创建的。<br></code></pre></td></tr></table></figure><p>非 Prop 的 Attribute</p><p><a href="https://vuejs.bootcss.com/guide/components-props.html#%E9%9D%9E-Prop-%E7%9A%84-Attribute">https://vuejs.bootcss.com/guide/components-props.html#非-Prop-的-Attribute</a></p><p>替换&#x2F;合并已有的 Attribute<br>禁用 Attribute 继承</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs php">https:<span class="hljs-comment">//vuejs.bootcss.com/guide/components-props.html#非-Prop-的-Attribute</span><br><br>如果你不希望组件的根元素继承 attribute，你可以在组件的选项中设置 inheritAttrs: <span class="hljs-literal">false</span>。例如：<br><br>Vue.<span class="hljs-title function_ invoke__">component</span>(<span class="hljs-string">&#x27;my-component&#x27;</span>, &#123;<br>  <span class="hljs-attr">inheritAttrs</span>: <span class="hljs-literal">false</span>,<br>  // ...<br>&#125;)<br>这尤其适合配合实例的 <span class="hljs-variable">$attrs</span> property 使用，该 property 包含了传递给一个组件的 attribute 名和 attribute 值，例如：<br><br>&#123;<br>  required: <span class="hljs-literal">true</span>,<br>  placeholder: <span class="hljs-string">&#x27;Enter your username&#x27;</span><br>&#125;<br>有了 inheritAttrs: <span class="hljs-literal">false</span> 和 <span class="hljs-variable">$attrs</span>，你就可以手动决定这些 attribute 会被赋予哪个元素。在撰写基础组件的时候是常会用到的：<br><br>Vue.<span class="hljs-title function_ invoke__">component</span>(<span class="hljs-string">&#x27;base-input&#x27;</span>, &#123;<br>  <span class="hljs-attr">inheritAttrs</span>: <span class="hljs-literal">false</span>,<br>  <span class="hljs-attr">props</span>: [<span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;value&#x27;</span>],<br>  <span class="hljs-attr">template</span>: `<br>    &lt;label&gt;<br>      &#123;&#123; label &#125;&#125;<br>      &lt;input<br>        v-bind=<span class="hljs-string">&quot;<span class="hljs-subst">$attrs</span>&quot;</span><br>        v-<span class="hljs-attr">bind</span>:value=<span class="hljs-string">&quot;value&quot;</span><br>        v-<span class="hljs-attr">on</span>:input=<span class="hljs-string">&quot;<span class="hljs-subst">$emit</span>(&#x27;input&#x27;, <span class="hljs-subst">$event</span>.target.value)&quot;</span><br>      &gt;<br>    &lt;/label&gt;<br>  `<br>&#125;)<br>注意 inheritAttrs: <span class="hljs-literal">false</span> 选项不会影响 style 和 <span class="hljs-class"><span class="hljs-keyword">class</span> 的绑定。</span><br></code></pre></td></tr></table></figure><h3 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h3><p>事件名<br>推荐你始终使用 kebab-case 的事件名。<br>自定义组件的 v-model</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs php">https:<span class="hljs-comment">//vuejs.bootcss.com/guide/components-props.html#非-Prop-的-Attribute</span><br><br><br>一个组件上的 v-model 默认会利用名为 value 的 prop 和名为 input 的事件，但是像单选框、复选框等类型的输入控件可能会将 value attribute 用于不同的目的。model 选项可以用来避免这样的冲突：<br><br>Vue.<span class="hljs-title function_ invoke__">component</span>(<span class="hljs-string">&#x27;base-checkbox&#x27;</span>, &#123;<br>  <span class="hljs-attr">model</span>: &#123;<br>    <span class="hljs-attr">prop</span>: <span class="hljs-string">&#x27;checked&#x27;</span>,<br>    <span class="hljs-attr">event</span>: <span class="hljs-string">&#x27;change&#x27;</span><br>  &#125;,<br>  <span class="hljs-attr">props</span>: &#123;<br>    <span class="hljs-attr">checked</span>: Boolean<br>  &#125;,<br>  <span class="hljs-attr">template</span>: `<br>    &lt;input<br>      type=<span class="hljs-string">&quot;checkbox&quot;</span><br>      v-<span class="hljs-attr">bind</span>:checked=<span class="hljs-string">&quot;checked&quot;</span><br>      v-<span class="hljs-attr">on</span>:change=<span class="hljs-string">&quot;<span class="hljs-subst">$emit</span>(&#x27;change&#x27;, <span class="hljs-subst">$event</span>.target.checked)&quot;</span><br>    &gt;<br>  `<br>&#125;)<br>现在在这个组件上使用 v-model 的时候：<br><br>&lt;base-checkbox v-model=<span class="hljs-string">&quot;lovingVue&quot;</span>&gt;&lt;/base-checkbox&gt;<br>这里的 lovingVue 的值将会传入这个名为 checked 的 prop。同时当 &lt;base-checkbox&gt; 触发一个 change 事件并附带一个新的值的时候，这个 lovingVue 的 property 将会被更新。<br><br>注意你仍然需要在组件的 props 选项里声明 checked 这个 prop。<br></code></pre></td></tr></table></figure><p>将原生事件绑定到组件</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs dart">https:<span class="hljs-comment">//vuejs.bootcss.com/guide/components-props.html#非-Prop-的-Attribute</span><br><br>可能有很多次想要在一个组件的根元素上直接监听一个原生事件。这时，你可以使用 v-<span class="hljs-keyword">on</span> 的 .native 修饰符：<br><br><br>你可能有很多次想要在一个组件的根元素上直接监听一个原生事件。这时，你可以使用 v-<span class="hljs-keyword">on</span> 的 .native 修饰符：<br><br>&lt;<span class="hljs-keyword">base</span>-input v-<span class="hljs-keyword">on</span>:focus.native=<span class="hljs-string">&quot;onFocus&quot;</span>&gt;&lt;/<span class="hljs-keyword">base</span>-input&gt;<br>在有的时候这是很有用的，不过在你尝试监听一个类似 &lt;input&gt; 的非常特定的元素时，这并不是个好主意。比如上述 &lt;<span class="hljs-keyword">base</span>-input&gt; 组件可能做了如下重构，所以根元素实际上是一个 &lt;label&gt; 元素：<br><br>&lt;label&gt;<br>  &#123;&#123; label &#125;&#125;<br>  &lt;input<br>    v-bind=<span class="hljs-string">&quot;<span class="hljs-subst">$attrs</span>&quot;</span><br>    v-bind:value=<span class="hljs-string">&quot;value&quot;</span><br>    v-<span class="hljs-keyword">on</span>:input=<span class="hljs-string">&quot;<span class="hljs-subst">$emit</span>(&#x27;input&#x27;, <span class="hljs-subst">$event</span>.target.value)&quot;</span><br>  &gt;<br>&lt;/label&gt;<br>这时，父级的 .native 监听器将静默失败。它不会产生任何报错，但是 onFocus 处理函数不会如你预期地被调用。<br><br>为了解决这个问题，Vue 提供了一个 $listeners property，它是一个对象，里面包含了作用在这个组件上的所有监听器。例如：<br><br>&#123;<br>  focus: function (event) &#123; <span class="hljs-comment">/* ... */</span> &#125;<br>  input: function (value) &#123; <span class="hljs-comment">/* ... */</span> &#125;,<br>&#125;<br>有了这个 $listeners property，你就可以配合 v-<span class="hljs-keyword">on</span>=<span class="hljs-string">&quot;<span class="hljs-subst">$listeners</span>&quot;</span> 将所有的事件监听器指向这个组件的某个特定的子元素。对于类似 &lt;input&gt; 的你希望它也可以配合 v-model 工作的组件来说，为这些监听器创建一个类似下述 inputListeners 的计算属性通常是非常有用的：<br><br>Vue.component(<span class="hljs-string">&#x27;base-input&#x27;</span>, &#123;<br>  inheritAttrs: <span class="hljs-keyword">false</span>,<br>  props: [<span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;value&#x27;</span>],<br>  computed: &#123;<br>    inputListeners: function () &#123;<br>      <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">this</span><br>      <span class="hljs-comment">// `Object.assign` 将所有的对象合并为一个新对象</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">Object</span>.assign(&#123;&#125;,<br>        <span class="hljs-comment">// 我们从父级添加所有的监听器</span><br>        <span class="hljs-keyword">this</span>.$listeners,<br>        <span class="hljs-comment">// 然后我们添加自定义监听器，</span><br>        <span class="hljs-comment">// 或覆写一些监听器的行为</span><br>        &#123;<br>          <span class="hljs-comment">// 这里确保组件配合 `v-model` 的工作</span><br>          input: function (event) &#123;<br>            vm.$emit(<span class="hljs-string">&#x27;input&#x27;</span>, event.target.value)<br>          &#125;<br>        &#125;<br>      )<br>    &#125;<br>  &#125;,<br>  template: `<br>    &lt;label&gt;<br>      &#123;&#123; label &#125;&#125;<br>      &lt;input<br>        v-bind=<span class="hljs-string">&quot;<span class="hljs-subst">$attrs</span>&quot;</span><br>        v-bind:value=<span class="hljs-string">&quot;value&quot;</span><br>        v-<span class="hljs-keyword">on</span>=<span class="hljs-string">&quot;inputListeners&quot;</span><br>      &gt;<br>    &lt;/label&gt;<br>  `<br>&#125;)<br>现在 &lt;<span class="hljs-keyword">base</span>-input&gt; 组件是一个完全透明的包裹器了，也就是说它可以完全像一个普通的 &lt;input&gt; 元素一样使用了：所有跟它相同的 attribute 和监听器都可以工作，不必再使用 .native 监听器。<br></code></pre></td></tr></table></figure><p>.native 修饰符<br>Vue 提供了一个 $listeners property<br>Object.assign（）将所有对象整合成一个新对象<br>.sync 修饰符<br>对一个 prop 进行“双向绑定”。</p>]]></content>
    
    
    <categories>
      
      <category>vue笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue_属性绑定</title>
    <link href="/hexodemo/2024/03/11/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_%E5%B1%9E%E6%80%A7%E7%BB%91%E5%AE%9A/"/>
    <url>/hexodemo/2024/03/11/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_%E5%B1%9E%E6%80%A7%E7%BB%91%E5%AE%9A/</url>
    
    <content type="html"><![CDATA[<h2 id="1-vue是什么"><a href="#1-vue是什么" class="headerlink" title="1.vue是什么"></a>1.vue是什么</h2><p>Vue (读音 &#x2F;vjuː&#x2F;，类似于 view) 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。</p><p>1是一套用于构建用户界面的渐进式框架<br>2与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用<br>3Vue 的核心库只关注视图层，易于上手，还便于与第三方库或既有项目整合。<br>4Vue 也完全能够为复杂的单页应用提供驱动。</p><h2 id="2-数据交互"><a href="#2-数据交互" class="headerlink" title="2.数据交互"></a>2.数据交互</h2><h3 id="基础数据与属性交互"><a href="#基础数据与属性交互" class="headerlink" title="基础数据与属性交互"></a>基础数据与属性交互</h3><p>​v-bind:属性</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><br>&lt;<span class="hljs-keyword">div</span> id=<span class="hljs-string">&quot;app&quot;</span> v-bind:title=<span class="hljs-string">&#x27;msg1&#x27;</span>&gt;<br>        &#123;&#123;message&#125;&#125;<br>    &lt;/<span class="hljs-keyword">div</span>&gt;<br><br><br><span class="hljs-built_in">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;<br>        el:<span class="hljs-string">&#x27;#app&#x27;</span>,<br>        data:&#123;<br>            message:<span class="hljs-string">&#x27;hellow Vue1&#x27;</span>,<br>            msg1:<span class="hljs-string">&#x27;这是一个标题&#x27;</span><br>        &#125;<br>    &#125;)<br><br><br>常规数据绑定加&#123;&#123;&#125;&#125;<br>元素属性绑定不加&#123;&#123;&#125;&#125;<br></code></pre></td></tr></table></figure><h4 id="与-Style-绑定"><a href="#与-Style-绑定" class="headerlink" title="与 Style 绑定"></a>与 Style 绑定</h4><h5 id="绑定类名v-bind-class"><a href="#绑定类名v-bind-class" class="headerlink" title="绑定类名v-bind:class"></a>绑定类名v-bind:class</h5><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs applescript">我们可以传给 v-bind:<span class="hljs-built_in">class</span> 一个对象，以动态地切换 <span class="hljs-built_in">class</span>：<br><br>&lt;<span class="hljs-keyword">div</span> v-bind:<span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;&#123; active: isActive &#125;&quot;</span>&gt;&lt;/<span class="hljs-keyword">div</span>&gt;<br>和如下 data：<br><br>data: &#123;<br>  isActive: <span class="hljs-literal">true</span>,<br>  hasError: <span class="hljs-literal">false</span><br>&#125;<br>结果渲染为：<br><br>&lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;static active&quot;</span>&gt;&lt;/<span class="hljs-keyword">div</span>&gt;<br></code></pre></td></tr></table></figure><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">&lt;<span class="hljs-keyword">div</span> v-bind:<span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;&#123; active: isActive &#125;&quot;</span>&gt;&lt;/<span class="hljs-keyword">div</span>&gt;<br></code></pre></td></tr></table></figure><p>语法表示 active 这个 class 存在与否将取决于数据 property isActive 的 truthiness。</p><h5 id="对象语法"><a href="#对象语法" class="headerlink" title="对象语法"></a>对象语法</h5><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">HTML<br>&lt;div v-bind:<span class="hljs-keyword">class</span>=&quot;<span class="hljs-symbol">classObject</span>&quot;&gt;&lt;/<span class="hljs-symbol">div</span>&gt;<br><br><br><span class="hljs-symbol">js</span><br><span class="hljs-symbol">data: </span>&#123;<br>  classObject: &#123;<br>    active: <span class="hljs-literal">true</span>,<br>    <span class="hljs-string">&#x27;text-danger&#x27;</span>: <span class="hljs-literal">false</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="计算属性控制"><a href="#计算属性控制" class="headerlink" title="计算属性控制"></a>计算属性控制</h5><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">&lt;div v-bind:<span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;classObject&quot;</span>&gt;&lt;/div&gt;<br><br><br><span class="hljs-keyword">data</span>: &#123;<br>  isActive: <span class="hljs-literal">true</span>,<br>  error: <span class="hljs-literal">null</span><br>&#125;,<br>computed: &#123;<br>  classObject: function () &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      active: <span class="hljs-keyword">this</span>.isActive &amp;&amp; !<span class="hljs-keyword">this</span>.error,<br>      <span class="hljs-string">&#x27;text-danger&#x27;</span>: <span class="hljs-keyword">this</span>.error &amp;&amp; <span class="hljs-keyword">this</span>.error.type === <span class="hljs-string">&#x27;fatal&#x27;</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="数组语法"><a href="#数组语法" class="headerlink" title="数组语法"></a>数组语法</h5><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">v-bind:<span class="hljs-keyword">class</span>=&quot;[<span class="hljs-symbol">activeClass, <span class="hljs-symbol">errorClass</span></span>]&quot;<br></code></pre></td></tr></table></figure><h5 id="三元表达式"><a href="#三元表达式" class="headerlink" title="三元表达式"></a>三元表达式</h5><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">v-bind:<span class="hljs-keyword">class</span>=&quot;[<span class="hljs-symbol">isActive</span> ? <span class="hljs-symbol">activeClass</span> : &#x27;&#x27;, <span class="hljs-symbol">errorClass</span>]&quot;<br></code></pre></td></tr></table></figure><h5 id="数组混合对象语法"><a href="#数组混合对象语法" class="headerlink" title="数组混合对象语法"></a>数组混合对象语法</h5><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs verilog">v-<span class="hljs-keyword">bind</span>:<span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;[&#123; active: isActive &#125;, errorClass]&quot;</span><br></code></pre></td></tr></table></figure><h5 id="在组件上"><a href="#在组件上" class="headerlink" title="在组件上"></a>在组件上</h5><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs applescript">例如，如果你声明了这个组件：<br><br>Vue.component(&#x27;<span class="hljs-keyword">my</span>-component&#x27;, &#123;<br>  template: &#x27;&lt;p <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;foo bar&quot;</span>&gt;Hi&lt;/p&gt;&#x27;<br>&#125;)<br>然后在使用它的时候添加一些 <span class="hljs-built_in">class</span>：<br><br>&lt;<span class="hljs-keyword">my</span>-component <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;baz boo&quot;</span>&gt;&lt;/<span class="hljs-keyword">my</span>-component&gt;<br>HTML 将被渲染为：<br><br>&lt;p <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;foo bar baz boo&quot;</span>&gt;Hi&lt;/p&gt;<br>对于带数据绑定 <span class="hljs-built_in">class</span> 也同样适用：<br><br>&lt;<span class="hljs-keyword">my</span>-component v-bind:<span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;&#123; active: isActive &#125;&quot;</span>&gt;&lt;/<span class="hljs-keyword">my</span>-component&gt;<br>当 isActive 为 truthy[<span class="hljs-number">1</span>] 时，HTML 将被渲染成为：<br><br>&lt;p <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;foo bar active&quot;</span>&gt;Hi&lt;/p&gt;<br></code></pre></td></tr></table></figure><h4 id="绑定内联样式v-bind-style"><a href="#绑定内联样式v-bind-style" class="headerlink" title="绑定内联样式v-bind:style"></a>绑定内联样式v-bind:style</h4><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">&lt;header<br><span class="hljs-title">   :</span>style=<span class="hljs-string">&quot;&#123;height: `calc(1.06rem + $&#123;statusBarHeight&#125;px)`, paddingTop: `$&#123;statusBarHeight&#125;px`&#125;&quot;</span>&gt;<br></code></pre></td></tr></table></figure><h5 id="对象语法-1"><a href="#对象语法-1" class="headerlink" title="对象语法"></a>对象语法</h5><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">v-bind:<span class="hljs-built_in">style</span>=<span class="hljs-string">&quot;&#123; color: activeColor, fontSize: fontSize + &#x27;px&#x27; &#125;&quot;</span><br></code></pre></td></tr></table></figure><h5 id="数组语法-1"><a href="#数组语法-1" class="headerlink" title="数组语法"></a>数组语法</h5><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">v-bind:<span class="hljs-built_in">style</span>=<span class="hljs-string">&quot;[baseStyles, overridingStyles]&quot;</span><br></code></pre></td></tr></table></figure><h5 id="多重值"><a href="#多重值" class="headerlink" title="多重值"></a>多重值</h5><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-meta">:style=&quot;&#123; display:</span> [<span class="hljs-emphasis">&#x27;-webkit-box&#x27;</span>, <span class="hljs-emphasis">&#x27;-ms-flexbox&#x27;</span>, <span class="hljs-emphasis">&#x27;flex&#x27;</span>] &#125;&quot;<br></code></pre></td></tr></table></figure><h4 id="子组件样式给style加scoped-（作用域）这样不会影响父组件"><a href="#子组件样式给style加scoped-（作用域）这样不会影响父组件" class="headerlink" title="子组件样式给style加scoped  （作用域）这样不会影响父组件"></a>子组件样式给style加scoped  （作用域）这样不会影响父组件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-class">.licolor</span>&#123;</span><br><span class="language-css">    <span class="hljs-attribute">color</span>: green;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="使用less或scss"><a href="#使用less或scss" class="headerlink" title="使用less或scss"></a>使用less或scss</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&#x27;less&#x27;</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-class">.licolor</span>&#123;</span><br><span class="language-css">    <span class="hljs-attribute">color</span>: green;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="style-动态拼接"><a href="#style-动态拼接" class="headerlink" title="style 动态拼接"></a>style 动态拼接</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;div <span class="hljs-attribute">class</span>=<span class="hljs-string">&quot;metop_title&quot;</span> :<span class="hljs-attribute">style</span>=<span class="hljs-string">&quot;&#123;</span><br><span class="hljs-string">      height: `calc(1.06rem + <span class="hljs-variable">$&#123;statusBarHeight&#125;</span>px)`,</span><br><span class="hljs-string">      paddingTop: `<span class="hljs-variable">$&#123;statusBarHeight&#125;</span>px`,</span><br><span class="hljs-string">    &#125;&quot;</span>&gt;我的&lt;/div&gt;<br></code></pre></td></tr></table></figure><h3 id="数据更改"><a href="#数据更改" class="headerlink" title="数据更改"></a>数据更改</h3><p>​更改data数据</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs applescript">&lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;app3&quot;</span>&gt;<br>       &lt;p v-<span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;everylast in boxs&quot;</span>&gt;<br>           &#123;&#123;everylast.<span class="hljs-built_in">text</span>&#125;&#125;<br>       &lt;/p&gt;<br>    &lt;/<span class="hljs-keyword">div</span>&gt;<br><br><br>var app3 = new Vue(&#123;<br>        el:&#x27;<span class="hljs-comment">#app3&#x27;,</span><br>        data:&#123;<br>            boxs:[<br>                &#123;<span class="hljs-built_in">text</span>:<span class="hljs-number">1</span>&#125;,<br>                &#123;<span class="hljs-built_in">text</span>:<span class="hljs-number">2</span>&#125;,<br>                &#123;<span class="hljs-built_in">text</span>:<span class="hljs-number">3</span>&#125;<br>            ]<br>        &#125;<br>    &#125;)<br><br><br>数据更改<br>app3.boxs.push(&#123;<span class="hljs-built_in">text</span>:<span class="hljs-number">4</span>&#125;)<br></code></pre></td></tr></table></figure><p>可以看vue实例-》数据与方法<br><a href="https://cn.vuejs.org/v2/guide/instance.html">https://cn.vuejs.org/v2/guide/instance.html</a></p><h3 id="添加事件监听"><a href="#添加事件监听" class="headerlink" title="添加事件监听"></a>添加事件监听</h3><p>​v-on</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;div id=<span class="hljs-string">&quot;app4&quot;</span>&gt;<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123;app4message&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;reversefn&quot;</span>&gt;</span>点击翻转<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>    &lt;/div&gt;<br><br><span class="hljs-keyword">var</span> app4 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>        <span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#app4&#x27;</span>,<br>        <span class="hljs-attr">data</span>:&#123;<br>            <span class="hljs-attr">app4message</span>:<span class="hljs-string">&#x27;这是一句话&#x27;</span><br>        &#125;,<br>        <span class="hljs-attr">methods</span>:&#123;<br>            <span class="hljs-attr">reversefn</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">app4message</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">app4message</span>.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;&#x27;</span>).<span class="hljs-title function_">reverse</span>().<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>)<br>            &#125;<br>        &#125;<br>    &#125;)<br></code></pre></td></tr></table></figure><h3 id="数据的双向绑定"><a href="#数据的双向绑定" class="headerlink" title="数据的双向绑定"></a>数据的双向绑定</h3><p>​v-model</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-comment">&lt;!-- v-model的双向数据绑定 --&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app5&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">message</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;message&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">var app5 = new Vue(&#123;</span><br><span class="language-xml">        el:&#x27;#app5&#x27;,</span><br><span class="language-xml">        data:&#123;</span><br><span class="language-xml">            message:&#x27;实时数据的双向绑定&#x27;</span><br><span class="language-xml">        &#125;</span><br><span class="language-xml">    &#125;)</span><br></code></pre></td></tr></table></figure><h3 id="v-text-和-v-html-可以代替差值表达式"><a href="#v-text-和-v-html-可以代替差值表达式" class="headerlink" title="v-text  和 v-html  可以代替差值表达式"></a>v-text  和 v-html  可以代替差值表达式</h3><h3 id="属性数据的双向绑定"><a href="#属性数据的双向绑定" class="headerlink" title="属性数据的双向绑定"></a>属性数据的双向绑定</h3><p>​v-bind  可缩写为   :bind</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">html</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&#x27;msgfn&#x27;</span> <span class="hljs-attr">v-bind:title</span>=<span class="hljs-string">&#x27;title&#x27;</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">msg</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">js</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">data</span>:&#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">msg</span>:<span class="hljs-string">&#x27;hello word&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">title</span>:<span class="hljs-string">&#x27;这是个信息&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;)</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="表单输入绑定"><a href="#表单输入绑定" class="headerlink" title="表单输入绑定"></a>表单输入绑定</h2><h3 id="基础用法v-model"><a href="#基础用法v-model" class="headerlink" title="基础用法v-model"></a>基础用法v-model</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">你可以用 v-model 指令在表单 <span class="hljs-tag">&lt;<span class="hljs-name">input</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">textarea</span>&gt;</span> 及 <span class="hljs-tag">&lt;<span class="hljs-name">select</span>&gt;</span> 元素上创建双向数据绑定。它会根据控件类型自动选取正确的方法来更新元素。尽管有些神奇，但 v-model 本质上不过是语法糖。它负责监听用户的输入事件以更新数据，并对一些极端场景进行一些特殊处理。<br></code></pre></td></tr></table></figure><h4 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h4><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;message&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;edit me&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Message is: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">message</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="多行文本"><a href="#多行文本" class="headerlink" title="多行文本"></a>多行文本</h4><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Multiline message is:<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;white-space: pre-line;&quot;</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">message</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;message&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;add multiple lines&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span></span><br></code></pre></td></tr></table></figure><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">注意：在文本区域插值 (<span class="hljs-tag">&lt;<span class="hljs-name">textarea</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">text</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span>) 并不会生效，应用 v-model 来代替。</span><br></code></pre></td></tr></table></figure><h4 id="复选框"><a href="#复选框" class="headerlink" title="复选框"></a>复选框</h4><p>单个复选框，绑定到布尔值：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;checked&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;checkbox&quot;</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">checked</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>多个复选框，绑定到同一个数组：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;jack&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Jack&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;checkedNames&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;jack&quot;</span>&gt;</span>Jack<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;john&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;John&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;checkedNames&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;john&quot;</span>&gt;</span>John<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;mike&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Mike&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;checkedNames&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;mike&quot;</span>&gt;</span>Mike<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Checked names: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">checkedNames</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">new Vue(&#123;</span><br><span class="language-xml">  el: &#x27;...&#x27;,</span><br><span class="language-xml">  data: &#123;</span><br><span class="language-xml">    checkedNames: []</span><br><span class="language-xml">  &#125;</span><br><span class="language-xml">&#125;)</span><br></code></pre></td></tr></table></figure><h4 id="单选按钮"><a href="#单选按钮" class="headerlink" title="单选按钮"></a>单选按钮</h4><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;example-4&quot;</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;one&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;One&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;picked&quot;</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;one&quot;</span>&gt;</span>One<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;two&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Two&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;picked&quot;</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;two&quot;</span>&gt;</span>Two<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Picked: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">picked</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">new Vue(&#123;</span><br><span class="language-xml">  el: &#x27;#example-4&#x27;,</span><br><span class="language-xml">  data: &#123;</span><br><span class="language-xml">    picked: &#x27;&#x27;</span><br><span class="language-xml">  &#125;</span><br><span class="language-xml">&#125;)</span><br></code></pre></td></tr></table></figure><h4 id="选择框"><a href="#选择框" class="headerlink" title="选择框"></a>选择框</h4><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">单选时：</span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;example-5&quot;</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;selected&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">disabled</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>请选择<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>A<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>B<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>C<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Selected: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">selected</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">new Vue(&#123;</span><br><span class="language-xml">  el: &#x27;...&#x27;,</span><br><span class="language-xml">  data: &#123;</span><br><span class="language-xml">    selected: &#x27;&#x27;</span><br><span class="language-xml">  &#125;</span><br><span class="language-xml">&#125;)</span><br></code></pre></td></tr></table></figure><h4 id="用-v-for-渲染的动态选项："><a href="#用-v-for-渲染的动态选项：" class="headerlink" title="用 v-for 渲染的动态选项："></a>用 v-for 渲染的动态选项：</h4><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xquery"><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;selected&quot;</span>&gt;</span></span><br><span class="language-xml">  </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;option in options&quot;</span> <span class="hljs-attr">v-bind:value</span>=<span class="hljs-string">&quot;option.value&quot;</span>&gt;</span></span><br><span class="language-xml">    </span><span class="language-xquery">&#123;&#123; <span class="hljs-keyword">option</span>.<span class="hljs-type">text</span> &#125;</span><span class="language-xml">&#125;</span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Selected: </span><span class="language-xquery">&#123;&#123; selected &#125;</span><span class="language-xml">&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br>new Vue(&#123;<br>  el: <span class="hljs-string">&#x27;...&#x27;</span>,<br>  data: &#123;<br>    selected: <span class="hljs-string">&#x27;A&#x27;</span>,<br>    options: [<br>      &#123; text: <span class="hljs-string">&#x27;One&#x27;</span>, value: <span class="hljs-string">&#x27;A&#x27;</span> &#125;,<br>      &#123; text: <span class="hljs-string">&#x27;Two&#x27;</span>, value: <span class="hljs-string">&#x27;B&#x27;</span> &#125;,<br>      &#123; text: <span class="hljs-string">&#x27;Three&#x27;</span>, value: <span class="hljs-string">&#x27;C&#x27;</span> &#125;<br>    ]<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="3-组件化应用构建"><a href="#3-组件化应用构建" class="headerlink" title="3.组件化应用构建"></a>3.组件化应用构建</h2><h4 id="创建组件"><a href="#创建组件" class="headerlink" title="创建组件"></a>创建组件</h4><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xquery">Vue.component(<span class="hljs-string">&#x27;todo-item&#x27;</span>, &#123;<br>        template: <span class="hljs-string">&#x27;&lt;li&gt;123&lt;/li&gt;&#x27;</span><br>    &#125;)<br><br>var app6 = new Vue(&#123;<br>        el:<span class="hljs-string">&#x27;#app6&#x27;</span>,<br>        data:&#123;<br>            i<br>        &#125;<br>    &#125;);<br><br>HTML<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ol</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app6&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-comment">&lt;!-- 创建一个 todo-item 组件的实例 --&gt;</span></span><br><span class="language-xml">        </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">todo-item</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">todo-item</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="组件传值"><a href="#组件传值" class="headerlink" title="组件传值"></a>组件传值</h4><h5 id="父组件子组件互相传值"><a href="#父组件子组件互相传值" class="headerlink" title="父组件子组件互相传值"></a>父组件子组件互相传值</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs xml">html<br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;valuedata&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&#x27;sub_fn&#x27;</span>&gt;</span>提交<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">item-li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item,index) in lists&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;index&quot;</span> <span class="hljs-attr">:content</span>=<span class="hljs-string">&quot;item&quot;</span> <span class="hljs-attr">:index</span>=<span class="hljs-string">&quot;index&quot;</span> @<span class="hljs-attr">delete</span>=<span class="hljs-string">&quot;handledelete&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">item-li</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><br>js<br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;item-li&#x27;</span>,&#123;</span><br><span class="language-javascript">    <span class="hljs-attr">props</span>:[<span class="hljs-string">&#x27;content&#x27;</span>,<span class="hljs-string">&#x27;index&#x27;</span>],</span><br><span class="language-javascript">    <span class="hljs-attr">template</span>:<span class="hljs-string">&#x27;&lt;li @click=&quot;handleclick&quot;&gt;&#123;&#123;content&#125;&#125;&lt;/li&gt;&#x27;</span>,</span><br><span class="language-javascript">    <span class="hljs-attr">methods</span>:&#123;</span><br><span class="language-javascript">      <span class="hljs-attr">handleclick</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.$emit(<span class="hljs-string">&#x27;delete&#x27;</span>,<span class="hljs-variable language_">this</span>.<span class="hljs-property">index</span>)</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;)</span><br><span class="language-javascript">  <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">    <span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#demo&#x27;</span>,</span><br><span class="language-javascript">    <span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript">      <span class="hljs-attr">valuedata</span>:<span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">lists</span>:[]</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-attr">methods</span>:&#123;</span><br><span class="language-javascript">      <span class="hljs-attr">sub_fn</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">       <span class="hljs-variable language_">this</span>.<span class="hljs-property">lists</span>.<span class="hljs-title function_">push</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">valuedata</span>)</span><br><span class="language-javascript">      &#125;,</span><br><span class="language-javascript">      <span class="hljs-attr">handledelete</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">lists</span>.<span class="hljs-title function_">splice</span>(e,<span class="hljs-number">1</span>)</span><br><span class="language-javascript">        </span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>​定”。</p>]]></content>
    
    
    <categories>
      
      <category>vue笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue $root 的用法</title>
    <link href="/hexodemo/2024/03/11/Vue%20$root%20%E7%9A%84%E7%94%A8%E6%B3%95/"/>
    <url>/hexodemo/2024/03/11/Vue%20$root%20%E7%9A%84%E7%94%A8%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>Vue 中$root 的用法:<br> $root用法:<br>  作用:  访问跟组件的属性和方法:<br>  $root 只是对跟组件有用,  不是父组件, $root 只是对对跟组件有用。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;ie=edge&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>$root访问根组件中的属性或方法<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">com1</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">com1</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">      <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="language-javascript">      <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">          <span class="hljs-attr">rootInfo</span>:<span class="hljs-string">&quot;我是根元素的属性&quot;</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">      &#125;,</span><br><span class="language-javascript">      <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">alerts</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">          <span class="hljs-title function_">alert</span>(<span class="hljs-number">111</span>)</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">      &#125;,</span><br><span class="language-javascript">      <span class="hljs-attr">components</span>: &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">com1</span>: &#123;</span><br><span class="language-javascript">          <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">              <span class="hljs-attr">info</span>: <span class="hljs-string">&quot;组件1&quot;</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">          &#125;,</span><br><span class="language-javascript">          <span class="hljs-attr">template</span>: <span class="hljs-string">&quot;&lt;p&gt;&#123;&#123; info &#125;&#125; &lt;com2&gt;&lt;/com2&gt;&lt;/p&gt;&quot;</span>,</span><br><span class="language-javascript">          <span class="hljs-attr">components</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">com2</span>: &#123;</span><br><span class="language-javascript">              <span class="hljs-attr">template</span>: <span class="hljs-string">&quot;&lt;p&gt;我是组件1的子组件&lt;/p&gt;&quot;</span>,</span><br><span class="language-javascript">              <span class="hljs-title function_">created</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">              <span class="hljs-variable language_">this</span>.<span class="hljs-property">$root</span>.<span class="hljs-title function_">alerts</span>()<span class="hljs-comment">//111</span></span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$root</span>.<span class="hljs-property">rootInfo</span>)<span class="hljs-comment">//我是根元素的属性</span></span><br><span class="language-javascript">              &#125;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">          &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>访问父组件的属性或方法 this.$parent;<br>访问子组件的属性或方法 this.$ref;</p>]]></content>
    
    
    <categories>
      
      <category>vue笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>canvas画线</title>
    <link href="/hexodemo/2024/03/11/canvas%E7%94%BB%E7%BA%BF/"/>
    <url>/hexodemo/2024/03/11/canvas%E7%94%BB%E7%BA%BF/</url>
    
    <content type="html"><![CDATA[<p>参考地址  <a href="https://segmentfault.com/q/1010000018554255">https://segmentfault.com/q/1010000018554255</a></p><h2 id="自写案例"><a href="#自写案例" class="headerlink" title="自写案例"></a>自写案例</h2><h3 id="画线-移入线条路径内高亮显示"><a href="#画线-移入线条路径内高亮显示" class="headerlink" title="画线 移入线条路径内高亮显示"></a>画线 移入线条路径内高亮显示</h3><p>html</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">&lt;canvas <span class="hljs-keyword">class</span>=&quot;<span class="hljs-symbol">canvasbox</span>&quot; <span class="hljs-symbol">id</span>=&quot;<span class="hljs-symbol">canvas</span>&quot;&gt;&lt;/<span class="hljs-symbol">canvas</span>&gt;<br></code></pre></td></tr></table></figure><p>js</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mel">const <span class="hljs-keyword">canvas</span> = document.getElementById(<span class="hljs-string">&#x27;canvas&#x27;</span>)<br>     const ctx = <span class="hljs-keyword">canvas</span>.getContext(<span class="hljs-string">&#x27;2d&#x27;</span>)<br>     <span class="hljs-keyword">canvas</span>.style.width = <span class="hljs-number">1455</span> + <span class="hljs-string">&#x27;px&#x27;</span>;<br>     <span class="hljs-keyword">canvas</span>.style.height = <span class="hljs-number">300</span> + <span class="hljs-string">&#x27;px&#x27;</span>;<br>     <span class="hljs-keyword">canvas</span>.width = <span class="hljs-number">1455</span>;<br>     <span class="hljs-keyword">canvas</span>.height = <span class="hljs-number">300</span>;<br></code></pre></td></tr></table></figure><h3 id="模糊问题-把长宽高-写到-上面-不要写css-里"><a href="#模糊问题-把长宽高-写到-上面-不要写css-里" class="headerlink" title="模糊问题  把长宽高  写到 上面  不要写css 里"></a>模糊问题  把长宽高  写到 上面  不要写css 里</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> ctx.beginPath()<span class="hljs-regexp">//</span>开始画线<br>     <span class="hljs-regexp">//</span> ctx.strokeStyle = <span class="hljs-string">&#x27;green&#x27;</span>   <span class="hljs-regexp">//</span>颜色<br>     <span class="hljs-regexp">//</span> ctx.lineWidth = <span class="hljs-number">1</span><span class="hljs-regexp">//</span>宽度<br>     <span class="hljs-regexp">//</span> ctx.moveTo(<span class="hljs-number">168</span>, <span class="hljs-number">0</span>)<span class="hljs-regexp">//</span>起点坐标<br>     <span class="hljs-regexp">//</span> ctx.lineTo(<span class="hljs-number">615</span>, <span class="hljs-number">100</span>)<span class="hljs-regexp">//</span>终点坐标<br><span class="hljs-regexp">//</span>ctx.setLineDash(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>);        <span class="hljs-regexp">//</span>虚线  步长  （线段长  ，  间距<br>     <span class="hljs-regexp">//</span> ctx.stroke()<span class="hljs-regexp">//</span>结束<br><br>     <span class="hljs-regexp">//</span> ctx.beginPath()<br>     <span class="hljs-regexp">//</span> ctx.strokeStyle = <span class="hljs-string">&#x27;green&#x27;</span><br>     <span class="hljs-regexp">//</span> ctx.lineWidth = <span class="hljs-number">1</span><br>     <span class="hljs-regexp">//</span> ctx.moveTo(<span class="hljs-number">168</span>, <span class="hljs-number">0</span>)<br>     <span class="hljs-regexp">//</span> ctx.lineTo(<span class="hljs-number">840</span>, <span class="hljs-number">100</span>)<br>     <span class="hljs-regexp">//</span> ctx.stroke()<br><br>     <span class="hljs-regexp">//</span> ctx.beginPath()<br>     <span class="hljs-regexp">//</span> ctx.strokeStyle = <span class="hljs-string">&#x27;green&#x27;</span><br>     <span class="hljs-regexp">//</span> ctx.lineWidth = <span class="hljs-number">1</span><br>     <span class="hljs-regexp">//</span> ctx.moveTo(<span class="hljs-number">168</span>, <span class="hljs-number">0</span>)<br>     <span class="hljs-regexp">//</span> ctx.lineTo(<span class="hljs-number">1065</span>, <span class="hljs-number">100</span>)<br>     <span class="hljs-regexp">//</span> ctx.stroke()<br></code></pre></td></tr></table></figure><h3 id="坐标获取可用"><a href="#坐标获取可用" class="headerlink" title="坐标获取可用"></a>坐标获取可用</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">&lt;canvas <span class="hljs-keyword">class</span>=&quot;<span class="hljs-symbol">canvasbox</span>&quot; <span class="hljs-symbol">id</span>=&quot;<span class="hljs-symbol">canvas</span>&quot; @<span class="hljs-symbol">mousemove</span>=&quot;<span class="hljs-symbol">mousemoveFN</span>&quot;&gt;&lt;/<span class="hljs-symbol">canvas</span>&gt;<br> <span class="hljs-symbol">mousemoveFN</span>(<span class="hljs-symbol">event</span>) &#123;<br>      <span class="hljs-comment">// console.log(&#x27;event&#x27;, event);</span><br>      <span class="hljs-comment">// console.log(&#x27;x&#x27;, event.offsetX)</span><br>      <span class="hljs-comment">// console.log(&#x27;y&#x27;, event.offsetY)</span><br>    &#125;,<br><br></code></pre></td></tr></table></figure><h3 id="选中高亮核心属性"><a href="#选中高亮核心属性" class="headerlink" title="选中高亮核心属性"></a>选中高亮核心属性</h3><p> ctx.isPointInStroke（x,y）<br>&#x2F;&#x2F; 测试后发现这个方法不适合，这个适用于图形范围<br>        &#x2F;&#x2F; if (ctx.isPointInPath(event.offsetX, event.offsetY)) {<br>        &#x2F;&#x2F;   console.log(‘在区域上。。。。。。。。。。。’);<br>        &#x2F;&#x2F; }<br>        &#x2F;&#x2F; 测试后发现这个方法可以（主要用于边缘线<br>        if (ctx.isPointInStroke(event.offsetX, event.offsetY)) {<br>          console.log(‘在綫上。。。。。。。。。。。’);<br>          ctx.stroke();<br>        };<br>isPointInStroke   只能监听到最后一次画线的路径 所以要循环渲染</p><p>canvas  添加监听属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs javascript">canvas.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;mousemove&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">clickFN</span>()<br><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(event.<span class="hljs-property">offsetX</span>, event.<span class="hljs-property">offsetY</span>);<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> k <span class="hljs-keyword">in</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">lineData</span>) &#123;<br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">lineData</span>[k].<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">row, index</span>) =&gt;</span> &#123;<br><br><br>            <br>            <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">drawWire</span>(ctx, row)<br>            <span class="hljs-keyword">if</span> (ctx.<span class="hljs-title function_">isPointInStroke</span>(event.<span class="hljs-property">offsetX</span>, event.<span class="hljs-property">offsetY</span>)) &#123;<br>              <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;在綫上。。。。。。。。。。。&#x27;</span>, <span class="hljs-string">`k:<span class="hljs-subst">$&#123;k&#125;</span>`</span>, <span class="hljs-string">`index:<span class="hljs-subst">$&#123;index&#125;</span>`</span>);<br>              ctx.<span class="hljs-title function_">stroke</span>();<br>              <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1111111111111</span>,<span class="hljs-variable language_">this</span>.<span class="hljs-property">lineData</span>[k][index]);<br>              <span class="hljs-variable language_">this</span>.<span class="hljs-property">lineData</span>[k][index].<span class="hljs-property">color</span> = <span class="hljs-string">&#x27;red&#x27;</span><br>              <span class="hljs-variable language_">this</span>.<span class="hljs-property">lineData</span>[k][index].<span class="hljs-property">lineWidth</span> = <span class="hljs-number">3</span><br>              <span class="hljs-variable language_">this</span>.<span class="hljs-property">lineData</span>[k][index].<span class="hljs-property">setLineDash</span> = [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>],<br>              <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">drawWire</span>(ctx, row)<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>              <span class="hljs-variable language_">this</span>.<span class="hljs-property">lineData</span>[k][index].<span class="hljs-property">color</span> = <span class="hljs-string">&#x27;green&#x27;</span><br>              <span class="hljs-variable language_">this</span>.<span class="hljs-property">lineData</span>[k][index].<span class="hljs-property">lineWidth</span> = <span class="hljs-number">1</span><br>              <span class="hljs-variable language_">this</span>.<span class="hljs-property">lineData</span>[k][index].<span class="hljs-property">setLineDash</span> = [<span class="hljs-number">4</span>, <span class="hljs-number">2</span>],<br>              <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">drawWire</span>(ctx, row)<br>            &#125;<br>          &#125;);<br>        &#125;<br><br>        <span class="hljs-comment">// 测试后发现这个方法不适合，这个适用于图形范围</span><br>        <span class="hljs-comment">// if (ctx.isPointInPath(event.offsetX, event.offsetY)) &#123;</span><br>        <span class="hljs-comment">//   console.log(&#x27;在区域上。。。。。。。。。。。&#x27;);</span><br>        <span class="hljs-comment">// &#125;</span><br>        <span class="hljs-comment">// 测试后发现这个方法可以（主要用于边缘线</span><br>        <span class="hljs-keyword">if</span> (ctx.<span class="hljs-title function_">isPointInStroke</span>(event.<span class="hljs-property">offsetX</span>, event.<span class="hljs-property">offsetY</span>)) &#123;<br>          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;在綫上。。。。。。。。。。。&#x27;</span>);<br>          ctx.<span class="hljs-title function_">stroke</span>();<br>        &#125;;<br><br>      &#125;)<br><br>vanvas 重画重叠问题   清除canvas 画布<br>ctx.<span class="hljs-title function_">save</span>();<br>ctx.<span class="hljs-title function_">clearRect</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, canvas.<span class="hljs-property">width</span>, canvas.<span class="hljs-property">height</span>);<br>ctx.<span class="hljs-title function_">restore</span>();<br><br> <span class="hljs-comment">//根据传进来的坐标点数组画出一条线</span><br>    <span class="hljs-title function_">drawWire</span>(<span class="hljs-params">ctx, row</span>) &#123;<br>      ctx.<span class="hljs-title function_">beginPath</span>()<br>      ctx.<span class="hljs-property">strokeStyle</span> = row.<span class="hljs-property">color</span><br>      ctx.<span class="hljs-property">lineWidth</span> = row.<span class="hljs-property">lineWidth</span><br>      ctx.<span class="hljs-title function_">setLineDash</span>(row.<span class="hljs-property">setLineDash</span>);<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(row.<span class="hljs-property">moveTo</span>.<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;,&#x27;</span>));<br>      ctx.<span class="hljs-title function_">moveTo</span>(<span class="hljs-title class_">Number</span>(row.<span class="hljs-property">moveTo</span>[<span class="hljs-number">0</span>]), <span class="hljs-title class_">Number</span>(row.<span class="hljs-property">moveTo</span>[<span class="hljs-number">1</span>]))<br>      ctx.<span class="hljs-title function_">lineTo</span>(<span class="hljs-title class_">Number</span>(row.<span class="hljs-property">lineTo</span>[<span class="hljs-number">0</span>]), <span class="hljs-title class_">Number</span>(row.<span class="hljs-property">lineTo</span>[<span class="hljs-number">1</span>]))<br>      ctx.<span class="hljs-title function_">stroke</span>()<br>    &#125;,<br></code></pre></td></tr></table></figure><h3 id="测试数据"><a href="#测试数据" class="headerlink" title="测试数据"></a>测试数据</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">lineData:</span> &#123;<br>        <span class="hljs-attr">CPU0:</span> [<br>          &#123;<br>            <span class="hljs-attr">color:</span> <span class="hljs-string">&#x27;green&#x27;</span>,<br>            <span class="hljs-attr">lineWidth:</span> <span class="hljs-number">1</span>,<br>            <span class="hljs-attr">moveTo:</span> [<span class="hljs-number">168</span>, <span class="hljs-number">0</span>],<br>            <span class="hljs-attr">lineTo:</span> [<span class="hljs-number">390</span>, <span class="hljs-number">100</span>],<br>            <span class="hljs-attr">setLineDash:</span> [<span class="hljs-number">4</span>, <span class="hljs-number">2</span>],<br>            <span class="hljs-attr">isMouseOver:</span> <span class="hljs-literal">false</span>,<br>          &#125;,<br>          &#123;<br>            <span class="hljs-attr">color:</span> <span class="hljs-string">&#x27;green&#x27;</span>,<br>            <span class="hljs-attr">lineWidth:</span> <span class="hljs-number">1</span>,<br>            <span class="hljs-attr">moveTo:</span> [<span class="hljs-number">168</span>, <span class="hljs-number">0</span>],<br>            <span class="hljs-attr">lineTo:</span> [<span class="hljs-number">615</span>, <span class="hljs-number">100</span>],<br>            <span class="hljs-attr">setLineDash:</span> [<span class="hljs-number">4</span>, <span class="hljs-number">2</span>],<br>            <span class="hljs-attr">isMouseOver:</span> <span class="hljs-literal">false</span>,<br>          &#125;,<br>          &#123;<br>            <span class="hljs-attr">color:</span> <span class="hljs-string">&#x27;green&#x27;</span>,<br>            <span class="hljs-attr">lineWidth:</span> <span class="hljs-number">1</span>,<br>            <span class="hljs-attr">moveTo:</span> [<span class="hljs-number">168</span>, <span class="hljs-number">0</span>],<br>            <span class="hljs-attr">lineTo:</span> [<span class="hljs-number">840</span>, <span class="hljs-number">100</span>],<br>            <span class="hljs-attr">setLineDash:</span> [<span class="hljs-number">4</span>, <span class="hljs-number">2</span>],<br>            <span class="hljs-attr">isMouseOver:</span> <span class="hljs-literal">false</span>,<br>          &#125;,<br>          &#123;<br>            <span class="hljs-attr">color:</span> <span class="hljs-string">&#x27;green&#x27;</span>,<br>            <span class="hljs-attr">lineWidth:</span> <span class="hljs-number">1</span>,<br>            <span class="hljs-attr">moveTo:</span> [<span class="hljs-number">168</span>, <span class="hljs-number">0</span>],<br>            <span class="hljs-attr">lineTo:</span> [<span class="hljs-number">1065</span>, <span class="hljs-number">100</span>],<br>            <span class="hljs-attr">setLineDash:</span> [<span class="hljs-number">4</span>, <span class="hljs-number">2</span>],<br>            <span class="hljs-attr">isMouseOver:</span> <span class="hljs-literal">false</span>,<br>          &#125;,<br>        ],<br>      &#125;<span class="hljs-string">,</span><br></code></pre></td></tr></table></figure><p>参考文献</p><p>参考  <a href="https://segmentfault.com/q/1010000018554255">https://segmentfault.com/q/1010000018554255</a></p><p><a href="https://blog.csdn.net/weixin_48963720/article/details/125219790">https://blog.csdn.net/weixin_48963720/article/details/125219790</a></p><p>ctx.isPointInPath(80,80)：判断点是否在上面路径的区域内。</p><p>ctx.isPointInStroke(80,50)：判断点是否在上面路径的边缘线上</p><p><a href="https://blog.csdn.net/zyz00000000/article/details/82714454">https://blog.csdn.net/zyz00000000/article/details/82714454</a></p>]]></content>
    
    
    <categories>
      
      <category>canvas</category>
      
    </categories>
    
    
    <tags>
      
      <tag>canvas</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo 编写文章并部署</title>
    <link href="/hexodemo/2024/03/11/Hexo_%E7%BC%96%E5%86%99%E6%96%87%E7%AB%A0/"/>
    <url>/hexodemo/2024/03/11/Hexo_%E7%BC%96%E5%86%99%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="typora-软件-md文件编辑器"><a href="#typora-软件-md文件编辑器" class="headerlink" title="typora 软件  .md文件编辑器"></a>typora 软件  .md文件编辑器</h2><h3 id="文章文件位置"><a href="#文章文件位置" class="headerlink" title="文章文件位置"></a>文章文件位置</h3><p>将写好的md文件放到 Hexo\hexodemo\source_posts  目录下</p><h3 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h3><p>ctrl + alt + z   插入代码<br>ctrl + shift + i 插入图片<br>ctrl + alt  +u 插入点<br>ctrl + shift + q插入文字详情块<br>ctrl + 1,2,,3,4,5 标题</p><p>编辑好后<br>Hexo\hexodemo  目录下<br>shift + 鼠标邮件  打开 git bash</p><p>常用命令</p><h3 id="更新本地服务"><a href="#更新本地服务" class="headerlink" title="更新本地服务"></a>更新本地服务</h3><p>hexo clean<br>hexo generate<br>hexo server -p 4000<br>本地服务   <a href="http://localhost:4000/">http://localhost:4000/</a></p><h3 id="上传文章部署代码到线上"><a href="#上传文章部署代码到线上" class="headerlink" title="上传文章部署代码到线上"></a>上传文章部署代码到线上</h3><p>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</p><h3 id="线上地址"><a href="#线上地址" class="headerlink" title="线上地址"></a>线上地址</h3><p>luckyangyang.github.io </p>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git使用ssh密钥</title>
    <link href="/hexodemo/2024/03/11/git%E4%BD%BF%E7%94%A8ssh%E5%AF%86%E9%92%A5/"/>
    <url>/hexodemo/2024/03/11/git%E4%BD%BF%E7%94%A8ssh%E5%AF%86%E9%92%A5/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/superGG1990/p/6844952.html">https://www.cnblogs.com/superGG1990/p/6844952.html</a></p><h2 id="ssh"><a href="#ssh" class="headerlink" title="ssh"></a>ssh</h2><p>ssh，简单来讲，就是一个秘钥，其中，id_rsa是你这台电脑的私人秘钥，不能给别人看的，id_rsa.pub是公共秘钥，可以随便给别人看。把这个公钥放在GitHub上，这样当你链接GitHub自己的账户时，它就会根据公钥匹配你的私钥，当能够相互匹配时，才能够顺利的通过git上传你的文件到GitHub上。</p><p>而后在GitHub的setting中，找到SSH keys的设置选项，点击New SSH key<br>把你的id_rsa.pub里面的信息复制进去。</p><h2 id="git使用ssh密钥"><a href="#git使用ssh密钥" class="headerlink" title="git使用ssh密钥"></a>git使用ssh密钥</h2><p>git支持https和git两种传输协议，github分享链接时会有两种协议可选：</p><p>git协议链接图例 : ↓</p><p>https协议链接图例：↓</p><p>​       </p><p>git使用https协议，每次pull, push都会提示要输入密码，使用git协议，然后使用ssh密钥，这样免去每次都输密码的麻烦</p><p>初次使用git的用户要使用git协议大概需要三个步骤：<br>一、生成密钥对<br>二、设置远程仓库（本文以github为例）上的公钥<br>三、把git的 remote url 修改为git协议（以上两个步骤初次设置过以后，以后使用都不需要再次设置，此步骤视以后项目的remote url而定，如果以后其他项目的协议为https则需要此步骤）<br> 一、生成密钥对<br>大多数 Git 服务器都会选择使用 SSH 公钥来进行授权。系统中的每个用户都必须提供一个公钥用于授权，没有的话就要生成一个。生成公钥的过程在所有操作系统上都差不多。首先你要确认一下本机是否已经有一个公钥。</p><p>SSH 公钥默认储存在账户的主目录下的 ~&#x2F;.ssh 目录。进去看看：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cd</span> ~/.ssh</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">ls</span></span><br></code></pre></td></tr></table></figure><p>authorized_keys2  id_dsa       known_hosts config            id_dsa.pub<br>看一下有没有id_rsa和id_rsa.pub(或者是id_dsa和id_dsa.pub之类成对的文件)，有 .pub 后缀的文件就是公钥，另一个文件则是密钥。</p><p>假如没有这些文件，甚至连 .ssh 目录都没有，可以用 ssh-keygen 来创建。该程序在 Linux&#x2F;Mac 系统上由 SSH 包提供，而在 Windows 上则包含在 MSysGit 包里：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>ssh-keygen -t rsa -C <span class="hljs-string">&quot;your_email@youremail.com&quot;</span><br></code></pre></td></tr></table></figure><p>连按三次回车  才能成功</p><p>Creates a new ssh key using the provided email # Generating public&#x2F;private rsa key pair.</p><p>Enter file in which to save the key (&#x2F;home&#x2F;you&#x2F;.ssh&#x2F;id_rsa):<br>直接按Enter就行。然后，会提示你输入密码，如下(建议输一个，安全一点，当然不输也行，应该不会有人闲的无聊冒充你去修改你的代码)：</p><p>Enter same passphrase again: [Type passphrase again]<br>完了之后，大概是这样：</p><p>Your public key has been saved in &#x2F;home&#x2F;you&#x2F;.ssh&#x2F;id_rsa.pub.<br>The key fingerprint is: # 01:0f:f4:3b:ca:85:d6:17:a1:7d:f0:68:9d:f0:a2:db <a href="mailto:&#x79;&#x6f;&#x75;&#x72;&#x5f;&#x65;&#109;&#97;&#x69;&#x6c;&#x40;&#x79;&#x6f;&#117;&#114;&#x65;&#109;&#x61;&#105;&#108;&#x2e;&#x63;&#x6f;&#x6d;">&#x79;&#x6f;&#x75;&#x72;&#x5f;&#x65;&#109;&#97;&#x69;&#x6c;&#x40;&#x79;&#x6f;&#117;&#114;&#x65;&#109;&#x61;&#105;&#108;&#x2e;&#x63;&#x6f;&#x6d;</a><br>到此为止，你本地的密钥对就生成了。</p><h2 id="二、添加公钥到你的远程仓库（github）"><a href="#二、添加公钥到你的远程仓库（github）" class="headerlink" title="二、添加公钥到你的远程仓库（github）"></a>二、添加公钥到你的远程仓库（github）</h2><h3 id="1、查看你生成的公钥："><a href="#1、查看你生成的公钥：" class="headerlink" title="1、查看你生成的公钥："></a>1、查看你生成的公钥：</h3><p>$ cat ~&#x2F;.ssh&#x2F;id_rsa.pub</p><p>ssh-rsa AAABB3NzaC1yc2EAAAADAQABAAABAQC0X6L1zLL4VHuvGb8aJH9ippTozmReSUzgntvk434aJ&#x2F;v7kOdJ&#x2F;MTyBlWXFCR+HAo3FXRitBqxiX1nKhXpHAZsMciLq8vR3c8E7CjZN733f5AL8uEYJA+YZevY5UCvEg+umT7PHghKYaJwaCxV7sjYP7Z6V79OMCEAGDNXC26IBMdMgOluQjp6o6j2KAdtRBdCDS&#x2F;QIU5THQDxJ9lBXjk1fiq9tITo&#x2F;aXBvjZeD+gH&#x2F;Apkh&#x2F;0GbO8VQLiYYmNfqqAHHeXdltORn8N7C9lOa&#x2F;UW3KM7QdXo6J0GFlBVQeTE&#x2F;IGqhMS5PMln3 admin@admin-PC</p><h3 id="2、登陆你的github帐户。"><a href="#2、登陆你的github帐户。" class="headerlink" title="2、登陆你的github帐户。"></a>2、登陆你的github帐户。</h3><p>点击你的头像，然后 Settings -&gt; 左栏点击 SSH and GPG keys -&gt; 点击 New SSH key</p><h3 id="3、然后你复制上面的公钥内容，"><a href="#3、然后你复制上面的公钥内容，" class="headerlink" title="3、然后你复制上面的公钥内容，"></a>3、然后你复制上面的公钥内容，</h3><p>粘贴进“Key”文本域内。 title域，自己随便起个名字。</p><h3 id="4、点击-Add-key。"><a href="#4、点击-Add-key。" class="headerlink" title="4、点击 Add key。"></a>4、点击 Add key。</h3><p>完成以后，验证下这个key是不是正常工作：</p><p>$ ssh -T <a href="mailto:&#103;&#105;&#x74;&#x40;&#x67;&#x69;&#x74;&#104;&#x75;&#98;&#x2e;&#x63;&#111;&#109;">&#103;&#105;&#x74;&#x40;&#x67;&#x69;&#x74;&#104;&#x75;&#98;&#x2e;&#x63;&#111;&#109;</a></p><p>Attempts to ssh to github<br>如果，看到：</p><p>Hi xxx! You’ve successfully authenticated, but GitHub does not # provide shell access.<br>恭喜你，你的设置已经成功了。</p><p>三、修改git的remote url</p><p> 使用命令 git remote -v 查看你当前的 remote url</p><p>$ git remote -v<br>origin <a href="https://github.com/someaccount/someproject.git">https://github.com/someaccount/someproject.git</a> (fetch)<br>origin <a href="https://github.com/someaccount/someproject.git">https://github.com/someaccount/someproject.git</a> (push)<br>如果是以上的结果那么说明此项目是使用https协议进行访问的（如果地址是git开头则表示是git协议）</p><p>你可以登陆你的github，就像本文开头的图例，你在上面可以看到你的ssh协议相应的url，类似：</p><p>复制此ssh链接，然后使用命令 git remote set-url 来调整你的url。</p><p>git remote set-url origin <a href="mailto:&#103;&#105;&#x74;&#64;&#x67;&#x69;&#116;&#x68;&#117;&#98;&#46;&#99;&#x6f;&#109;">&#103;&#105;&#x74;&#64;&#x67;&#x69;&#116;&#x68;&#117;&#98;&#46;&#99;&#x6f;&#109;</a>:someaccount&#x2F;someproject.git<br>然后你可以再用命令 git remote -v 查看一下，url是否已经变成了ssh地址。</p><p>然后你就可以愉快的使用git fetch, git pull , git push，再也不用输入烦人的密码了</p><p>参考链接：<a href="http://www.tuicool.com/articles/BzUrAvF">http://www.tuicool.com/articles/BzUrAvF</a></p>]]></content>
    
    
    <categories>
      
      <category>git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>初次安装git配置用户名和邮箱</title>
    <link href="/hexodemo/2024/03/11/git%E9%85%8D%E7%BD%AE%E7%94%A8%E6%88%B7%E5%90%8D%E5%92%8C%E9%82%AE%E7%AE%B1/"/>
    <url>/hexodemo/2024/03/11/git%E9%85%8D%E7%BD%AE%E7%94%A8%E6%88%B7%E5%90%8D%E5%92%8C%E9%82%AE%E7%AE%B1/</url>
    
    <content type="html"><![CDATA[<h2 id="初次安装git配置用户名和邮箱"><a href="#初次安装git配置用户名和邮箱" class="headerlink" title="初次安装git配置用户名和邮箱"></a>初次安装git配置用户名和邮箱</h2><p>参考地址： <a href="https://www.cnblogs.com/superGG1990/p/6844952.html">https://www.cnblogs.com/superGG1990/p/6844952.html</a></p><p>​    一、GIT 查看&#x2F;修改用户名和邮箱地址 <a href="https://blog.csdn.net/autoliuweijie/article/details/52230165">https://blog.csdn.net/autoliuweijie/article/details/52230165</a></p><p>​    用户名和邮箱地址的作用</p><p>​    用户名和邮箱地址是本地git客户端的一个变量，不随git库而改变。</p><p>​    每次commit都会用用户名和邮箱纪录。</p><p>​    github的contributions统计就是按邮箱来统计的。</p><p>​    查看用户名和邮箱地址：</p><p>​    $ git config user.name</p><p>​    $ git config user.email</p><p>​    修改用户名和邮箱地址：</p><p>​    $ git config –global user.name “username”</p><p>​    $ git config –global user.email “email”</p>]]></content>
    
    
    <categories>
      
      <category>git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git总结</title>
    <link href="/hexodemo/2024/03/11/git/"/>
    <url>/hexodemo/2024/03/11/git/</url>
    
    <content type="html"><![CDATA[<h2 id="常用命令行工具"><a href="#常用命令行工具" class="headerlink" title="常用命令行工具"></a>常用命令行工具</h2><p>cmd</p><p>powershell</p><p>git bash</p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p>​pwd（print working directory）查看当前所在目录<br>    cd（change directory） 进入下一级目录<br>    cd    ..&#x2F;   返回上一层目录<br>    clear  清屏<br>    ctrl + l  清屏<br>    ls  (list)  查看当前目录<br>    mkdir(make directory)  创建目录<br>    touch 文件名称    创建文件<br>    echo 内容&gt;文件  覆盖写入文件<br>echo 内容&gt;&gt;文件  追加写入文件<br>    cat 文件命名   查看文件内容<br>    less 查看文件内容</p><h2 id="git使用"><a href="#git使用" class="headerlink" title="git使用"></a>git使用</h2><p>新建gitlab仓库建立分支</p><p>桌面上的git-demo目录现在就是我们的项目目录，我们希望使用git工具来管理这个项目 </p><h3 id="1-初始化git仓库-告诉git工具你来帮我管理这个项目"><a href="#1-初始化git仓库-告诉git工具你来帮我管理这个项目" class="headerlink" title="1.初始化git仓库 告诉git工具你来帮我管理这个项目"></a>1.初始化git仓库 告诉git工具你来帮我管理这个项目</h3><p>git init</p><p>在git-demo目录中 初始化了一个空的git仓库</p><p>.git文件夹默认是隐藏的</p><h3 id="2-查看仓库状态"><a href="#2-查看仓库状态" class="headerlink" title="2.查看仓库状态"></a>2.查看仓库状态</h3><p>git status</p><p>No commits yet 当前仓库中还没有任何提交</p><p>nothing to commit working tree clean 目前还没有任何文件可提交 工作目录是干净的</p><p>查看仓库状态的时候 git默认会忽略空目录 如果想让git管理空目录 需要在空目录中建立占位文件 约定的名字为.gitkeep</p><h3 id="3-将文件提交到暂存区"><a href="#3-将文件提交到暂存区" class="headerlink" title="3.将文件提交到暂存区"></a>3.将文件提交到暂存区</h3><p>一个文件如果暂存区中没有 那么说明git还没有管理这个文件</p><p>git add 文件1 文件2 …</p><p>git add . 将所有文件添加到暂存区</p><h3 id="4-将暂存区中的代码提交到代码仓库"><a href="#4-将暂存区中的代码提交到代码仓库" class="headerlink" title="4.将暂存区中的代码提交到代码仓库"></a>4.将暂存区中的代码提交到代码仓库</h3><p>出现不能提交状态，需要按步骤五去配置</p><p>git commit -m 提交注释</p><p>在第一次使用git的时候 需要配置用户信息 否则git不允许提交代码到仓库中当代码提交到仓库后, 暂存区中就没有这些文件了</p><h3 id="5-配置用户信息"><a href="#5-配置用户信息" class="headerlink" title="5.配置用户信息"></a>5.配置用户信息</h3><p>git config –global user.name 用户名</p><p>git config –global user.email 邮箱</p><p>​    –global 全局配置 当前配置完成以后 做其他项目的时候就不需要再次配置了</p><p>git config –list 查看git配置信息</p><p>按q退出</p><p>用户信息实际上是被配置在了.gitconfig文件中, 文件在用户目录下面  C:\Users\yang</p><h3 id="6-查看提交的历史记录"><a href="#6-查看提交的历史记录" class="headerlink" title="6.查看提交的历史记录"></a>6.查看提交的历史记录</h3><p>git log</p><h3 id="7-为项目添加忽略清单文件"><a href="#7-为项目添加忽略清单文件" class="headerlink" title="7.为项目添加忽略清单文件"></a>7.为项目添加忽略清单文件</h3><p>可以在忽略清单文件中指定哪些文件不需要被管理 那么指定的文件就不会出现在未跟踪列表中</p><p>文件名字 .gitignore</p><p>里面写&#x2F;test   就是忽略test目录</p><h3 id="8-用暂存区中的文件覆盖工作目录中的文件"><a href="#8-用暂存区中的文件覆盖工作目录中的文件" class="headerlink" title="8.用暂存区中的文件覆盖工作目录中的文件"></a>8.用暂存区中的文件覆盖工作目录中的文件</h3><p>git checkout 文件列表</p><h3 id="9-将文件从暂存区中删除"><a href="#9-将文件从暂存区中删除" class="headerlink" title="9.将文件从暂存区中删除"></a>9.将文件从暂存区中删除</h3><p>git rm –cached 文件列表</p><h3 id="10-回滚操作"><a href="#10-回滚操作" class="headerlink" title="10.回滚操作"></a>10.回滚操作</h3><p>git reset –hard commitID</p><p>​    将仓库中某一次提交的代码覆盖工作目录和暂存区</p><h3 id="11-分支"><a href="#11-分支" class="headerlink" title="11.分支"></a>11.分支</h3><p>1.什么叫分支?</p><p>​    分支就是对当前代码的一份拷贝</p><p>​    当前代码 &#x3D;&gt; 文件 + 提交历史</p><p>2.创建分支</p><p>​    git branch 分支名称 &#x3D;&gt; 创建分支</p><p>​    git branch &#x3D;&gt; 查看分支</p><p>3.切换分支</p><p>​    git checkout 分支名称 &#x3D;&gt; 切换分支</p><p>​        注意：在当前分支开发完成以后一定要提交代码 否则不允许切换分支</p><p>​    切换到远程分支</p><p>​     git checkout -b dev </p><p>​    切换成功后显示如下结果:</p><p>​    Switched to a new branch ‘dev’</p><p>4.合并分支</p><p>​    git merge 分支名称</p><p>5.删除分支</p><p>​    git branch -d 删除分支</p><p>​    默认情况下 git不允许删除一个未合并的分支</p><p>​    强制删除未合并的分支使用 git branch -D 分支名称</p><p>6.注意</p><p>​    </p><p>​    1.在主分支还没有任何提交的时候 是不能创建其他分支的</p><h3 id="12-将本地仓库提交到远程"><a href="#12-将本地仓库提交到远程" class="headerlink" title="12. 将本地仓库提交到远程"></a>12. 将本地仓库提交到远程</h3><p>git push 远程仓库地址 本地分支名称:远程分支名称</p><p>​                        master:master &#x3D;&gt; master</p><p>1.为远程仓库地址添加别名</p><p>​    git remote add 别名 别名对应的地址</p><p>2.提交</p><p>​    git push origin master</p><p>3.记住提交地址与分支名称</p><p>​    git push -u origin master</p><p>4.再次提交</p><p>​    git push</p><p>5.windows系统默认会记住提交的密码 </p><p>​    控制面板 &#x3D;&gt; 用户账户 &#x3D;&gt; 管理你的凭据 &#x3D;&gt; windows凭据</p><h3 id="13-多人协作开发需要使用ssh协议"><a href="#13-多人协作开发需要使用ssh协议" class="headerlink" title="13.多人协作开发需要使用ssh协议"></a>13.多人协作开发需要使用ssh协议</h3><p>需要生成一对密钥 ssh-keygen</p><p>git branch dev</p><p>git checkout dev</p><p>touch banzhang.html</p><p>git add .</p><p>git commit -m 提交</p><p>git push 仓库地址 dev</p><p>码云提交</p><p>这个git push origin dev</p><h3 id="14-将已有仓库克隆到本地"><a href="#14-将已有仓库克隆到本地" class="headerlink" title="14.将已有仓库克隆到本地"></a>14.将已有仓库克隆到本地</h3><p>已经有了仓库了 我们要做的是 将已有仓库克隆到本地</p><p>git clone 仓库地址</p><p>​    默认克隆的文件夹名称和仓库名称是一样的</p><h3 id="15-从远程仓库中拉取最新的代码"><a href="#15-从远程仓库中拉取最新的代码" class="headerlink" title="15.从远程仓库中拉取最新的代码"></a>15.从远程仓库中拉取最新的代码</h3><p>git pull 仓库地址 master</p><p>这个git pull origin dev</p><p>shift+:</p><p>输入wq保存并退出</p><h3 id="git中的文件状态"><a href="#git中的文件状态" class="headerlink" title="git中的文件状态"></a>git中的文件状态</h3><p> 文件(红色) 未被git管理的文件</p><p> new file: index.html(绿色) git新增的需要管理的文件</p><p> modified: index.html(红色) 文件在工作目录中被修改 但是没有被添加到暂存区中</p><h3 id="操作技巧："><a href="#操作技巧：" class="headerlink" title="操作技巧："></a>操作技巧：</h3><p> 键盘上下键可以切换之前输入的命令</p><h3 id="克隆远程分支"><a href="#克隆远程分支" class="headerlink" title="克隆远程分支"></a>克隆远程分支</h3><p>  克隆远程项目 git clone</p><p>  如：git clone <a href="http://xxx.xxx/sq-group/XXX.git">http://XXX.XXX/sq-group/XXX.git</a></p><p> 克隆完成之后 cd到有git的文件夹</p><h3 id="查看远程分支"><a href="#查看远程分支" class="headerlink" title="查看远程分支"></a>查看远程分支</h3><p> git branch -r</p><h3 id="建立本地对应分支"><a href="#建立本地对应分支" class="headerlink" title="建立本地对应分支"></a>建立本地对应分支</h3><p>git checkout –track origin&#x2F;dev</p><p>dev为远程分支名</p><h3 id="删除远程仓库dev分支"><a href="#删除远程仓库dev分支" class="headerlink" title="删除远程仓库dev分支"></a>删除远程仓库dev分支</h3><p>进入相应的仓库，然后使用 git branch -a 命令查看该仓库所有的分支<br>git push origin –delete dev</p><h3 id="新建gitlab仓库建立分支"><a href="#新建gitlab仓库建立分支" class="headerlink" title="新建gitlab仓库建立分支"></a>新建gitlab仓库建立分支</h3><p>git clone http仓库地址</p><p>​    本地 git add .</p><p>​    git commit -m ‘新建’</p><p>​    git push</p><p>​    git branch 分支名称 &#x3D;&gt; 创建分支</p><p>​    git checkout 分支名称 &#x3D;&gt; 切换分支</p><p>​    直接git push 会报错</p><p>​    没有与远程分支建立连接。</p><p>​    git push origin dev -u</p><p>​    网页刷新下看看 一般就有了</p><p>​    <a href="https://blog.csdn.net/benben0729/article/details/82386657">https://blog.csdn.net/benben0729/article/details/82386657</a></p><h3 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h3><p>本地分支  demo-wx<br>git log<br>查 上次提交的代码<br> 复制 编号 b190246a4f08d50dd2a00c14de891b886eb842c7</p><p>切换到需要合并的分支<br> git checkout demo-nx</p><p>拉去代码<br>$ git pull</p><p>合并分支<br>git cherry-pick b190246a4f08d50dd2a00c14de891b886eb842c7</p><p>运行项目检查代码</p><h3 id="删除git仓库"><a href="#删除git仓库" class="headerlink" title="删除git仓库"></a>删除git仓库</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> <span class="hljs-built_in">rm</span> <span class="hljs-literal">-rf</span> .git<br></code></pre></td></tr></table></figure><h3 id="项目拉取"><a href="#项目拉取" class="headerlink" title="项目拉取"></a>项目拉取</h3><p>​1git clone  xxx<br>    2 进入项目文件 默认master分支<br>    3建立本地对应分支   git checkout –track origin&#x2F;dev<br>    4 npm i  (获取node_modules依赖包)</p><h3 id="遇到的报错及解决方案"><a href="#遇到的报错及解决方案" class="headerlink" title="遇到的报错及解决方案"></a>遇到的报错及解决方案</h3><p>​(dev|MERGING)  代码有冲突</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">编辑器上确认是否有冲突<br><br>确认没冲突的话   在推送一次<br>在git <span class="hljs-keyword">add</span> .<br>git <span class="hljs-keyword">commit</span> -m <span class="hljs-string">&#x27;提交&#x27;</span><br>git push origin dev    <br><br>git pull  拉取一下<br><br></code></pre></td></tr></table></figure><p>​git commit提交时报错husky ＞ pre-commit (node v10.16.3) ….</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>blog.csdn.net<span class="hljs-regexp">/qq_37034928/</span>article<span class="hljs-regexp">/details/</span><span class="hljs-number">108342620</span><br><br><span class="hljs-number">1</span>.问题分析<br>项目中使用了husky, 这个会在你git commit的时候先执行里面的严谨模式, 对代码进行检查, 有error就会终止提交<br><br><br><span class="hljs-number">3</span>.解决办法<br>git commit -m <span class="hljs-string">&quot;备注信息&quot;</span> --no-verify<br></code></pre></td></tr></table></figure><p>​提交失败 –fix</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">git</span> commit -m <span class="hljs-string">&quot;fix: xxxx&quot;</span><br>xxxx  为提交名字<br><br></code></pre></td></tr></table></figure><p>解决npm install 报错 ‘proxy’ config is set properly. See: ‘npm help config’</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">解决npm install 报错 <span class="hljs-string">&#x27;proxy&#x27;</span> config <span class="hljs-keyword">is</span> <span class="hljs-keyword">set</span> properly. See: <span class="hljs-string">&#x27;npm help config&#x27;</span><br><br>输入以下命令<br>npm config <span class="hljs-keyword">set</span> proxy <span class="hljs-literal">null</span><br>npm config <span class="hljs-keyword">set</span> https-proxy <span class="hljs-literal">null</span><br><br>https:<span class="hljs-comment">//blog.51cto.com/u_15065851/4262764</span><br><br>dwy实测有效 不明所以<br></code></pre></td></tr></table></figure><h3 id="git退出不能编辑窗口"><a href="#git退出不能编辑窗口" class="headerlink" title="git退出不能编辑窗口"></a>git退出不能编辑窗口</h3><p>​esc后   :wq 回车  保存并退出</p><h3 id="启用vue项目"><a href="#启用vue项目" class="headerlink" title="启用vue项目"></a>启用vue项目</h3><h4 id="1找到package-json-文件-看启动代码"><a href="#1找到package-json-文件-看启动代码" class="headerlink" title="1找到package.json 文件 看启动代码"></a>1找到package.json 文件 看启动代码</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;serve&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;vue-cli-service serve&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;build&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;vue-cli-service build&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;lint&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;vue-cli-service lint&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br></code></pre></td></tr></table></figure><h4 id="2-npm-run-serve"><a href="#2-npm-run-serve" class="headerlink" title="2 npm run serve"></a>2 npm run serve</h4><h3 id="忽略清单-gitignore"><a href="#忽略清单-gitignore" class="headerlink" title="忽略清单    .gitignore"></a>忽略清单    .gitignore</h3><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">node_modules<br><span class="hljs-string">.DS_Store</span><br>dist<br>dist-ssr<br>*<span class="hljs-string">.local</span><br>*<span class="hljs-string">.zip</span><br>node_modules<br><span class="hljs-string">.DS_Store</span><br>dist<br>dist-ssr<br>*<span class="hljs-string">.local</span><br><br><br><br><br><br><br><span class="hljs-string">/target/</span>  <span class="hljs-string">//</span> 忽略这个target 目录<br>log/*     <span class="hljs-string">//</span> 忽略log下的所有文件<br>css/*<span class="hljs-string">.css</span> <span class="hljs-string">//</span> 忽略css目录下的<span class="hljs-string">.css</span>文件<br><br></code></pre></td></tr></table></figure><h4 id="不管用的话需要清除git缓存"><a href="#不管用的话需要清除git缓存" class="headerlink" title="不管用的话需要清除git缓存"></a>不管用的话需要清除git缓存</h4><p>git rm -r –cached .</p><h3 id="新建gitlab项目-分支-并提交"><a href="#新建gitlab项目-分支-并提交" class="headerlink" title="新建gitlab项目  分支  并提交"></a>新建gitlab项目  分支  并提交</h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">master  分支上<br>git <span class="hljs-keyword">add </span>.<br>git commit -m <span class="hljs-string">&quot;mas&quot;</span><br><br>git <span class="hljs-keyword">branch</span><br><span class="hljs-keyword"></span><br> git <span class="hljs-keyword">branch </span>dev<br><br>git checkout dev<br><br>推到远程并设置分支<br>git push --set-upstream <span class="hljs-keyword">origin </span>dev<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>操作dom坐标</title>
    <link href="/hexodemo/2024/03/11/%E6%93%8D%E4%BD%9Cdom%E5%9D%90%E6%A0%87/"/>
    <url>/hexodemo/2024/03/11/%E6%93%8D%E4%BD%9Cdom%E5%9D%90%E6%A0%87/</url>
    
    <content type="html"><![CDATA[<h1 id="操作dom坐标"><a href="#操作dom坐标" class="headerlink" title="操作dom坐标"></a>操作dom坐标</h1><h2 id="与坐标有关的属性"><a href="#与坐标有关的属性" class="headerlink" title="与坐标有关的属性"></a>与坐标有关的属性</h2><p>screenX, screenY,   screen </p><p>屏幕, 鼠标相对于我们的计算机屏幕左上角的坐标<br>clientX, clientY,   client</p><p> 客户端, 鼠标相对于浏览器中的页面的可视区域的左上角的坐标<br> pageX, pageY,       page </p><p>页面的意思, 鼠标相对于页面( 页芯 )的左上角的坐标<br> offsetX, offsetY    offset </p><p>偏移量, 可以认为是相对的距离.<br>offsetX 与 offsetY </p><p>表示鼠标在盒子内部, 相对于盒子而言它的坐标是多少<br>layerX, layerY     </p><p> 其功能能可以简单的理解为就是 offsetX Y, 但是这个属性是火狐中的属性<br>练习: 跟着鼠标移动的图片<br> 需求是鼠标移动到哪里, 图片就跟到哪里<br> 练习: 拖拽<br>页面中有一个盒子, 鼠标点击盒子里面的某一个区域( 任意 )<br>在鼠标按着不动, 移动鼠标, 盒子会跟着鼠标一起移动, 鼠标放开后<br>盒子停留.</p><h2 id="获取元素宽高及其他属性"><a href="#获取元素宽高及其他属性" class="headerlink" title="获取元素宽高及其他属性"></a>获取元素宽高及其他属性</h2><p>​    元素.offsetWidth<br>    元素.offsetHeight<br>    元素.offsetLeft<br>    元素.offsetTop</p><p>html  元素  clientWidth  浏览器可视区域的宽度</p><p>var sw &#x3D; document.documentElement.clientWidth;</p><p>元素.offsetX </p><p> 点击的盒子内部某个点距离盒子的距离</p><h2 id="vue-获取dom宽高和坐标"><a href="#vue-获取dom宽高和坐标" class="headerlink" title="vue 获取dom宽高和坐标"></a>vue 获取dom宽高和坐标</h2>]]></content>
    
    
    <categories>
      
      <category>javascript API笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>dom操作</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>操作dom获取宽高和坐标</title>
    <link href="/hexodemo/2024/03/11/%E6%93%8D%E4%BD%9Cdom%E8%8E%B7%E5%8F%96%E5%AE%BD%E9%AB%98%E5%92%8C%E5%9D%90%E6%A0%87/"/>
    <url>/hexodemo/2024/03/11/%E6%93%8D%E4%BD%9Cdom%E8%8E%B7%E5%8F%96%E5%AE%BD%E9%AB%98%E5%92%8C%E5%9D%90%E6%A0%87/</url>
    
    <content type="html"><![CDATA[<h1 id="操作dom坐标"><a href="#操作dom坐标" class="headerlink" title="操作dom坐标"></a>操作dom坐标</h1><h2 id="与坐标有关的属性"><a href="#与坐标有关的属性" class="headerlink" title="与坐标有关的属性"></a>与坐标有关的属性</h2><p>screenX, screenY,   screen </p><p>屏幕, 鼠标相对于我们的计算机屏幕左上角的坐标<br>clientX, clientY,   client</p><p> 客户端, 鼠标相对于浏览器中的页面的可视区域的左上角的坐标<br> pageX, pageY,       page </p><p>页面的意思, 鼠标相对于页面( 页芯 )的左上角的坐标<br> offsetX, offsetY    offset </p><p>偏移量, 可以认为是相对的距离.<br>offsetX 与 offsetY </p><p>表示鼠标在盒子内部, 相对于盒子而言它的坐标是多少<br>layerX, layerY     </p><p> 其功能能可以简单的理解为就是 offsetX Y, 但是这个属性是火狐中的属性<br>练习: 跟着鼠标移动的图片<br> 需求是鼠标移动到哪里, 图片就跟到哪里<br> 练习: 拖拽<br>页面中有一个盒子, 鼠标点击盒子里面的某一个区域( 任意 )<br>在鼠标按着不动, 移动鼠标, 盒子会跟着鼠标一起移动, 鼠标放开后<br>盒子停留.</p><h2 id="获取元素宽高及其他属性"><a href="#获取元素宽高及其他属性" class="headerlink" title="获取元素宽高及其他属性"></a>获取元素宽高及其他属性</h2><p>​    元素.offsetWidth<br>    元素.offsetHeight<br>    元素.offsetLeft<br>    元素.offsetTop</p><p>html  元素  clientWidth  浏览器可视区域的宽度</p><p>var sw &#x3D; document.documentElement.clientWidth;</p><p>元素.offsetX </p><p> 点击的盒子内部某个点距离盒子的距离</p><h1 id="vue获取宽高和坐标"><a href="#vue获取宽高和坐标" class="headerlink" title="vue获取宽高和坐标"></a>vue获取宽高和坐标</h1><p>ref  获取dom</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;iframe<br>      <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;mainIframe&quot;</span><br>      name=<span class="hljs-string">&quot;mainIframe&quot;</span><br>      src=<span class="hljs-string">&quot;/cigmap-v2/#/riskctrl/onemap&quot;</span><br>      frameborder=<span class="hljs-string">&quot;0&quot;</span><br>      scrolling=<span class="hljs-string">&quot;auto&quot;</span><br>      ref=<span class="hljs-string">&quot;myiframe&quot;</span><br>    &gt;&lt;/iframe&gt;<br><br><br><br>// console.log(this.<span class="hljs-variable">$refs</span>.myiframe);<br><br><br>一定要加s      <span class="hljs-variable">$refs</span><br></code></pre></td></tr></table></figure><p>​获取元素坐标</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">this.<span class="hljs-variable">$refs</span><span class="hljs-selector-class">.xxx</span><span class="hljs-selector-class">.getBoundingClientRect</span>()<br></code></pre></td></tr></table></figure><p>​获取元素高度 </p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> navH = this.<span class="hljs-symbol">$refs</span>.navH;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-number">1111111111111</span>,navH.offsetHeight);<br></code></pre></td></tr></table></figure><p>​获取屏幕高度</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;this.$refs.appH.clientHeight&#x27;</span>,this.<span class="hljs-symbol">$refs</span>.appH.clientHeight);<br>this.<span class="hljs-symbol">$refs</span>.appH.clientHeight<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>javascript API笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>dom操作</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>节点的亲属访问</title>
    <link href="/hexodemo/2024/03/01/%E8%8A%82%E7%82%B9%E7%9A%84%E4%BA%B2%E5%B1%9E%E8%AE%BF%E9%97%AE/"/>
    <url>/hexodemo/2024/03/01/%E8%8A%82%E7%82%B9%E7%9A%84%E4%BA%B2%E5%B1%9E%E8%AE%BF%E9%97%AE/</url>
    
    <content type="html"><![CDATA[<h3 id="该知识点属于元素查找的范畴"><a href="#该知识点属于元素查找的范畴" class="headerlink" title="该知识点属于元素查找的范畴"></a>该知识点属于元素查找的范畴</h3><p>​元素.parentElement<br>        获取父元素<br>    元素.previousElementSibling<br>         获取其哥哥<br>    元素.nextElementSibling<br>        获得其弟弟<br>    元素.children<br>        孩子们( 注意这里拿到的是伪数组, 是所有的子元素 )<br>    语法补充了解</p>]]></content>
    
    
    <categories>
      
      <category>javascript API笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>dom操作</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>操作属性与样式</title>
    <link href="/hexodemo/2024/03/01/%E6%93%8D%E4%BD%9C%E5%B1%9E%E6%80%A7%E4%B8%8E%E6%A0%B7%E5%BC%8F/"/>
    <url>/hexodemo/2024/03/01/%E6%93%8D%E4%BD%9C%E5%B1%9E%E6%80%A7%E4%B8%8E%E6%A0%B7%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="操作属性与样式"><a href="#操作属性与样式" class="headerlink" title="操作属性与样式"></a>操作属性与样式</h2><p>操作属性<br>        1&gt; 读取属性的值<br>        2&gt; 设置属性的值<br>        在 DOM 观点中, 页面中的每一个标签都是 对象, 所以<br>            我们要读取元素的属性时, 直接就是 读取 对象的  属性<br>            我们要设置元素的属性时, 直接就是 给对象的属性 赋值</p><pre><code class="hljs">-&gt; 操作类样式使用的是 className, 而不是 class. 因为 class 是一个关键字.</code></pre><h3 id="操纵属性"><a href="#操纵属性" class="headerlink" title="操纵属性"></a>操纵属性</h3><blockquote><p> &#x2F;&#x2F; 设置宽高的方法有三种<br>        &#x2F;&#x2F; 1&gt; img 标签自有的属性 width 与 height<br>        &#x2F;&#x2F; 2&gt; 设置 img 的行内样式, 即 img 标签的 style 属性中的 width 与 height<br>        &#x2F;&#x2F; 3&gt; 使用 类样式, 外部样式, 嵌入样式</p><p>1     img.width &#x3D; ‘500’  使用 html 的属性的时候设置宽高默认就是像素<br>2     img.style.width &#x3D; ‘500px’;<br>3     img.className &#x3D; ‘c’;<br>          .c {<br>            width: 200px;<br>        }</p></blockquote><p> DOM对象.style.样式属性名 &#x3D; 样式属性值</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dart">设置图片地址 :<br><span class="hljs-keyword">var</span> imgobj = <span class="hljs-built_in">document</span>.getElementsByTagName( <span class="hljs-string">&#x27;img&#x27;</span> )[ <span class="hljs-number">0</span> ];<br>imgobj.src = <span class="hljs-string">&#x27;./imgs/1.png&#x27;</span>;<br></code></pre></td></tr></table></figure><h3 id="操纵类名"><a href="#操纵类名" class="headerlink" title="操纵类名"></a>操纵类名</h3><blockquote><p>操作类样式使用的是 className, 而不是 class. 因为 class 是一个关键字.</p></blockquote><h3 id="几个特殊的属性"><a href="#几个特殊的属性" class="headerlink" title="几个特殊的属性"></a>几个特殊的属性</h3><ul><li><p>.innerText</p></li><li><blockquote><p>  表示标签内部的文本<br>  其与 innerHTML 的区别是<br> 1&gt; 读取的时候忽略标签<br> 2&gt; 设置的时候 标签形式的字符串不会被转换成 DOM, 而是转义( 例如: &gt; &gt; )</p></blockquote></li><li><p>.innerHTML</p></li><li><blockquote><p> inner 表示的是内部的, 与之对应的有一个 outer 叫外部的<br>  innerHTML 内部的 html</p><pre><code class="hljs">这个属性的作用是读取或设置标签中的 内容( 子标签等 )</code></pre></blockquote></li></ul><h3 id="处理行内样式"><a href="#处理行内样式" class="headerlink" title="处理行内样式"></a>处理行内样式</h3><blockquote><p>样式的分类:<br>            1&gt; 行内样式: 直接写在标签中的样式<br>                <span style="color: red; font-size: 30px;"></span><br>            2&gt; 嵌入样式: 写在页面的 style 标签中的样式, 一般使用的是选择器来定位元素<br>            3&gt; 外部样式: 独立的利用一个 css 文件写到外面, 然后利用 link 标签引入 css</p><pre><code class="hljs">        专一原则, 就近原则    标签的行内样式写到一个 style 属性中( 注意这个属性是一个很长的字符串 )    对应的 DOM 对象, 也有一个 style 属性.     但是 DOM 对象的 style 属性不是一个字符串. DOM 的 style 属性也是一个对象,    这个对象就是 样式属性名 与 样式属性值 构成的键值对.    DOM对象.style.样式属性名 = 样式属性值</code></pre></blockquote><h3 id="非行内样式-样式操作"><a href="#非行内样式-样式操作" class="headerlink" title="非行内样式-样式操作"></a>非行内样式-样式操作</h3><blockquote><p>style 只能处理行内样式, 无法处理嵌入样式<br>        如果第一次获取元素的样式值的时候, 样式不是行内样式, 是写在外部的, 就无法使用 style 获取<br>        应该使用 “计算样式”<br>            window.getComputedStyle( 元素 )<br>        该方法会返回这个元素的 所有 计算样式的 对象<br>        其使用方法与 style 属性的使用方法是一模一样的( 只读 ).</p><pre><code class="hljs">    var left = box.style.left || window.getComputedStyle( box ).left;    function func( arg ) &#123;        // 对参数进行操作        // 加入我们需要的参数是一个数组        arg = arg || [];          // 如果传入数组了, 那么这句话无效, 如果没有传入参数则使用 [] 给 arg 赋值        // ...    &#125;利用标准 DOM 的方式创建 页面中的 元素思路: 将写 html 标签的顺序改成代码的顺序即可</code></pre></blockquote>]]></content>
    
    
    <categories>
      
      <category>javascript API笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>dom操作</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>获得元素document</title>
    <link href="/hexodemo/2024/03/01/%E6%B5%8B%E8%AF%95/"/>
    <url>/hexodemo/2024/03/01/%E6%B5%8B%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<h1 id="javascript-API笔记"><a href="#javascript-API笔记" class="headerlink" title="javascript API笔记"></a>javascript API笔记</h1><h2 id="获得元素document"><a href="#获得元素document" class="headerlink" title="获得元素document."></a>获得元素document.</h2><h3 id="getElementById"><a href="#getElementById" class="headerlink" title="getElementById"></a>getElementById</h3><blockquote><p>var p1 &#x3D; document.getElementById( ‘p1’ );<br>语法: document.getElementById( ‘id’ )<br> 习惯: 写标签的时候, 属性使用 双引号, 写字符串的时候属性写 单引号</p></blockquote><h3 id="getElementsByTagName"><a href="#getElementsByTagName" class="headerlink" title="getElementsByTagName"></a>getElementsByTagName</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>111<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>div<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>222<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>div<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>333<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>div<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 获得所有的 p 标签, 然后打印出来</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> nodes = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByTagName</span>( <span class="hljs-string">&#x27;p&#x27;</span> );</span><br><span class="language-javascript">    </span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>document.getElementsByTagName( ‘p’ );</p></blockquote><h3 id="getElementsByTagName-1"><a href="#getElementsByTagName-1" class="headerlink" title="getElementsByTagName"></a>getElementsByTagName</h3><blockquote><p>var div &#x3D; document.getElementsByTagName( ‘div’ )[ 0 ];</p></blockquote><h3 id="querySelector"><a href="#querySelector" class="headerlink" title="querySelector"></a>querySelector</h3><blockquote><p> &#x2F;&#x2F; 选择器 ( selector )<br>        &#x2F;&#x2F; -&gt; 基本选择器: #id, .className, tagName, *<br>        &#x2F;&#x2F; -&gt; 复合选择器: 子代选择器( &gt; ), 后代选择器( ‘ ‘ ), …</p><pre><code class="hljs">    // 如果想到定位 这两个 p    // #dv1 &gt; p        // 使用选择器获得元素的 语法      // docuemnt.querySelector( &#39;选择器的字符串&#39; ) 获得所有的 符合选择器的元素中的 第 0 个</code></pre></blockquote><h3 id="querySelectorAll"><a href="#querySelectorAll" class="headerlink" title="querySelectorAll"></a>querySelectorAll</h3><blockquote><p>&#x2F;&#x2F; document.querySelectorAll( ‘选择器字符串’ )  获得所有的 符合选择器的元素( 伪数组 )</p></blockquote><h3 id="document-body"><a href="#document-body" class="headerlink" title="document.body"></a>document.body</h3><blockquote><p>如果需要获得页面中的 body, 除了使用 get 或 query 系列的方法之外<br>还可以使用 document.body, 其就是 当前页面的 body 标签</p></blockquote><h3 id="children"><a href="#children" class="headerlink" title="children"></a>children</h3><blockquote><p>使用 children 来获得元素的 子元素</p><p>例如</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;menu&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>测试<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>测试<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>测试<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>测试<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>测试<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>测试<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 使用传统的方法, 获得 主菜单的 a 标签</span></span><br><span class="language-javascript">        <span class="hljs-comment">// 可以使用 children 来获得元素的 子元素</span></span><br><span class="language-javascript">        <span class="hljs-comment">// 1&gt; 拿到菜单的 容器 ( menu )</span></span><br><span class="language-javascript">        <span class="hljs-comment">// 2&gt; 利用 children 来拿到容器中的 所有 li</span></span><br><span class="language-javascript">        <span class="hljs-comment">// 3&gt; 循环遍历 li 找到每一个 li 中的 第 0 的子元素( children[ 0 ] )</span></span><br><span class="language-javascript">        <span class="hljs-comment">/*</span></span><br><span class="hljs-comment"><span class="language-javascript">        var menu = document.getElementById( &#x27;menu&#x27; );</span></span><br><span class="hljs-comment"><span class="language-javascript">        var li_list = menu.children;</span></span><br><span class="hljs-comment"><span class="language-javascript">        // console.log( li_list );</span></span><br><span class="hljs-comment"><span class="language-javascript">        for ( var i = 0; i &lt; li_list.length; i++ ) &#123;</span></span><br><span class="hljs-comment"><span class="language-javascript">            var li = li_list[ i ]; // 就是每一个 一级菜单的 li 标签</span></span><br><span class="hljs-comment"><span class="language-javascript">            // console.log( li.children );</span></span><br><span class="hljs-comment"><span class="language-javascript">            var a = li.children[ 0 ];</span></span><br><span class="hljs-comment"><span class="language-javascript">            console.log( a );</span></span><br><span class="hljs-comment"><span class="language-javascript">        &#125;</span></span><br><span class="hljs-comment"><span class="language-javascript">        */</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 使用选择器</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> a_list = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>( <span class="hljs-string">&#x27;#menu &gt; li &gt; a&#x27;</span> );</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( a_list );</span><br><span class="language-javascript">    </span><br><span class="language-javascript">    &lt;/scri</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>javascript API笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>dom模板2</title>
    <link href="/hexodemo/2024/03/01/dom%E6%A8%A1%E6%9D%BF/"/>
    <url>/hexodemo/2024/03/01/dom%E6%A8%A1%E6%9D%BF/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>javascript API笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>dom操作</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>自定义属性</title>
    <link href="/hexodemo/2024/03/01/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%B1%9E%E6%80%A7/"/>
    <url>/hexodemo/2024/03/01/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%B1%9E%E6%80%A7/</url>
    
    <content type="html"><![CDATA[<p> HTML5 的规范中开始为了区分自定义属性与标准属性, 所有自定义属性应该使用 data- 或 x- 开头</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">data-itcast</span>=<span class="hljs-string">&quot;参数&quot;</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>javascript API笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>dom操作</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>dom事件操作1</title>
    <link href="/hexodemo/2024/03/01/dom%E4%BA%8B%E4%BB%B6%E6%93%8D%E4%BD%9C/"/>
    <url>/hexodemo/2024/03/01/dom%E4%BA%8B%E4%BB%B6%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h2 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>  -&gt; 事件对象<br>-&gt; 为什么需要事件对象<br>键盘事件, 鼠标事件会在触发的时候 得到很多的数据, 例键盘按下的是什么键(组合件)再比如鼠标移动时候的坐标是什么…<br>为了好使用这些数据, 浏览器帮我们将生成的这些数据进行 “打包”, 将其打包一个对象.<br>  -&gt; 怎么使用事件对象呢?<br>  1&gt; 怎么拿到对象<br>   在事件触发( 人执行某一个预定义行为的时候 )的时候, 浏览器会检查是否提前注册过事件处理函数, 一旦注册了函数, 浏览器就会将函数调用一下.</p><pre><code class="hljs">数据是浏览器收集的，函数也是浏览器调用的，所以实际上浏览器在调用函数的时候给函数传入了一个参数, 这个参数就是事件对象.所以要拿到事件对象:1) 在函数参数中写上形参2) 使用 arguments 2&gt; 这些属性有什么用键盘事件: keyCode, 键盘的键位码案例: 在页面上利用键盘的 wsad 控制小盒子的移动1&gt; 盒子要移动: 上下左右 的移动绝对定位, 利用 left 与 top 控制盒子的位置2&gt; 只有文本框可以获得键盘事件, 那么如何在全页面中监视键盘事件呢?将事件注册到 document 上</code></pre><h2 id="什么是事件"><a href="#什么是事件" class="headerlink" title="什么是事件"></a>什么是事件</h2><p>什么是事件( event ), 我们向浏览器做一件事情, 浏览器给我们一个反应. 浏览器时时对我们的行为有一个监视, 浏览器知道我们做的所有事情: 鼠标与键盘的操作.正常情况, 浏览器什么也不说.</p><p>浏览器会有很多的默认行为, 如果我们需要在我们进行操作的时候, 浏览器来响应我们的自定义行为那么我们就需要 注册事件. 就是告诉浏览器我们在执行某某行为的时候调用某一个函数.</p><h2 id="简单的说事件的操作步骤"><a href="#简单的说事件的操作步骤" class="headerlink" title="简单的说事件的操作步骤"></a>简单的说事件的操作步骤</h2><p>找到元素</p><p>注册事件: 元素.on事件名 &#x3D; 函数</p><p>在用户执行某一个行为的时候, 函数就会调用</p><h2 id="语法的说明注意事项及this指向说明"><a href="#语法的说明注意事项及this指向说明" class="headerlink" title="语法的说明注意事项及this指向说明"></a>语法的说明注意事项及this指向说明</h2><p> 语法的说明:<br>        1&gt; 事件相关的函数( 事件处理函数 )可以单独的写, 也可以直接在注册事件的时候赋值.<br>        2&gt; 我们需要注意的是, 同一个事件只允许注册一次. 重复给 onxxxx 赋值只会覆盖以前的函数.<br>        3&gt; 我们可以给同一个元素注册多个事件: 例如鼠标进入与离开.<br>        4&gt; 事件的书写也可以直接写到 onclick 标签属性中( 了解为主 ). 属性值就是一个匿名函数.<br>        5&gt; 关于 this, this 就是 “这一个, 它”, 在代码中它的表示是容易出错的.<br>            如果一个对象的方法调用了, 在方法中 this 就是这个对象本身<br>            var o &#x3D; {<br>                method: function () {<br>                    console.log( this );<br>                }<br>            };<br>            &#x2F;&#x2F; o.method &#x3D; function () { … };</p><pre><code class="hljs">因为我们的事件是被注册到 元素上, 事件处理函数中的 this 就是这个元素        btn.onclick = function () &#123;            // this 就是 btn        &#125;;事件处理函数中的 this 就是这个触发事件的元素</code></pre><h2 id="常用事件"><a href="#常用事件" class="headerlink" title="常用事件"></a>常用事件</h2><h3 id="鼠标类"><a href="#鼠标类" class="headerlink" title="鼠标类:"></a>鼠标类:</h3><p>​click       单击事件: 是按下与抬起组合在一起叫单击<br>        dblclick    双击事件<br>        mousedown   鼠标按下事件<br>        mouseup     鼠标抬起事件<br>        mouseenter  鼠标进入事件不冒泡<br>        mouseleave  鼠标离开事件   不冒泡<br>        mouseover   鼠标进入事件    冒泡<br>        mouseout    鼠标离开事件冒泡<br>        mousemove   鼠标移动事件</p><p>简单的说 enter 组不会冒泡, over 组会冒泡</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-keyword">function</span> <span class="hljs-keyword">func</span>() &#123;<br>            alert( <span class="hljs-string">&#x27;我们自己定义的行为给执行了, 哈哈哈哈哈哈\n呵呵呵呵\n嘻嘻嘻嘻&#x27;</span> );<br>        &#125;<br>var btn = document.getElementsByTagName( <span class="hljs-string">&#x27;button&#x27;</span> )[ <span class="hljs-number">0</span> ];<br> btn.onclick = <span class="hljs-keyword">func</span>;   <span class="hljs-regexp">//</span> 注意不是 <span class="hljs-keyword">func</span>() 的返回值赋值给 onclick<br></code></pre></td></tr></table></figure><h3 id="键盘类事件"><a href="#键盘类事件" class="headerlink" title="键盘类事件:"></a>键盘类事件:</h3><p>keypress    击键事件: 键盘按下与抬起组合到一起叫击键<br>keydown     键盘按下<br>keyup       键盘抬起<br>keyCode 键盘的键位码<br>在事件处理函数中如果需要使用当前的 元素 一般都会使用 this 来代替<br>onchange  值发生改变事件(文本改变并失去焦点)<br>onblur   失去焦点事件<br>onresize 当浏览器窗口大小发生变化是触发事件<br>onscroll当浏览器滚动时</p><h3 id="滚轮事件"><a href="#滚轮事件" class="headerlink" title="滚轮事件"></a>滚轮事件</h3><p>在谷歌浏览器中 滚轮事件是 onmousewheel<br>在火狐浏览器中 滚轮事件是 onDOMMouseScroll</p><h3 id="input事件"><a href="#input事件" class="headerlink" title="input事件"></a>input事件</h3><p>focus()获取焦点  事件<br>oninput 文本框内容发生改变事件</p><h2 id="追加点击事件"><a href="#追加点击事件" class="headerlink" title="追加点击事件"></a>追加点击事件</h2><p>元素.addEventListener( ‘事件的类型’, 事件处理函数 )</p><h2 id="事件的移除"><a href="#事件的移除" class="headerlink" title="事件的移除"></a>事件的移除</h2><p>传统移除  btn.onclick &#x3D; null;<br>元素.removeEventListener( ‘事件的类型’, 要移除的函数 )</p><h2 id="取消事件的默认行为"><a href="#取消事件的默认行为" class="headerlink" title="取消事件的默认行为"></a>取消事件的默认行为</h2><blockquote><p> form 表单的提交<br>    a 标签的跳转</p><pre><code class="hljs">我们要想办法取消事件的默认行为只需要在事件处理函数中返回 false 即可问题:1&gt; 代码规范.2&gt; 表单案例一定要有 form 标签, 没有 form 标签是不会提交的.</code></pre><p>var btn &#x3D; document.querySelector( ‘input’ );<br>        btn.onclick &#x3D; function () {<br>            alert( ‘点击提交’ );<br>            return false; &#x2F;&#x2F; 在点击按钮事件触发后, 不会执行事件的默认行为. 即不会提交<br>        };</p></blockquote><h2 id="事件冒泡"><a href="#事件冒泡" class="headerlink" title="事件冒泡"></a>事件冒泡</h2><p>冒泡[ 重点 ]<br>    描述:<br>        <div><br>            <div></div><br>        </div><br>    我们点击 里面的 div, 问是点击的 里面的 div 还是点击的 外面的 div 呢?</p><p>​我们的 html 结构是一个嵌套关系的时候, 如果对里面的元素触发事件, 那么也相当于对外面的元素触发事件，那么这个过程不是我们注册事件才会实现, 而是浏览器对事件处理的基本原理, 不是因为我们注册了事件才有这个效果, 而是原本就有这个特征, 我们注册了事件才可以观察到.</p><pre><code class="hljs"> 这样事件的触发会 从里往外 自动的传递, 我们将其称为事件的冒泡.</code></pre><p>​有些浏览器( 老 ), 我们在嵌套标签中触发事件的时候, 事件执行会 从 外 往 里. 那么将其称为 事件的捕获.</p><p>​    由于 js 不断发展, 为了实现向下兼容. js 的事件语法中支持控制让事件以冒泡的形式传递 还是 以捕获的形式传递.</p><pre><code class="hljs">语法:    元素.addEventListener( &#39;事件的类型&#39;, 事件处理函数[, 是否捕获 ] );该语法的第三个参数是可选参数, 提供一个 boolean 值1&gt; 如果不传入, 或传入的是 false, 表示采用冒泡的方式传递事件2&gt; 如果传入的是 true 则以捕获的形式进行传递事件</code></pre><h3 id="事件冒泡-1"><a href="#事件冒泡-1" class="headerlink" title="事件冒泡"></a>事件冒泡</h3><p>事件的触发会 从里往外 自动的传递, 我们将其称为事件的冒泡.</p><p>利用事件冒泡来实现事件代理<br>代理( delegate, 委托 ), 自己要做, 但是不做, 让另一个对象帮你做, 那么这个对象就是你的 代理.<br>事件代理, 就是原本应该触发你的事件, 但是触发的是别人的事件, 让这个事件来给你完成任务.</p><p>案例:<br>    列表鼠标悬浮高量<br>思考: 冒泡在这个案例中, 存在什么特征? 就是每一次鼠标进入与离开, 都会被外层的 div 所察觉.<br>思考: 如果不给里面的所有 div 注册鼠标进入与离开的事件, 外层 容器的事件会 触发么? 会</p><p>考虑, 如果在事件的传递过程中, 可以得到最早触发事件的元素( 事件的源头 ).<br>如果可以得到这个源头, 我们的 代码 会怎么样?</p><p>事件处理函数中的事件对象, 有一个属性叫 target, 就是我们事件的源头.</p><h3 id="事件捕获"><a href="#事件捕获" class="headerlink" title="事件捕获"></a>事件捕获</h3><p>事件执行会 从 外 往 里. 那么将其称为 事件的捕获.</p><p>事件处理函数中的事件对象, 有一个属性叫 target, 就是我们事件的源头.</p><h3 id="target-属性"><a href="#target-属性" class="headerlink" title="target,属性"></a>target,属性</h3><p>事件处理函数中的事件对象, 有一个属性叫 target, 就是我们事件的源头.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;ie=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.list</span> <span class="hljs-selector-tag">div</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#ccc</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgba</span>( <span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0.3</span> );</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;list&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> list = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>( <span class="hljs-string">&#x27;.list&#x27;</span> );</span><br><span class="language-javascript"></span><br><span class="language-javascript">        list.<span class="hljs-property">onmouseover</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"> e </span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// console.log( &#x27;进入事件触发了&#x27; );</span></span><br><span class="language-javascript">            <span class="hljs-comment">// console.log( e );</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-comment">// var div = 源头;</span></span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> div = e.<span class="hljs-property">target</span>;</span><br><span class="language-javascript">            div.<span class="hljs-property">style</span>.<span class="hljs-property">backgroundColor</span> = <span class="hljs-string">&#x27;red&#x27;</span>;</span><br><span class="language-javascript">        &#125;;</span><br><span class="language-javascript">        list.<span class="hljs-property">onmouseout</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"> e </span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// console.log( &#x27;离开事件触发了&#x27; );</span></span><br><span class="language-javascript">            <span class="hljs-comment">// console.log( e );</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-comment">// var div = 源头;</span></span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> div = e.<span class="hljs-property">target</span>;</span><br><span class="language-javascript">            div.<span class="hljs-property">style</span>.<span class="hljs-property">backgroundColor</span> = <span class="hljs-string">&#x27;&#x27;</span>;</span><br><span class="language-javascript">        &#125;;</span><br><span class="language-javascript">        </span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="取消事件的默认行为-1"><a href="#取消事件的默认行为-1" class="headerlink" title="取消事件的默认行为"></a>取消事件的默认行为</h3><p>return false</p><h3 id="取消事件冒泡"><a href="#取消事件冒泡" class="headerlink" title="取消事件冒泡"></a>取消事件冒泡</h3><p>stopPropagation()</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">span.onclick = <span class="hljs-keyword">function</span> <span class="hljs-params">( e )</span> &#123;<br>            alert( <span class="hljs-string">&#x27;span&#x27;</span> );<br>            e.stopPropagation(); <span class="hljs-comment">// 阻止了事件向上传递( 没有冒泡了 )</span><br>        &#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>javascript API笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>dom操作</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>操作dom属性与样式</title>
    <link href="/hexodemo/2024/03/01/%E6%93%8D%E4%BD%9Cdom%E5%B1%9E%E6%80%A7%E4%B8%8E%E6%A0%B7%E5%BC%8F/"/>
    <url>/hexodemo/2024/03/01/%E6%93%8D%E4%BD%9Cdom%E5%B1%9E%E6%80%A7%E4%B8%8E%E6%A0%B7%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="什么是dom对象"><a href="#什么是dom对象" class="headerlink" title="什么是dom对象"></a>什么是dom对象</h2><p>浏览器 对象 模型( Broswer Object Model )</p><p>就是将浏览器也抽象成对象, 将浏览器中的所有的功能也抽象成对象的属性或方法.</p><p>有一个顶级对象 window, 它表示的就是浏览器</p><h3 id="load-事件"><a href="#load-事件" class="headerlink" title="load 事件"></a>load 事件</h3><p>​load 表示的是加载,表示数据加载完成就会被触发<br>    window.onload &#x3D; function () {<br>                &#x2F;&#x2F; 页面中所有的 内容 全部加载完毕<br>                &#x2F;&#x2F; 那么就会触发, 而且只会触发一次<br>            };</p><h2 id="Location-对象"><a href="#Location-对象" class="headerlink" title="Location 对象"></a>Location 对象</h2><p>页面自动跳转      window.location.href &#x3D; ‘页面地址’;  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">location.<span class="hljs-property">href</span>=<span class="hljs-string">&quot;http://www.baidu.com&quot;</span>;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>赋值跳转        location.assign( ‘<a href="https://www.baidu.com/">https://www.baidu.com</a>‘ ); &#x2F;&#x2F; assign 就是赋值的意思   可通过事件跳转</p><p> 替换跳转   location.replace( ‘<a href="http://www.qq.com/">http://www.qq.com</a>‘ )</p><p>直接将当前页替换成对应的 页面, 在浏览器记录中不记录当前页面</p><p>刷新页面   location.reload()</p><p>location.search  用来获取url?后面的字段</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs qml"><span class="hljs-keyword">var</span> <span class="hljs-built_in">url</span> = location.search;<br><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">url</span>);<br><br></code></pre></td></tr></table></figure><p>​search后面没有()</p><h3 id="解析网站地址"><a href="#解析网站地址" class="headerlink" title="解析网站地址"></a>解析网站地址</h3><p>​快速获取网站字符串的各项信息</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs arcade">document.querySelector( <span class="hljs-string">&#x27;button&#x27;</span> ).onclick = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>           <span class="hljs-comment">// 创建 a 标签</span><br>           <span class="hljs-keyword">var</span> a = document.createElement( <span class="hljs-string">&#x27;a&#x27;</span> );<br>           a.href = <span class="hljs-string">&#x27;http://www.itcast.cn:8080/123/abc/index.html?name=itcast#mark&#x27;</span>;<br><br>           <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>( <span class="hljs-string">&#x27;主机(域名): &#x27;</span> + a.host ); <br>           <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>( <span class="hljs-string">&#x27;协议: &#x27;</span> + a.protocol );<br>           <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>( <span class="hljs-string">&#x27;端口: &#x27;</span> + a.port );<br>           <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>( <span class="hljs-string">&#x27;参数: &#x27;</span> + a.search );<br>           <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>( <span class="hljs-string">&#x27;路径: &#x27;</span> + a.pathname );<br>           <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>( <span class="hljs-string">&#x27;锚点: &#x27;</span> + a.<span class="hljs-built_in">hash</span> );<br><br><br>       &#125;;<br></code></pre></td></tr></table></figure><h2 id="计时器-重要"><a href="#计时器-重要" class="headerlink" title="计时器[ 重要 ]"></a>计时器[ 重要 ]</h2><p>​延时器   setTimeout</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-built_in">setTimeout</span>( <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br><br>                    <span class="hljs-comment">// 需要推迟执行的代码</span><br><br>                &#125;, 毫秒数 )<br><br></code></pre></td></tr></table></figure><p>​定时器   setInterval</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-built_in">setInterval</span>( <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br><br>                   <span class="hljs-comment">// 需要重复执行的代码</span><br><br>               &#125;, 毫秒数 )<br><br></code></pre></td></tr></table></figure><p>​清除延时器clearTimeout( 延时器Id )<br>    清除计时器clearInterval( 计时器ID )</p><pre><code class="hljs">移动的盒子有一个 bug, 在连续点击按钮的时候, 移动的速度会越来越快.原因: 是每次点击都会开启计时器解决方法就是每次点击 都将上一次的计时器清除</code></pre><p>小案例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;ie=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.box</span>&#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">1500px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">        <span class="hljs-comment">/* border: 1px solid #ccc; */</span></span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#ccc</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;start&quot;</span>&gt;</span>开始<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;end&quot;</span>&gt;</span>结束<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&#x27;哈哈&#x27;</span>,<span class="hljs-string">&#x27;史振国&#x27;</span>, <span class="hljs-string">&#x27;张超&#x27;</span>, <span class="hljs-string">&#x27;王修刚&#x27;</span>, <span class="hljs-string">&#x27;陈海峰&#x27;</span>, <span class="hljs-string">&#x27;高千山&#x27;</span>, <span class="hljs-string">&#x27;葛睿哲&#x27;</span>, <span class="hljs-string">&#x27;闫舵&#x27;</span>, <span class="hljs-string">&#x27;常琳琳&#x27;</span>, <span class="hljs-string">&#x27;姚瑞&#x27;</span>, <span class="hljs-string">&#x27;赵忠强&#x27;</span>, <span class="hljs-string">&#x27;赵娜&#x27;</span>, <span class="hljs-string">&#x27;许家家&#x27;</span>, <span class="hljs-string">&#x27;林超&#x27;</span>, <span class="hljs-string">&#x27;王勇智&#x27;</span>, <span class="hljs-string">&#x27;谢颖瑞&#x27;</span>, <span class="hljs-string">&#x27;林婷&#x27;</span>, <span class="hljs-string">&#x27;丁子龙&#x27;</span>, <span class="hljs-string">&#x27;徐冬雪&#x27;</span>, <span class="hljs-string">&#x27;高琪&#x27;</span>, <span class="hljs-string">&#x27;陈彪&#x27;</span>, <span class="hljs-string">&#x27;冯燕东&#x27;</span>, <span class="hljs-string">&#x27;卢晶&#x27;</span>, <span class="hljs-string">&#x27;任皓&#x27;</span>, <span class="hljs-string">&#x27;孟展伊&#x27;</span>, <span class="hljs-string">&#x27;窦宇杰&#x27;</span>, <span class="hljs-string">&#x27;毛亚明&#x27;</span>, <span class="hljs-string">&#x27;张弘韦&#x27;</span>, <span class="hljs-string">&#x27;刘银川&#x27;</span>, <span class="hljs-string">&#x27;高传奇&#x27;</span>, <span class="hljs-string">&#x27;孙棒棒&#x27;</span>, <span class="hljs-string">&#x27;焦敏&#x27;</span>, <span class="hljs-string">&#x27;王坤鹏&#x27;</span>, <span class="hljs-string">&#x27;滑龙&#x27;</span>, <span class="hljs-string">&#x27;李继玄&#x27;</span>, <span class="hljs-string">&#x27;粟兴秀&#x27;</span>, <span class="hljs-string">&#x27;袁状&#x27;</span>, <span class="hljs-string">&#x27;侯志强&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-string">&#x27;柳加豪&#x27;</span>, <span class="hljs-string">&#x27;李昭萍&#x27;</span>, <span class="hljs-string">&#x27;郝萌萌&#x27;</span>, <span class="hljs-string">&#x27;张伟涛&#x27;</span>, <span class="hljs-string">&#x27;闫静超&#x27;</span>, <span class="hljs-string">&#x27;张婷婷&#x27;</span>, <span class="hljs-string">&#x27;彭可&#x27;</span>, <span class="hljs-string">&#x27;车路明&#x27;</span>, <span class="hljs-string">&#x27;裴思佳&#x27;</span>, <span class="hljs-string">&#x27;蒋智斌&#x27;</span>, <span class="hljs-string">&#x27;陈少卫&#x27;</span>, <span class="hljs-string">&#x27;梁恩硕&#x27;</span>, <span class="hljs-string">&#x27;朱思华&#x27;</span>, <span class="hljs-string">&#x27;杨晶晶&#x27;</span>, <span class="hljs-string">&#x27;杨波&#x27;</span>, <span class="hljs-string">&#x27;郭海胜&#x27;</span>, <span class="hljs-string">&#x27;梁兆兴&#x27;</span>, <span class="hljs-string">&#x27;田强&#x27;</span>, <span class="hljs-string">&#x27;张强&#x27;</span>, <span class="hljs-string">&#x27;吕涛&#x27;</span>, <span class="hljs-string">&#x27;高观宝&#x27;</span>, <span class="hljs-string">&#x27;高观宝&#x27;</span>, <span class="hljs-string">&#x27;杨阵奎&#x27;</span>, <span class="hljs-string">&#x27;王新鹏&#x27;</span>, <span class="hljs-string">&#x27;张宏宇&#x27;</span>, <span class="hljs-string">&#x27;刘铭&#x27;</span>, <span class="hljs-string">&#x27;杨瑞超&#x27;</span>, <span class="hljs-string">&#x27;魏月莹&#x27;</span>, <span class="hljs-string">&#x27;王晶&#x27;</span>, <span class="hljs-string">&#x27;黄善龙&#x27;</span>, <span class="hljs-string">&#x27;晏鹏&#x27;</span>, <span class="hljs-string">&#x27;李昕&#x27;</span>, <span class="hljs-string">&#x27;梁学智&#x27;</span>, <span class="hljs-string">&#x27;于永津&#x27;</span>, <span class="hljs-string">&#x27;张亚坤&#x27;</span>, <span class="hljs-string">&#x27;孟超&#x27;</span>, <span class="hljs-string">&#x27;孙玉&#x27;</span>, <span class="hljs-string">&#x27;王旭&#x27;</span>];</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> start = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByClassName</span>(<span class="hljs-string">&#x27;start&#x27;</span>)[<span class="hljs-number">0</span>];</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> end = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByClassName</span>(<span class="hljs-string">&#x27;end&#x27;</span>)[<span class="hljs-number">0</span>];</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> box = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByClassName</span>(<span class="hljs-string">&#x27;box&#x27;</span>)[<span class="hljs-number">0</span>];</span><br><span class="language-javascript">    </span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> timer;<span class="hljs-comment">//....................................................//写外面</span></span><br><span class="language-javascript">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>;i&lt;arr.<span class="hljs-property">length</span>;i++)&#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> div = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;div&#x27;</span>);</span><br><span class="language-javascript">        div.<span class="hljs-property">innerHTML</span> = arr[i];</span><br><span class="language-javascript">        div.<span class="hljs-property">style</span>.<span class="hljs-property">float</span> = <span class="hljs-string">&#x27;left&#x27;</span>;</span><br><span class="language-javascript">        div.<span class="hljs-property">style</span>.<span class="hljs-property">margin</span> = <span class="hljs-string">&#x27;10px&#x27;</span>;</span><br><span class="language-javascript">        div.<span class="hljs-property">style</span>.<span class="hljs-property">padding</span> = <span class="hljs-string">&#x27;2px&#x27;</span>;</span><br><span class="language-javascript">        div.<span class="hljs-property">style</span>.<span class="hljs-property">backgroundColor</span> = <span class="hljs-string">&#x27;yellow&#x27;</span>;</span><br><span class="language-javascript">        box.<span class="hljs-title function_">appendChild</span>(div);</span><br><span class="language-javascript">    &#125;;</span><br><span class="language-javascript">    </span><br><span class="language-javascript">    start.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-built_in">clearInterval</span>(timer);</span><br><span class="language-javascript">        timer = <span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> index = <span class="hljs-built_in">parseInt</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>()*arr.<span class="hljs-property">length</span>);</span><br><span class="language-javascript">            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>;i&lt;arr.<span class="hljs-property">length</span>;i++)&#123;</span><br><span class="language-javascript">                box.<span class="hljs-property">children</span>[i].<span class="hljs-property">style</span>.<span class="hljs-property">backgroundColor</span> = <span class="hljs-string">&#x27;yellow&#x27;</span>;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">            box.<span class="hljs-property">children</span>[index].<span class="hljs-property">style</span>.<span class="hljs-property">backgroundColor</span> = <span class="hljs-string">&#x27;red&#x27;</span>;</span><br><span class="language-javascript">            <span class="hljs-comment">// this.previousElementSibling.children[index].style.backgroundColor = &#x27;red&#x27;;</span></span><br><span class="language-javascript">             <span class="hljs-comment">// console.log(index);</span></span><br><span class="language-javascript">        &#125;,<span class="hljs-number">200</span>)</span><br><span class="language-javascript">        </span><br><span class="language-javascript">       </span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    end.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">params</span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-built_in">clearInterval</span>(timer);</span><br><span class="language-javascript">    &#125;;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="操作dom属性与样式"><a href="#操作dom属性与样式" class="headerlink" title="操作dom属性与样式"></a>操作dom属性与样式</h2><p>操作属性<br>        1&gt; 读取属性的值<br>        2&gt; 设置属性的值<br>        在 DOM 观点中, 页面中的每一个标签都是 对象, 所以<br>            我们要读取元素的属性时, 直接就是 读取 对象的  属性<br>            我们要设置元素的属性时, 直接就是 给对象的属性 赋值</p><pre><code class="hljs">-&gt; 操作类样式使用的是 className, 而不是 class. 因为 class 是一个关键字.</code></pre><h3 id="操纵属性"><a href="#操纵属性" class="headerlink" title="操纵属性"></a>操纵属性</h3><blockquote><p> &#x2F;&#x2F; 设置宽高的方法有三种<br>        &#x2F;&#x2F; 1&gt; img 标签自有的属性 width 与 height<br>        &#x2F;&#x2F; 2&gt; 设置 img 的行内样式, 即 img 标签的 style 属性中的 width 与 height<br>        &#x2F;&#x2F; 3&gt; 使用 类样式, 外部样式, 嵌入样式</p><p>1     img.width &#x3D; ‘500’  使用 html 的属性的时候设置宽高默认就是像素<br>2     img.style.width &#x3D; ‘500px’;<br>3     img.className &#x3D; ‘c’;<br>          .c {<br>            width: 200px;<br>        }</p></blockquote><p> DOM对象.style.样式属性名 &#x3D; 样式属性值</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dart">设置图片地址 :<br><span class="hljs-keyword">var</span> imgobj = <span class="hljs-built_in">document</span>.getElementsByTagName( <span class="hljs-string">&#x27;img&#x27;</span> )[ <span class="hljs-number">0</span> ];<br>imgobj.src = <span class="hljs-string">&#x27;./imgs/1.png&#x27;</span>;<br></code></pre></td></tr></table></figure><h3 id="操纵类名"><a href="#操纵类名" class="headerlink" title="操纵类名"></a>操纵类名</h3><blockquote><p>操作类样式使用的是 className, 而不是 class. 因为 class 是一个关键字.</p></blockquote><h3 id="几个特殊的属性"><a href="#几个特殊的属性" class="headerlink" title="几个特殊的属性"></a>几个特殊的属性</h3><ul><li><p>.innerText</p></li><li><blockquote><p>  表示标签内部的文本<br>  其与 innerHTML 的区别是<br> 1&gt; 读取的时候忽略标签<br> 2&gt; 设置的时候 标签形式的字符串不会被转换成 DOM, 而是转义( 例如: &gt; &gt; )</p></blockquote></li><li><p>.innerHTML</p></li><li><blockquote><p> inner 表示的是内部的, 与之对应的有一个 outer 叫外部的<br>  innerHTML 内部的 html</p><pre><code class="hljs">这个属性的作用是读取或设置标签中的 内容( 子标签等 )</code></pre></blockquote></li></ul><h3 id="处理行内样式"><a href="#处理行内样式" class="headerlink" title="处理行内样式"></a>处理行内样式</h3><blockquote><p>样式的分类:<br>            1&gt; 行内样式: 直接写在标签中的样式<br>                <span style="color: red; font-size: 30px;"></span><br>            2&gt; 嵌入样式: 写在页面的 style 标签中的样式, 一般使用的是选择器来定位元素<br>            3&gt; 外部样式: 独立的利用一个 css 文件写到外面, 然后利用 link 标签引入 css</p><pre><code class="hljs">        专一原则, 就近原则    标签的行内样式写到一个 style 属性中( 注意这个属性是一个很长的字符串 )    对应的 DOM 对象, 也有一个 style 属性.     但是 DOM 对象的 style 属性不是一个字符串. DOM 的 style 属性也是一个对象,    这个对象就是 样式属性名 与 样式属性值 构成的键值对.    DOM对象.style.样式属性名 = 样式属性值</code></pre></blockquote><h3 id="非行内样式-样式操作"><a href="#非行内样式-样式操作" class="headerlink" title="非行内样式-样式操作"></a>非行内样式-样式操作</h3><blockquote><p>style 只能处理行内样式, 无法处理嵌入样式<br>        如果第一次获取元素的样式值的时候, 样式不是行内样式, 是写在外部的, 就无法使用 style 获取<br>        应该使用 “计算样式”<br>            window.getComputedStyle( 元素 )<br>        该方法会返回这个元素的 所有 计算样式的 对象<br>        其使用方法与 style 属性的使用方法是一模一样的( 只读 ).</p><pre><code class="hljs">    var left = box.style.left || window.getComputedStyle( box ).left;    function func( arg ) &#123;        // 对参数进行操作        // 加入我们需要的参数是一个数组        arg = arg || [];          // 如果传入数组了, 那么这句话无效, 如果没有传入参数则使用 [] 给 arg 赋值        // ...    &#125;利用标准 DOM 的方式创建 页面中的 元素思路: 将写 html 标签的顺序改成代码的顺序即可</code></pre></blockquote>]]></content>
    
    
    <categories>
      
      <category>javascript API笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>dom操作</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>获得元素dom&amp;创建dom&amp;操作dom</title>
    <link href="/hexodemo/2024/03/01/%E8%8E%B7%E5%BE%97%E5%85%83%E7%B4%A0dom&amp;%E5%88%9B%E5%BB%BAdom&amp;%E6%93%8D%E4%BD%9Cdom/"/>
    <url>/hexodemo/2024/03/01/%E8%8E%B7%E5%BE%97%E5%85%83%E7%B4%A0dom&amp;%E5%88%9B%E5%BB%BAdom&amp;%E6%93%8D%E4%BD%9Cdom/</url>
    
    <content type="html"><![CDATA[<h1 id="javascript-API笔记"><a href="#javascript-API笔记" class="headerlink" title="javascript API笔记"></a>javascript API笔记</h1><h2 id="特殊元素获取"><a href="#特殊元素获取" class="headerlink" title="特殊元素获取"></a>特殊元素获取</h2><p>​var html &#x3D; document.documentElement;<br>    var body &#x3D; document.body</p><h2 id="获得元素document"><a href="#获得元素document" class="headerlink" title="获得元素document."></a>获得元素document.</h2><p>根据id名获取元素：getElementById;<br>根据标签名获取元素：getElementsByTagName，返回一个数组；<br>根据类名获取元素：getElementsByClassName，返回一个数组；<br>根据name属性值获取元素：getElementsByName，返回一个数组；<br>根据选择器获取元素：<br>querySelector：获取一个元素，推荐使用 用法类似写css；<br>querySelectorAll：返回一个元素数组。</p><h3 id="getElementById"><a href="#getElementById" class="headerlink" title="getElementById"></a>getElementById</h3><blockquote><p>var p1 &#x3D; document.getElementById( ‘p1’ );<br>语法: document.getElementById( ‘id’ )<br> 习惯: 写标签的时候, 属性使用 双引号, 写字符串的时候属性写 单引号</p></blockquote><h3 id="getElementsByTagName"><a href="#getElementsByTagName" class="headerlink" title="getElementsByTagName"></a>getElementsByTagName</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>111<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>div<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>222<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>div<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>333<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>div<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 获得所有的 p 标签, 然后打印出来</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> nodes = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByTagName</span>( <span class="hljs-string">&#x27;p&#x27;</span> );</span><br><span class="language-javascript">    </span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>document.getElementsByTagName( ‘p’ );</p></blockquote><h3 id="getElementsByTagName-1"><a href="#getElementsByTagName-1" class="headerlink" title="getElementsByTagName"></a>getElementsByTagName</h3><blockquote><p>var div &#x3D; document.getElementsByTagName( ‘div’ )[ 0 ];</p></blockquote><h3 id="querySelector"><a href="#querySelector" class="headerlink" title="querySelector"></a>querySelector</h3><blockquote><p> &#x2F;&#x2F; 选择器 ( selector )<br>        &#x2F;&#x2F; -&gt; 基本选择器: #id, .className, tagName, *<br>        &#x2F;&#x2F; -&gt; 复合选择器: 子代选择器( &gt; ), 后代选择器( ‘ ‘ ), …</p><pre><code class="hljs">    // 如果想到定位 这两个 p    // #dv1 &gt; p        // 使用选择器获得元素的 语法      // docuemnt.querySelector( &#39;选择器的字符串&#39; ) 获得所有的 符合选择器的元素中的 第 0 个</code></pre></blockquote><h3 id="querySelectorAll"><a href="#querySelectorAll" class="headerlink" title="querySelectorAll"></a>querySelectorAll</h3><blockquote><p>&#x2F;&#x2F; document.querySelectorAll( ‘选择器字符串’ )  获得所有的 符合选择器的元素( 伪数组 )</p></blockquote><h3 id="document-body"><a href="#document-body" class="headerlink" title="document.body"></a>document.body</h3><blockquote><p>如果需要获得页面中的 body, 除了使用 get 或 query 系列的方法之外<br>还可以使用 document.body, 其就是 当前页面的 body 标签</p></blockquote><h3 id="children"><a href="#children" class="headerlink" title="children"></a>children</h3><blockquote><p>使用 children 来获得元素的 子元素</p><p>例如</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;menu&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>测试<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>测试<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>测试<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>测试<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>测试<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>测试<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 使用传统的方法, 获得 主菜单的 a 标签</span></span><br><span class="language-javascript">        <span class="hljs-comment">// 可以使用 children 来获得元素的 子元素</span></span><br><span class="language-javascript">        <span class="hljs-comment">// 1&gt; 拿到菜单的 容器 ( menu )</span></span><br><span class="language-javascript">        <span class="hljs-comment">// 2&gt; 利用 children 来拿到容器中的 所有 li</span></span><br><span class="language-javascript">        <span class="hljs-comment">// 3&gt; 循环遍历 li 找到每一个 li 中的 第 0 的子元素( children[ 0 ] )</span></span><br><span class="language-javascript">        <span class="hljs-comment">/*</span></span><br><span class="hljs-comment"><span class="language-javascript">        var menu = document.getElementById( &#x27;menu&#x27; );</span></span><br><span class="hljs-comment"><span class="language-javascript">        var li_list = menu.children;</span></span><br><span class="hljs-comment"><span class="language-javascript">        // console.log( li_list );</span></span><br><span class="hljs-comment"><span class="language-javascript">        for ( var i = 0; i &lt; li_list.length; i++ ) &#123;</span></span><br><span class="hljs-comment"><span class="language-javascript">            var li = li_list[ i ]; // 就是每一个 一级菜单的 li 标签</span></span><br><span class="hljs-comment"><span class="language-javascript">            // console.log( li.children );</span></span><br><span class="hljs-comment"><span class="language-javascript">            var a = li.children[ 0 ];</span></span><br><span class="hljs-comment"><span class="language-javascript">            console.log( a );</span></span><br><span class="hljs-comment"><span class="language-javascript">        &#125;</span></span><br><span class="hljs-comment"><span class="language-javascript">        */</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 使用选择器</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> a_list = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>( <span class="hljs-string">&#x27;#menu &gt; li &gt; a&#x27;</span> );</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( a_list );</span><br><span class="language-javascript">    </span><br><span class="language-javascript">    &lt;/scri</span><br></code></pre></td></tr></table></figure><h2 id="创建元素-重要"><a href="#创建元素-重要" class="headerlink" title="创建元素( 重要 )"></a>创建元素( 重要 )</h2><p>利用字符串来拼接<br>拿字符串拼接只能一次性处理, 无法对每一个标签( DOM 对象 )精细的控制</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;div&gt;<br>           <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span>主菜单<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br>           <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">               <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;...&quot;</span>&gt;</span>子菜单<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="language-xml">               <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;...&quot;</span>&gt;</span>子菜单<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="language-xml">               ...</span><br><span class="language-xml">           <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>       &lt;/div&gt;<br><br>       <span class="hljs-keyword">var</span> html = <span class="hljs-string">&#x27;&lt;div class=&quot;menu&quot;&gt;&#x27;</span>;<br><br>       <span class="hljs-comment">// 遍历数据数组, 拼接每一个菜单</span><br>       <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; data.<span class="hljs-property">length</span>; i++) &#123;<br>           <span class="hljs-comment">// 在每一个循环中拼接出一个完整的字符串出来</span><br>           html += <span class="hljs-string">&#x27;&lt;div&gt;&#x27;</span>;<br>           html += <span class="hljs-string">&#x27;    &lt;a&gt;&#x27;</span> + data[i].<span class="hljs-property">menuName</span> + <span class="hljs-string">&#x27;&lt;/a&gt;&#x27;</span>;<br>           html += <span class="hljs-string">&#x27;    &lt;div class=&quot;hide&quot;&gt;&#x27;</span>;<br><br>           <span class="hljs-comment">// 循环子菜单, 循环的是 data[ i ].submenus</span><br>           <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> j = <span class="hljs-number">0</span>; j &lt; data[i].<span class="hljs-property">submenus</span>.<span class="hljs-property">length</span>; j++) &#123;<br>               <span class="hljs-comment">// 拼接子菜单中的 a 标签的 内容</span><br>               <span class="hljs-keyword">var</span> url = data[i].<span class="hljs-property">submenus</span>[j].<span class="hljs-property">url</span>;<br>               <span class="hljs-keyword">var</span> submenuName = data[i].<span class="hljs-property">submenus</span>[j].<span class="hljs-property">submenuName</span>;<br><br>               html += <span class="hljs-string">&#x27;    &lt;a href=&quot;&#x27;</span> + url + <span class="hljs-string">&#x27;&quot;&gt;&#x27;</span> + submenuName + <span class="hljs-string">&#x27;&lt;/a&gt;&#x27;</span>;<br>           &#125;<br><br>           html += <span class="hljs-string">&#x27;    &lt;/div&gt;&#x27;</span>;<br>           html += <span class="hljs-string">&#x27;&lt;/div&gt;&#x27;</span>;<br>       &#125;<br><br><br>       html += <span class="hljs-string">&#x27;&lt;/div&gt;&#x27;</span>;<br></code></pre></td></tr></table></figure><p>创建元素<br>    document.createElement( ‘元素的标签名字’ )</p><h2 id="元素操作"><a href="#元素操作" class="headerlink" title="元素操作"></a>元素操作</h2><p>追加元素<br>    父元素.appendChild( 子元素 )</p><p>插入元素</p><blockquote><p>父元素.insertBefore( 新元素, 页面中的元素 )<br>将 “新元素” 插入到 “页面中的元素” 的 前面</p></blockquote><p>删除元素</p><blockquote><p>父元素.removeChild( 子元素 )  </p></blockquote><p>修改元素<br>查询元素<br>删除( remove )元素    从父元素中删除子元素<br>替换( replace )元素[ 知道 ]<br>cloneNode 与 移动 DOM 元素</p><h2 id="dom节点操作"><a href="#dom节点操作" class="headerlink" title="dom节点操作"></a>dom节点操作</h2><p>html</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">&lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;tableBody&quot;</span> <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;mytable&quot;</span> <span class="hljs-keyword">ref</span>=<span class="hljs-string">&quot;mytable&quot;</span>&gt;&lt;/<span class="hljs-keyword">div</span>&gt;<br></code></pre></td></tr></table></figure><h3 id="获取节点"><a href="#获取节点" class="headerlink" title="获取节点"></a>获取节点</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus">this.<span class="hljs-variable">$refs</span><span class="hljs-selector-class">.mytable</span>   获取 <br>或者  this.<span class="hljs-variable">$refs</span><span class="hljs-selector-class">.mytable</span>.<span class="hljs-variable">$el</span><br> 或者    document<span class="hljs-selector-class">.getElementById</span>(<span class="hljs-string">&#x27;id&#x27;</span>)<br>或者  document<span class="hljs-selector-class">.querySelector</span>(<span class="hljs-string">&#x27;类名&#x27;</span>)<br><span class="hljs-selector-tag">var</span> container = document<span class="hljs-selector-class">.getElementById</span>(<span class="hljs-string">&#x27;mytable&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="创建节点"><a href="#创建节点" class="headerlink" title="创建节点"></a>创建节点</h3><p>var newnode &#x3D; document.createElement(“p”);</p><h3 id="添加节点内容"><a href="#添加节点内容" class="headerlink" title="添加节点内容"></a>添加节点内容</h3><p>newnode.innerHTML &#x3D; “创建的节点内容”</p><h3 id="插入节点"><a href="#插入节点" class="headerlink" title="插入节点"></a>插入节点</h3><p>container.appendChild(newnode)</p><h3 id="修改节点样式"><a href="#修改节点样式" class="headerlink" title="修改节点样式"></a>修改节点样式</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">newnode.style.width</span> = <span class="hljs-string">&#x27;200px&#x27;</span><br><span class="hljs-attr">newnode.style.height</span> = <span class="hljs-string">&#x27;200px&#x27;</span><br><span class="hljs-attr">newnode.style.background</span> = <span class="hljs-string">&#x27;pink&#x27;</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h3 id="普通节点删除"><a href="#普通节点删除" class="headerlink" title="普通节点删除"></a>普通节点删除</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs stylus">dom元素<span class="hljs-selector-class">.remove</span>()<br><br>querySelectorAll    节点  删除<br>document<span class="hljs-selector-class">.querySelectorAll</span>(‘<span class="hljs-selector-class">.esedbox</span> .triangle_b’)返回的不是数组，而是类数组，不能用remove方法（remove方法是dom元素节点的方法）<br><br><span class="hljs-selector-tag">var</span> box = document<span class="hljs-selector-class">.querySelectorAll</span>(<span class="hljs-string">&#x27;.haha&#x27;</span>)<br>        Array<span class="hljs-selector-class">.from</span>(box)<span class="hljs-selector-class">.forEach</span>((item) =&gt; &#123;<br>          item<span class="hljs-selector-class">.remove</span>()<br>        &#125;)<br>  <br></code></pre></td></tr></table></figure><h3 id="获取元素长宽高和滚动距离"><a href="#获取元素长宽高和滚动距离" class="headerlink" title="获取元素长宽高和滚动距离"></a>获取元素长宽高和滚动距离</h3><p>1.对于css盒子模型，我们使用width和height等来定义dom元素的宽高，而有时我们需要在js中获取元素的宽高进行一些操作。</p><p>2.dom操作提供了相应的属性来实现这一点</p><p>窗口大小<br>二，clientWidth和clientHeight<br>1.clientWidth和clientHeight用于获取元素的视口宽高，不包含border，margin,还要滚动条。</p><p>元素大小<br>三，offsetWidth和offsetHeight<br>1.元素的实际宽高，包含滚动条和border,不包含margin</p><p>四，scrollHeight和scrollWidth<br>1.当一个元素出现滚动时，这个元素的clientWidth和clientHeight表示了元素的视口宽高，而scrollHeight和scrollWidth用于表示该元素的滚动的实际宽高。</p><p>五，scrollTop<br>1.出现滚动条的元素，滚动距离上边界的距离。</p><p>2.如下图，红色的元素的scrollTop 等于绿色线段的长度。</p><p>3.scrollTop是可以修改的，修改时蓝色元素移动到相应位置</p><p>使用<br>dom.offsetWidth</p><p>var container &#x3D; document.getElementById(‘mytable’)<br>console.log(‘width’,container.offsetWidth);</p><p>元素相对可视窗口的位置</p><p>dom.getBoundingClientRect()</p><p>let object &#x3D; document.getElementById(‘object’)<br>let rectObject &#x3D; object.getBoundingClientRect();<br>rectObject.top &#x2F; left &#x2F; right &#x2F; bottom &#x2F; width &#x2F; height;</p>]]></content>
    
    
    <categories>
      
      <category>javascript API笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>dom操作</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo 搭建个人博客</title>
    <link href="/hexodemo/2024/02/29/Hexo%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/hexodemo/2024/02/29/Hexo%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p> </p><h4 id="什么是-Hexo？"><a href="#什么是-Hexo？" class="headerlink" title="什么是 Hexo？"></a>什么是 Hexo？</h4><p><a href="https://hexo.io/zh-cn/docs/">Hexo</a> 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><p> </p><h4 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h4><p> </p><h5 id="NodeJs安装"><a href="#NodeJs安装" class="headerlink" title="NodeJs安装"></a>NodeJs安装</h5><p>从官网<a href="https://nodejs.org/en/">https://nodejs.org/en/</a> 下载，直接安装即可，测试一下</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-keyword">node</span> <span class="hljs-title">-v</span><br><span class="hljs-comment"># v11.15.0</span><br>npm -v<br><span class="hljs-comment"># 6.7.0Copy</span><br></code></pre></td></tr></table></figure><p> </p><h5 id="npm修改源"><a href="#npm修改源" class="headerlink" title="npm修改源"></a>npm修改源</h5><p>获取npm源</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">npm <span class="hljs-built_in">get</span> registryCopy<br></code></pre></td></tr></table></figure><p> </p><p>修改npm源</p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tcl">npm config <span class="hljs-keyword">set</span> <span class="hljs-keyword">registry</span> <span class="hljs-keyword">http</span>://<span class="hljs-keyword">registry</span>.npm.taobao.org<br></code></pre></td></tr></table></figure><p> </p><p>如果想重置回去</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">npm config set registry https:<span class="hljs-comment">//registry.npmjs.org</span><br></code></pre></td></tr></table></figure><p> </p><h5 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h5><p>从官网<a href="https://git-scm.com/download/win">https://git-scm.com/download/win</a> 下载，直接安装即可</p><p>设置邮箱和用户名</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">git config <span class="hljs-params">--global</span> user.name  ****<span class="hljs-comment"># 设置用户名（gitee的注册昵称）</span><br>git config <span class="hljs-params">--global</span> user.email *****@**<span class="hljs-string">.com</span> <span class="hljs-comment"># 设置gitee邮箱（gitee的注册邮箱）Copy</span><br></code></pre></td></tr></table></figure><p>查看用户名</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">git config <span class="hljs-keyword">user</span>.name<br>git config <span class="hljs-keyword">user</span>.email<br></code></pre></td></tr></table></figure><p>生成 ssh</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-symbol">$</span> ssh-keygen -t rsa -C <span class="hljs-string">&quot;youremail&quot;</span>   <span class="hljs-comment">//你的邮箱</span><br></code></pre></td></tr></table></figure><p>连按三次回车  才能成功  下面是秘钥位置</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gradle">Generating <span class="hljs-keyword">public</span>/<span class="hljs-keyword">private</span> rsa key pair.<br>Enter <span class="hljs-keyword">file</span> in which to save the key (<span class="hljs-regexp">/c/U</span>sers<span class="hljs-regexp">/dwy/</span>.ssh/id_rsa):<br></code></pre></td></tr></table></figure><p>找到id_rsa.pub 文件</p><p>ssh，简单来讲，就是一个秘钥，其中，id_rsa是你这台电脑的私人秘钥，不能给别人看的，id_rsa.pub是公共秘钥，可以随便给别人看。把这个公钥放在GitHub上，这样当你链接GitHub自己的账户时，它就会根据公钥匹配你的私钥，当能够相互匹配时，才能够顺利的通过git上传你的文件到GitHub上。</p><p>而后在GitHub的setting中，找到SSH keys的设置选项，点击New SSH key<br>把你的id_rsa.pub里面的信息复制进去。</p><p>原文链接：<a href="https://blog.csdn.net/sinat_37781304/article/details/82729029">https://blog.csdn.net/sinat_37781304/article/details/82729029</a></p><p><img src="https://img-blog.csdnimg.cn/img_convert/3194ad0a9d04d94c09485122932968f3.png" alt="img"></p><h5 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h5><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span> -g hexo-cliCopy<br></code></pre></td></tr></table></figure><h3 id="建站部署"><a href="#建站部署" class="headerlink" title="建站部署"></a>建站部署</h3><p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs gherkin"><span class="hljs-comment"># 初始化博客文件夹</span><br>hexo init <span class="hljs-variable">&lt;folder&gt;</span><br><span class="hljs-variable">&lt;folder&gt;</span> 为任意文件名称  例如 hexo init hexodome<br><span class="hljs-comment"># 进入博客目录</span><br>cd <span class="hljs-variable">&lt;folder&gt;</span><br><span class="hljs-comment"># 安装</span><br>npm installCopy<br></code></pre></td></tr></table></figure><p>新建完成后，指定文件夹的目录如下：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs 1c">.<br>├── _config.yml 博客配置文件<br>├── package.json<br>├── scaffolds   文章生成模板<br>├── source  文章<br><span class="hljs-string">|   ├── _drafts</span><br><span class="hljs-string">|   └── _posts  文章都放这里了</span><br>└── themes 主题<br></code></pre></td></tr></table></figure><p>这样hexo就安装完成了，接下来就可以启动<code>hexo</code>了</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs verilog">hexo clean    # 清除所有记录<br>hexo <span class="hljs-keyword">generate</span># 生成静态网页<br>hexo server -p <span class="hljs-number">4000</span># 启动服务Copy<br></code></pre></td></tr></table></figure><p> </p><h4 id="本地预览"><a href="#本地预览" class="headerlink" title="本地预览"></a>本地预览</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment"># 清除所有记录</span><br><span class="hljs-attribute">hexo</span> clean<br><span class="hljs-comment"># 编译项目，输入命令：</span><br>hexo g<br><span class="hljs-comment"># 运行项目，输入命令：</span><br>hexo sCopy<br></code></pre></td></tr></table></figure><p>在浏览器地址栏输入 <a href="http://localhost:4000/">http://localhost:4000/</a> 就能看到效果啦</p><p> </p><h4 id="部署到Gitee"><a href="#部署到Gitee" class="headerlink" title="部署到Gitee"></a>部署到Gitee</h4><h5 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h5><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install hexo-deployer-git <span class="hljs-comment">--saveCopy</span><br></code></pre></td></tr></table></figure><p> </p><h5 id="修改站点配置文件"><a href="#修改站点配置文件" class="headerlink" title="修改站点配置文件"></a>修改站点配置文件</h5><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-meta"># URL</span><br><span class="hljs-symbol">url:</span> https:<span class="hljs-comment">//gitee.com/valten/blog</span><br><span class="hljs-symbol">root:</span> <span class="hljs-keyword">/blog/</span><br><br><span class="hljs-meta"># Deployment</span><br><span class="hljs-meta">## Docs: https:<span class="hljs-comment">//hexo.io/docs/deployment.html</span></span><br><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">  type:</span> git<br><span class="hljs-symbol">  repo:</span> git@gitee.com:valten/blog.git<br><span class="hljs-symbol">  branch:</span> developCopy<br></code></pre></td></tr></table></figure><p> </p><h5 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h5><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sas">hexo clean <span class="hljs-variable">&amp;&amp;</span> hexo g <span class="hljs-variable">&amp;&amp;</span> hexo dCopy<br></code></pre></td></tr></table></figure><p>进入gitee仓库，找到服务，选择Gitee Pages</p><p><a href="https://jsd.cdn.zzko.cn/gh/valtenhyl/filebed@master/filebed/giteepage.png"><img src="https://jsd.cdn.zzko.cn/gh/valtenhyl/filebed@master/filebed/giteepage.png" alt="https://jsd.cdn.zzko.cn/gh/valtenhyl/filebed@master/filebed/giteepage.png"></a></p><p>选择部署分支，我这里是develop分支，然后点击更新即可</p><p><a href="https://jsd.cdn.zzko.cn/gh/valtenhyl/filebed@master/filebed/giteepagedeploy.png"><img src="https://jsd.cdn.zzko.cn/gh/valtenhyl/filebed@master/filebed/giteepagedeploy.png" alt="img"></a></p><h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5><p>浏览器地址输入 <a href="https://gitee.com/valten/blog">https://gitee.com/valten/blog</a></p><p> </p><h4 id="部署到Github"><a href="#部署到Github" class="headerlink" title="部署到Github"></a>部署到Github</h4><h5 id="安装插件-1"><a href="#安装插件-1" class="headerlink" title="安装插件"></a>安装插件</h5><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install hexo-deployer-git <span class="hljs-comment">--saveCopy</span><br></code></pre></td></tr></table></figure><p> </p><h5 id="修改站点配置文件-1"><a href="#修改站点配置文件-1" class="headerlink" title="修改站点配置文件"></a>修改站点配置文件</h5><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-meta"># URL</span><br><span class="hljs-symbol">url:</span> https:<span class="hljs-comment">//valtenhyl.github.io</span><br><span class="hljs-symbol">root:</span> /<br><br><span class="hljs-meta"># Deployment</span><br><span class="hljs-meta">## Docs: https:<span class="hljs-comment">//hexo.io/docs/deployment.html</span></span><br><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">  type:</span> git<br><span class="hljs-symbol">  repo:</span> git@github.com:valten-hyl/valtenhyl.github.io.git<br><span class="hljs-symbol">  branch:</span> deployCopy<br></code></pre></td></tr></table></figure><p> </p><h5 id="部署-1"><a href="#部署-1" class="headerlink" title="部署"></a>部署</h5><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sas">hexo clean <span class="hljs-variable">&amp;&amp;</span> hexo g <span class="hljs-variable">&amp;&amp;</span> hexo dCopy<br></code></pre></td></tr></table></figure><p>进入github仓库，找到项目，选择Settings，选择Pages，Source选择部署的时候的分支，点击Save按钮保存即可</p><p><a href="https://jsd.cdn.zzko.cn/gh/valtenhyl/filebed@master/filebed/githubpagedeploy.png"><img src="https://jsd.cdn.zzko.cn/gh/valtenhyl/filebed@master/filebed/githubpagedeploy.png" alt="img"></a></p><p> </p><h5 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h5><p>浏览器地址输入 <a href="https://valtenhyl.github.io/">https://valtenhyl.github.io</a></p><p>最后我还是选择了Gitee。</p><p><strong>为什么使用Gitee而不使用GitHub</strong></p><blockquote><p>1、GitHub Pages访问龟速不稳定；</p><p>2、GitHub私有仓库收费，而Gitee私有仓库免费；</p></blockquote><p> </p><h3 id="配置优化"><a href="#配置优化" class="headerlink" title="配置优化"></a>配置优化</h3><p> </p><h4 id="分类和标签"><a href="#分类和标签" class="headerlink" title="分类和标签"></a>分类和标签</h4><h5 id="定义分类页"><a href="#定义分类页" class="headerlink" title="定义分类页"></a>定义分类页</h5><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe">hexo <span class="hljs-keyword">new</span> <span class="hljs-type">page</span> categoriesCopy<br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">分类</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2019-12-14 10:56:27</span><br><span class="hljs-attr">type:</span> <span class="hljs-string">&quot;categories&quot;</span><br><span class="hljs-string">---Copy</span><br></code></pre></td></tr></table></figure><p> </p><h5 id="定义分类页-1"><a href="#定义分类页-1" class="headerlink" title="定义分类页"></a>定义分类页</h5><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe">hexo <span class="hljs-keyword">new</span> <span class="hljs-type">page</span> tagsCopy<br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">标签</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2019-12-14 10:56:27</span><br><span class="hljs-attr">type:</span> <span class="hljs-string">&quot;tags&quot;</span><br><span class="hljs-string">---Copy</span><br></code></pre></td></tr></table></figure><p> </p><h5 id="文章添加分类和标签属性"><a href="#文章添加分类和标签属性" class="headerlink" title="文章添加分类和标签属性"></a>文章添加分类和标签属性</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">SpringBoot+Mybatis</span> <span class="hljs-string">通过databaseIdProvider支持多数据库</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2019-12-14 16:42:51</span><br><span class="hljs-attr">tags:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">Spring</span> <span class="hljs-string">Boot</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">Mybatis</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">databaseIdProvider</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">多数据库</span><br><span class="hljs-attr">categories:</span><br>  <span class="hljs-bullet">-</span> [<span class="hljs-string">Java</span>,<span class="hljs-string">Spring</span> <span class="hljs-string">Boot</span>]  <span class="hljs-comment"># 多级标签</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">Mybatis</span><br><span class="hljs-string">---Copy</span><br></code></pre></td></tr></table></figure><p> </p><p>修改主题配置文件，显示分类和标签菜单</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-meta"># External url should start with http:<span class="hljs-comment">// or https://</span></span><br><span class="hljs-symbol">menu:</span><br><span class="hljs-symbol">  home:</span> / || home<br><span class="hljs-symbol">  categories:</span> <span class="hljs-keyword">/categories/</span> || th<br><span class="hljs-symbol">  tags:</span> <span class="hljs-keyword">/tags/</span> || tags<br><span class="hljs-symbol">  archives:</span> <span class="hljs-keyword">/archives/</span> || archive<br>  <span class="hljs-meta">#about: /about/ || user</span><br>  <span class="hljs-meta">#schedule: /schedule/ || calendar</span><br>  <span class="hljs-meta">#sitemap: /sitemap.xml || sitemap</span><br>  <span class="hljs-meta">#commonweal: /404/ || heartbeatCopy</span><br></code></pre></td></tr></table></figure><p> </p><h4 id="关于"><a href="#关于" class="headerlink" title="关于"></a>关于</h4><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe">hexo <span class="hljs-keyword">new</span> <span class="hljs-type">page</span> aboutCopy<br></code></pre></td></tr></table></figure><p>修改主题配置文件，显示关于</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-meta"># External url should start with http:<span class="hljs-comment">// or https://</span></span><br><span class="hljs-symbol">menu:</span><br><span class="hljs-symbol">  home:</span> / || home<br><span class="hljs-symbol">  categories:</span> <span class="hljs-keyword">/categories/</span> || th<br><span class="hljs-symbol">  tags:</span> <span class="hljs-keyword">/tags/</span> || tags<br><span class="hljs-symbol">  archives:</span> <span class="hljs-keyword">/archives/</span> || archive<br><span class="hljs-symbol">  about:</span> <span class="hljs-keyword">/about/</span> || user<br>  <span class="hljs-meta">#schedule: /schedule/ || calendar</span><br>  <span class="hljs-meta">#sitemap: /sitemap.xml || sitemap</span><br>  <span class="hljs-meta">#commonweal: /404/ || heartbeatCopy</span><br></code></pre></td></tr></table></figure><p>编辑about目录下的index.md。</p><p> </p><h4 id="公益404"><a href="#公益404" class="headerlink" title="公益404"></a>公益404</h4><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe">hexo <span class="hljs-keyword">new</span> <span class="hljs-type">page</span> commonwealCopy<br></code></pre></td></tr></table></figure><p>修改主题配置文件，<code>#commonweal: /404/ || heartbeat</code>改成<code>commonweal: /404.html || heartbeat</code>。</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-meta"># External url should start with http:<span class="hljs-comment">// or https://</span></span><br><span class="hljs-symbol">menu:</span><br><span class="hljs-symbol">  home:</span> / || home<br><span class="hljs-symbol">  categories:</span> <span class="hljs-keyword">/categories/</span> || th<br><span class="hljs-symbol">  tags:</span> <span class="hljs-keyword">/tags/</span> || tags<br><span class="hljs-symbol">  archives:</span> <span class="hljs-keyword">/archives/</span> || archive<br><span class="hljs-symbol">  about:</span> <span class="hljs-keyword">/about/</span> || user<br>  <span class="hljs-meta">#schedule: /schedule/ || calendar</span><br>  <span class="hljs-meta">#sitemap: /sitemap.xml || sitemap</span><br><span class="hljs-symbol">  commonweal:</span> /<span class="hljs-number">404.</span>html || heartbeatCopy<br></code></pre></td></tr></table></figure><p>附上index.md</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml">---<br>title: 404 Not Found：该页无法显示<br>date: 2019-12-14 17:40:17<br>permalink: /404<br>---<br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh-cn&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>404<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> </span><br><span class="hljs-tag">        <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js&quot;</span> </span><br><span class="hljs-tag">    <span class="hljs-attr">homePageName</span>=<span class="hljs-string">&quot;返回宝贝回家&quot;</span> <span class="hljs-attr">homePageUrl</span>=<span class="hljs-string">&quot;https://valten.gitee.io/blog&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span>Copy<br></code></pre></td></tr></table></figure><p> </p><h4 id="阅读全文按钮"><a href="#阅读全文按钮" class="headerlink" title="阅读全文按钮"></a>阅读全文按钮</h4><p>在文章中想要预览的文字后加<code>&lt;!--more--&gt;</code>，这在之后的内容就会隐藏起来，点击<strong>Read More</strong>就会显示全文。</p><p> </p><h4 id="添加图片"><a href="#添加图片" class="headerlink" title="添加图片"></a>添加图片</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">Hello</span> <span class="hljs-string">World</span><br><span class="hljs-attr">tags:</span><br> <span class="hljs-bullet">-</span> <span class="hljs-string">Hello</span> <br> <span class="hljs-bullet">-</span> <span class="hljs-string">World</span><br><span class="hljs-attr">categories:</span><br> <span class="hljs-bullet">-</span> <span class="hljs-string">Hello</span> <br><span class="hljs-attr">photos:</span> <br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;http://q2gep6iwb.bkt.clouddn.com/blog/20191213/7Jk7p7nSUWpC.jpg&quot;</span> <br><span class="hljs-string">---Copy</span><br></code></pre></td></tr></table></figure><p> </p><h4 id="文章置顶"><a href="#文章置顶" class="headerlink" title="文章置顶"></a>文章置顶</h4><p>移除默认安装的插件：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">npm uninstall hexo-generator-<span class="hljs-keyword">index</span> <span class="hljs-comment">--saveCopy</span><br></code></pre></td></tr></table></figure><p>安装新插件:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">npm install hexo-generator-index-pin-<span class="hljs-attribute">top</span> <span class="hljs-attr">--saveCopy</span><br></code></pre></td></tr></table></figure><p>最后编辑有这需求的相关文章时，在Front-matter（文件最上方以—分隔的区域）加上一行：<code>top: true</code><br>如果你置顶了多篇，怎么控制顺序呢？设置top的值（大的在前面），比如：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-meta"># Post a.md</span><br><span class="hljs-symbol">title:</span> a<br><span class="hljs-symbol">top:</span> <span class="hljs-number">1</span><br><br><span class="hljs-meta"># Post b.md</span><br><span class="hljs-symbol">title:</span> b<br><span class="hljs-symbol">top:</span> <span class="hljs-number">10</span>Copy<br></code></pre></td></tr></table></figure><p>文章 b 便会显示在文章 a 的前面。</p><p> </p><h4 id="添加萌宠看板娘"><a href="#添加萌宠看板娘" class="headerlink" title="添加萌宠看板娘"></a>添加萌宠看板娘</h4><p>安装插件</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install hexo-helper-live2d <span class="hljs-comment">--saveCopy</span><br></code></pre></td></tr></table></figure><p>安装想要的模型</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">npm <span class="hljs-keyword">install </span>live2d-widget-model-<span class="hljs-keyword">shizuku </span>--saveCopy<br></code></pre></td></tr></table></figure><p>站点配置文件添加以下配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Live2D</span><br><span class="hljs-comment">## https://github.com/EYHN/hexo-helper-live2d</span><br><span class="hljs-attr">live2d:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 开启live2d</span><br>  <span class="hljs-attr">scriptFrom:</span> <span class="hljs-string">local</span> <span class="hljs-comment"># 默认</span><br>  <span class="hljs-attr">pluginRootPath:</span> <span class="hljs-string">live2dw/</span> <span class="hljs-comment"># 插件在站点上的根目录(相对路径)</span><br>  <span class="hljs-attr">pluginJsPath:</span> <span class="hljs-string">lib/</span> <span class="hljs-comment"># 脚本文件相对与插件根目录路径</span><br>  <span class="hljs-attr">pluginModelPath:</span> <span class="hljs-string">assets/</span> <span class="hljs-comment"># 模型文件相对与插件根目录路径</span><br>  <span class="hljs-attr">tagMode:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># 标签模式, 是否仅替换 live2d tag标签而非插入到所有页面中</span><br>  <span class="hljs-attr">debug:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># 调试, 是否在控制台输出日志</span><br>  <span class="hljs-attr">model:</span><br>    <span class="hljs-comment"># 选择哪种模型 https://huaji8.top/post/live2d-plugin-2.0/</span><br>    <span class="hljs-comment"># shizuku、wanko、hibiki、z16、haru、Epsilon2.1、koharu、haruto、   </span><br>    <span class="hljs-comment"># npm install live2d-widget-model-wanko --save</span><br>    <span class="hljs-attr">use:</span> <span class="hljs-string">live2d-widget-model-shizuku</span><br>  <span class="hljs-attr">display:</span> <span class="hljs-comment">#放置位置和大小</span><br>    <span class="hljs-attr">position:</span> <span class="hljs-string">left</span><br>    <span class="hljs-attr">width:</span> <span class="hljs-number">150</span><br>    <span class="hljs-attr">height:</span> <span class="hljs-number">300</span><br>  <span class="hljs-attr">mobile:</span><br>    <span class="hljs-attr">show:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># 是否在手机端显示Copy</span><br></code></pre></td></tr></table></figure><p> </p><h4 id="修改站点基本信息"><a href="#修改站点基本信息" class="headerlink" title="修改站点基本信息"></a>修改站点基本信息</h4><figure class="highlight ldif"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ldif"><span class="hljs-comment"># Site</span><br><span class="hljs-attribute">title</span>: 青衫不改  <span class="hljs-comment"># 标题</span><br><span class="hljs-attribute">subtitle</span>: 小白の博客  <span class="hljs-comment"># 副标题</span><br><span class="hljs-attribute">description</span>: 浮生若梦，为欢几何  <span class="hljs-comment"># 描述</span><br><span class="hljs-attribute">keywords</span>: &#x27;Hexo, NexT&#x27;  <span class="hljs-comment"># 网站默认关键词</span><br><span class="hljs-attribute">author</span>: valten<br><span class="hljs-attribute">language</span>: en<br><span class="hljs-attribute">timezone</span>: &#x27;&#x27;Copy<br></code></pre></td></tr></table></figure><p> </p><h4 id="文章永久链接"><a href="#文章永久链接" class="headerlink" title="文章永久链接"></a>文章永久链接</h4><p>修改站点配置文件</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-comment">#permalink: :year/:month/:day/:title/</span><br><span class="hljs-symbol">permalink:</span> <span class="hljs-symbol">:category/</span><span class="hljs-symbol">:title</span><br></code></pre></td></tr></table></figure><p> </p><h4 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h4><p><a href="https://zhuanlan.zhihu.com/p/491537945">主题推荐</a></p><p>hexo-theme-butterfly  主题</p><p><img src="https://pic1.zhimg.com/80/v2-65af3fa9e2435ff9079d717555dcea94_720w.webp" alt="图片"></p><p><img src="C:\Users\dwy\AppData\Local\Temp\1709193686628.png" alt="1709193686628"></p><p><a href="https://github.com/jerryc127/hexo-theme-butterfly">githup地址</a></p><p>下载地址     <a href="mailto:&#103;&#105;&#x74;&#x40;&#x67;&#x69;&#116;&#x68;&#x75;&#98;&#46;&#99;&#111;&#x6d;">&#103;&#105;&#x74;&#x40;&#x67;&#x69;&#116;&#x68;&#x75;&#98;&#46;&#99;&#111;&#x6d;</a>:jerryc127&#x2F;hexo-theme-butterfly.git</p><p>项目名\themes  文件下  git  clone <a href="mailto:&#103;&#105;&#116;&#x40;&#x67;&#x69;&#116;&#x68;&#117;&#x62;&#x2e;&#99;&#111;&#109;">&#103;&#105;&#116;&#x40;&#x67;&#x69;&#116;&#x68;&#117;&#x62;&#x2e;&#99;&#111;&#109;</a>:jerryc127&#x2F;hexo-theme-butterfly.git</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 下载主题</span><br>git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/theme-next/</span>hexo-theme-<span class="hljs-keyword">next</span>.git themes/nextCopy<br></code></pre></td></tr></table></figure><p>注意有坑：这个主题有个缺失文件  </p><p>npm install hexo-renderer-pug hexo-renderer-stylus   补齐  可以看下githup文档</p><p>下载好的主题文件</p><p><img src="C:\Users\dwy\AppData\Local\Temp\1709193171170.png" alt="1709193171170"></p><p>修改站点配置文件  _config.yml   theme: 文件名称  这里用的红框里的</p><p><img src="C:\Users\dwy\AppData\Local\Temp\1709193222437.png" alt="1709193222437"></p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs clean"># Extensions<br>## Plugins: https:<span class="hljs-comment">//hexo.io/plugins/</span><br>## Themes: https:<span class="hljs-comment">//hexo.io/themes/</span><br>theme: next # 值为themes目录下主题文件夹的名称Copy<br></code></pre></td></tr></table></figure><p><a href="https://github.com/fluid-dev/hexo-theme-fluid">hexo-theme-fluid</a> 主题</p><p><img src="C:\Users\dwy\AppData\Local\Temp\1709193708452.png" alt="1709193708452"></p><p><a href="https://github.com/fluid-dev/hexo-theme-fluid">下载地址</a></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">clone</span> <span class="hljs-title">git</span>@github.com:fluid-dev/hexo-theme-fluid.git<br></code></pre></td></tr></table></figure><p>配置文件 _config.yml</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xl"><span class="hljs-built_in">theme</span>: hexo-<span class="hljs-built_in">theme</span>-fluid<br></code></pre></td></tr></table></figure><p>查看效果</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sas">hexo clean <span class="hljs-variable">&amp;&amp;</span> hexo g <span class="hljs-variable">&amp;&amp;</span> hexo sCopy<br></code></pre></td></tr></table></figure><p> </p><h4 id="社交链接"><a href="#社交链接" class="headerlink" title="社交链接"></a>社交链接</h4><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">social:</span><br><span class="hljs-symbol">  GitHub:</span> https:<span class="hljs-comment">//github.com/valtenhyl || github</span><br>  E-Mail: mailto:valtenhyl@<span class="hljs-number">163.</span>com || envelope<br><span class="hljs-symbol">  Weibo:</span> https:<span class="hljs-comment">//weibo.com/3114281855 || weibo</span><br>  简书: https:<span class="hljs-comment">//www.jianshu.com/u/9f816d1869d4 || book</span><br>  掘金: https:<span class="hljs-comment">//juejin.im/user/5baa5f9d5188255c5d569951 || ils</span><br>  <span class="hljs-meta">#Google: https:<span class="hljs-comment">//plus.google.com/yourname || google</span></span><br>  <span class="hljs-meta">#Twitter: https:<span class="hljs-comment">//twitter.com/yourname || twitter</span></span><br>  <span class="hljs-meta">#FB Page: https:<span class="hljs-comment">//www.facebook.com/yourname || facebook</span></span><br>  <span class="hljs-meta">#StackOverflow: https:<span class="hljs-comment">//stackoverflow.com/yourname || stack-overflow</span></span><br>  <span class="hljs-meta">#YouTube: https:<span class="hljs-comment">//youtube.com/yourname || youtube</span></span><br>  <span class="hljs-meta">#Instagram: https:<span class="hljs-comment">//instagram.com/yourname || instagram</span></span><br>  <span class="hljs-meta">#Skype: skype:yourname?call|chat || skype</span><br>  <span class="hljs-meta">#RSS: /atom.xml || rss</span><br><span class="hljs-symbol">  </span><br><span class="hljs-symbol">social_icons:</span><br><span class="hljs-symbol">  enable:</span> true       <span class="hljs-meta"># 是否在社交链接标签上显示图标</span><br><span class="hljs-symbol">  icons_only:</span> true   <span class="hljs-meta"># 只显示图标</span><br><span class="hljs-symbol">  transition:</span> false  <span class="hljs-meta"># 是否显示过渡效果  Copy</span><br></code></pre></td></tr></table></figure><p> </p><h4 id="友情链接"><a href="#友情链接" class="headerlink" title="友情链接"></a>友情链接</h4><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-meta"># Blog rolls</span><br><span class="hljs-symbol">links_settings:</span><br><span class="hljs-symbol">  icon:</span> link                           <span class="hljs-meta"># 链接图标</span><br><span class="hljs-symbol">  title:</span> 友情链接                       <span class="hljs-meta"># 链接文字</span><br>  <span class="hljs-meta"># Available values: block | inline</span><br><span class="hljs-symbol">  layout:</span> inline                       <span class="hljs-meta"># 链接样式</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">links:</span><br>  圣豪Boy: https:<span class="hljs-comment">//xshcloudy.gitee.io/blog/</span><br><span class="hljs-symbol">  BootCDN:</span> https:<span class="hljs-comment">//www.bootcdn.cn/</span><br>  易百教程: https:<span class="hljs-comment">//www.yiibai.com</span><br></code></pre></td></tr></table></figure><p> </p><h4 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">codeblock:</span><br>  <span class="hljs-comment"># Code Highlight theme</span><br>  <span class="hljs-comment"># Available values: normal | night | night eighties | night blue | night bright | solarized | solarized dark | galactic</span><br>  <span class="hljs-comment"># See: https://github.com/chriskempson/tomorrow-theme</span><br>  <span class="hljs-attr">highlight_theme:</span> <span class="hljs-string">night</span><br>  <span class="hljs-comment"># Add copy button on codeblock</span><br>  <span class="hljs-attr">copy_button:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-comment"># Show text copy result.</span><br>    <span class="hljs-attr">show_result:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-comment"># Available values: default | flat | mac</span><br>    <span class="hljs-attr">style:</span> <span class="hljs-string">defaultCopy</span><br></code></pre></td></tr></table></figure><p> </p><h4 id="图片浏览放大"><a href="#图片浏览放大" class="headerlink" title="图片浏览放大"></a>图片浏览放大</h4><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">cd</span> themes/<span class="hljs-keyword">next</span>/<span class="hljs-keyword">source</span>/lib<br>git clone https://github.<span class="hljs-keyword">com</span>/theme-<span class="hljs-keyword">next</span>/theme-<span class="hljs-keyword">next</span>-fancybox3 fancyboxCopy<br></code></pre></td></tr></table></figure><p>修改主题配置文件</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-comment"># FancyBox is a tool that offers a nice and elegant way to add zooming functionality for images.</span><br><span class="hljs-comment"># For more information: https://fancyapps.com/fancybox</span><br>fancybox: <span class="hljs-literal">true</span>Copy<br></code></pre></td></tr></table></figure><p> </p><h4 id="站点访问统计"><a href="#站点访问统计" class="headerlink" title="站点访问统计"></a>站点访问统计</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Show Views / Visitors of the website / page with busuanzi.</span><br><span class="hljs-comment"># Get more information on http://ibruce.info/2015/04/04/busuanzi</span><br><span class="hljs-attr">busuanzi_count:</span> <span class="hljs-comment"># 不蒜子统计，用于在页脚显示总访客数和总浏览量</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">total_visitors:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">total_visitors_icon:</span> <span class="hljs-string">user</span><br>  <span class="hljs-attr">total_views:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">total_views_icon:</span> <span class="hljs-string">eye</span><br>  <span class="hljs-attr">post_views:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">post_views_icon:</span> <span class="hljs-string">eyeCopy</span><br></code></pre></td></tr></table></figure><p> </p><h4 id="评论系统"><a href="#评论系统" class="headerlink" title="评论系统"></a>评论系统</h4><p><a href="https://valine.js.org/">Valine</a> 诞生于2017年8月7日，是一款基于Leancloud的快速、简洁且高效的无后端评论系统。</p><p>登录 <a href="https://leancloud.cn/">Leancloud</a> 官网，注册之后创建一个应用 ，【设置】-&gt;【应用Keys】，根据显示的内容修改主题配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Valine</span><br><span class="hljs-comment"># For more information: https://valine.js.org, https://github.com/xCss/Valine</span><br><span class="hljs-attr">valine:</span> <span class="hljs-comment"># 评论</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">appid:</span> <span class="hljs-string">jflkasjdklfjlajsdlkfklsd-sdfasdf</span> <span class="hljs-comment"># Your leancloud application appid</span><br>  <span class="hljs-attr">appkey:</span> <span class="hljs-string">ahskfdhlkasdkfjkalsdflasdf</span> <span class="hljs-comment"># Your leancloud application appkey</span><br>  <span class="hljs-attr">notify:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 评论回复邮件提醒, See: https://github.com/xCss/Valine/wiki</span><br>  <span class="hljs-attr">verify:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># 验证码服务 Verification code</span><br>  <span class="hljs-attr">placeholder:</span> <span class="hljs-string">留言区</span> <span class="hljs-comment"># 留言区 Comment box placeholder</span><br>  <span class="hljs-attr">avatar:</span> <span class="hljs-string">mm</span> <span class="hljs-comment"># 头像配置 Gravatar style</span><br>  <span class="hljs-attr">guest_info:</span> <span class="hljs-string">nick,mail,link</span> <span class="hljs-comment"># 回复填写的信息 Custom comment header</span><br>  <span class="hljs-attr">pageSize:</span> <span class="hljs-number">10</span> <span class="hljs-comment"># Pagination size</span><br>  <span class="hljs-attr">language:</span> <span class="hljs-comment"># Language, available values: en, zh-cn</span><br>  <span class="hljs-attr">visitor:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># Article reading statistic</span><br>  <span class="hljs-attr">comment_count:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># If false, comment count will only be displayed in post page, not in home page</span><br>  <span class="hljs-attr">recordIP:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># Whether to record the commenter IP</span><br>  <span class="hljs-attr">serverURLs:</span> <span class="hljs-comment"># When the custom domain name is enabled, fill it in here (it will be detected automatically by default, no need to fill in)</span><br>  <span class="hljs-comment">#post_meta_order: 0Copy</span><br></code></pre></td></tr></table></figure><p> </p><h4 id="本地搜索"><a href="#本地搜索" class="headerlink" title="本地搜索"></a>本地搜索</h4><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install hexo-generator-searchdb <span class="hljs-comment">--saveCopy</span><br></code></pre></td></tr></table></figure><p>修改站点配置文件</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-meta"># 本地搜索</span><br><span class="hljs-symbol">search:</span><br><span class="hljs-symbol">  path:</span> search.xml<br><span class="hljs-symbol">  field:</span> post<br><span class="hljs-symbol">  format:</span> html<br><span class="hljs-symbol">  limit:</span> <span class="hljs-number">10000</span>Copy<br></code></pre></td></tr></table></figure><p>修改主题配置文件，开启本地搜索</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-meta"># Local Search</span><br><span class="hljs-meta"># Dependencies: https:<span class="hljs-comment">//github.com/theme-next/hexo-generator-searchdb</span></span><br><span class="hljs-symbol">local_search:</span><br><span class="hljs-symbol">  enable:</span> trueCopy<br></code></pre></td></tr></table></figure><p> </p><h4 id="文字数量和阅读时长"><a href="#文字数量和阅读时长" class="headerlink" title="文字数量和阅读时长"></a>文字数量和阅读时长</h4><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">npm install hexo-symbols-<span class="hljs-built_in">count</span>-<span class="hljs-built_in">time</span> <span class="hljs-comment">--saveCopy</span><br></code></pre></td></tr></table></figure><p>修改主题配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Post wordcount display settings</span><br><span class="hljs-comment"># Dependencies: https://github.com/theme-next/hexo-symbols-count-time</span><br><span class="hljs-attr">symbols_count_time:</span><br>  <span class="hljs-attr">separated_meta:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">item_text_post:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">item_text_total:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">awl:</span> <span class="hljs-number">4</span><br>  <span class="hljs-attr">wpm:</span> <span class="hljs-string">275Copy</span><br></code></pre></td></tr></table></figure><p> </p><h4 id="开启RRS订阅"><a href="#开启RRS订阅" class="headerlink" title="开启RRS订阅"></a>开启RRS订阅</h4><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install hexo-generator-feed <span class="hljs-comment">--saveCopy</span><br></code></pre></td></tr></table></figure><p>站点配置文件添加以下配置</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-meta"># RSS订阅</span><br><span class="hljs-symbol">feed:</span><br><span class="hljs-symbol">  type:</span> atom<br><span class="hljs-symbol">  path:</span> atom.xml<br><span class="hljs-symbol">  limit:</span> <span class="hljs-number">20</span><br><span class="hljs-symbol">  hub:</span><br><span class="hljs-symbol">  content:</span><br><span class="hljs-symbol">  content_limit:</span> <span class="hljs-number">140</span><br><span class="hljs-symbol">  content_limit_delim:</span> <span class="hljs-string">&#x27; &#x27;</span>Copy<br></code></pre></td></tr></table></figure><p>主题配置文件</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-meta"># Social Links</span><br><span class="hljs-meta"># Usage: `Key: permalink || icon`</span><br><span class="hljs-meta"># Key is the link label showing to end users.</span><br><span class="hljs-meta"># Value before `||` delimiter is the target permalink, value after `||` delimiter is the name of Font Awesome icon.</span><br><span class="hljs-symbol">social:</span><br><span class="hljs-symbol">  GitHub:</span> https:<span class="hljs-comment">//github.com/valten-hyl || github</span><br>  E-Mail: mailto:valtenhyl@<span class="hljs-number">163.</span>com || envelope<br><span class="hljs-symbol">  Weibo:</span> https:<span class="hljs-comment">//weibo.com/3114281855 || weibo</span><br>  简书: https:<span class="hljs-comment">//www.jianshu.com/u/9f816d1869d4 || book</span><br>  掘金: https:<span class="hljs-comment">//juejin.im/user/5baa5f9d5188255c5d569951 || ils</span><br>  <span class="hljs-meta">#Google: https:<span class="hljs-comment">//plus.google.com/yourname || google</span></span><br>  <span class="hljs-meta">#Twitter: https:<span class="hljs-comment">//twitter.com/yourname || twitter</span></span><br>  <span class="hljs-meta">#FB Page: https:<span class="hljs-comment">//www.facebook.com/yourname || facebook</span></span><br>  <span class="hljs-meta">#StackOverflow: https:<span class="hljs-comment">//stackoverflow.com/yourname || stack-overflow</span></span><br>  <span class="hljs-meta">#YouTube: https:<span class="hljs-comment">//youtube.com/yourname || youtube</span></span><br>  <span class="hljs-meta">#Instagram: https:<span class="hljs-comment">//instagram.com/yourname || instagram</span></span><br>  <span class="hljs-meta">#Skype: skype:yourname?call|chat || skype</span><br><span class="hljs-symbol">  RSS:</span> /atom.xml || rssCopy<br></code></pre></td></tr></table></figure><p> </p><h4 id="标签云配色"><a href="#标签云配色" class="headerlink" title="标签云配色"></a>标签云配色</h4><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-comment"># TagCloud settings for tags page.</span><br>tagcloud:<br>  <span class="hljs-comment"># All values below are same as default, change them by yourself.</span><br>  <span class="hljs-built_in">min</span>: <span class="hljs-number">12</span> <span class="hljs-comment"># Minimun font size in px</span><br>  <span class="hljs-built_in">max</span>: <span class="hljs-number">31</span> <span class="hljs-comment"># Maxium font size in px</span><br>  <span class="hljs-built_in">start</span>: <span class="hljs-string">&quot;#381096&quot;</span> <span class="hljs-comment"># Start color (hex, rgba, hsla or color keywords)</span><br>  <span class="hljs-keyword">end</span>: <span class="hljs-string">&quot;#922a4b&quot;</span> <span class="hljs-comment"># End color (hex, rgba, hsla or color keywords)</span><br>  amount: <span class="hljs-number">200</span> <span class="hljs-comment"># Amount of tags, change it if you have more than 200 tagsCopy</span><br></code></pre></td></tr></table></figure><p> </p><h4 id="禁止页面评论"><a href="#禁止页面评论" class="headerlink" title="禁止页面评论"></a>禁止页面评论</h4><p>在不需要评论的页面或者文章Front-matter（文件最上方以—分隔的区域）加上<code>comments: false</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">categories</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2019-12-14 17:22:21</span><br><span class="hljs-attr">type:</span> <span class="hljs-string">&quot;categories&quot;</span><br><span class="hljs-attr">comments:</span> <span class="hljs-literal">false</span><br><span class="hljs-string">---Copy</span><br></code></pre></td></tr></table></figure><p> </p><h4 id="AddThis分享"><a href="#AddThis分享" class="headerlink" title="AddThis分享"></a>AddThis分享</h4><p>首先在<a href="https://www.addthis.com/"><strong>AddThis</strong></a>官网注册账号，选择并配置分享按钮，激活，获取<code>pubid</code>，修改主题配置文件</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-meta"># AddThis Share. See: https:<span class="hljs-comment">//www.addthis.com</span></span><br><span class="hljs-meta"># Go to https:<span class="hljs-comment">//www.addthis.com/dashboard to customize your tools.</span></span><br><span class="hljs-symbol">add_this_id:</span> ra<span class="hljs-number">-2341234445555</span>Copy<br></code></pre></td></tr></table></figure><p> </p><h4 id="Fork-me-on-GitHub"><a href="#Fork-me-on-GitHub" class="headerlink" title="Fork me on GitHub"></a>Fork me on GitHub</h4><p>修改主题配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># `Follow me on GitHub` banner in the top-right corner.</span><br><span class="hljs-attr">github_banner:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">permalink:</span> <span class="hljs-string">https://github.com/valten-hyl</span><br>  <span class="hljs-attr">title:</span> <span class="hljs-string">Follow</span> <span class="hljs-string">me</span> <span class="hljs-string">on</span> <span class="hljs-string">GitHubCopy</span><br></code></pre></td></tr></table></figure><p> </p><h4 id="隐藏强力驱动和主题信息"><a href="#隐藏强力驱动和主题信息" class="headerlink" title="隐藏强力驱动和主题信息"></a>隐藏强力驱动和主题信息</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">powered:</span><br>  <span class="hljs-comment"># Hexo link (Powered by Hexo).</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-comment"># Version info of Hexo after Hexo link (vX.X.X).</span><br>  <span class="hljs-attr">version:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-attr">theme:</span><br>  <span class="hljs-comment"># Theme &amp; scheme info link (Theme - NexT.scheme).</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-comment"># Version info of NexT after scheme info (vX.X.X).</span><br>  <span class="hljs-attr">version:</span> <span class="hljs-string">falseCopy</span><br></code></pre></td></tr></table></figure><p> </p><h4 id="在线聊天"><a href="#在线聊天" class="headerlink" title="在线聊天"></a>在线聊天</h4><p>首先到<a href="http://www.daovoice.io/">DaoVoice</a>上注册一个账号,注册完成后会得到一个app_id，修改主题配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># DaoVoice</span><br><span class="hljs-comment"># Online contact</span><br><span class="hljs-attr">daovoice:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">daovoice_app_id:</span> <span class="hljs-string">123sfa</span> <span class="hljs-comment"># 这里填你刚才获得的 app_idCopy</span><br></code></pre></td></tr></table></figure><p>打开<code>themes/next/layout/_partials/head/head.swig</code>，在文件中添加</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">if</span></span> theme.daovoice %&#125;</span><span class="language-xml"></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">  (<span class="hljs-keyword">function</span>(<span class="hljs-params">i,s,o,g,r,a,m</span>)&#123;i[<span class="hljs-string">&quot;DaoVoiceObject&quot;</span>]=r;i[r]=i[r]||<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;(i[r].<span class="hljs-property">q</span>=i[r].<span class="hljs-property">q</span>||[]).<span class="hljs-title function_">push</span>(<span class="hljs-variable language_">arguments</span>)&#125;,i[r].<span class="hljs-property">l</span>=<span class="hljs-number">1</span>*<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();a=s.<span class="hljs-title function_">createElement</span>(o),m=s.<span class="hljs-title function_">getElementsByTagName</span>(o)[<span class="hljs-number">0</span>];a.<span class="hljs-property">async</span>=<span class="hljs-number">1</span>;a.<span class="hljs-property">src</span>=g;a.<span class="hljs-property">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>;m.<span class="hljs-property">parentNode</span>.<span class="hljs-title function_">insertBefore</span>(a,m)&#125;)(<span class="hljs-variable language_">window</span>,<span class="hljs-variable language_">document</span>,<span class="hljs-string">&quot;script&quot;</span>,(<span class="hljs-string">&#x27;https:&#x27;</span> == <span class="hljs-variable language_">document</span>.<span class="hljs-property">location</span>.<span class="hljs-property">protocol</span> ? <span class="hljs-string">&#x27;https:&#x27;</span> : <span class="hljs-string">&#x27;http:&#x27;</span>) + <span class="hljs-string">&quot;//widget.daovoice.io/widget/e30c3408.js&quot;</span>,<span class="hljs-string">&quot;daovoice&quot;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title function_">daovoice</span>(<span class="hljs-string">&#x27;init&#x27;</span>, &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">app_id</span>: <span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123;&#123; theme.daovoice_app_id &#125;&#125;</span><span class="language-xml">&quot;</span><br><span class="language-xml">    &#125;);</span><br><span class="language-xml">  daovoice(&#x27;update&#x27;);</span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endif</span></span> %&#125;</span><span class="language-xml">Copy</span><br></code></pre></td></tr></table></figure><p> </p><h4 id="嵌入歌单"><a href="#嵌入歌单" class="headerlink" title="嵌入歌单"></a>嵌入歌单</h4><p> </p><h5 id="新建歌单页面"><a href="#新建歌单页面" class="headerlink" title="新建歌单页面"></a>新建歌单页面</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">palylist</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2019-12-15 01:04:41</span><br><span class="hljs-attr">type:</span> <span class="hljs-string">&quot;playlist&quot;</span><br><span class="hljs-attr">comments:</span> <span class="hljs-literal">false</span><br><span class="hljs-string">---Copy</span><br></code></pre></td></tr></table></figure><p> </p><h5 id="安装播放器"><a href="#安装播放器" class="headerlink" title="安装播放器"></a>安装播放器</h5><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install hexo-tag-aplayer <span class="hljs-comment">--saveCopy</span><br></code></pre></td></tr></table></figure><p> </p><h5 id="修改站点配置文件-2"><a href="#修改站点配置文件-2" class="headerlink" title="修改站点配置文件"></a>修改站点配置文件</h5><p>其中id是歌单生成的外链的id</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs maxima"># metingjs<br>metingjs:<br>  server: netease<br>  id: <span class="hljs-number">3111577471</span> # 歌单id <span class="hljs-number">8537501</span><br>  type: playlist<br>  theme: &#x27;#<span class="hljs-number">2980b9</span>&#x27;<br>  loop: all<br>  autoplay: <span class="hljs-literal">false</span><br>  order: randomCopy<br></code></pre></td></tr></table></figure><p> </p><h5 id="修改模板"><a href="#修改模板" class="headerlink" title="修改模板"></a>修改模板</h5><p>打开<code>themes/next/layout/page.swig</code>，在文件中加入以下代码</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">&#123;% elif page.type === &#x27;playlist&#x27; %&#125;</span><br><span class="language-xml">          </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">page.content</span> &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">           <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css&quot;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-comment">&lt;!-- require MetingJS --&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/meting@2/dist/Meting.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">meting-js</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin-top: 1.5rem; width: auto; height: auto;&quot;</span> <span class="hljs-attr">server</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">config.metingjs.server</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">config.metingjs.type</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">config.metingjs.id</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span> <span class="hljs-attr">theme</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">config.metingjs.theme</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span> <span class="hljs-attr">loop</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">config.metingjs.loop</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span> <span class="hljs-attr">autoplay</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">config.metingjs.autoplay</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span> <span class="hljs-attr">order</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">config.metingjs.order</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span> <span class="hljs-attr">storageName</span>=<span class="hljs-string">&quot;aplayer-setting&quot;</span> <span class="hljs-attr">lrctype</span>=<span class="hljs-string">0</span> /&gt;</span></span><br><span class="language-xml">&#123;% elif page.type === &#x27;schedule&#x27; %&#125;Copy</span><br></code></pre></td></tr></table></figure><p> </p><h4 id="动态标签云"><a href="#动态标签云" class="headerlink" title="动态标签云"></a>动态标签云</h4><p> </p><h5 id="安装插件-2"><a href="#安装插件-2" class="headerlink" title="安装插件"></a>安装插件</h5><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">npm <span class="hljs-keyword">install </span>hexo-tag-<span class="hljs-keyword">cloud </span>--saveCopy<br></code></pre></td></tr></table></figure><p> </p><h5 id="修改站点配置文件-3"><a href="#修改站点配置文件-3" class="headerlink" title="修改站点配置文件"></a>修改站点配置文件</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># hexo-tag-cloud</span><br><span class="hljs-attr">tag_cloud:</span><br>  <span class="hljs-attr">textFont:</span> <span class="hljs-string">Trebuchet</span> <span class="hljs-string">MS,</span> <span class="hljs-string">Helvetica</span><br>  <span class="hljs-attr">textColor:</span> <span class="hljs-string">&#x27;#192e4d&#x27;</span><br>  <span class="hljs-attr">textHeight:</span> <span class="hljs-number">25</span><br>  <span class="hljs-attr">outlineColor:</span> <span class="hljs-string">&#x27;#5f7a74&#x27;</span><br>  <span class="hljs-attr">maxSpeed:</span> <span class="hljs-number">0.5</span> <span class="hljs-comment"># [0.01, 1]   Copy</span><br></code></pre></td></tr></table></figure><p> </p><h5 id="修改页面模板"><a href="#修改页面模板" class="headerlink" title="修改页面模板"></a>修改页面模板</h5><p>打开<code>themes/next/layout/page.swig</code>，找到<code>class=&quot;tag-cloud&quot;</code>，在里面添加以下代码</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># hexo-tag-cloud</span><br><span class="hljs-attr">tag_cloud:</span><br>  <span class="hljs-attr">textFont:</span> <span class="hljs-string">Trebuchet</span> <span class="hljs-string">MS,</span> <span class="hljs-string">Helvetica</span><br>  <span class="hljs-attr">textColor:</span> <span class="hljs-string">&#x27;#192e4d&#x27;</span><br>  <span class="hljs-attr">textHeight:</span> <span class="hljs-number">25</span><br>  <span class="hljs-attr">outlineColor:</span> <span class="hljs-string">&#x27;#5f7a74&#x27;</span><br>  <span class="hljs-attr">maxSpeed:</span> <span class="hljs-number">0.5</span> <span class="hljs-comment"># [0.01, 1]   Copy</span><br></code></pre></td></tr></table></figure><p> </p><h4 id="添加背景图片"><a href="#添加背景图片" class="headerlink" title="添加背景图片"></a>添加背景图片</h4><p>打开<code>themes/next/source/css/_common/scaffolding/base.styl</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">body</span> &#123;<br>  <span class="hljs-attribute">background</span>: $body-bg-color;<br>  <span class="hljs-attribute">color</span>: $text-color;<br>  <span class="hljs-attribute">font-family</span>: $font-family-base;<br>  <span class="hljs-attribute">font-size</span>: $font-size-base;<br>  <span class="hljs-attribute">line-height</span>: $line-height-base;<br><br>  // 背景图片<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">http://q2gep6iwb.bkt.clouddn.com/blog/20191215/s6j9RkCgHaW4.jpg</span>);<br>  <span class="hljs-attribute">background-size</span>: cover;<br>  <span class="hljs-attribute">background-repeat</span>: no-repeat;<br>  <span class="hljs-attribute">background-attachment</span>: fixed;<br>  <span class="hljs-attribute">background-position</span>: <span class="hljs-number">50%</span> <span class="hljs-number">50%</span>;<br><br>  +tablet-mobile() &#123;<br>    // Remove the <span class="hljs-attribute">padding</span> of <span class="hljs-selector-tag">body</span> when the sidebar is open.<br>    <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">0</span> <span class="hljs-meta">!important</span>;<br>    <span class="hljs-attribute">padding-right</span>: <span class="hljs-number">0</span> <span class="hljs-meta">!important</span>;<br>  &#125;<br>&#125;<br><br>// 修改主体透明度<br><span class="hljs-selector-class">.main-inner</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-number">#0a1627</span>;<br>  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0.9</span>;<br>&#125;<br><br>// 修改菜单栏透明度<br><span class="hljs-selector-class">.header-inner</span> &#123;<br>  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0.8</span>;<br>&#125;Copy<br></code></pre></td></tr></table></figure><p> </p><h4 id="动态背景"><a href="#动态背景" class="headerlink" title="动态背景"></a>动态背景</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> themes/next<br><br>git <span class="hljs-built_in">clone</span> https://github.com/theme-next/theme-next-canvas-nest <span class="hljs-built_in">source</span>/lib/canvas-nestCopy<br></code></pre></td></tr></table></figure><p>修改主题配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Canvas-nest</span><br><span class="hljs-comment"># Dependencies: https://github.com/theme-next/theme-next-canvas-nest</span><br><span class="hljs-comment"># For more information: https://github.com/hustcc/canvas-nest.js</span><br><span class="hljs-attr">canvas_nest:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">onmobile:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># Display on mobile or not</span><br>  <span class="hljs-attr">color:</span> <span class="hljs-string">&quot;0,0,255&quot;</span> <span class="hljs-comment"># RGB values, use `,` to separate</span><br>  <span class="hljs-attr">opacity:</span> <span class="hljs-number">0.5</span> <span class="hljs-comment"># The opacity of line: 0~1</span><br>  <span class="hljs-attr">zIndex:</span> <span class="hljs-number">-1</span> <span class="hljs-comment"># z-index property of the background</span><br>  <span class="hljs-attr">count:</span> <span class="hljs-number">99</span> <span class="hljs-comment"># The number of linesCopy</span><br></code></pre></td></tr></table></figure><p> </p><h4 id="加载进度条"><a href="#加载进度条" class="headerlink" title="加载进度条"></a>加载进度条</h4><p>修改主题配置文件，开启进度条，选择进度条样式</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs coq"># Progress bar <span class="hljs-built_in">in</span> the <span class="hljs-built_in">top</span> during page loading.<br># <span class="hljs-keyword">Dependencies</span>: https://github.com/theme-next/theme-next-pace<br># For more information: https://github.com/HubSpot/pace<br>pace:<br>  enable: true<br>  # Themes list:<br>  # big-counter | <span class="hljs-type">bounce</span> | <span class="hljs-type">barber</span>-shop | <span class="hljs-type">center</span>-atom | <span class="hljs-type">center</span>-circle | <span class="hljs-type">center</span>-radar | <span class="hljs-type">center</span>-<span class="hljs-built_in">simple</span><br>  # corner-indicator | <span class="hljs-type">fill</span>-<span class="hljs-built_in">left</span> | <span class="hljs-type">flat</span>-<span class="hljs-built_in">top</span> | <span class="hljs-type">flash</span> | <span class="hljs-type">loading</span>-bar | <span class="hljs-type">mac</span>-osx | <span class="hljs-type">material</span> | <span class="hljs-type">minimal</span><br>  theme: pace-theme-bounce #选择进度条样式Copy<br></code></pre></td></tr></table></figure><p>修改主题配置文件，引入对应的js和css</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">vendors</span>:<br>  <span class="hljs-attribute">pace</span>: //cdn.bootcss.com/pace/<span class="hljs-number">1</span>.<span class="hljs-number">0</span>.<span class="hljs-number">2</span>/pace.min.js<br>  <span class="hljs-attribute">pace_css</span>: //cdn.bootcss.com/pace/<span class="hljs-number">1</span>.<span class="hljs-number">0</span>.<span class="hljs-number">2</span>/themes/black/pace-theme-bounce.min.cssCopy<br></code></pre></td></tr></table></figure><p> </p><h4 id="回到顶部样式"><a href="#回到顶部样式" class="headerlink" title="回到顶部样式"></a>回到顶部样式</h4><p>修改主题配置文件，开启回到顶部</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">back2top:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-comment"># Back to top in sidebar.</span><br>  <span class="hljs-attr">sidebar:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-comment"># Scroll percent label in b2t button.</span><br>  <span class="hljs-attr">scrollpercent:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-comment"># 钢铁侠</span><br>  <span class="hljs-attr">ironman:</span> <span class="hljs-string">trueCopy</span><br></code></pre></td></tr></table></figure><p>在<code>themes/next/source/js</code>下新建<code>totop.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-variable language_">window</span>).<span class="hljs-title function_">scroll</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    $(<span class="hljs-variable language_">window</span>).<span class="hljs-title function_">scrollTop</span>() &gt; $(<span class="hljs-variable language_">window</span>).<span class="hljs-title function_">height</span>()*<span class="hljs-number">0.5</span> ? $(<span class="hljs-string">&quot;#rocket&quot;</span>).<span class="hljs-title function_">addClass</span>(<span class="hljs-string">&quot;show&quot;</span>) : $(<span class="hljs-string">&quot;#rocket&quot;</span>).<span class="hljs-title function_">removeClass</span>(<span class="hljs-string">&quot;show&quot;</span>);<br>&#125;);<br><br>$(<span class="hljs-string">&quot;#rocket&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    $(<span class="hljs-string">&quot;#rocket&quot;</span>).<span class="hljs-title function_">addClass</span>(<span class="hljs-string">&quot;launch&quot;</span>);<br>    $(<span class="hljs-string">&quot;html, body&quot;</span>).<span class="hljs-title function_">animate</span>(&#123;<br>        <span class="hljs-attr">scrollTop</span>: <span class="hljs-number">0</span><br>    &#125;, <span class="hljs-number">1000</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        $(<span class="hljs-string">&quot;#rocket&quot;</span>).<span class="hljs-title function_">removeClass</span>(<span class="hljs-string">&quot;show launch&quot;</span>);<br>    &#125;);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;);<span class="hljs-title class_">Copy</span><br></code></pre></td></tr></table></figure><p>修改<code>themes/next/layout/_partials/wigets.swig</code></p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="hljs-template-tag">&#123;%- <span class="hljs-name"><span class="hljs-name">if</span></span> theme.back2top.enable and not theme.back2top.sidebar %&#125;</span><span class="language-xml"></span><br><span class="language-xml">   </span><span class="hljs-template-tag">&#123;%- <span class="hljs-name"><span class="hljs-name">if</span></span> theme.back2top.ironman %&#125;</span><span class="language-xml"></span><br><span class="language-xml">     <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;rocket&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#top&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">     <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcss.com/jquery/3.4.1/jquery.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml">     </span><span class="hljs-template-variable">&#123;&#123;- next_js(&#x27;totop.js&#x27;) &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">   </span><span class="hljs-template-tag">&#123;%- <span class="hljs-name"><span class="hljs-name">else</span></span> %&#125;</span><span class="language-xml"> </span><br><span class="language-xml">     <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;back-to-top motion-element&quot;</span>&gt;</span></span><br><span class="language-xml">       <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fa fa-arrow-up&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span></span><br><span class="language-xml">       <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>0%<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">     <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>   </span><br><span class="language-xml">   </span><span class="hljs-template-tag">&#123;%- <span class="hljs-name"><span class="hljs-name">endif</span></span> %&#125;</span><span class="language-xml"> </span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;%- <span class="hljs-name"><span class="hljs-name">endif</span></span> %&#125;</span><span class="language-xml">Copy</span><br></code></pre></td></tr></table></figure><p>修改<code>themes/next/source/css/common/scaffolding</code>下的<code>base.styl</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs css">// 钢铁侠<br><span class="hljs-selector-id">#rocket</span> &#123;<br>  <span class="hljs-attribute">position</span>: fixed;<br>  <span class="hljs-attribute">right</span>: <span class="hljs-number">50px</span>;<br>  <span class="hljs-attribute">bottom</span>: <span class="hljs-number">50px</span>;<br>  <span class="hljs-attribute">z-index</span>: <span class="hljs-number">3</span>;<br>  <span class="hljs-attribute">display</span>: block;<br>  <span class="hljs-attribute">visibility</span>: hidden;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">42px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">43px</span>;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&quot;https://s2.ax1x.com/2019/12/16/Q51U0O.png&quot;</span>) no-repeat <span class="hljs-number">50%</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">cursor</span>: pointer;<br>  -webkit-<span class="hljs-attribute">transition</span>: visibility <span class="hljs-number">0.6s</span> <span class="hljs-built_in">cubic-bezier</span>(<span class="hljs-number">0.6</span>, <span class="hljs-number">0.04</span>, <span class="hljs-number">0.98</span>, <span class="hljs-number">0.335</span>), opacity <span class="hljs-number">0.6s</span> <span class="hljs-built_in">cubic-bezier</span>(<span class="hljs-number">0.6</span>, <span class="hljs-number">0.04</span>, <span class="hljs-number">0.98</span>, <span class="hljs-number">0.335</span>), -webkit-transform <span class="hljs-number">0.6s</span> <span class="hljs-built_in">cubic-bezier</span>(<span class="hljs-number">0.6</span>, <span class="hljs-number">0.04</span>, <span class="hljs-number">0.98</span>, <span class="hljs-number">0.335</span>);<br>  -moz-<span class="hljs-attribute">transition</span>: visibility <span class="hljs-number">0.6s</span> <span class="hljs-built_in">cubic-bezier</span>(<span class="hljs-number">0.6</span>, <span class="hljs-number">0.04</span>, <span class="hljs-number">0.98</span>, <span class="hljs-number">0.335</span>), opacity <span class="hljs-number">0.6s</span> <span class="hljs-built_in">cubic-bezier</span>(<span class="hljs-number">0.6</span>, <span class="hljs-number">0.04</span>, <span class="hljs-number">0.98</span>, <span class="hljs-number">0.335</span>), -moz-transform <span class="hljs-number">0.6s</span> <span class="hljs-built_in">cubic-bezier</span>(<span class="hljs-number">0.6</span>, <span class="hljs-number">0.04</span>, <span class="hljs-number">0.98</span>, <span class="hljs-number">0.335</span>);<br>  <span class="hljs-attribute">transition</span>: visibility <span class="hljs-number">0.6s</span> <span class="hljs-built_in">cubic-bezier</span>(<span class="hljs-number">0.6</span>, <span class="hljs-number">0.04</span>, <span class="hljs-number">0.98</span>, <span class="hljs-number">0.335</span>), opacity <span class="hljs-number">0.6s</span> <span class="hljs-built_in">cubic-bezier</span>(<span class="hljs-number">0.6</span>, <span class="hljs-number">0.04</span>, <span class="hljs-number">0.98</span>, <span class="hljs-number">0.335</span>), transform <span class="hljs-number">0.6s</span> <span class="hljs-built_in">cubic-bezier</span>(<span class="hljs-number">0.6</span>, <span class="hljs-number">0.04</span>, <span class="hljs-number">0.98</span>, <span class="hljs-number">0.335</span>);<br>&#125;<br><span class="hljs-selector-id">#rocket</span> <span class="hljs-selector-tag">i</span> &#123;<br>  <span class="hljs-attribute">display</span>: block;<br>  <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">48px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">14px</span>;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&quot;https://s2.ax1x.com/2019/12/16/Q51U0O.png&quot;</span>) no-repeat <span class="hljs-number">50%</span> -<span class="hljs-number">20px</span>;<br>  <span class="hljs-attribute">opacity</span>: .<span class="hljs-number">5</span>;<br>  -webkit-<span class="hljs-attribute">transition</span>: -webkit-transform .<span class="hljs-number">2s</span>;<br>  -moz-<span class="hljs-attribute">transition</span>: -moz-transform .<span class="hljs-number">2s</span>;<br>  <span class="hljs-attribute">transition</span>: transform .<span class="hljs-number">2s</span>;<br>  -webkit-<span class="hljs-attribute">transform-origin</span>: <span class="hljs-number">50%</span> <span class="hljs-number">0</span>;<br>  -moz-<span class="hljs-attribute">transform-origin</span>: <span class="hljs-number">50%</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">transform-origin</span>: <span class="hljs-number">50%</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-selector-id">#rocket</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>  <span class="hljs-attribute">background-position</span>: <span class="hljs-number">50%</span> -<span class="hljs-number">44px</span>;<br>&#125;<br><span class="hljs-selector-id">#rocket</span><span class="hljs-selector-pseudo">:hover</span> <span class="hljs-selector-tag">i</span> &#123;<br>  <span class="hljs-attribute">background-position</span>: <span class="hljs-number">50%</span> <span class="hljs-number">100%</span>;<br>  -webkit-<span class="hljs-attribute">animation</span>: flaming .<span class="hljs-number">7s</span> infinite;<br>  -moz-<span class="hljs-attribute">animation</span>: flaming .<span class="hljs-number">7s</span> infinite;<br>  <span class="hljs-attribute">animation</span>: flaming .<span class="hljs-number">7s</span> infinite;<br>&#125;<br><span class="hljs-selector-id">#rocket</span><span class="hljs-selector-class">.show</span> &#123;<br>    <span class="hljs-attribute">visibility</span>: visible;<br>    <span class="hljs-attribute">opacity</span>: <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-selector-id">#rocket</span><span class="hljs-selector-class">.launch</span> &#123;<br>  <span class="hljs-attribute">background-position</span>: <span class="hljs-number">50%</span> -<span class="hljs-number">44px</span>;<br>  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;<br>  -webkit-<span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateY</span>(-<span class="hljs-number">500px</span>);<br>  -moz-<span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateY</span>(-<span class="hljs-number">500px</span>);<br>  -ms-<span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateY</span>(-<span class="hljs-number">500px</span>);<br>  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateY</span>(-<span class="hljs-number">500px</span>);<br>  <span class="hljs-attribute">pointer-events</span>: none;<br>&#125;<br><span class="hljs-selector-id">#rocket</span><span class="hljs-selector-class">.launch</span> <span class="hljs-selector-tag">i</span> &#123;<br>  <span class="hljs-attribute">background-position</span>: <span class="hljs-number">50%</span> <span class="hljs-number">100%</span>;<br>  -webkit-<span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scale</span>(<span class="hljs-number">1.4</span>, <span class="hljs-number">3.2</span>);<br>  -moz-<span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scale</span>(<span class="hljs-number">1.4</span>, <span class="hljs-number">3.2</span>);<br>  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scale</span>(<span class="hljs-number">1.4</span>, <span class="hljs-number">3.2</span>);<br>&#125;Copy<br></code></pre></td></tr></table></figure><p> </p><h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><p> </p><h4 id="常用命令："><a href="#常用命令：" class="headerlink" title="常用命令："></a>常用命令：</h4><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs axapta">hexo <span class="hljs-keyword">new</span> <span class="hljs-string">&quot;postName&quot;</span>      <span class="hljs-meta"># 新建文章</span><br>hexo <span class="hljs-keyword">new</span> page <span class="hljs-string">&quot;pageName&quot;</span> <span class="hljs-meta"># 新建页面</span><br>hexo generate            <span class="hljs-meta"># 生成静态页面至public目录</span><br>hexo <span class="hljs-keyword">server</span>              <span class="hljs-meta"># 开启预览访问端口（默认端口4000，&#x27;ctrl + c&#x27;关闭server）</span><br>hexo deploy              <span class="hljs-meta"># 将.deploy目录部署到GitHubCopy</span><br></code></pre></td></tr></table></figure><h4 id="常用复合命令："><a href="#常用复合命令：" class="headerlink" title="常用复合命令："></a>常用复合命令：</h4><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sas">hexo d -g<br>hexo s -g<br>hexo clean <span class="hljs-variable">&amp;&amp;</span> hexo g <span class="hljs-variable">&amp;&amp;</span> hexo s<br>hexo clean <span class="hljs-variable">&amp;&amp;</span> hexo g <span class="hljs-variable">&amp;&amp;</span> hexo dCopy<br></code></pre></td></tr></table></figure><p> </p><h4 id="简写："><a href="#简写：" class="headerlink" title="简写："></a>简写：</h4><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs abnf">hexo n <span class="hljs-operator">=</span><span class="hljs-operator">=</span> hexo new<br>hexo g <span class="hljs-operator">=</span><span class="hljs-operator">=</span> hexo generate<br>hexo s <span class="hljs-operator">=</span><span class="hljs-operator">=</span> hexo server<br>hexo d <span class="hljs-operator">=</span><span class="hljs-operator">=</span> hexo deployCopy<br></code></pre></td></tr></table></figure><p><strong>博客地址</strong>：<a href="http://valten.gitee.io/blog">http://valten.gitee.io/blog</a><br><strong>参考</strong>：</p><p><a href="https://www.jianshu.com/p/6f77c96b7eff">https://www.jianshu.com/p/6f77c96b7eff</a><br><a href="https://blog.csdn.net/u012294515/article/details/83094693">https://blog.csdn.net/u012294515/article/details/83094693</a><br><a href="https://blog.csdn.net/loze/article/details/94206726">https://blog.csdn.net/loze/article/details/94206726</a><br><a href="https://github.com/huweihuang/huweihuang.github.io">https://github.com/huweihuang/huweihuang.github.io</a></p><p>参考资料</p><p><a href="https://hexo.fluid-dev.com/docs/">Hexo Fluid 用户手册</a> </p><p>主题</p><p><a href="https://github.com/fluid-dev/hexo-theme-fluid">https://github.com/fluid-dev/hexo-theme-fluid</a></p><p>.md文件编辑器  推荐Typora</p><h5 id="写文章是用到Typora设置插入代码块快捷键方法"><a href="#写文章是用到Typora设置插入代码块快捷键方法" class="headerlink" title="写文章是用到Typora设置插入代码块快捷键方法"></a>写文章是用到Typora设置插入代码块快捷键方法</h5><p><a href="https://blog.csdn.net/weixin_44874806/article/details/97155001">https://blog.csdn.net/weixin_44874806/article/details/97155001</a></p><p>主题推荐</p><p><a href="https://zhuanlan.zhihu.com/p/491537945">https://zhuanlan.zhihu.com/p/491537945</a></p><p>文章推荐</p><p><a href="https://blog.csdn.net/weixin_42230956/article/details/132268144">https://blog.csdn.net/weixin_42230956/article/details/132268144</a></p>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World3</title>
    <link href="/hexodemo/2024/02/28/hello-world2/"/>
    <url>/hexodemo/2024/02/28/hello-world2/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="章节1"><a href="#章节1" class="headerlink" title="章节1"></a>章节1</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h2 id="章节2"><a href="#章节2" class="headerlink" title="章节2"></a>章节2</h2><h3 id="2-1"><a href="#2-1" class="headerlink" title="2-1"></a>2-1</h3><p>中英混合可自行调节中英混合可自行调节中英混合可自行调节中英混合可自行调节中英混合可自行调节中英混合可自行调节中英混合可自行调节中英混合可自行调节中英混合可自行调节中英混合可自行调节中英混合可自行调节中英混合可自行调节中英混合可自行调节中英混合可自行调节中英混合可自行调节中英混合可自行调节中英混合可自行调节中英混合可自行调节</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><h3 id="2-2"><a href="#2-2" class="headerlink" title="2-2"></a>2-2</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PS3</tag>
      
      <tag>Games</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/hexodemo/2018/10/10/hello-world/"/>
    <url>/hexodemo/2018/10/10/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><head>    <script src='//unpkg.com/valine/dist/Valine.min.js'></script></head><body>    <div id="vcomments"></div>    <script>        new Valine({            el: '#vcomments',            appId: 'nErl1Uq9dQ7faY3Z92mPOmPP-gzGzoHsz',            appKey: 'KB2EqmUb8axAHLTi8UJ7qxjp'        })    </script></body>]]></content>
    
    
    <categories>
      
      <category>分类2</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
